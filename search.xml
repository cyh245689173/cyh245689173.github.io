<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Communications link failure</title>
    <url>/2022/06/22/Communications-link-failure/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220622101217780.png" alt="image-20220622101217780" loading="lazy">今天运行项目发现出现了这个异常，结果发现是数据库服务没开。。。。</p>
<p>为啥这服务我明明设置了手动还是自动关</p>
]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
  </entry>
  <entry>
    <title>Freemarker学习笔记</title>
    <url>/2022/07/08/Freemarker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-页面静态化"><a href="#1-页面静态化" class="headerlink" title="1.页面静态化"></a>1.页面静态化</h1><p>​		首先思考一个问题，对于一个页面来说，每次用户访问该页面时都需要查询数据库来获取动态数据进行展示，而且这个页面的访问量是比较大的，这就对数据库造成了很大的访问压力，并且数据库中的数据变化频率并不高。那我们需要通过什么方法为数据库减压并提高系统运行性能呢？答案就是页面静态化。</p>
<p>页面静态化其实就是<strong>将原来的动态网页(例如通过ajax请求动态获取数据库中的数据并展示的网页)改为通过静态化技术生成的静态网页，这样用户在访问网页时，服务器直接给用户响应静态html页面，没有了动态查询数据库的过程。</strong></p>
<p>那么这些静态HTML页面还需要我们自己去编写吗？其实并不需要，我们可以通过专门的页面静态化技术帮我们生成所需的静态HTML页面，例如：Freemarker、thymeleaf等。</p>
<h1 id="2-Freemarker介绍"><a href="#2-Freemarker介绍" class="headerlink" title="2.Freemarker介绍"></a>2.Freemarker介绍</h1><p>FreeMarker 是一款 <em>模板引擎</em>： 即<strong>一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。</strong> 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。</p>
<p>模板编写为FreeMarker Template Language (FTL)。它是简单的，专用的语言， <em>不是</em> 像PHP那样成熟的编程语言。 那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。<strong>在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/overview.png" alt="Figure" loading="lazy"></p>
<p>这种方式通常被称为 <a href="http://freemarker.foofun.cn/gloss.html#gloss.MVC">MVC (模型 视图 控制器) 模式</a>，对于动态网页来说，是一种特别流行的模式。 它帮助从开发人员(Java 程序员)中分离出网页设计师(HTML设计师)。设计师无需面对模板中的复杂逻辑， 在没有程序员来修改或重新编译代码时，也可以修改页面的样式。</p>
<p>而FreeMarker最初的设计，是被用来在MVC模式的Web开发框架中生成HTML页面的，它没有被绑定到 Servlet或HTML或任意Web相关的东西上。它也可以用于非Web应用环境中。</p>
<h1 id="3-入门案例"><a href="#3-入门案例" class="headerlink" title="3.入门案例"></a>3.入门案例</h1><h2 id="3-1-环境搭建"><a href="#3-1-环境搭建" class="headerlink" title="3.1 环境搭建"></a>3.1 环境搭建</h2><p>创建maven工程并导入Freemarker的maven坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-2-创建模板文件"><a href="#3-2-创建模板文件" class="headerlink" title="3.2 创建模板文件"></a>3.2 创建模板文件</h2><p>模板文件中有四种元素：</p>
<p>  1、文本，直接输出的部分<br>  2、注释，即&lt;#–…–&gt;格式不会输出<br>  3、插值（Interpolation）：即${..}部分,将使用数据模型中的部分替代输出<br>  4、FTL指令：FreeMarker指令，和HTML标记类似，名字前加#予以区分，不会输出</p>
<p>Freemarker的模板文件后缀可以任意，一般建议为ftl。</p>
<p>在D盘创建ftl目录，在ftl目录中创建名称为test.ftl的模板文件，内容如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Freemarker入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &lt;#--我只是一个注释，我不会有任何输出  --&gt;</span><br><span class="line">    $&#123;name&#125;你好，$&#123;message&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-生成文件"><a href="#3-3-生成文件" class="headerlink" title="3.3 生成文件"></a>3.3 生成文件</h2><p>使用步骤：</p>
<p>第一步：创建一个 Configuration 对象，直接 new 一个对象。构造方法的参数就是 freemarker的版本号。</p>
<p>第二步：设置模板文件所在的路径。</p>
<p>第三步：设置模板文件使用的字符集。一般就是 utf-8。</p>
<p>第四步：加载一个模板，创建一个模板对象。</p>
<p>第五步：创建一个模板使用的数据集，可以是 pojo 也可以是 map。一般是 Map。</p>
<p>第六步：创建一个 Writer 对象，一般创建 FileWriter 对象，指定生成的文件名。</p>
<p>第七步：调用模板对象的 process 方法输出文件。</p>
<p>第八步：关闭流。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">	<span class="comment">//1.创建配置类</span></span><br><span class="line">	Configuration configuration=<span class="keyword">new</span> <span class="title class_">Configuration</span>(Configuration.getVersion());</span><br><span class="line">	<span class="comment">//2.设置模板所在的目录 </span></span><br><span class="line">	configuration.setDirectoryForTemplateLoading(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\ftl&quot;</span>));</span><br><span class="line">	<span class="comment">//3.设置字符集</span></span><br><span class="line">	configuration.setDefaultEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">	<span class="comment">//4.加载模板</span></span><br><span class="line">	<span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> configuration.getTemplate(<span class="string">&quot;test.ftl&quot;</span>);</span><br><span class="line">	<span class="comment">//5.创建数据模型</span></span><br><span class="line">	Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">	map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;王也&quot;</span>);</span><br><span class="line">	map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;欢迎来到龙虎山！&quot;</span>);</span><br><span class="line">	<span class="comment">//6.创建Writer对象</span></span><br><span class="line">	<span class="type">Writer</span> <span class="variable">out</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\test.html&quot;</span>));</span><br><span class="line">	<span class="comment">//7.输出</span></span><br><span class="line">	template.process(map, out);</span><br><span class="line">	<span class="comment">//8.关闭Writer对象</span></span><br><span class="line">	out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的入门案例中Configuration配置对象是自己创建的，字符集和模板文件所在目录也是在Java代码中指定的。</p>
<p>在项目中应用时可以将Configuration对象的创建交由Spring框架来完成，并通过依赖注入方式将字符集和模板所在目录注入进去。</p>
<h1 id="4-Freemarker指令"><a href="#4-Freemarker指令" class="headerlink" title="4. Freemarker指令"></a>4. Freemarker指令</h1><h2 id="4-1-assign指令"><a href="#4-1-assign指令" class="headerlink" title="4.1 assign指令"></a>4.1 assign指令</h2><p>assign指令用于在页面上定义一个变量</p>
<p>（1）定义简单类型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;#assign linkman=&quot;张灵玉&quot;&gt;</span><br><span class="line">联系人：$&#123;linkman&#125;</span><br></pre></td></tr></table></figure>

<p>（2）定义对象类型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;#assign info=&#123;&quot;mobile&quot;:&quot;10086&quot;,&#x27;address&#x27;:&#x27;龙虎山正一天师府&#x27;&#125; &gt;</span><br><span class="line">电话：$&#123;info.mobile&#125;  地址：$&#123;info.address&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-2-include指令"><a href="#4-2-include指令" class="headerlink" title="4.2 include指令"></a>4.2 include指令</h2><p>include指令用于模板文件的嵌套</p>
<p>（1）创建模板文件head.ftl</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>凡夫俗子张之维<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）修改入门案例中的test.ftl，在test.ftl模板文件中使用include指令引入上面的模板文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;#include &quot;head.ftl&quot;/&gt;</span><br></pre></td></tr></table></figure>

<h2 id="4-3-if指令"><a href="#4-3-if指令" class="headerlink" title="4.3 if指令"></a>4.3 if指令</h2><p>if指令用于判断</p>
<p>（1）在模板文件中使用if指令进行判断</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;#if success=true&gt;</span><br><span class="line">  你已获得罗天大醮天师继承权</span><br><span class="line">&lt;#else&gt;  </span><br><span class="line">  你失败了</span><br><span class="line">&lt;/#if&gt;</span><br></pre></td></tr></table></figure>

<p>（2）在java代码中为success变量赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.put(<span class="string">&quot;success&quot;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>在freemarker的判断中，可以使用&#x3D; 也可以使用&#x3D;&#x3D;</p>
<p>运行效果：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220708082115215.png" alt="image-20220708082115215" loading="lazy"></p>
<p>如果Java代码中和模板文件中都对‘’success’’进行赋值，则会以模板文件中的值为主，但是更多的是在Java代码中对变量进行赋值，因为比较灵活。</p>
<p>Java代码：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220708082251768.png" alt="image-20220708082251768" loading="lazy"></p>
<p>模板文件：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220708082330120.png" alt="image-20220708082330120" loading="lazy"></p>
<p>运行结果：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220708082407019.png" alt="image-20220708082407019" loading="lazy"></p>
<h2 id="4-4-list指令"><a href="#4-4-list指令" class="headerlink" title="4.4 list指令"></a>4.4 list指令</h2><p>list指令用于遍历</p>
<p>（1）在模板文件中使用list指令进行遍历</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;#list goodsList as goods&gt;</span><br><span class="line">  商品名称： $&#123;goods.name&#125; 价格：$&#123;goods.price&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&lt;/#list&gt;</span><br></pre></td></tr></table></figure>

<p>（2）在java代码中为goodsList赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List goodsList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">Map goods1=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">goods1.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">goods1.put(<span class="string">&quot;price&quot;</span>, <span class="number">5.8</span>);</span><br><span class="line"></span><br><span class="line">Map goods2=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">goods2.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line">goods2.put(<span class="string">&quot;price&quot;</span>, <span class="number">2.5</span>);</span><br><span class="line"></span><br><span class="line">Map goods3=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">goods3.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;橘子&quot;</span>);</span><br><span class="line">goods3.put(<span class="string">&quot;price&quot;</span>, <span class="number">3.2</span>);</span><br><span class="line"></span><br><span class="line">goodsList.add(goods1);</span><br><span class="line">goodsList.add(goods2);</span><br><span class="line">goodsList.add(goods3);</span><br><span class="line"></span><br><span class="line">map.put(<span class="string">&quot;goodsList&quot;</span>, goodsList);</span><br></pre></td></tr></table></figure>

<h1 id="5-FreeMarker小结"><a href="#5-FreeMarker小结" class="headerlink" title="5.FreeMarker小结"></a>5.FreeMarker小结</h1><h2 id="5-1-什么是网页静态化技术"><a href="#5-1-什么是网页静态化技术" class="headerlink" title="5.1.什么是网页静态化技术"></a>5.1.什么是网页静态化技术</h2><p>随着用户访问量以及数据量的增大，网页静态化技术方案如今越来越流行。什么是网页静态化技术呢?简单来说就是将网页以纯静态方式的形式展现</p>
<h2 id="5-2-网页静态化技术与缓存技术的比较"><a href="#5-2-网页静态化技术与缓存技术的比较" class="headerlink" title="5.2.网页静态化技术与缓存技术的比较"></a>5.2.网页静态化技术与缓存技术的比较</h2><ul>
<li>共同点:都可以减小数据库的访问压力。</li>
<li>区别:<ol>
<li>缓存技术适用于小规模的数据。以及一些经常变动的数据。</li>
<li>网页静态化技术适用于大规模但是变化不太频繁的数据。</li>
</ol>
</li>
</ul>
<h2 id="5-3-网页静态化技术的应用场景"><a href="#5-3-网页静态化技术的应用场景" class="headerlink" title="5.3.网页静态化技术的应用场景"></a>5.3.网页静态化技术的应用场景</h2><ol>
<li>新闻门户网站的文章类型频道一般都用到了网页静态化技术。点击新闻直接会跳到静态化的页面。</li>
<li>电商网站的商品详情页也十分常用，我们在存储商品的时候会生成静态化页面，点击商品详情，会直接跳到生成的商品详情的静态化页面。</li>
<li>网页静态化技术可以<strong>结合Nginx这种高性能web服务器</strong>来提高并发访问量。</li>
</ol>
<h2 id="5-4-什么是FreeMarker"><a href="#5-4-什么是FreeMarker" class="headerlink" title="5.4.什么是FreeMarker"></a>5.4.什么是FreeMarker</h2><p>FreeMarker是一款用lava语言编写的模板引擎，用它可以通过模板和要改变的数据来生成输出文本(例如HTML网页，配置文件，源代码等)，作为用来实现网页静态化技术的一种手段。FreeMarker的使用率大大超过其他一些技术。对于系统中频繁使用数据库进行查询但是内容更新很小的应用，都可以用FreeMarker将网页静态化，这样就避免了大量的数据库访问请求，从而提高网站的性能。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>CentOS的下载与安装</title>
    <url>/2022/07/11/CentOS%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-CentOS的下载"><a href="#1-CentOS的下载" class="headerlink" title="1.CentOS的下载"></a>1.CentOS的下载</h2><p>首先进入CentOS官网：<a href="https://www.centos.org/%EF%BC%8C%E7%82%B9%E5%87%BB%E4%B8%8B%E8%BD%BD">https://www.centos.org/，点击下载</a></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659231220596-df7f1634-e7ad-4a7d-be2a-ba3c2717934c.png" alt="img" loading="lazy"></p>
<p>根据自己的机型选择合适的安装包</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659231265442-875e031b-b419-412c-8d6a-fb8e5f81a93c.png" alt="img" loading="lazy"></p>
<p>进入之后找到镜像包isos，点击进入</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659231296469-e6ce2f49-0164-4dcc-b597-a064dde52fc8.png" alt="img" loading="lazy"></p>
<p>继续点击</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659231327649-020afdb7-43cd-4c19-9daa-5d2acf94b736.png" alt="img" loading="lazy"></p>
<p>这题提供了好多镜像站点地址，可以随便选一个，我选的阿里云的</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659231379189-79526c75-ffab-4787-a77a-8ef38d53e139.png" alt="img" loading="lazy"></p>
<p>点击进入，下载7-2009最新版</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659231401646-b7c3de38-bf0b-42ac-86a9-3644cdde5db7.png" alt="img" loading="lazy"></p>
<p>然后等待下载完成即可</p>
<h2 id="2-VMware安装"><a href="#2-VMware安装" class="headerlink" title="2.VMware安装"></a>2.VMware安装</h2><p>因为我已经装过了就懒得重新装了，可以参考一下这个博文：<a href="https://blog.csdn.net/weixin_45912291/article/details/108894737">https://blog.csdn.net/weixin_45912291/article/details/108894737</a></p>
<h2 id="3-创建虚拟机"><a href="#3-创建虚拟机" class="headerlink" title="3.创建虚拟机"></a>3.创建虚拟机</h2><p>打开VMware，创建一个新的虚拟机</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659232500822-2f3934ca-97a1-4638-9127-ec4c130679ca.png" alt="img" loading="lazy"></p>
<p>选择自定义高级模式，这样我们可以了解到该虚拟机的更多细节</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659232549890-42aa7d3a-516a-4230-898c-0e5cc06bbfba.png" alt="img" loading="lazy"></p>
<p>然后，下一步</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659232622614-0e23342b-f17b-4b0b-be2e-4969006ec95e.png" alt="img" loading="lazy"></p>
<p>这里选择稍后安装操作系统，继续下一步</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659232641021-b714d36e-184d-466e-a9ba-ef257666f6a3.png" alt="img" loading="lazy"></p>
<p>这里版本选择CentOS 7 64位</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659232714694-26ecb1cd-27c0-4f30-b500-64e4557aef30.png" alt="img" loading="lazy"></p>
<p>然后这里名称随便起，位置根据自己的需求，最好不要放在C盘</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659232858399-bb4d2e35-a70f-46ee-a5d5-9612577a5d47.png" alt="img" loading="lazy"></p>
<p>然后这里的处理器数量不超过自己的主机即可，继续下一步</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659233115074-45341843-65dd-44b9-af5b-00aaf07df2e1.png" alt="img" loading="lazy"></p>
<p>然后这里选择4GB，下一步</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659233165012-96c45947-fc03-404b-ab88-fa75a17191a7.png" alt="img" loading="lazy"></p>
<p>这里选择NAT，下一步</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659233191274-37301360-57fb-4431-afc9-4cb055cca466.png" alt="img" loading="lazy"></p>
<p>然后这里直接按照推荐的来，继续下一步</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659233262472-733f0cf5-b334-4d51-9fca-512658fe442b.png" alt="img" loading="lazy"></p>
<p>继续按照推荐的来，下一步</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659233287179-fee900dc-1593-4ab7-982a-6e0a4bd3e67d.png" alt="img" loading="lazy"></p>
<p>这里选择创建新的虚拟磁盘</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659233311100-eb9df757-10aa-425b-a22a-fb47d96d5a7d.png" alt="img" loading="lazy"></p>
<p>这里的磁盘大小根据自己的需求来，大数据的朋友最好选的大一点，然后下一步</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659233372623-00f4eea1-92d3-46c2-9155-a24d9e827752.png" alt="img" loading="lazy"></p>
<p>然后这里不用管，直接下一步</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659233467702-92ce0ab4-f7d5-42a5-8828-d6ab90da03e3.png" alt="img" loading="lazy"></p>
<p>然后最后一步，看一眼没什么问题，就点击完成。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659233499894-81ca332f-7357-4932-9f41-cbdfe85b10ee.png" alt="img" loading="lazy"></p>
<p>然后虚拟机的创建就已经完成了~</p>
<h2 id="4-CentOS安装"><a href="#4-CentOS安装" class="headerlink" title="4.CentOS安装"></a>4.CentOS安装</h2><p>虚拟机已经创建完成了，接下来就是安装操作系统了</p>
<p>需要在光驱里进行安装，点击CD&#x2F;DVD</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659233683338-1f820e37-567f-44eb-8ea9-9a42e98eaa98.png" alt="img" loading="lazy"></p>
<p>然后选择使用ISO映像文件，找到我们刚才在下载的CentOS镜像</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659235094018-3563eedc-1c9a-49a5-9889-c1360252a10a.png" alt="img" loading="lazy"></p>
<p>然后点击确定就可以了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659235153870-b2fd05b9-d123-464e-98d4-3168d353db9c.png" alt="img" loading="lazy"></p>
<p>然后开启虚拟机</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659235245994-32db4bed-f267-47ae-b884-b9d218d43a73.png" alt="img" loading="lazy"></p>
<p>然后键盘操作，上下键选择Install CentOS 7，点击回车</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659235321405-bdcc2377-3f03-4cbb-8317-0b2680850609.png" alt="img" loading="lazy"></p>
<p>然后这里选择简体中文（方便学习使用），不过还是建议安装成英文，避免产生一些不兼容问题</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659235464221-5f5a1b42-1f57-4863-ae30-f2688b29cb8d.png" alt="img" loading="lazy"></p>
<p>然后这里，选择软件选择</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659235513113-51afa97c-3f9f-4ea4-9bb9-9ab92713e34f.png" alt="img" loading="lazy"></p>
<p>软件的基本环境中选择GNOME桌面，后面的附加选项根据需求进行选择</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659235763041-6c2b43b9-5988-4276-b653-1086ce6fd8e9.png" alt="img" loading="lazy"></p>
<p>然后点击完成继续回到安装信息，选择安装位置</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236122427-c1cc8877-3f25-458c-bba1-f0ed9950f12a.png" alt="img" loading="lazy"></p>
<p>将自动配置分区改为我要配置分区，点击完成</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236163540-647c29f8-a3bc-4a84-b0ad-2a2f3a22f4a3.png" alt="img" loading="lazy"></p>
<p>进入到手动分区模块，分区方案选择标准分区</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236244161-5b607f28-8995-4499-a8ec-7ee51a925855.png" alt="img" loading="lazy"></p>
<p>点击加号新增挂载点</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236284915-f3970ee9-67bb-4380-88ef-ad802048fb6f.png" alt="img" loading="lazy"></p>
<p>填入参数，然后添加boot挂载点（引导分区，系统启动时需要靠它进行启动）</p>
<p>这里的挂载点就像当我们Windows里的 分盘</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236323413-629ceca6-0bfb-4b2b-ac65-753ee6620b92.png" alt="img" loading="lazy"></p>
<p>再添加一个交换挂载点，相当于虚拟内存</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236458317-48c26481-600a-48c4-8011-d786b1f64777.png" alt="img" loading="lazy"></p>
<p>然后添加根挂载点</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236530449-5539b319-7f57-4617-9cca-a93b5c893e2f.png" alt="img" loading="lazy"></p>
<p>效果如下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236591652-e7ada09a-cff8-45cc-8199-b8c658cef2ce.png" alt="img" loading="lazy"></p>
<p>然后点击完成，接受更改</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236740919-a667e4f8-0695-4d7e-aee6-6c9d6b70e1f3.png" alt="img" loading="lazy"></p>
<p>然后点击KDUMP</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236783117-c05b6cc4-db4d-41f1-b3fe-66cf905720f8.png" alt="img" loading="lazy">这是一个在系统崩溃时转储加捕获信息的工具，会耗费系统资源，我们用不大着，崩溃了就重启呗，将这里的启动关闭。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236854028-3a50addd-6156-4498-bec1-927c58b3d362.png" alt="img" loading="lazy"></p>
<p>然后来到网络和主机名</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236921375-0e9cee5f-a8be-4eed-93e8-50693445d88c.png" alt="img" loading="lazy"></p>
<p>把以太网连接上，起一个好记一点的主机名，点击应用，完成。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236985781-88b0b3e2-16c1-4ece-b54b-5383e2fc587d.png" alt="img" loading="lazy"></p>
<p>然后点击开始安装</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237042139-64b7ff5a-14fa-44ef-9eb4-5470b0810138.png" alt="img" loading="lazy"></p>
<p>然后点击这里设置root密码</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237082173-04f47e0e-9ec6-4651-af57-3edc0829cebc.png" alt="img" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237092620-e9c594ba-e977-49f0-b72f-9f9fd98dbac9.png" alt="img" loading="lazy"></p>
<p>然后创建一个用户</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237127031-f7781776-8452-49b2-8f03-5dcb079f7ebb.png" alt="img" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237164660-9ff74995-fbc3-4ff9-bf63-5e6a73b96178.png" alt="img" loading="lazy"></p>
<p>然后等待安装完成，点击重启</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237522099-13789eb2-0067-4629-94b6-0784eb21ba5d.png" alt="img" loading="lazy"></p>
<p>点击这里的未接受许可证</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237563080-b4bed926-4592-42ef-b381-f2752dde3351.png" alt="img" loading="lazy"></p>
<p>点击我同意，然后完成</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237590984-9c43a186-7b34-480f-beac-1b80540db7a2.png" alt="img" loading="lazy"></p>
<p>然后完成配置</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237628218-e8d47a8a-32b3-4aed-a748-268248dd3ba9.png" alt="img" loading="lazy"></p>
<p>然后来到登陆页面，输入自己的密码，点击登录</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237678455-b5104bd7-bdbc-454b-a3e3-79f5cb9cc801.png" alt="img" loading="lazy"></p>
<p>然后进来有一个欢迎页面，选择汉语，前进</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237724695-5af6da86-5e9f-4e69-8640-eccdb63dd7be.png" alt="img" loading="lazy"></p>
<p>输入，选择汉语，继续前进</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237759307-c9cec92b-ead5-4f19-9e40-f8025d25be8e.png" alt="img" loading="lazy"></p>
<p>隐私关掉，前进</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237789204-310805a8-9d6d-4167-a0e2-7800d684c8f7.png" alt="img" loading="lazy"></p>
<p>剩下的就可以跳过了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237807545-dd0b24ea-ca02-40cf-97ea-76abf97b60fd.png" alt="img" loading="lazy"></p>
<p>然后就安装完成了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237816836-12f1995f-84ce-4081-9f4e-845d5e655463.png" alt="img" loading="lazy"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA添加GitHub报错解决</title>
    <url>/2022/08/02/IDEA%E6%B7%BB%E5%8A%A0GitHub%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、错误描述"><a href="#一、错误描述" class="headerlink" title="一、错误描述"></a>一、错误描述</h3><p>使用IDEA添加github账号时出现以下错误：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802172653852.png" alt="image-20220802172653852" loading="lazy"></p>
<h3 id="二、错误解决，使用token登录"><a href="#二、错误解决，使用token登录" class="headerlink" title="二、错误解决，使用token登录"></a>二、错误解决，使用token登录</h3><p>首先登录自己的GitHub</p>
<p>点击头像，打开Setting</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802172836853.png" alt="image-20220802172836853" loading="lazy"></p>
<p>在Setting中下滑，找到Developer settings，点击进入</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802172922708.png" alt="image-20220802172922708" loading="lazy"></p>
<p>依次点击Personal access tokens和Generate new token</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802173041513.png" alt="image-20220802173041513" loading="lazy"></p>
<p>然后note这里随便写一个</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802173208552.png" alt="image-20220802173208552" loading="lazy"></p>
<p>这里的权限全部选中</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802173232846.png" alt="image-20220802173232846" loading="lazy"></p>
<p>点击生成token</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802182415487.png" alt="image-20220802182415487" loading="lazy"></p>
<p>然后点击复制生成的token</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802182815347.png" alt="image-20220802182815347" loading="lazy"></p>
<p>然后点击Use Token</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802183024594.png" alt="image-20220802183024594" loading="lazy"></p>
<p>复制到Token里粘贴，点击登录</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802182901791.png" alt="image-20220802182901791" loading="lazy"></p>
<p>然后就登陆成功了<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802183117696.png" alt="image-20220802183117696" loading="lazy"></p>
]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA上传项目到GitHub</title>
    <url>/2022/08/02/IDEA%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、在github上创建仓库"><a href="#一、在github上创建仓库" class="headerlink" title="一、在github上创建仓库"></a>一、在github上创建仓库</h3><p>点击头像左边的加号，创建新仓库</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802170420022.png" alt="image-20220802170420022" loading="lazy"></p>
<p>开始创建仓库</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802170717898.png" alt="image-20220802170717898" loading="lazy"></p>
<p>点击创建仓库</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802170834944.png" alt="image-20220802170834944" loading="lazy"></p>
<p>仓库创建完成：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802171026370.png" alt="image-20220802171026370" loading="lazy"></p>
<h3 id="二、在IDEA中上传项目代码到Github"><a href="#二、在IDEA中上传项目代码到Github" class="headerlink" title="二、在IDEA中上传项目代码到Github"></a>二、在IDEA中上传项目代码到Github</h3><h4 id="1-首先测试自己的git是否安装成功"><a href="#1-首先测试自己的git是否安装成功" class="headerlink" title="1.首先测试自己的git是否安装成功"></a>1.首先测试自己的git是否安装成功</h4><p>打开idea，File -&gt; Setting-&gt;Version Control -&gt; Git，或者直接搜索框搜索git</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802171359062.png" alt="image-20220802171359062" loading="lazy"></p>
<p>点击Test，测试git是否安装成功，弹出版本号即证明安装成功了。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802171429800.png" alt="image-20220802171429800" loading="lazy"></p>
<h4 id="2-在IDEA中添加GitHub"><a href="#2-在IDEA中添加GitHub" class="headerlink" title="2.在IDEA中添加GitHub"></a>2.在IDEA中添加GitHub</h4><p>在Version Control中选择Github 点击右上方的加号，在弹出的界面中添加自己的github账号和密码</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802171706673.png" alt="image-20220802171706673" loading="lazy"></p>
<p>这里就添加成功了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802172418995.png" alt="image-20220802172418995" loading="lazy"></p>
<p>如果产生了下图这个问题，可以参考这个博文：<a href="https://www.kdy.icu/2022/08/02/IDEA%E6%B7%BB%E5%8A%A0GitHub%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/">idea添加GitHub报错</a></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802172502137.png" alt="image-20220802172502137" loading="lazy"></p>
<h4 id="3-上传项目到本地仓库"><a href="#3-上传项目到本地仓库" class="headerlink" title="3.上传项目到本地仓库"></a>3.上传项目到本地仓库</h4><p>然后在idea上方依次点击 VCS  -&gt; Import into Version Control -&gt; Create Git Repository </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802183415155.png" alt="image-20220802183415155" loading="lazy"></p>
<p>在弹出的界面中选择要提交的项目 </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802183506458.png" alt="image-20220802183506458" loading="lazy"></p>
<p> 然后右击项目选择 Git —&gt; Add</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802183903334.png" alt="image-20220802183903334" loading="lazy"></p>
<p>这里可以看到正在添加</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802183834583.png" alt="image-20220802183834583" loading="lazy"></p>
<p>然后右击项目选择 Git -&gt; Commit Directory，将项目提交到本地仓库</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802183942855.png" alt="image-20220802183942855" loading="lazy"></p>
<p>然后在弹出的信息输入自己的提交描述</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802184138623.png" alt="image-20220802184138623" loading="lazy"></p>
<p>然后点击commit进行提交，这样代码就提交到了本地仓库。</p>
<h4 id="4-上传项目到远程仓库"><a href="#4-上传项目到远程仓库" class="headerlink" title="4.上传项目到远程仓库"></a>4.上传项目到远程仓库</h4><p>然后就是将本地仓库的项目提交到远程仓库，Git -&gt; Repository -&gt;Push</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802184945225.png" alt="image-20220802184945225" loading="lazy"></p>
<p>在弹出的页面里点击Define remote</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802185642286.png" alt="image-20220802185642286" loading="lazy"></p>
<p>将我们的仓库地址粘贴进去</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802185801302.png" alt="image-20220802185801302" loading="lazy"></p>
<p>点击ok，开始push</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802185838193.png" alt="image-20220802185838193" loading="lazy"></p>
<p>下方会有push的进度条</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802185910354.png" alt="image-20220802185910354" loading="lazy"></p>
<p>等待push完成，在GitHub中就可以看到我们上传的项目啦。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802190344166.png" alt="image-20220802190344166" loading="lazy"></p>
]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
  </entry>
  <entry>
    <title>IO流&amp;反射面试题整理</title>
    <url>/2022/07/28/IO%E6%B5%81-%E5%8F%8D%E5%B0%84%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="说说Java中的IO流"><a href="#说说Java中的IO流" class="headerlink" title="说说Java中的IO流"></a>说说Java中的IO流</h2><h3 id="Java中IO流的种类"><a href="#Java中IO流的种类" class="headerlink" title="Java中IO流的种类"></a>Java中IO流的种类</h3><ul>
<li>按照流的流向分，可以分为输入流和输出流</li>
<li>按照操作单元分，可以划分为字节流和字符流</li>
<li>按照流的角色分，可以分为节点流和处理流</li>
</ul>
<p>JavaIO流共涉及40多个类，这40多个类都是从4个抽象基类中派生出来的</p>
<ul>
<li>InputStream&#x2F;Reader：所有输入流的基类，前者是字节输入流，后者是字符输入流</li>
<li>OutputStream&#x2F;Writer：所有输出流的基类，前者是字节输出流，后者是字符输出流。</li>
</ul>
<h2 id="说说Java中的反射"><a href="#说说Java中的反射" class="headerlink" title="说说Java中的反射"></a>说说Java中的反射</h2><ul>
<li><p><strong>定义：</strong></p>
</li>
<li><ul>
<li>反射机制是指在运行时，对于任意用一个类都能够知道该类的所有属性和方法；对于任意对象都能调用他的任意一个方法。</li>
<li>在Java中，只要给定类的名字，就可以通过反射机制来获取类的所有信息，这种动态获取信息以及动态调用对象的方法的功能被称为Java语言的反射机制。</li>
<li>反射是框架的灵魂，</li>
</ul>
</li>
<li><p><strong>框架中使用到反射的例子：</strong></p>
</li>
<li><ul>
<li>在使用JDBC连接数据库时需要通过反射来加载数据库的驱动程序</li>
<li>Spring框架在使用XML配置模式装载Bean的过程也使用到了反射机制</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>Spring框架在使用XML配置模式装载Bean的过程</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><ul>
<li>将程序内所有的XML或者properties配置文件加载进内存</li>
<li>Java类解析配置文件中的内容，得到对应实体类的字节码字符串以及相关的属性信息</li>
<li>通过反射机制，根据这个字符串来获取某个类的Class实例</li>
<li>动态配置实例的属性</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>实现方式：</strong></p>
</li>
<li><ul>
<li>Class.forName(“类路径”)</li>
<li>类名.class</li>
<li>对象名.getClass()</li>
<li>对于基本数据类型的包装类，也可以通过调用包装类的Type属性来获取该包装类的Class对象</li>
</ul>
</li>
<li><p><strong>优点：</strong></p>
</li>
<li><ul>
<li>在运行时可以动态获取类的实例，灵活性较高</li>
</ul>
</li>
<li><p><strong>缺点：</strong></p>
</li>
<li><ul>
<li>需要将内存中的字节码进行解析，相当于一系列揭示操作，性能较低。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>JVM学习笔记</title>
    <url>/2022/08/04/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-JVM的位置"><a href="#1-JVM的位置" class="headerlink" title="1. JVM的位置"></a>1. JVM的位置</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220804212543691.png" alt="image-20220804212543691" loading="lazy"></p>
<p>JRE里面包含了JVM。</p>
<h3 id="2-JVM的体系结构"><a href="#2-JVM的体系结构" class="headerlink" title="2.JVM的体系结构"></a>2.JVM的体系结构</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220804213427186.png" alt="image-20220804213427186" loading="lazy"></p>
<p>体系结构图</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220804213148863.png" alt="image-20220804213148863" loading="lazy"></p>
<p>垃圾回收不会在栈里面存在，因为如果栈里面有垃圾，出栈就会被堵住，就会产生问题。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220804213404133.png" alt="image-20220804213404133" loading="lazy"></p>
<p>所谓的JVM调优其实百分之九十九都是在调堆和方法区，主要是堆。</p>
<h3 id="3-类加载器"><a href="#3-类加载器" class="headerlink" title="3. 类加载器"></a>3. 类加载器</h3><p>作用：加载Class文件 </p>
<p>类是模板，用来创建实例。</p>
<h3 id="4-双亲委派机制"><a href="#4-双亲委派机制" class="headerlink" title="4.双亲委派机制"></a>4.双亲委派机制</h3><h3 id="5-沙箱安全机制"><a href="#5-沙箱安全机制" class="headerlink" title="5.沙箱安全机制"></a>5.沙箱安全机制</h3><h3 id="6-Native"><a href="#6-Native" class="headerlink" title="6.Native"></a>6.Native</h3><h3 id="7-PC寄存器"><a href="#7-PC寄存器" class="headerlink" title="7.PC寄存器"></a>7.PC寄存器</h3><h3 id="8-方法区"><a href="#8-方法区" class="headerlink" title="8.方法区"></a>8.方法区</h3><h3 id="9-栈"><a href="#9-栈" class="headerlink" title="9.栈"></a>9.栈</h3><h3 id="10-三种JVM"><a href="#10-三种JVM" class="headerlink" title="10.三种JVM"></a>10.三种JVM</h3><h3 id="11-堆"><a href="#11-堆" class="headerlink" title="11.堆"></a>11.堆</h3><h3 id="12-新生区、老年区"><a href="#12-新生区、老年区" class="headerlink" title="12.新生区、老年区"></a>12.新生区、老年区</h3><h3 id="13-永久区"><a href="#13-永久区" class="headerlink" title="13.永久区"></a>13.永久区</h3><h3 id="14-堆内存调优"><a href="#14-堆内存调优" class="headerlink" title="14.堆内存调优"></a>14.堆内存调优</h3><h3 id="15-GC"><a href="#15-GC" class="headerlink" title="15.GC"></a>15.GC</h3>]]></content>
      <categories>
        <category>Java知识点</category>
      </categories>
  </entry>
  <entry>
    <title>JDBC学习笔记</title>
    <url>/2021/05/11/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、JDBC概述"><a href="#一、JDBC概述" class="headerlink" title="一、JDBC概述"></a>一、JDBC概述</h2><h3 id="1-1-JDBC概念"><a href="#1-1-JDBC概念" class="headerlink" title="1.1  JDBC概念"></a>1.1  JDBC概念</h3><blockquote>
<p>JDBC   就是使用Java语言操作关系型数据库的一套API</p>
<p>全称：( Java DataBase Connectivity ) Java 数据库连接</p>
</blockquote>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725130537815.png" alt="image-20210725130537815" style="zoom:80%;" / loading="lazy">

<p>我们开发的同一套Java代码是无法操作不同的关系型数据库，因为每一个关系型数据库的底层实现细节都不一样。如果这样，问题就很大了，在公司中可以在开发阶段使用的是MySQL数据库，而上线时公司最终选用oracle数据库，我们就需要对代码进行大批量修改，这显然并不是我们想看到的。我们要做到的是同一套Java代码操作不同的关系型数据库，而此时sun公司就指定了一套标准接口（JDBC），JDBC中定义了所有操作关系型数据库的规则。众所周知接口是无法直接使用的，我们需要使用接口的实现类，而这套实现类（称之为：驱动）就由各自的数据库厂商给出。</p>
<h3 id="1-2-JDBC本质"><a href="#1-2-JDBC本质" class="headerlink" title="1.2  JDBC本质"></a>1.2  JDBC本质</h3><ul>
<li>官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口</li>
<li>各个数据库厂商去实现这套接口，提供数据库驱动jar包</li>
<li>我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类</li>
</ul>
<h3 id="1-3-JDBC好处"><a href="#1-3-JDBC好处" class="headerlink" title="1.3  JDBC好处"></a>1.3  JDBC好处</h3><ul>
<li>各数据库厂商使用相同的接口，Java代码不需要针对不同数据库分别开发</li>
<li>可随时替换底层数据库，访问数据库的Java代码基本不变</li>
</ul>
<p>以后编写操作数据库的代码只需要面向JDBC（接口），操作哪儿个关系型数据库就需要导入该数据库的驱动包，如需要操作MySQL数据库，就需要再项目中导入MySQL数据库的驱动包。如下图就是MySQL驱动包</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725133015535.png" alt="image-20210725133015535" style="zoom:90%;" / loading="lazy">

<h2 id="二、JDBC快速入门"><a href="#二、JDBC快速入门" class="headerlink" title="二、JDBC快速入门"></a>二、JDBC快速入门</h2><p>先来看看通过Java操作数据库的流程</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725163745153.png" alt="image-20210725163745153" style="zoom:80%;" / loading="lazy">

<p>第一步：编写Java代码</p>
<p>第二步：Java代码将SQL发送到MySQL服务端</p>
<p>第三步：MySQL服务端接收到SQL语句并执行该SQL语句</p>
<p>第四步：将SQL语句执行的结果返回给Java代码</p>
<h3 id="2-1-编写代码步骤"><a href="#2-1-编写代码步骤" class="headerlink" title="2.1  编写代码步骤"></a>2.1  编写代码步骤</h3><ul>
<li><p>创建工程，导入驱动jar包</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725133015535.png" alt="image-20210725133015535" style="zoom:90%;" / loading="lazy">
</li>
<li><p>注册驱动</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Connection conn <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></table></figure>

<p>Java代码需要发送SQL给MySQL服务端，就需要先建立连接</p>
</li>
<li><p>定义SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">String <span class="keyword">sql</span> <span class="operator">=</span>  “<span class="keyword">update</span>…” ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取执行SQL对象</p>
<p>执行SQL语句需要SQL执行对象，而这个执行对象就是Statement对象</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Statement stmt <span class="operator">=</span> conn.createStatement();</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行SQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">stmt.executeUpdate(<span class="keyword">sql</span>);  </span><br></pre></td></tr></table></figure>
</li>
<li><p>处理返回结果</p>
</li>
<li><p>释放资源</p>
</li>
</ul>
<h3 id="2-2-具体操作"><a href="#2-2-具体操作" class="headerlink" title="2.2  具体操作"></a>2.2  具体操作</h3><ul>
<li>创建新的空的项目</li>
</ul>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725165156501.png" alt="image-20210725165156501" style="zoom:70%;" / loading="lazy">

<ul>
<li>定义项目的名称，并指定位置</li>
</ul>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725165220829.png" alt="image-20210725165220829" style="zoom:70%;" / loading="lazy">

<ul>
<li>对项目进行设置，JDK版本、编译版本</li>
</ul>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725165349564.png" alt="image-20210725165349564" style="zoom:70%;" / loading="lazy">

<ul>
<li>创建模块，指定模块的名称及位置</li>
</ul>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725165536898.png" alt="image-20210725165536898" style="zoom:70%;" / loading="lazy">

<ul>
<li><p>导入驱动包</p>
<p>将mysql的驱动包放在模块下的lib目录（随意命名）下，并将该jar包添加为库文件</p>
</li>
</ul>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725165657556.png" alt="image-20210725165657556" style="zoom:80%;" / loading="lazy">

<ul>
<li>在添加为库文件的时候，有如下三个选项<ul>
<li>Global Library  ： 全局有效</li>
<li>Project Library :   项目有效</li>
<li>Module Library ： 模块有效</li>
</ul>
</li>
</ul>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725165751273.png" alt="image-20210725165751273" style="zoom:80%;" / loading="lazy">

<ul>
<li>在src下创建类</li>
</ul>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725170004319.png" alt="image-20210725170004319" style="zoom:70%;" / loading="lazy">

<ul>
<li>编写代码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC快速入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        <span class="comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line">        <span class="comment">//2. 获取连接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/db1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="comment">//3. 定义sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set money = 2000 where id = 1&quot;</span>;</span><br><span class="line">        <span class="comment">//4. 获取执行sql的对象 Statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="comment">//5. 执行sql</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);<span class="comment">//受影响的行数</span></span><br><span class="line">        <span class="comment">//6. 处理结果</span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="comment">//7. 释放资源</span></span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、JDBC-API详解"><a href="#三、JDBC-API详解" class="headerlink" title="三、JDBC API详解"></a>三、JDBC API详解</h2><h3 id="3-1-DriverManager"><a href="#3-1-DriverManager" class="headerlink" title="3.1  DriverManager"></a>3.1  DriverManager</h3><p>DriverManager（驱动管理类）作用：</p>
<ul>
<li><p>注册驱动</p>
<p><img src="/../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725171339346.png" alt="image-20210725171339346" loading="lazy"></p>
<p>registerDriver方法是用于注册驱动的，但是我们之前做的入门案例并不是这样写的。而是如下实现</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br></pre></td></tr></table></figure>

<p>我们查询MySQL提供的Driver类，看它是如何实现的，源码如下：</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725171635432.png" alt="image-20210725171635432" style="zoom:70%;" / loading="lazy">

<p>在该类中的静态代码块中已经执行了 <code>DriverManager</code> 对象的 <code>registerDriver()</code> 方法进行驱动的注册了，那么我们只需要加载 <code>Driver</code> 类，该静态代码块就会执行。而 <code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code> 就可以加载 <code>Driver</code> 类。</p>
<blockquote>
<p>&#x3D;&#x3D;提示：&#x3D;&#x3D;</p>
<ul>
<li>MySQL 5之后的驱动包，可以省略注册驱动的步骤</li>
<li>自动加载jar包中META-INF&#x2F;services&#x2F;java.sql.Driver文件中的驱动类</li>
</ul>
</blockquote>
</li>
<li><p>获取数据库连接</p>
<p><img src="/../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725171355278.png" alt="image-20210725171355278" loading="lazy"></p>
<p>参数说明：</p>
<ul>
<li><p>url ： 连接路径</p>
<blockquote>
<p>语法：jdbc:mysql:&#x2F;&#x2F;ip地址(域名):端口号&#x2F;数据库名称?参数键值对1&amp;参数键值对2…</p>
<p>示例：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;db1</p>
<p>&#x3D;&#x3D;细节：&#x3D;&#x3D;</p>
<ul>
<li><p>如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:&#x2F;&#x2F;&#x2F;数据库名称?参数键值对</p>
</li>
<li><p>配置 useSSL&#x3D;false 参数，禁用安全连接方式，解决警告提示</p>
</li>
</ul>
</blockquote>
</li>
<li><p>user ：用户名</p>
</li>
<li><p>poassword ：密码</p>
</li>
</ul>
</li>
</ul>
<h3 id="3-2-Connection"><a href="#3-2-Connection" class="headerlink" title="3.2  Connection"></a>3.2  Connection</h3><p>Connection（数据库连接对象）作用：</p>
<ul>
<li>获取执行 SQL 的对象</li>
<li>管理事务</li>
</ul>
<h4 id="3-2-1-获取执行对象"><a href="#3-2-1-获取执行对象" class="headerlink" title="3.2.1  获取执行对象"></a>3.2.1  获取执行对象</h4><ul>
<li><p>普通执行SQL对象</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Statement createStatement()</span><br></pre></td></tr></table></figure>

<p>入门案例中就是通过该方法获取的执行对象。</p>
</li>
<li><p>预编译SQL的执行SQL对象：防止SQL注入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">PreparedStatement  prepareStatement(<span class="keyword">sql</span>)</span><br></pre></td></tr></table></figure>

<p>通过这种方式获取的 <code>PreparedStatement</code> SQL语句执行对象是我们一会重点要进行讲解的，它可以防止SQL注入。</p>
</li>
<li><p>执行存储过程的对象</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CallableStatement prepareCall(<span class="keyword">sql</span>)</span><br></pre></td></tr></table></figure>

<p>通过这种方式获取的 <code>CallableStatement</code> 执行对象是用来执行存储过程的，而存储过程在MySQL中不常用，所以这个我们将不进行讲解。</p>
</li>
</ul>
<h4 id="3-2-2-事务管理"><a href="#3-2-2-事务管理" class="headerlink" title="3.2.2  事务管理"></a>3.2.2  事务管理</h4><p>先回顾一下MySQL事务管理的操作：</p>
<ul>
<li>开启事务 ： BEGIN; 或者 START TRANSACTION;</li>
<li>提交事务 ： COMMIT;</li>
<li>回滚事务 ： ROLLBACK;</li>
</ul>
<blockquote>
<p>MySQL默认是自动提交事务</p>
</blockquote>
<p>接下来学习JDBC事务管理的方法。</p>
<p>Connection几口中定义了3个对应的方法：</p>
<ul>
<li><p>开启事务</p>
<p><img src="/../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725173444628.png" alt="image-20210725173444628" loading="lazy"></p>
<p>参与autoCommit 表示是否自动提交事务，true表示自动提交事务，false表示手动提交事务。而开启事务需要将该参数设为为false。</p>
</li>
<li><p>提交事务</p>
<p><img src="/../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725173618636.png" alt="image-20210725173618636" loading="lazy"></p>
</li>
<li><p>回滚事务</p>
<p><img src="/../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725173648674.png" alt="image-20210725173648674" loading="lazy"></p>
</li>
</ul>
<p>具体代码实现如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC API 详解：Connection</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public class JDBCDemo3_Connection &#123;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> void main(String[] args) throws Exception &#123;</span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span><span class="number">1.</span> 注册驱动</span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span><span class="number">2.</span> 获取连接：如果连接的是本机mysql并且端口是默认的 <span class="number">3306</span> 可以简化书写</span><br><span class="line">        String url <span class="operator">=</span> &quot;jdbc:mysql:///db1?useSSL=false&quot;;</span><br><span class="line">        String username <span class="operator">=</span> &quot;root&quot;;</span><br><span class="line">        String password <span class="operator">=</span> &quot;1234&quot;;</span><br><span class="line">        Connection conn <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span><span class="number">3.</span> 定义<span class="keyword">sql</span></span><br><span class="line">        String sql1 <span class="operator">=</span> &quot;update account set money = 3000 where id = 1&quot;;</span><br><span class="line">        String sql2 <span class="operator">=</span> &quot;update account set money = 3000 where id = 2&quot;;</span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span><span class="number">4.</span> 获取执行<span class="keyword">sql</span>的对象 Statement</span><br><span class="line">        Statement stmt <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>开启事务<span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span><span class="number">5.</span> 执行<span class="keyword">sql</span></span><br><span class="line">            <span class="type">int</span> count1 <span class="operator">=</span> stmt.executeUpdate(sql1);<span class="operator">/</span><span class="operator">/</span>受影响的行数</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span><span class="number">6.</span> 处理结果</span><br><span class="line">            System.out.println(count1);</span><br><span class="line">            <span class="type">int</span> i <span class="operator">=</span> <span class="number">3</span><span class="operator">/</span><span class="number">0</span>;</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span><span class="number">5.</span> 执行<span class="keyword">sql</span></span><br><span class="line">            <span class="type">int</span> count2 <span class="operator">=</span> stmt.executeUpdate(sql2);<span class="operator">/</span><span class="operator">/</span>受影响的行数</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span><span class="number">6.</span> 处理结果</span><br><span class="line">            System.out.println(count2);</span><br><span class="line"></span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>提交事务<span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span>程序运行到此处，说明没有出现任何问题，则需求提交事务</span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>回滚事务<span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span>程序在出现异常时会执行到这个地方，此时就需要回滚事务</span><br><span class="line">            conn.rollback();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span><span class="number">7.</span> 释放资源</span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-Statement"><a href="#3-3-Statement" class="headerlink" title="3.3  Statement"></a>3.3  Statement</h3><h4 id="3-3-1-概述"><a href="#3-3-1-概述" class="headerlink" title="3.3.1  概述"></a>3.3.1  概述</h4><p>Statement对象的作用就是用来执行SQL语句。而针对不同类型的SQL语句使用的方法也不一样。</p>
<ul>
<li><p>执行DDL、DML语句</p>
<p><img src="/../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725175151272.png" alt="image-20210725175151272" loading="lazy"></p>
</li>
<li><p>执行DQL语句</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725175131533.png" alt="image-20210725175131533" style="zoom:80%;" / loading="lazy">

<p>该方法涉及到了 <code>ResultSet</code> 对象，而这个对象我们还没有学习，一会再重点讲解。</p>
</li>
</ul>
<h4 id="3-3-2-代码实现"><a href="#3-3-2-代码实现" class="headerlink" title="3.3.2  代码实现"></a>3.3.2  代码实现</h4><ul>
<li><p>执行DML语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 执行DML语句</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDML</span><span class="params">()</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">    <span class="comment">//1. 注册驱动</span></span><br><span class="line">    <span class="comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line">    <span class="comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">    <span class="comment">//3. 定义sql</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set money = 3000 where id = 1&quot;</span>;</span><br><span class="line">    <span class="comment">//4. 获取执行sql的对象 Statement</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">    <span class="comment">//5. 执行sql</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);<span class="comment">//执行完DML语句，受影响的行数</span></span><br><span class="line">    <span class="comment">//6. 处理结果</span></span><br><span class="line">    <span class="comment">//System.out.println(count);</span></span><br><span class="line">    <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改成功~&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改失败~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//7. 释放资源</span></span><br><span class="line">    stmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行DDL语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 执行DDL语句</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDDL</span><span class="params">()</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">    <span class="comment">//1. 注册驱动</span></span><br><span class="line">    <span class="comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line">    <span class="comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">    <span class="comment">//3. 定义sql</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;drop database db2&quot;</span>;</span><br><span class="line">    <span class="comment">//4. 获取执行sql的对象 Statement</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">    <span class="comment">//5. 执行sql</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);<span class="comment">//执行完DDL语句，可能是0</span></span><br><span class="line">    <span class="comment">//6. 处理结果</span></span><br><span class="line">    System.out.println(count);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. 释放资源</span></span><br><span class="line">    stmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ul>
<li>以后开发很少使用java代码操作DDL语句</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="3-4-ResultSet"><a href="#3-4-ResultSet" class="headerlink" title="3.4  ResultSet"></a>3.4  ResultSet</h3><h4 id="3-4-1-概述"><a href="#3-4-1-概述" class="headerlink" title="3.4.1  概述"></a>3.4.1  概述</h4><p>ResultSet（结果集对象）作用：</p>
<ul>
<li>&#x3D;&#x3D;封装了SQL查询语句的结果。&#x3D;&#x3D;</li>
</ul>
<p>而执行了DQL语句后就会返回该对象，对应执行DQL语句的方法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ResultSet  executeQuery(<span class="keyword">sql</span>)：执行DQL 语句，返回 ResultSet 对象</span><br></pre></td></tr></table></figure>

<p>那么我们就需要从 <code>ResultSet</code> 对象中获取我们想要的数据。<code>ResultSet</code> 对象提供了操作查询结果数据的方法，如下：</p>
<blockquote>
<p>boolean  next()</p>
<ul>
<li>将光标从当前位置向前移动一行 </li>
<li>判断当前行是否为有效行</li>
</ul>
<p>方法返回值说明：</p>
<ul>
<li>true  ： 有效航，当前行有数据</li>
<li>false ： 无效行，当前行没有数据</li>
</ul>
</blockquote>
<blockquote>
<p>xxx  getXxx(参数)：获取数据</p>
<ul>
<li>xxx : 数据类型；如： int getInt(参数) ；String getString(参数)</li>
<li>参数<ul>
<li>int类型的参数：列的编号，从1开始</li>
<li>String类型的参数： 列的名称</li>
</ul>
</li>
</ul>
</blockquote>
<p>如下图为执行SQL语句后的结果</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725181320813.png" alt="image-20210725181320813" style="zoom:80%;" / loading="lazy">

<p>一开始光标指定于第一行前，如图所示红色箭头指向于表头行。当我们调用了 <code>next()</code> 方法后，光标就下移到第一行数据，并且方法返回true，此时就可以通过 <code>getInt(&quot;id&quot;)</code> 获取当前行id字段的值，也可以通过 <code>getString(&quot;name&quot;)</code> 获取当前行name字段的值。如果想获取下一行的数据，继续调用 <code>next()</code>  方法，以此类推。</p>
<h4 id="3-4-2-代码实现"><a href="#3-4-2-代码实现" class="headerlink" title="3.4.2  代码实现"></a>3.4.2  代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 执行DQL</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testResultSet</span><span class="params">()</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">    <span class="comment">//1. 注册驱动</span></span><br><span class="line">    <span class="comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line">    <span class="comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">    <span class="comment">//3. 定义sql</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line">    <span class="comment">//4. 获取statement对象</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">    <span class="comment">//5. 执行sql</span></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line">    <span class="comment">//6. 处理结果， 遍历rs中的所有数据</span></span><br><span class="line">    <span class="comment">/* // 6.1 光标向下移动一行，并且判断当前行是否有数据</span></span><br><span class="line"><span class="comment">        while (rs.next())&#123;</span></span><br><span class="line"><span class="comment">            //6.2 获取数据  getXxx()</span></span><br><span class="line"><span class="comment">            int id = rs.getInt(1);</span></span><br><span class="line"><span class="comment">            String name = rs.getString(2);</span></span><br><span class="line"><span class="comment">            double money = rs.getDouble(3);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            System.out.println(id);</span></span><br><span class="line"><span class="comment">            System.out.println(name);</span></span><br><span class="line"><span class="comment">            System.out.println(money);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            System.out.println(&quot;--------------&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    <span class="comment">// 6.1 光标向下移动一行，并且判断当前行是否有数据</span></span><br><span class="line">    <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">        <span class="comment">//6.2 获取数据  getXxx()</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> rs.getDouble(<span class="string">&quot;money&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(id);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(money);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. 释放资源</span></span><br><span class="line">    rs.close();</span><br><span class="line">    stmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-5-案例"><a href="#3-5-案例" class="headerlink" title="3.5  案例"></a>3.5  案例</h3><ul>
<li><p>需求：查询account账户表数据，封装为Account对象中，并且存储到ArrayList集合中</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725182352433.png" alt="image-20210725182352433" style="zoom:80%;" / loading="lazy">
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 查询account账户表数据，封装为Account对象中，并且存储到ArrayList集合中</span></span><br><span class="line"><span class="comment">  * 1. 定义实体类Account</span></span><br><span class="line"><span class="comment">  * 2. 查询数据，封装到Account对象中</span></span><br><span class="line"><span class="comment">  * 3. 将Account对象存入ArrayList集合中</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testResultSet2</span><span class="params">()</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">    <span class="comment">//1. 注册驱动</span></span><br><span class="line">    <span class="comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line">    <span class="comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 定义sql</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 获取statement对象</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 执行sql</span></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建集合</span></span><br><span class="line">    List&lt;Account&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 6.1 光标向下移动一行，并且判断当前行是否有数据</span></span><br><span class="line">    <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.2 获取数据  getXxx()</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> rs.getDouble(<span class="string">&quot;money&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//赋值</span></span><br><span class="line">        account.setId(id);</span><br><span class="line">        account.setName(name);</span><br><span class="line">        account.setMoney(money);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存入集合</span></span><br><span class="line">        list.add(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. 释放资源</span></span><br><span class="line">    rs.close();</span><br><span class="line">    stmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-6-PreparedStatement"><a href="#3-6-PreparedStatement" class="headerlink" title="3.6  PreparedStatement"></a>3.6  PreparedStatement</h3><blockquote>
<p>PreparedStatement作用：</p>
<ul>
<li>预编译SQL语句并执行：预防SQL注入问题</li>
</ul>
</blockquote>
<p>对上面的作用中SQL注入问题大家肯定不理解。那我们先对SQL注入进行说明.</p>
<h4 id="3-6-1-SQL注入"><a href="#3-6-1-SQL注入" class="headerlink" title="3.6.1  SQL注入"></a>3.6.1  SQL注入</h4><blockquote>
<p>SQL注入是通过操作输入来修改事先定义好的SQL语句，用以达到执行代码对服务器进行攻击的方法。</p>
</blockquote>
<p>在今天资料下的 <code>day03-JDBC\资料\2. sql注入演示</code> 中修改 <code>application.properties</code> 文件中的用户名和密码，文件内容如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure>

<p>在MySQL中创建名为 <code>test</code> 的数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database test;</span><br></pre></td></tr></table></figure>

<p>在命令提示符中运行今天资料下的 <code>day03-JDBC\资料\2. sql注入演示\sql.jar</code> 这个jar包。</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725184701026.png" alt="image-20210725184701026" style="zoom:80%;" / loading="lazy"> 

<p>此时我们就能在数据库中看到user表</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725184817731.png" alt="image-20210725184817731" style="zoom:80%;" / loading="lazy">

<p>接下来在浏览器的地址栏输入 <code>localhost:8080/login.html</code> 就能看到如下页面</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725185024731.png" alt="image-20210725185024731" style="zoom:80%;" / loading="lazy">

<p>我们就可以在如上图中输入用户名和密码进行登陆。用户名和密码输入正确就登陆成功，跳转到首页。用户名和密码输入错误则给出错误提示，如下图</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725185320875.png" alt="image-20210725185320875" style="zoom:80%;" / loading="lazy">

<p>但是我可以通过输入一些特殊的字符登陆到首页。</p>
<p>用户名随意写，密码写成 <code>&#39; or &#39;1&#39; =&#39;1</code></p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725185603112.png" alt="image-20210725185603112" style="zoom:80%;" / loading="lazy">

<p>这就是SQL注入漏洞，也是很危险的。当然现在市面上的系统都不会存在这种问题了，所以大家也不要尝试用这种方式去试其他的系统。</p>
<p>那么该如何解决呢？这里就可以将SQL执行对象 <code>Statement</code> 换成 <code>PreparedStatement</code> 对象。</p>
<h4 id="3-6-2-代码模拟SQL注入问题"><a href="#3-6-2-代码模拟SQL注入问题" class="headerlink" title="3.6.2  代码模拟SQL注入问题"></a>3.6.2  代码模拟SQL注入问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLogin</span><span class="params">()</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">    <span class="comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收用户输入 用户名和密码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;sjdljfld&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;&#x27; or &#x27;1&#x27; = &#x27;1&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from tb_user where username = &#x27;&quot;</span>+name+<span class="string">&quot;&#x27; and password = &#x27;&quot;</span>+pwd+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取stmt对象</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">    <span class="comment">// 执行sql</span></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line">    <span class="comment">// 判断登录是否成功</span></span><br><span class="line">    <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录成功~&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录失败~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. 释放资源</span></span><br><span class="line">    rs.close();</span><br><span class="line">    stmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码是将用户名和密码拼接到sql语句中，拼接后的sql语句如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;sjdljfld&#x27;</span> <span class="keyword">and</span> password <span class="operator">=</span> <span class="string">&#x27;&#x27;</span><span class="keyword">or</span> <span class="string">&#x27;1&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure>

<p>从上面语句可以看出条件 <code>username = &#39;sjdljfld&#39; and password = &#39;&#39;</code> 不管是否满足，而 <code>or</code> 后面的 <code>&#39;1&#39; = &#39;1&#39;</code> 是始终满足的，最终条件是成立的，就可以正常的进行登陆了。</p>
<p>接下来我们来学习PreparedStatement对象.</p>
<h4 id="3-6-3-PreparedStatement概述"><a href="#3-6-3-PreparedStatement概述" class="headerlink" title="3.6.3  PreparedStatement概述"></a>3.6.3  PreparedStatement概述</h4><blockquote>
<p>PreparedStatement作用：</p>
<ul>
<li>预编译SQL语句并执行：预防SQL注入问题</li>
</ul>
</blockquote>
<ul>
<li><p>获取 PreparedStatement 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SQL语句中的参数值，使用？占位符替代</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where username = ? and password = ?&quot;</span>;</span><br><span class="line"><span class="comment">// 通过Connection对象获取，并传入对应的sql语句</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置参数值</p>
<p>上面的sql语句中参数使用 ? 进行占位，在之前之前肯定要设置这些 ?  的值。</p>
<blockquote>
<p>PreparedStatement对象：setXxx(参数1，参数2)：给 ? 赋值</p>
<ul>
<li><p>Xxx：数据类型 ； 如 setInt (参数1，参数2)</p>
</li>
<li><p>参数：</p>
<ul>
<li><p>参数1： ？的位置编号，从1 开始</p>
</li>
<li><p>参数2： ？的值</p>
</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>执行SQL语句</p>
<blockquote>
<p>executeUpdate();  执行DDL语句和DML语句</p>
<p>executeQuery();  执行DQL语句</p>
<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p>
<ul>
<li>调用这两个方法时不需要传递SQL语句，因为获取SQL语句执行对象时已经对SQL语句进行预编译了。</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="3-6-4-使用PreparedStatement改进"><a href="#3-6-4-使用PreparedStatement改进" class="headerlink" title="3.6.4  使用PreparedStatement改进"></a>3.6.4  使用PreparedStatement改进</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPreparedStatement</span><span class="params">()</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">    <span class="comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收用户输入 用户名和密码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;&#x27; or &#x27;1&#x27; = &#x27;1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义sql</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from tb_user where username = ? and password = ?&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取pstmt对象</span></span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">    <span class="comment">// 设置？的值</span></span><br><span class="line">    pstmt.setString(<span class="number">1</span>,name);</span><br><span class="line">    pstmt.setString(<span class="number">2</span>,pwd);</span><br><span class="line">    <span class="comment">// 执行sql</span></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery();</span><br><span class="line">    <span class="comment">// 判断登录是否成功</span></span><br><span class="line">    <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录成功~&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录失败~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//7. 释放资源</span></span><br><span class="line">    rs.close();</span><br><span class="line">    pstmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行上面语句就可以发现不会出现SQL注入漏洞问题了。那么PreparedStatement又是如何解决的呢？它是将特殊字符进行了转义，转义的SQL如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;sjdljfld&#x27;</span> <span class="keyword">and</span> password <span class="operator">=</span> <span class="string">&#x27;\&#x27;</span><span class="keyword">or</span> \<span class="string">&#x27;1\&#x27;</span> <span class="operator">=</span> \<span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure>



<h4 id="3-6-5-PreparedStatement原理"><a href="#3-6-5-PreparedStatement原理" class="headerlink" title="3.6.5  PreparedStatement原理"></a>3.6.5  PreparedStatement原理</h4><blockquote>
<p>PreparedStatement 好处：</p>
<ul>
<li>预编译SQL，性能更高</li>
<li>防止SQL注入：&#x3D;&#x3D;将敏感字符进行转义&#x3D;&#x3D;</li>
</ul>
</blockquote>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725195756848.png" alt="image-20210725195756848" style="zoom:80%;" / loading="lazy">

<p>Java代码操作数据库流程如图所示：</p>
<ul>
<li><p>将sql语句发送到MySQL服务器端</p>
</li>
<li><p>MySQL服务端会对sql语句进行如下操作</p>
<ul>
<li><p>检查SQL语句</p>
<p>检查SQL语句的语法是否正确。</p>
</li>
<li><p>编译SQL语句。将SQL语句编译成可执行的函数。</p>
<p>检查SQL和编译SQL花费的时间比执行SQL的时间还要长。如果我们只是重新设置参数，那么检查SQL语句和编译SQL语句将不需要重复执行。这样就提高了性能。</p>
</li>
<li><p>执行SQL语句</p>
</li>
</ul>
</li>
</ul>
<p>接下来我们通过查询日志来看一下原理。</p>
<ul>
<li><p>开启预编译功能</p>
<p>在代码中编写url时需要加上以下参数。而我们之前根本就没有开启预编译功能，只是解决了SQL注入漏洞。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">useServerPrepStmts<span class="operator">=</span><span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置MySQL执行日志（重启mysql服务后生效）</p>
<p>在mysql配置文件（my.ini）中添加如下配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">log-output=FILE</span><br><span class="line">general-log=1</span><br><span class="line">general_log_file=&quot;D:\mysql.log&quot;</span><br><span class="line">slow-query-log=1</span><br><span class="line">slow_query_log_file=&quot;D:\mysql_slow.log&quot;</span><br><span class="line">long_query_time=2</span><br></pre></td></tr></table></figure>
</li>
<li><p>java测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * PreparedStatement原理</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPreparedStatement2</span><span class="params">()</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span></span><br><span class="line">    <span class="comment">// useServerPrepStmts=true 参数开启预编译功能</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///db1?useSSL=false&amp;useServerPrepStmts=true&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收用户输入 用户名和密码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;&#x27; or &#x27;1&#x27; = &#x27;1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义sql</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from tb_user where username = ? and password = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取pstmt对象</span></span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">    Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">    <span class="comment">// 设置？的值</span></span><br><span class="line">    pstmt.setString(<span class="number">1</span>,name);</span><br><span class="line">    pstmt.setString(<span class="number">2</span>,pwd);</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 执行sql</span></span><br><span class="line">    rs = pstmt.executeQuery();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置？的值</span></span><br><span class="line">    pstmt.setString(<span class="number">1</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    pstmt.setString(<span class="number">2</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">    <span class="comment">// 执行sql</span></span><br><span class="line">    rs = pstmt.executeQuery();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断登录是否成功</span></span><br><span class="line">    <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录成功~&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录失败~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. 释放资源</span></span><br><span class="line">    rs.close();</span><br><span class="line">    pstmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>执行SQL语句，查看 <code>D:\mysql.log</code> 日志如下:</p>
<p><img src="/../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725202829738.png" alt="image-20210725202829738" loading="lazy"></p>
<p>上图中第三行中的 <code>Prepare</code> 是对SQL语句进行预编译。第四行和第五行是执行了两次SQL语句，而第二次执行前并没有对SQL进行预编译。</p>
</li>
</ul>
<blockquote>
<p>&#x3D;&#x3D;小结：&#x3D;&#x3D;</p>
<ul>
<li>在获取PreparedStatement对象时，将sql语句发送给mysql服务器进行检查，编译（这些步骤很耗时）</li>
<li>执行时就不用再进行这些步骤了，速度更快</li>
<li>如果sql模板一样，则只需要进行一次检查、编译</li>
</ul>
</blockquote>
<h2 id="四、数据库连接池"><a href="#四、数据库连接池" class="headerlink" title="四、数据库连接池"></a>四、数据库连接池</h2><h3 id="4-1-数据库连接池简介"><a href="#4-1-数据库连接池简介" class="headerlink" title="4.1  数据库连接池简介"></a>4.1  数据库连接池简介</h3><blockquote>
<ul>
<li><p>数据库连接池是个容器，负责分配、管理数据库连接(Connection)</p>
</li>
<li><p>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；</p>
</li>
<li><p>释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏</p>
</li>
<li><p>好处</p>
<ul>
<li>资源重用</li>
<li>提升系统响应速度</li>
<li>避免数据库连接遗漏</li>
</ul>
</li>
</ul>
</blockquote>
<p>之前我们代码中使用连接是没有使用都创建一个Connection对象，使用完毕就会将其销毁。这样重复创建销毁的过程是特别耗费计算机的性能的及消耗时间的。</p>
<p>而数据库使用了数据库连接池后，就能达到Connection对象的复用，如下图</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725210432985.png" alt="image-20210725210432985" style="zoom:80%;" / loading="lazy">

<p>连接池是在一开始就创建好了一些连接（Connection）对象存储起来。用户需要连接数据库时，不需要自己创建连接，而只需要从连接池中获取一个连接进行使用，使用完毕后再将连接对象归还给连接池；这样就可以起到资源重用，也节省了频繁创建连接销毁连接所花费的时间，从而提升了系统响应的速度。</p>
<h3 id="4-2-数据库连接池实现"><a href="#4-2-数据库连接池实现" class="headerlink" title="4.2  数据库连接池实现"></a>4.2  数据库连接池实现</h3><ul>
<li><p>标准接口：&#x3D;&#x3D;DataSource&#x3D;&#x3D;</p>
<p>官方(SUN) 提供的数据库连接池标准接口，由第三方组织实现此接口。该接口提供了获取连接的功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection <span class="title function_">getConnection</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<p>那么以后就不需要通过 <code>DriverManager</code> 对象获取 <code>Connection</code> 对象，而是通过连接池（DataSource）获取 <code>Connection</code> 对象。</p>
</li>
<li><p>常见的数据库连接池</p>
<ul>
<li>DBCP</li>
<li>C3P0</li>
<li>Druid</li>
</ul>
<p>我们现在使用更多的是Druid，它的性能比其他两个会好一些。</p>
</li>
<li><p>Druid（德鲁伊）</p>
<ul>
<li><p>Druid连接池是阿里巴巴开源的数据库连接池项目 </p>
</li>
<li><p>功能强大，性能优秀，是Java语言最好的数据库连接池之一</p>
</li>
</ul>
</li>
</ul>
<h3 id="4-3-Driud使用"><a href="#4-3-Driud使用" class="headerlink" title="4.3  Driud使用"></a>4.3  Driud使用</h3><blockquote>
<ul>
<li>导入jar包 druid-1.1.12.jar</li>
<li>定义配置文件</li>
<li>加载配置文件</li>
<li>获取数据库连接池对象</li>
<li>获取连接</li>
</ul>
</blockquote>
<p>现在通过代码实现，首先需要先将druid的jar包放到项目下的lib下并添加为库文件</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725212911980.png" alt="image-20210725212911980" style="zoom:80%;" / loading="lazy">

<p>项目结构如下：</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725213210091.png" alt="image-20210725213210091" style="zoom:80%;" / loading="lazy">

<p>编写配置文件如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///db1?useSSL=false&amp;useServerPrepStmts=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">1234</span></span><br><span class="line"><span class="comment"># 初始化连接数量</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 最大等待时间</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure>

<p>使用druid的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid数据库连接池演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.导入jar包</span></span><br><span class="line">        <span class="comment">//2.定义配置文件</span></span><br><span class="line">        <span class="comment">//3. 加载配置文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc-demo/src/druid.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//4. 获取连接池对象</span></span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(prop);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 获取数据库连接 Connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">        System.out.println(connection); <span class="comment">//获取到了连接后就可以继续做其他操作了</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(System.getProperty(&quot;user.dir&quot;));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Java实现向QQ邮箱发送验证码</title>
    <url>/2022/08/08/Java%E5%AE%9E%E7%8E%B0%E5%90%91QQ%E9%82%AE%E7%AE%B1%E5%8F%91%E9%80%81%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>首先来到自己的邮箱，点击设置</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808182157154.png" alt="image-20220808182157154" loading="lazy"></p>
<p>点击账户</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808182222909.png" alt="image-20220808182222909" loading="lazy"></p>
<p>下滑，这里点击开启</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808182252594.png" alt="image-20220808182252594" loading="lazy"></p>
<p>发送短信验证</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808182307112.png" alt="image-20220808182307112" loading="lazy"></p>
<p>然后就会得到授权码，将其保存起来</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808182446619.png" alt="image-20220808182446619" loading="lazy"></p>
<p>然后导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.mail-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后是Java代码</p>
<pre><code class="java">import javax.mail.Authenticator;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import java.util.Properties;

public class sendEmail &#123;
    public static void send_QQ(String code) throws Exception &#123;
        Properties props = new Properties();
        props.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);
        props.put(&quot;mail.smtp.host&quot;, &quot;smtp.qq.com&quot;);
        props.put(&quot;mail.smtp.port&quot;, &quot;587&quot;);
        // 此处填写，写信人的账号
        props.put(&quot;mail.user&quot;, &quot;xxx@qq.com&quot;);
        // 此处填写16位STMP口令,刚刚复制的字符串
        props.put(&quot;mail.password&quot;, &quot;xxx&quot;);

        Authenticator authenticator = new Authenticator() &#123;
            protected PasswordAuthentication getPasswordAuthentication() &#123;
                String userName = props.getProperty(&quot;mail.user&quot;);
                String password = props.getProperty(&quot;mail.password&quot;);
                return new PasswordAuthentication(userName, password);
            &#125;
        &#125;;
        Session mailSession = Session.getInstance(props, authenticator);
        MimeMessage message = new MimeMessage(mailSession);
        InternetAddress form = new InternetAddress(props.getProperty(&quot;mail.user&quot;));
        message.setFrom(form);

        // 设置收件人的邮箱
        InternetAddress to = new InternetAddress(&quot;xxxx@qq.com&quot;);
        message.setRecipient(MimeMessage.RecipientType.TO, to);

        // 设置邮件标题
        message.setSubject(&quot;验证号码测试&quot;);

        // 设置邮件的内容体
        message.setContent(code, &quot;text/html;charset=UTF-8&quot;);

        // 发送
        Transport.send(message);

    &#125;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 1 两数之和</title>
    <url>/2022/03/26/Leecode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和</a></h4><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
<p>你可以按任意顺序返回答案。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 104</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>
<li><code>-109 &lt;= target &lt;= 109</code></li>
<li><strong>只会存在一个有效答案</strong></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="comment">//使用哈希表进行存储，元素值为键，索引作为值</span></span><br><span class="line">    Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">        <span class="comment">//判断当前哈希表中是否存在满足条件的两个值，若存在，则返回</span></span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(target - nums[i]))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;map.get(target - nums[i]),i&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不存在，将当前元素存入，进行下次判断</span></span><br><span class="line">        map.put(nums[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没找到符合条件的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础面试题整理</title>
    <url>/2022/07/11/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="面向对象和面向过程的区别？"><a href="#面向对象和面向过程的区别？" class="headerlink" title="面向对象和面向过程的区别？"></a>面向对象和面向过程的区别？</h2><ul>
<li><strong>面向过程：</strong>是指分析出解决问题的步骤，然后用函数将这些步骤一步步实现，然后在使用的时候一一调用即可。性能较高，所以单片机嵌入式等开发一般使用面向过程开发。</li>
<li><strong>面向对象：</strong>是指把构成问题的事务分解成各种对象，建立对象的目的不是为了完成一个个步骤，而是为了描述该对象在解决整个问题的过程中所发生的行为。面向对象有封装继承多态的特性，所以易维护、易复用、易扩展。可以设计出低耦合的系统。但是性能比面向过程低。</li>
</ul>
<hr>
<h2 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h2><ol>
<li><p>重载就是在一个类中同名的方法具有不同的参数列表（<strong>参数类型、参数个数以及参数顺序不同</strong>）都被视为重载，但是重载对返回类型没有要求，可以相同也可以不同。</p>
</li>
<li><p>重写就是指子类继承了父类中原有的方法，但是有时候子类不想原封不动的继承父类中的某个方法，所以对方法体进行修改或者重写。</p>
</li>
<li><ol>
<li>重写，<strong>方法名、参数列表和返回值必须相同</strong>，抛出的异常范围要小于等于父类，访问权限要大于等于父类。</li>
<li>如果父类中的方法访问修饰符为<strong>private&#x2F;final&#x2F;static</strong>，则子类就不能重写该方法。</li>
</ol>
</li>
</ol>
<hr>
<h2 id="String、StringBuffer和StringBuilder的区别是什么？String为什么是不可变的？"><a href="#String、StringBuffer和StringBuilder的区别是什么？String为什么是不可变的？" class="headerlink" title="String、StringBuffer和StringBuilder的区别是什么？String为什么是不可变的？"></a>String、StringBuffer和StringBuilder的区别是什么？String为什么是不可变的？</h2><h4 id="可变性："><a href="#可变性：" class="headerlink" title="可变性："></a>可变性：</h4><ol>
<li>String类中使用final关键字修饰字符数组来保存字符串，所以String对象是不可变的。</li>
<li>StringBuilder和StringBuffer都继承了AbstractStringBuilder类，在AbstractStringBuilder类中也是使用了字符数组进行保存字符串，但是没有使用final关键字修饰，所以这两种对象是可变的。</li>
</ol>
<h3 id="线程安全及性能"><a href="#线程安全及性能" class="headerlink" title="线程安全及性能"></a>线程安全及性能</h3><ol>
<li><p>String中对象是不可变的，可以理解为常量，线程安全。</p>
</li>
<li><p>StringBuilder和StringBuffer都继承了AbstractStringBuilder类，而AbstractStringBuilder类中定义了一些字符串的基本操作方法。</p>
</li>
<li><ol>
<li>而StringBuffer对这些方法或者对调用的方法加了同步锁，所以是线程安全的，效率相对较低。一般在多线程中使用。</li>
<li>StringBuilder没有对这些方法加同步锁，所以是非线程安全的，效率相对较高。一般在单线程中使用。</li>
</ol>
</li>
</ol>
<hr>
<h2 id="自动装箱和拆箱"><a href="#自动装箱和拆箱" class="headerlink" title="自动装箱和拆箱"></a>自动装箱和拆箱</h2><p><strong>每个基本数据类型都对应了一个包装类。</strong></p>
<ol>
<li><strong>自动装箱：</strong>是指将基本数据类型包装为一个包装类对象，例如像一个泛型为Integer的集合中添加int类型的变量。</li>
<li><strong>自动拆箱：</strong>将一个包装类对象转换为一个基本数据类型，例如将一个包装类对象赋值给一个基本数据类型的变量。</li>
</ol>
<hr>
<h2 id="接口和抽象类的区别是什么？"><a href="#接口和抽象类的区别是什么？" class="headerlink" title="接口和抽象类的区别是什么？"></a>接口和抽象类的区别是什么？</h2><ol>
<li>接口的方法默认是public，且只能包含<strong>抽象方法和静态方法</strong>，所有方法在接口中不能有实现(Java8之后接口方法可以有默认实现)，而抽象类中可以包含<strong>普通方法。</strong></li>
<li>接口中除了<strong>static、final变量</strong>，不能有其他的变量，而抽象类中的成员变量可以是<strong>各种类型</strong>的。</li>
<li><strong>一个类可以实现多个接口，但是只能继承一个抽象类</strong>。接口自身也可以通过extends关键字来扩展多个接口。</li>
<li>（<strong>是否有构造器</strong>）接口不能包含构造器，抽象类可以包含<strong>构造器</strong>，抽象类里的构造器并不是用于创建对象，而是<strong>让其子类调用这些构造器</strong>来<strong>完成</strong>属于<strong>抽象类的初始化操作</strong>。</li>
<li>从设计层面来说，抽象是对类的抽象，是一种模板设计；而接口是对行为的抽象，是一种行为的规范。</li>
</ol>
<hr>
<h2 id="创建一个对象用什么运算符？-对象实体和对象引用有何不同"><a href="#创建一个对象用什么运算符？-对象实体和对象引用有何不同" class="headerlink" title="创建一个对象用什么运算符？ 对象实体和对象引用有何不同?"></a>创建一个对象用什么运算符？ 对象实体和对象引用有何不同?</h2><p>使用new运算符，new用来创建对象实例，对象实例存在于堆内存中，对象引用存在于栈内存中，对象引用指向对象实例。</p>
<hr>
<h2 id="一个类的构造方法的作用是什么？如果一个类没有声明构造方法，该程序能正确执行吗？为什么？"><a href="#一个类的构造方法的作用是什么？如果一个类没有声明构造方法，该程序能正确执行吗？为什么？" class="headerlink" title="一个类的构造方法的作用是什么？如果一个类没有声明构造方法，该程序能正确执行吗？为什么？"></a>一个类的构造方法的作用是什么？如果一个类没有声明构造方法，该程序能正确执行吗？为什么？</h2><p>类的构造方法的主要作用是完成对类对象的初始化工作；可以执行；因为一个类即使没有声明构造方法也会有默认不带参数的构造方法。</p>
<hr>
<h2 id="静态方法和实例方法"><a href="#静态方法和实例方法" class="headerlink" title="静态方法和实例方法"></a>静态方法和实例方法</h2><ol>
<li>在外部调用静态方法时，可以使用类名.方法名的方式也可以使用对象名.方法名的方式；而调用实例方法只能使用对象名.方法名的方式。</li>
<li>静态方法在访问本类内部的成员时，只能访问静态成员（即静态变量和静态方法），而不允许访问实例成员变量和实例成员方法；实例方法没有这个限制。</li>
</ol>
<hr>
<h2 id="x3D-x3D-和equals"><a href="#x3D-x3D-和equals" class="headerlink" title="&#x3D;&#x3D;和equals"></a>&#x3D;&#x3D;和equals</h2><ul>
<li><p>&#x3D;&#x3D; 的作用：</p>
</li>
<li><ul>
<li>基本类型：比较值是否相等</li>
<li>引用类型：比较的是对象的内存地址值是否相等</li>
</ul>
</li>
<li><p>equals 的作用:	</p>
</li>
<li><ul>
<li>基本类型：<strong>不能</strong>用于判断基本数据类型的变量</li>
<li>引用类型：用于比较两个对象的内容是否相等，<strong>默认况下，因为所有的类都继承了Object类，Object类中的equals方法使用的是&#x3D;&#x3D;，所以是比较内存地址值是否相等。</strong>也可以按照需求逻辑，重写覆盖掉对象的equals方法。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="HashCode的作用"><a href="#HashCode的作用" class="headerlink" title="HashCode的作用"></a>HashCode的作用</h2><ul>
<li><p>Java中的集合有两类，一类是List，一类是Set。前者有序可重复，后者无序不可重复。当在Set集合汇总插入元素时怎么判断元素是否存在呢？可以通过equals方法。但是如果元素太多，就要使用很多次equals方法，就会比较慢。</p>
</li>
<li><p><strong>HashCode就是根据对象的内存地址换算出来的一个值。</strong>这样当集合添加新元素时，先调用这个元素的hashCode方法，就能定位到他应该放置的物理位置上。</p>
</li>
<li><ul>
<li>如果该位置上没有元素，就不用进行任何比较，直接在这个位置上进行存储。</li>
<li><strong>如果该位置上有元素，才调用equals方法与该元素进行比较，相同的话就不进行存储，不相同就散列到其他地址。</strong></li>
</ul>
</li>
<li><p>这样调用equals方法次数就大大降低了，提升了效率。</p>
</li>
</ul>
<hr>
<h2 id="有没有可能两个不相等的对象有相同的HashCode"><a href="#有没有可能两个不相等的对象有相同的HashCode" class="headerlink" title="有没有可能两个不相等的对象有相同的HashCode"></a>有没有可能两个不相等的对象有相同的HashCode</h2><p>有可能</p>
<p>两个对象具有相同的hashCode时代表发生了哈希冲突，一般有以下三种解决方式：</p>
<ul>
<li><strong>拉链法：</strong>每个哈希表节点都有一个next指针，多个哈希表节点可以通过next指针相连构成一条单链表，这样，发生哈希冲突的对象就可以使用这条单链表进行存储。</li>
<li><strong>开发定址法：</strong>一旦发生了哈希冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入。</li>
<li><strong>双哈希法：</strong>有多个哈希函数，当发生哈希冲突时，使用第二个、第三个哈希函数进行继续计算地址，直到没有冲突</li>
</ul>
<hr>
<h2 id="为什么重写equals时必须重写hashcode方法？"><a href="#为什么重写equals时必须重写hashcode方法？" class="headerlink" title="为什么重写equals时必须重写hashcode方法？"></a>为什么重写equals时必须重写hashcode方法？</h2><ul>
<li>因为如果两个对象相等，则HashCode也一定是相同的。</li>
<li>但是两个对象有相同的hashcode值，他们不一定是相同的。</li>
<li>因此重写equals方法时必须重写hashcode方法。</li>
</ul>
<hr>
<h2 id="Java中是值传递还是引用传递"><a href="#Java中是值传递还是引用传递" class="headerlink" title="Java中是值传递还是引用传递"></a>Java中是值传递还是引用传递</h2><ol>
<li>按值调用时值方法接收的是调用者提供的值；按引用调用是指方法接收的是调用者提供的变量地址。</li>
<li>Java总是按值调用的，方法得到的是所有<strong>参数值的副本</strong>，传递对象时实际上方法接收到的是<strong>对象引用的副本。</strong></li>
</ol>
<hr>
<h2 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h2><ul>
<li>浅拷贝：只复制当前对象的基本数据类型和引用变量，但是引用变量指向的那些对象不进行复制，<strong>引用变量指向的仍然是原对象中引用变量所指向的值。</strong>修改克隆对象可能回影响原对象，不安全。</li>
<li>深拷贝：完全拷贝了基本数据类型和引用数据类型以及引用数据类型指向的对象，也进行了复制。<strong>也就是说深拷贝把要复制的对象所引用的对象也全部进行了复制。</strong></li>
</ul>
<hr>
<h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><p>final关键字主要用在三个地方：变量、方法、类</p>
<ol>
<li>对于一个final变量，如果是基本数据类型的变量，则其数值一旦初始化之后就<strong>不能改变</strong>；如果是引用类型的变量，则在对其进行初始化之后就<strong>不能再让其指向另一个对象。</strong></li>
<li>final修饰的<strong>方法不能被重写</strong>，但是子类可以使用父类中final修饰的方法；</li>
<li>当用final秀是一个类时，表明这个类<strong>不能被继承</strong>，final类中的所有成员方法都会被隐式的指定为final方法。</li>
</ol>
<hr>
<h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><ul>
<li><p>可以修饰变量和方法，被static关键字修饰的变量和方法被称为静态变量和静态方法，</p>
</li>
<li><ul>
<li>都属于类的静态资源</li>
<li>是被类的实例所共享的</li>
<li>可以通过类名.对象或者方法名的方式直接调用</li>
</ul>
</li>
<li><p>static还可以用于静态代码块，一般用于一些初始化操作</p>
</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 101 对称二叉树</title>
    <url>/2022/04/04/Leecode-101-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101. 对称二叉树"></a><a href="https://leetcode-cn.com/problems/symmetric-tree/">101. 对称二叉树</a></h4><p>给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对称。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2,2,3,4,4,3]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2,2,null,3,null,3]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点数目在范围 <code>[1, 1000]</code> 内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p><strong>进阶：</strong>你可以运用递归和迭代两种方法解决这个问题吗？</p>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="递归写法："><a href="#递归写法：" class="headerlink" title="递归写法："></a>递归写法：</h3><ol>
<li><p>确定参数和返回值</p>
<ol>
<li>因为比较的是两颗子树是否是相互翻转的，进而判断这两颗子树是不是对称的，所以要比较的是两颗子树，参数为左子树节点和右子树节点</li>
<li>返回值为boolean类型</li>
</ol>
</li>
<li><p>确定递归出口</p>
<p>比较两个节点值的情况，分为节点为空和节点不为空两种情况。</p>
<p>首先是节点为空：</p>
<ol>
<li>左节点为空，右节点不为空，返回false</li>
<li>左节点不为空，右节点为空，返回false</li>
<li>左右节点均为空，两节点对称，返回true</li>
</ol>
<p>然后是两节点都不为空：</p>
<ol>
<li>左右节点值不相等，返回false</li>
<li>左右节点值相等，递归比较内外侧左右节点。<ol>
<li>比较内侧，传入左节点的右孩子和右节点的左孩子</li>
<li>比较外侧，传入左节点的左孩子和右节点的右孩子</li>
<li>左右都对称返回true，有一侧不对称返回false</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="递归代码如下："><a href="#递归代码如下：" class="headerlink" title="递归代码如下："></a>递归代码如下：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> compare(root.left, root.right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(TreeNode left, TreeNode right)</span> &#123;</span><br><span class="line">    <span class="comment">//左右节点都为空时</span></span><br><span class="line">    <span class="keyword">if</span> (left == <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//左右节点有一个为空时</span></span><br><span class="line">    <span class="keyword">if</span> (left == <span class="literal">null</span> &amp;&amp; right != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left != <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//左右节点均不为空，但是值不相等时</span></span><br><span class="line">    <span class="keyword">if</span> (left.val != right.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//比较内侧树,即左节点的右子树和右节点的左子树</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">compareOutside</span> <span class="operator">=</span> compare(left.right, right.left);</span><br><span class="line">    <span class="comment">//比较外侧树，即左节点的左子树和右节点的右子树</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">compareInside</span> <span class="operator">=</span> compare(left.left, right.right);</span><br><span class="line">    <span class="comment">//返回两颗子树的对称结果</span></span><br><span class="line">    <span class="keyword">return</span> compareInside &amp;&amp; compareOutside;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="迭代写法："><a href="#迭代写法：" class="headerlink" title="迭代写法："></a>迭代写法：</h3><p>使用双端队列，将相应对称的节点存入双端队列的两边，然后取出进行比较，看值是否相同，然后依次比较内外子树。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//双端队列</span></span><br><span class="line">    Deque&lt;TreeNode&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//存入左右节点</span></span><br><span class="line">    deque.offerFirst(root.left);</span><br><span class="line">    deque.offerFirst(root.right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!deque.isEmpty())&#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">leftNode</span> <span class="operator">=</span> deque.pollFirst();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">rightNode</span> <span class="operator">=</span> deque.pollLast();</span><br><span class="line">        <span class="comment">//左右节点都为空时</span></span><br><span class="line">        <span class="keyword">if</span> (leftNode == <span class="literal">null</span> &amp;&amp; rightNode == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左右节点一颗为空一颗不为空时</span></span><br><span class="line">        <span class="keyword">if</span> (leftNode == <span class="literal">null</span> || rightNode == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//左右节点都不为空但是值不相同时</span></span><br><span class="line">        <span class="keyword">if</span> (leftNode.val != rightNode.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存入外侧节点</span></span><br><span class="line">        deque.offerFirst(leftNode.left);</span><br><span class="line">        deque.offerLast(rightNode.right);</span><br><span class="line">        <span class="comment">//存入内侧节点</span></span><br><span class="line">        deque.offerFirst(leftNode.right);</span><br><span class="line">        deque.offerLast(rightNode.left);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Java比较器小结</title>
    <url>/2022/05/03/Java%E6%AF%94%E8%BE%83%E5%99%A8%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>Java中基本数据类型可以使用 <code>==</code> 、<code>!=</code>、<code>&gt;</code>、<code>&lt;</code>来比较，但是对象之间的比较只能用<code>==</code> 或者<code> !=</code>。不能使用<code>&lt;</code>、<code>&gt;</code>比较。</p>
<p>那么如何比较对象的大小的，如何对多个对象进行排序呢？</p>
<p>这就引出了我们今天的主角，两个接口:</p>
<ul>
<li><p><code>自然排序：java.lang.Comparable</code>  </p>
</li>
<li><p><code>定制排序：java.lang.Comparator</code></p>
</li>
</ul>
<h2 id="二、自然排序：Comparable接口"><a href="#二、自然排序：Comparable接口" class="headerlink" title="二、自然排序：Comparable接口"></a>二、自然排序：Comparable接口</h2><h5 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h5><ul>
<li>Comparable接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序。</li>
<li>实现 Comparable 的类必须重写该接口的 compareTo(Object obj) 方法，两个对象通过 compareTo(Object obj) 方法的返回值来比较大小。<ul>
<li>如果当前对象this大于形参对象obj，则返回正整数。</li>
<li>如果当前对象this小于形参对象obj，则返回负整数。</li>
<li>如果当前对象this等于形参对象obj，则返回零。</li>
</ul>
</li>
<li>实现Comparable接口的对象列表（和数组）可以通过 Collections.sort 或者Arrays.sort进行自动排序。实现此接口的对象可以用作有序映射中的键或有序集合中的元素，无需指定比较器。</li>
</ul>
<h5 id="典型实现：（默认都是从小到大排列）"><a href="#典型实现：（默认都是从小到大排列）" class="headerlink" title="典型实现：（默认都是从小到大排列）"></a>典型实现：（默认都是从小到大排列）</h5><ul>
<li><p>String：按照字符串中字符的Unicode值进行比较</p>
</li>
<li><p>Character：按照字符的Unicode值来进行比较</p>
</li>
<li><p>数值类型对应的包装类以及BigInteger、BigDecimal：按照它们对应的数值大小进行比较</p>
</li>
<li><p>Boolean：true 对应的包装类实例大于 false 对应的包装类实例</p>
</li>
<li><p>Date、Time等：后面的日期时间比前面的日期时间大</p>
<p><strong>代码演示：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//商品类，实现Comparable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Goods</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Goods&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Goods</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品比较大小的方式：按照价格从低到高排序,再按照商品名称从高到低排序</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Goods) &#123;</span><br><span class="line">            <span class="type">Goods</span> <span class="variable">goods</span> <span class="operator">=</span> (Goods) o;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.price &gt; goods.price) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.price &lt; goods.price) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="built_in">this</span>.name.compareTo(goods.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;传入的数据类型不一致！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        Goods[] arr = <span class="keyword">new</span> <span class="title class_">Goods</span>[<span class="number">5</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;罗技&quot;</span>,<span class="number">299</span>);</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;雷蛇&quot;</span>,<span class="number">399</span>);</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;小米&quot;</span>,<span class="number">99</span>);</span><br><span class="line">        arr[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;戴尔&quot;</span>,<span class="number">169</span>);</span><br><span class="line">        arr[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;联想&quot;</span>,<span class="number">99</span>);</span><br><span class="line"></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-定制排序：java-util-Comparator"><a href="#3-定制排序：java-util-Comparator" class="headerlink" title="3.定制排序：java.util.Comparator"></a>3.定制排序：java.util.Comparator</h2><ul>
<li><strong>当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码，或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑使用Comparator的对象来排序</strong>，强行对多个对象进行整体排序的比较。</li>
<li>重写compare(Object o1,Object o2)方法，比较o1和o2的大小：<ul>
<li>如果方法返回正整数，则表示o1大于o2</li>
<li>如果方法返回0，则表示o1等于o2</li>
<li>如果方法返回负整数，则表示o1小于o2</li>
</ul>
</li>
<li>可以将 Comparator 传递给 sort 方法（如 Collections.sort 或 Arrays.sort），从而允许在排序顺序上实现精确控制。</li>
</ul>
<p><strong>代码演示：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">    Goods[] arr = <span class="keyword">new</span> <span class="title class_">Goods</span>[<span class="number">6</span>];</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;l罗技&quot;</span>,<span class="number">299</span>);</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;l雷蛇&quot;</span>,<span class="number">399</span>);</span><br><span class="line">    arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;x小米&quot;</span>,<span class="number">99</span>);</span><br><span class="line">    arr[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;d戴尔&quot;</span>,<span class="number">169</span>);</span><br><span class="line">    arr[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;l联想&quot;</span>,<span class="number">99</span>);</span><br><span class="line">    arr[<span class="number">5</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;l雷蛇&quot;</span>,<span class="number">199</span>);</span><br><span class="line"></span><br><span class="line">    Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Goods&gt;() &#123;</span><br><span class="line">        <span class="comment">//商品比较大小的方式：按照商品名称从低到高,再按照商品价格从高到低排序</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Goods o1, Goods o2)</span> &#123;</span><br><span class="line">            <span class="comment">//名字一样，比较价格</span></span><br><span class="line">            <span class="keyword">if</span> (o1.getName().equals(o2.getName()))&#123;</span><br><span class="line">                <span class="keyword">return</span> -Double.compare(o1.getPrice(),o2.getPrice());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不得不说，<strong>康师傅yyds！</strong></p>
]]></content>
      <categories>
        <category>Java知识点</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 104 二叉树的最大深度</title>
    <url>/2022/04/04/Leecode-104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104. 二叉树的最大深度"></a><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a></h4><p>难度简单1180收藏分享切换为英文接收动态反馈</p>
<p>给定一个二叉树，找出其最大深度。</p>
<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>
<p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p>
<p><strong>示例：</strong><br>给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<p>返回它的最大深度 3 。</p>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h4 id="简单递归"><a href="#简单递归" class="headerlink" title="简单递归"></a>简单递归</h4><ul>
<li>深度优先遍历，DFS</li>
<li>递归出口：当前节点为空</li>
<li>递归条件：当前节点不为空时，返回其左子树和右子树中深度的最大值加1。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//树的最大深度等于左子树或者右子树深度的最大值加一，即加上当前根节点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + Math.max(maxDepth(root.left),maxDepth(root.right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 1035 不相交的线</title>
    <url>/2022/05/04/Leecode-1035-%E4%B8%8D%E7%9B%B8%E4%BA%A4%E7%9A%84%E7%BA%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1035-不相交的线"><a href="#1035-不相交的线" class="headerlink" title="1035. 不相交的线"></a><a href="https://leetcode-cn.com/problems/uncrossed-lines/">1035. 不相交的线</a></h4><p>在两条独立的水平线上按给定的顺序写下 <code>nums1</code> 和 <code>nums2</code> 中的整数。</p>
<p>现在，可以绘制一些连接两个数字 <code>nums1[i]</code> 和 <code>nums2[j]</code> 的直线，这些直线需要同时满足满足：</p>
<ul>
<li><code>nums1[i] == nums2[j]</code></li>
<li>且绘制的直线不与任何其他连线（非水平线）相交。</li>
</ul>
<p>请注意，连线即使在端点也不能相交：每个数字只能属于一条连线。</p>
<p>以这种方法绘制线条，并返回可以绘制的最大连线数。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/04/26/142.png" alt="img" loading="lazy"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,4,2], nums2 = [1,2,4]</span><br><span class="line">输出：2</span><br><span class="line">解释：可以画出两条不交叉的线，如上图所示。 </span><br><span class="line">但无法画出第三条不相交的直线，因为从 nums1[1]=4 到 nums2[2]=4 的直线将与从 nums1[2]=2 到 nums2[1]=2 的直线相交。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums1.length, nums2.length &lt;= 500</code></li>
<li><code>1 &lt;= nums1[i], nums2[j] &lt;= 2000</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p><strong>动态规划：</strong></p>
<p>最长公共子序列变形题</p>
<p>定义<code>dp[i][j]</code>表示nums1的前i个元素和nums2的前j个元素所能绘制的最大连接数。</p>
<p>从后往前看，首先判断nums1[i]和nums2[j]是否相等：</p>
<ul>
<li>如果相等，则证明当前两元素能够连成一条线，则nums1和nums2的前i-1个元素所能绘制的最大连接数加1就是所有元素的最大连接数，即<code>dp[i][j] = dp[i-1][j-1] + 1</code>。</li>
<li>如果不相等，则证明当前两元素不能够连成一条线，则最大连接数为nums1去掉一个元素或者nums2去掉一个一个元素和另一个数组所能绘制的最大连接数，即<code>dp[i][j] = max(dp[i-1][j],dp[i][j-1])</code> 。</li>
</ul>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxUncrossedLines</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums2.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span> || nums1 == <span class="literal">null</span> || n == <span class="number">0</span> || nums2 == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n + <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums1[i - <span class="number">1</span>] == nums2[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(MN)，需要遍历两个字符串。</li>
<li>空间复杂度：O(MN)，需要使用到一个二维数组。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 102 二叉树的层序遍历</title>
    <url>/2022/04/03/Leecode-102-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></h4><p>给你二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>层序遍历</strong> 。 （即逐层地，从左到右访问所有节点）。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [3,9,20,null,null,15,7]</span><br><span class="line">输出：[[3],[9,20],[15,7]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1]</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点数目在范围 <code>[0, 2000]</code> 内</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结果数组</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用队列来辅助遍历</span></span><br><span class="line">    Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根节点不为空，入队</span></span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        que.offer(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列不为空时开始循环</span></span><br><span class="line">    <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//level用于存储每层节点的值</span></span><br><span class="line">        ArrayList&lt;Integer&gt; level = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> que.size();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//当前层的元素全部出队并存入当前层的集合中</span></span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">            level.add(node.val);</span><br><span class="line">            <span class="comment">//当前节点的左孩子入队</span></span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                que.offer(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当前节点的右孩子入队</span></span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                que.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            len--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历完一层就存入一层</span></span><br><span class="line">        result.add(level);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回结果数组</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：每个点进队出队各一次，故渐进时间复杂度为 O(n)。</li>
<li>空间复杂度：队列中元素的个数不超过 n 个，故渐进空间复杂度为 O(n)。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 110 平衡二叉树</title>
    <url>/2022/04/12/Leecode-110-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110. 平衡二叉树"></a><a href="https://leetcode-cn.com/problems/balanced-binary-tree/">110. 平衡二叉树</a></h4><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p>
<p>本题中，一棵高度平衡二叉树定义为：</p>
<blockquote>
<p>一个二叉树<em>每个节点</em> 的左右两个子树的高度差的绝对值不超过 1 。</p>
</blockquote>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [3,9,20,null,null,15,7]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2,2,3,3,null,null,4,4]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中的节点数在范围 <code>[0, 5000]</code> 内</li>
<li><code>-104 &lt;= Node.val &lt;= 104</code></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p><code>求深度适合用前序遍历，而求高度适合用后序遍历。</code></p>
<p>此题求高度，使用后序遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getHeight(root) != -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-1表示已经不是平衡二叉树了，否则返回值是以该节点为根节点的树的高度</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//左</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">leftHeight</span> <span class="operator">=</span> getHeight(root.left);</span><br><span class="line">    <span class="keyword">if</span> (leftHeight == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//右</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">rightHeight</span> <span class="operator">=</span> getHeight(root.right);</span><br><span class="line">    <span class="keyword">if</span> (rightHeight == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中</span></span><br><span class="line">    <span class="type">int</span> result;</span><br><span class="line">    <span class="comment">//左右子树高度差大于1，则不是平衡二叉树</span></span><br><span class="line">    <span class="keyword">if</span> (Math.abs(leftHeight - rightHeight) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        result = -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = Math.max(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)。N为二叉树的节点个数。自底向上递归，每个节点的计算高度和判断是否平衡都只需要处理一次，最坏情况下需要遍历二叉树中的所有节点。</li>
<li>空间复杂度：O(N)。空间复杂度主要取决于递归调用的层数，递归调用的层数不会超过n。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 111 二叉树的最小深度</title>
    <url>/2022/04/06/Leecode-111-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111. 二叉树的最小深度"></a><a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/">111. 二叉树的最小深度</a></h4><p>给定一个二叉树，找出其最小深度。</p>
<p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p>
<p><strong>说明：</strong>叶子节点是指没有子节点的节点。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [3,9,20,null,null,15,7]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [2,null,3,null,4,null,5,null,6]</span><br><span class="line">输出：5</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点数的范围在 <code>[0, 105]</code> 内</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h4 id="递归："><a href="#递归：" class="headerlink" title="递归："></a>递归：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//递归出口</span></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//左右子树有为空的情况，返回非空子树的最小深度+1</span></span><br><span class="line">    <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + minDepth(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(root.left != <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + minDepth(root.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//左右子树都不为空时</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + Math.min(minDepth(root.left),minDepth(root.right));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="迭代："><a href="#迭代：" class="headerlink" title="迭代："></a>迭代：</h4><p>使用层序遍历找到第一个叶子结点，就得到了最小深度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="comment">//记录深度，初始为0</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        depth++;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> queue.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            <span class="comment">//找到了第一个叶子结点，即最小深度，直接返回depth</span></span><br><span class="line">            <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> depth;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.offer(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> depth;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 1143 最长公共子序列和</title>
    <url>/2022/05/03/Leecode-1143-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%E5%92%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1143-最长公共子序列"><a href="#1143-最长公共子序列" class="headerlink" title="1143. 最长公共子序列"></a><a href="https://leetcode-cn.com/problems/longest-common-subsequence/">1143. 最长公共子序列</a></h4><p>难度中等958收藏分享切换为英文接收动态反馈</p>
<p>给定两个字符串 <code>text1</code> 和 <code>text2</code>，返回这两个字符串的最长 <strong>公共子序列</strong> 的长度。如果不存在 <strong>公共子序列</strong> ，返回 <code>0</code> 。</p>
<p>一个字符串的 <strong>子序列</strong> 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p>
<ul>
<li>例如，<code>&quot;ace&quot;</code> 是 <code>&quot;abcde&quot;</code> 的子序列，但 <code>&quot;aec&quot;</code> 不是 <code>&quot;abcde&quot;</code> 的子序列。</li>
</ul>
<p>两个字符串的 <strong>公共子序列</strong> 是这两个字符串所共同拥有的子序列。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text1 = &quot;abcde&quot;, text2 = &quot;ace&quot; </span><br><span class="line">输出：3  </span><br><span class="line">解释：最长公共子序列是 &quot;ace&quot; ，它的长度为 3 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text1 = &quot;abc&quot;, text2 = &quot;abc&quot;</span><br><span class="line">输出：3</span><br><span class="line">解释：最长公共子序列是 &quot;abc&quot; ，它的长度为 3 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text1 = &quot;abc&quot;, text2 = &quot;def&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：两个字符串没有公共子序列，返回 0 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= text1.length, text2.length &lt;= 1000</code></li>
<li><code>text1</code> 和 <code>text2</code> 仅由小写英文字符组成。</li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><h5 id="动态规划："><a href="#动态规划：" class="headerlink" title="动态规划："></a>动态规划：</h5><ul>
<li><p>状态定义：</p>
<ul>
<li><code>dp[i][j]</code>表示字符串<code>text1</code>的<code>[1,i]</code>区间 和<code>text2</code>的<code>[1,j]</code>区间的最长公共子序列长度。</li>
</ul>
</li>
<li><p>状态转移方程：</p>
<ul>
<li><p><code>text1[i] == text2[j]</code>表示两字符串最后一个字符相等，所以公共子序列长度为两字符串的前<code>i-1</code>个字符和前<code>j-1</code>的最长序列和加 1，即<code>dp[i][j] = dp[i-1][j-1] + 1</code></p>
</li>
<li><p><code>text1[i] != text2[j]</code>表示两个字符串最后一个字符不相同，则此时的公共子序列长度要继承字符串<code>text1</code>的前<code>i-1</code>个字符与字符串<code>text2</code>的最长序列和   和   字符串<code>text1</code>与字符串<code>text2</code>前j-1的最长序列和中的最大值，即<code>dp[i][j] = max(dp[i-1][j] , dp[i][j-1])</code></p>
</li>
</ul>
</li>
<li><p>状态初始化：</p>
<ul>
<li><pre><code>  即当`i= 0 `或者`j = 0`时，表示两字符串中有一个为空字符串，有空字符串则最长公共子序列和一定为0，则`dp[i][j] = 0`
</code></pre>
</li>
</ul>
</li>
<li><p>遍历方向：</p>
<ul>
<li><pre><code>  由于由于` dp[i][j]`的值是依赖于 `dp[i - 1][j - 1]` , `dp[i - 1][j], dp[i][j - 1]`这三个值的，所以i和j的遍历顺序是需要从小到大的。
</code></pre>
</li>
</ul>
</li>
<li><p>最终遍历结果：</p>
<ul>
<li><pre><code>  因为`dp[i][j]`表示字符串`text1`的`[1,i]`区间 和`text2的[1,j]`区间的最长公共子序列长度。
</code></pre>
</li>
<li><pre><code>  所以当i = m，j = n时得到的`dp[m][n]`即为两字符串的最长公共子序列和。
</code></pre>
</li>
</ul>
</li>
</ul>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> text1.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text2.length();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//辅助dp数组</span></span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//dp[i][j]表示字符串text1的[1,i]区间 和text2的[1,j]区间的最长公共子序列长度。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">if</span> (text1.charAt(i - <span class="number">1</span>) == text2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(MN)，需要遍历两个字符串。</li>
<li>空间复杂度：O(MN)，需要使用到一个二维数组。</li>
</ul>
<p>参考<a href="https://leetcode-cn.com/problems/longest-common-subsequence/solution/zui-chang-gong-gong-zi-xu-lie-tu-jie-dpz-6mvz/">林小鹿</a>，<a href="https://leetcode-cn.com/problems/longest-common-subsequence/solution/fu-xue-ming-zhu-er-wei-dong-tai-gui-hua-r5ez6/">负雪明烛</a>两位大佬。</p>
<p>动态规划太难了TMD</p>
<p><img src="/pic/111.png" alt="111" loading="lazy"></p>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 118 杨辉三角</title>
    <url>/2022/03/28/Leecode-118-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="118-杨辉三角"><a href="#118-杨辉三角" class="headerlink" title="118. 杨辉三角"></a><a href="https://leetcode-cn.com/problems/pascals-triangle/">118. 杨辉三角</a></h4><p>给定一个非负整数 <em><code>numRows</code>，</em>生成「杨辉三角」的前 <em><code>numRows</code></em> 行。</p>
<p>在「杨辉三角」中，每个数是它左上方和右上方的数的和。</p>
 

<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: numRows = 5</span><br><span class="line">输出: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: numRows = 1</span><br><span class="line">输出: [[1]]</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li><code>1 &lt;= numRows &lt;= 30</code></li>
</ul>
<h3 id="题解：简单动态规划"><a href="#题解：简单动态规划" class="headerlink" title="题解：简单动态规划"></a>题解：简单动态规划</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">generate</span><span class="params">(<span class="type">int</span> numRows)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用来存储每一行的数组</span></span><br><span class="line">    List&lt;Integer&gt; list = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line"></span><br><span class="line">        list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//注意这里的j的上限是i，而不是numRows</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="comment">//边界条件，第一列和对角线上的元素都是1</span></span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span> || i == j) &#123;</span><br><span class="line">                list.add(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//递推公式</span></span><br><span class="line">                list.add(res.get(i - <span class="number">1</span>).get(j - <span class="number">1</span>) + res.get(i - <span class="number">1</span>).get(j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(numRows^2)</li>
<li>空间复杂度：O(1)。不考虑返回值空间的占用</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 112 路径总和</title>
    <url>/2022/04/05/Leecode-112-%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112. 路径总和"></a><a href="https://leetcode-cn.com/problems/path-sum/">112. 路径总和</a></h4><p>给你二叉树的根节点 <code>root</code> 和一个表示目标和的整数 <code>targetSum</code> 。判断该树中是否存在 <strong>根节点到叶子节点</strong> 的路径，这条路径上所有节点值相加等于目标和 <code>targetSum</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p><strong>叶子节点</strong> 是指没有子节点的节点。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22</span><br><span class="line">输出：true</span><br><span class="line">解释：等于目标和的根节点到叶节点路径如上图所示。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2,3], targetSum = 5</span><br><span class="line">输出：false</span><br><span class="line">解释：树中存在两条根节点到叶子节点的路径：</span><br><span class="line">(1 --&gt; 2): 和为 3</span><br><span class="line">(1 --&gt; 3): 和为 4</span><br><span class="line">不存在 sum = 5 的根节点到叶子节点的路径。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [], targetSum = 0</span><br><span class="line">输出：false</span><br><span class="line">解释：由于树是空的，所以不存在根节点到叶子节点的路径。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点的数目在范围 <code>[0, 5000]</code> 内</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
<li><code>-1000 &lt;= targetSum &lt;= 1000</code></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p><strong>简单递归</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">    <span class="comment">//要注意根节点就是叶子结点的情况</span></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归出口</span></span><br><span class="line">    <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> root.val == targetSum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从根节点找和目标值相等的数值，等同于从子树中找和目标值减去根节点数值</span></span><br><span class="line">    <span class="keyword">return</span> hasPathSum(root.left,targetSum - root.val) || hasPathSum(root.right,targetSum - root.val);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 121 买卖股票的最佳时机</title>
    <url>/2022/03/27/Leecode-121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">121. 买卖股票的最佳时机</a></h4><p>给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。</p>
<p>你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p>
<p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：[7,1,5,3,6,4]</span><br><span class="line">输出：5</span><br><span class="line">解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</span><br><span class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：prices = [7,6,4,3,1]</span><br><span class="line">输出：0</span><br><span class="line">解释：在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= prices.length &lt;= 105</code></li>
<li><code>0 &lt;= prices[i] &lt;= 104</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//买入的最低价格</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">minprice</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="comment">//当前最大利润</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxprofit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//循环遍历数组</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 寻找最大利润的条件：</span></span><br><span class="line"><span class="comment">    *       1.如果当前值小于最低价格，就将当前值设置为最低价格，即从此刻买入</span></span><br><span class="line"><span class="comment">    *       2.若当前值不小于最低价格，则与最大利润进行对比，判断今天是否为最佳卖出时间</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices[i] &lt; minprice) &#123;</span><br><span class="line">            minprice = prices[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            maxprofit = Math.max(maxprofit,prices[i] - minprice);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxprofit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，只遍历了一次数组</li>
<li>空间复杂度：O(1)，只用到了2个整型变量空间</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 1218 最长定差子序列</title>
    <url>/2022/05/05/Leecode-1218-%E6%9C%80%E9%95%BF%E5%AE%9A%E5%B7%AE%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1218-最长定差子序列"><a href="#1218-最长定差子序列" class="headerlink" title="1218. 最长定差子序列"></a><a href="https://leetcode-cn.com/problems/longest-arithmetic-subsequence-of-given-difference/">1218. 最长定差子序列</a></h4><p>给你一个整数数组 <code>arr</code> 和一个整数 <code>difference</code>，请你找出并返回 <code>arr</code> 中最长等差子序列的长度，该子序列中相邻元素之间的差等于 <code>difference</code> 。</p>
<p><strong>子序列</strong> 是指在不改变其余元素顺序的情况下，通过删除一些元素或不删除任何元素而从 <code>arr</code> 派生出来的序列。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [1,2,3,4], difference = 1</span><br><span class="line">输出：4</span><br><span class="line">解释：最长的等差子序列是 [1,2,3,4]。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [1,3,5,7], difference = 1</span><br><span class="line">输出：1</span><br><span class="line">解释：最长的等差子序列是任意单个元素。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [1,5,7,8,5,3,4,2,1], difference = -2</span><br><span class="line">输出：4</span><br><span class="line">解释：最长的等差子序列是 [7,5,3,1]。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= arr.length &lt;= 105</code></li>
<li><code>-104 &lt;= arr[i], difference &lt;= 104</code></li>
</ul>
<h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><h5 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a><strong>动态规划</strong></h5><p>当前数字<code>num</code>所能构成的最长定差子序列的长度由<code>num - difference</code>所能构成的最长定差子序列长度决定。</p>
<p>使用<code>dp[i]</code>来表示以第<code>i</code>个元素为结尾的最长等差子序列的长度，可以通过等差公式:<code>arr[i] - diffience = arr[j]</code>，找到左侧的前一个以<code>arr[j]</code>为结尾的最长定差子序列，将<code>arr[i]</code>加到该子序列中，就可以根据<code>dp[j]</code>递推出<code>dp[i]</code>。</p>
<p><strong>状态转移方程为：</strong></p>
<p>​						<code>dp[i] = dp[i- difference] + 1</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestSubsequence</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> difference)</span> &#123;</span><br><span class="line">    <span class="comment">//初始化结果为1，因为每个数字都可以单独作为一个等差子序列</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//辅助dp哈希表,键为当前元素，值为最长子序列长度</span></span><br><span class="line">    Map&lt;Integer, Integer&gt; dp = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从头遍历数组,遇到一个数 num，判断num - difference在不在数组里面</span></span><br><span class="line">    <span class="comment">// 也就是看看能不能形成以num为结尾的等差数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">        <span class="comment">//如果dp数组中存在num - difference，就加一存入以当前元素为键的值中,即dp[i] = dp[i - difference ] + 1</span></span><br><span class="line">        <span class="comment">//如果dp数组中不存在num - difference，就初始值为一存入以当前元素为键的值中,即当前元素为一个单独的定差子序列</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> dp.getOrDefault(num - difference, <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//当前位置的最长子序列长度</span></span><br><span class="line">        dp.put(num, val);</span><br><span class="line">        <span class="comment">//记录下来以num结尾的等差数组的长度</span></span><br><span class="line">        ans = Math.max(ans, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，需要对数组进行遍历。</li>
<li>空间复杂度：O(N)，使用到了元素个数为N的哈希表。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 125 验证回文串</title>
    <url>/2022/04/30/Leecode-125-%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="125-验证回文串"><a href="#125-验证回文串" class="headerlink" title="125. 验证回文串"></a><a href="https://leetcode-cn.com/problems/valid-palindrome/">125. 验证回文串</a></h4><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p>
<p><strong>说明：</strong>本题中，我们将空字符串定义为有效的回文串。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释：&quot;amanaplanacanalpanama&quot; 是回文串</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;race a car&quot;</span><br><span class="line">输出: false</span><br><span class="line">解释：&quot;raceacar&quot; 不是回文串</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 2 * 105</code></li>
<li>字符串 <code>s</code> 由 ASCII 字符组成</li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><h5 id="解法1：反转"><a href="#解法1：反转" class="headerlink" title="解法1：反转"></a>解法1：反转</h5><p>将字符串中的有效字符构建为一个新的字符串，将其反转，与原有字符串进行比较，若相等，则为回文串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用StringBuffer是为了方便调用API</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sgood</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> s.length();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">    <span class="comment">//Character.isLetterOrDigit(c)表示如果字符是字母或数字，则返回布尔值为true，否则返回为false</span></span><br><span class="line">    <span class="keyword">if</span> (Character.isLetterOrDigit(c)) &#123;</span><br><span class="line">        <span class="comment">//Character.toLowerCase(c)表示把字符转换为小写</span></span><br><span class="line">        sgood.append(Character.toLowerCase(c));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sgoodRev</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(sgood).reverse();</span><br><span class="line"><span class="comment">//验证字符串反转完是否和原字符串相同</span></span><br><span class="line"><span class="keyword">return</span> sgoodRev.toString().equals(sgood.toString());</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(N)</li>
</ul>
<h5 id="解法2：双指针"><a href="#解法2：双指针" class="headerlink" title="解法2：双指针"></a>解法2：双指针</h5><p>和解法一一样，首先将字符串中的有效字符取出，然后使用双指针进行前后比较向中间移动，直到两指针相遇。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="comment">//空串也是回文串</span></span><br><span class="line">    <span class="keyword">if</span>(s.length() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用StringBuffer来构建出只含有字母和数字的字符串</span></span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sgood</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="comment">//如果当前字符是字母或者数字，就将其追加到StringBuffer上</span></span><br><span class="line">        <span class="keyword">if</span>(Character.isLetterOrDigit(c))&#123;</span><br><span class="line">            <span class="comment">//因为题目说了忽略大小写，我们就索性直接全部转为小写</span></span><br><span class="line">            sgood.append(Character.toLowerCase(c));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//到此，新字符串sgood构建完成，但是这个的sgood和原来的s的长度可能是不相同的，要注意</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> sgood.length();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用双指针判断是否回文</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = length -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="comment">//两指针指向的字符不相同，则证明不是回文串，直接返回false</span></span><br><span class="line">        <span class="keyword">if</span>(sgood.charAt(l) != sgood.charAt(r))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则，移动双指针</span></span><br><span class="line">        l++;</span><br><span class="line">        r--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(N)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>回文</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 1305 两颗二叉搜索树中的所有元素</title>
    <url>/2022/05/01/Leecode-1305-%E4%B8%A4%E9%A2%97%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1305-两棵二叉搜索树中的所有元素"><a href="#1305-两棵二叉搜索树中的所有元素" class="headerlink" title="1305. 两棵二叉搜索树中的所有元素"></a><a href="https://leetcode-cn.com/problems/all-elements-in-two-binary-search-trees/">1305. 两棵二叉搜索树中的所有元素</a></h4><p>给你 <code>root1</code> 和 <code>root2</code> 这两棵二叉搜索树。请你返回一个列表，其中包含 <strong>两棵树</strong> 中的所有整数并按 <strong>升序</strong> 排序。.</p>
<p><strong>示例 1：</strong></p>
<p><img src="/Leecode-1305-%E4%B8%A4%E9%A2%97%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0/q2-e1.png" alt="img" loading="lazy"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root1 = [2,1,4], root2 = [1,0,3]</span><br><span class="line">输出：[0,1,1,2,3,4]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="/Leecode-1305-%E4%B8%A4%E9%A2%97%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0/q2-e5-.png" alt="img" loading="lazy"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root1 = [1,null,8], root2 = [8,1]</span><br><span class="line">输出：[1,1,8,8]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>每棵树的节点数在 <code>[0, 5000]</code> 范围内</li>
<li><code>-105 &lt;= Node.val &lt;= 105</code></li>
</ul>
<h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p>因为是二叉搜索树，性质为中序遍历后结果为有序，只需得到两棵树的中序遍历集合然后合并进行排序即可。</p>
<p><code>注：排序最好自己写，也可偷懒调用现成的api。</code></p>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getAllElements</span><span class="params">(TreeNode root1, TreeNode root2)</span> &#123;</span><br><span class="line">    <span class="comment">//结果数组</span></span><br><span class="line">    ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//中序遍历两棵树</span></span><br><span class="line">    inorderTraversal(root1,res);</span><br><span class="line">    inorderTraversal(root2,res);</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    Collections.sort(res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root,List res)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inorderTraversal(root.left,res);</span><br><span class="line">    res.add(root.val);</span><br><span class="line">    inorderTraversal(root.right,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(M + N)，M和N分别代表两颗搜索树的节点个数。</li>
<li>空间复杂度：O(M + N)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 136 只出现一次的数字</title>
    <url>/2022/04/08/Leecode-136-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="36-只出现一次的数字"><a href="#36-只出现一次的数字" class="headerlink" title="36. 只出现一次的数字"></a><a href="https://leetcode-cn.com/problems/single-number/">36. 只出现一次的数字</a></h4><p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p><strong>说明：</strong></p>
<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [2,2,1]</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [4,1,2,1,2]</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure>

<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="位运算："><a href="#位运算：" class="headerlink" title="位运算："></a>位运算：</h3><p>异或运算的三个性质：</p>
<ol>
<li>任何数和0做异或运算，结果仍然是原来的数字。</li>
<li>任何数和其自身做异或运算，结果是0。</li>
<li>异或运算满足交换律和结合律，即a⊕b⊕a&#x3D;b⊕a⊕a&#x3D;b⊕(a⊕a)&#x3D;b⊕0&#x3D;b。</li>
</ol>
<p>所以只需要将数组中的全部元素进行一次异或操作，最后得到的就是只出现一次的数字。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">        res ^=nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(1)</li>
</ul>
<p>如果不规定空间复杂度，也可以使用哈希表对该问题进行解决。</p>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 141 环形链表</title>
    <url>/2022/03/31/Leecode-141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle/">141. 环形链表</a></h4><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p>
<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<strong>注意：<code>pos</code> 不作为参数进行传递</strong> 。仅仅是为了标识链表的实际情况。</p>
<p><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p>
<p><strong>示例 1：</strong></p>
 

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
 

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
 

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：false</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表中节点的数目范围是 <code>[0, 104]</code></li>
<li><code>-105 &lt;= Node.val &lt;= 105</code></li>
<li><code>pos</code> 为 <code>-1</code> 或者链表中的一个 <strong>有效索引</strong> 。</li>
</ul>
<p><strong>进阶：</strong>你能用 <code>O(1)</code>（即，常量）内存解决此问题吗？</p>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="解法1：集合"><a href="#解法1：集合" class="headerlink" title="解法1：集合"></a>解法1：集合</h3><p>使用集合来存储已经遍历过的节点，如果某一节点已经存在于集合中，则证明链表中存在环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="comment">//存储已经遍历过的节点集合</span></span><br><span class="line">    HashSet&lt;ListNode&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//当前节点在集合中出现过</span></span><br><span class="line">        <span class="keyword">if</span> (!set.add(cur))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(N)</li>
</ul>
<h3 id="解法2：快慢指针"><a href="#解法2：快慢指针" class="headerlink" title="解法2：快慢指针"></a>解法2：快慢指针</h3><p>使用一个快指针每次移动两步，慢指针每次移动一步，如果链表中有环，则快指针会先一步进入环中，等待慢指针同样进入环，但是由于快指针的移动速度比慢指针块，所以快慢指针一定会在环中的某个节点相遇，即实现了快指针对慢指针的<code>套圈</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//快慢指针</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">    dummy.next = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里快慢指针所指向的节点不能相同，否则不会进入循环</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dummy;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">        <span class="comment">//到达尾节点</span></span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="literal">null</span> || fast.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新指针</span></span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(1)，只用到了两个指针</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 144 二叉树的前序遍历</title>
    <url>/2022/04/03/Leecode-144-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="144-二叉树的前序遍历"><a href="#144-二叉树的前序遍历" class="headerlink" title="144. 二叉树的前序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">144. 二叉树的前序遍历</a></h4><p>给你二叉树的根节点 <code>root</code> ，返回它节点值的 <strong>前序</strong> 遍历。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,null,2,3]</span><br><span class="line">输出：[1,2,3]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2]</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure>

<p><strong>示例 5：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,null,2]</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点数目在范围 <code>[0, 100]</code> 内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p><strong>进阶：</strong>递归算法很简单，你可以通过迭代算法完成吗？</p>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="递归法："><a href="#递归法：" class="headerlink" title="递归法："></a>递归法：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//list用于保存前序遍历的节点序列</span></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    preOrder(list,root);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//确定递归的传入参数为：存储节点数据的集合，和当前根节点,返回值为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(List&lt;Integer&gt; list,TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根</span></span><br><span class="line">    list.add(root.val);</span><br><span class="line">    <span class="comment">//左</span></span><br><span class="line">    preOrder(list,root.left);</span><br><span class="line">    <span class="comment">//右</span></span><br><span class="line">    preOrder(list,root.right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="迭代法："><a href="#迭代法：" class="headerlink" title="迭代法："></a>迭代法：</h3><p>借助栈这个数据结构，每次先将根节点入栈，处理完根节点，然后将其右孩子入栈，再将左孩子入栈，这样的出栈序列才是根左右</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//结果数组</span></span><br><span class="line">    ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根节点入栈</span></span><br><span class="line">    stack.push(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//弹出栈顶元素并存入结果数组</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        res.add(node.val);</span><br><span class="line">        <span class="comment">//右节点不为空，入栈</span></span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左节点不为空，入栈</span></span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 145 二叉树的后序遍历</title>
    <url>/2022/04/03/Leecode-145-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="145-二叉树的后序遍历"><a href="#145-二叉树的后序遍历" class="headerlink" title="145. 二叉树的后序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/">145. 二叉树的后序遍历</a></h4><p>给你一棵二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>后序遍历</strong> 。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,null,2,3]</span><br><span class="line">输出：[3,2,1]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点的数目在范围 <code>[0, 100]</code> 内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p><strong>进阶：</strong>递归算法很简单，你可以通过迭代算法完成吗</p>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="递归写法："><a href="#递归写法：" class="headerlink" title="递归写法："></a>递归写法：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    postorder(result,root);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">postorder</span><span class="params">(List&lt;Integer&gt; result,TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    postorder(result,root.left);</span><br><span class="line">    postorder(result,root.right);</span><br><span class="line">    result.add(root.val);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="迭代写法："><a href="#迭代写法：" class="headerlink" title="迭代写法："></a>迭代写法：</h3><p>因为后序遍历的顺序是左右根，所以只要保证出栈顺序为根右左，然后进行一次反转操作即可。</p>
<p>倒推回来，出栈顺序为根右左，所以入栈顺序即为根左右。</p>
<p>至于为什么要把根节点固定操作，因为这样可以保证根节点的访问顺序和操作顺序保持一致，是在前序遍历的基础上做了修改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//根节点入栈</span></span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="comment">//入栈顺序：根--左--右</span></span><br><span class="line">    <span class="comment">//出栈顺序：根--右--左</span></span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line"></span><br><span class="line">        result.add(node.val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所需结果序列：左--右--根</span></span><br><span class="line">    Collections.reverse(result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 169 多数元素</title>
    <url>/2022/04/08/Leecode-169-%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="169. 多数元素"></a><a href="https://leetcode-cn.com/problems/majority-element/">169. 多数元素</a></h4><p>给定一个大小为 <em>n</em> 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p>
<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：[3,2,3]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：[2,2,1,1,1,2,2]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>

<p><strong>进阶：</strong></p>
<ul>
<li>尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题。</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="1-哈希表法"><a href="#1-哈希表法" class="headerlink" title="1.哈希表法"></a>1.哈希表法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">majorityElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">//使用一个哈希表，数组元素做为键，出现次数作为值</span></span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        map.put(nums[i], map.getOrDefault(nums[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Integer key : map.keySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.get(key) &gt; len / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(1)</li>
</ul>
<h3 id="2-排序"><a href="#2-排序" class="headerlink" title="2. 排序"></a>2. 排序</h3><p><strong>思路：</strong>将数组中的元素按照递增或者递减的顺序排序，那么下标为<code>n/2</code>的元素一定是众数，即“多数元素”。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">majorityElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 例子：</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 原始数组：1 2 1 1 3</span></span><br><span class="line"><span class="comment">     * 排序数组：1 1 1 2 3</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 原始数组：2 2 1 2 3</span></span><br><span class="line"><span class="comment">     * 排序数组：1 2 2 2 3</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 原始数组：3 2 1 3 3</span></span><br><span class="line"><span class="comment">     * 排序数组：1 2 3 3 3</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">return</span> nums[n / <span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(nlogN)，主要是排序花费的时间。</li>
<li>空间复杂度：O(logN)，数组排序的空间复杂度需要使用O(logN)的栈空间。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 15 三数之和</title>
    <url>/2022/04/08/Leecode-15-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode-cn.com/problems/3sum/">15. 三数之和</a></h4><p>给你一个包含 <code>n</code> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <em>a，b，c ，</em>使得 <em>a + b + c &#x3D;</em> 0 ？请你找出所有和为 <code>0</code> 且不重复的三元组。</p>
<p><strong>注意：</strong>答案中不可以包含重复的三元组。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= nums.length &lt;= 3000</code></li>
<li><code>-105 &lt;= nums[i] &lt;= 105</code></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>排序 + 双指针</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 排序 + 双指针</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果数组为空或者数组长度小于3，直接不满足条件，返回null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果排序完之后数组的第一个元素（即最小元素）大于0，则数组中不可能出现三数之和等于0的情况，返回null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 固定一个元素nums[i]，其余两个元素使用两个指针left和right进行标记</span></span><br><span class="line"><span class="comment">     * 分别为nums[i + 1] 和 nums[n - 1]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果三数之和等于0，将他们存入三元组，并进行去重操作</span></span><br><span class="line"><span class="comment">     * 如果三数之和小于0，则将右指针左移，继续判断</span></span><br><span class="line"><span class="comment">     * 如果三数之和大于0，则将左指针右移，继续判断</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="comment">//结果数组</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//数组长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果数组为空或者数组长度小于3，直接不满足条件，返回null</span></span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || n &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果排序完之后数组的第一个元素（即最小元素）大于0，则数组中不可能出现三数之和等于0的情况，返回null</span></span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//去重，当起始值等于前一个元素</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i -<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i] + nums[left] + nums[right];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</span><br><span class="line">                ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                list.add(nums[i]);</span><br><span class="line">                list.add(nums[left]);</span><br><span class="line">                list.add(nums[right]);</span><br><span class="line">                result.add(list);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//去重操作</span></span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度:O(N^2)</li>
<li>空间复杂度:O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 1823 找出游戏的获胜者</title>
    <url>/2022/05/04/Leecode-1823-%E6%89%BE%E5%87%BA%E6%B8%B8%E6%88%8F%E7%9A%84%E8%8E%B7%E8%83%9C%E8%80%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1823-找出游戏的获胜者"><a href="#1823-找出游戏的获胜者" class="headerlink" title="1823. 找出游戏的获胜者"></a><a href="https://leetcode-cn.com/problems/find-the-winner-of-the-circular-game/">1823. 找出游戏的获胜者</a></h4><p>共有 <code>n</code> 名小伙伴一起做游戏。小伙伴们围成一圈，按 <strong>顺时针顺序</strong> 从 <code>1</code> 到 <code>n</code> 编号。确切地说，从第 <code>i</code> 名小伙伴顺时针移动一位会到达第 <code>(i+1)</code> 名小伙伴的位置，其中 <code>1 &lt;= i &lt; n</code> ，从第 <code>n</code> 名小伙伴顺时针移动一位会回到第 <code>1</code> 名小伙伴的位置。</p>
<p>游戏遵循如下规则：</p>
<ol>
<li>从第 <code>1</code> 名小伙伴所在位置 <strong>开始</strong> 。</li>
<li>沿着顺时针方向数 <code>k</code> 名小伙伴，计数时需要 <strong>包含</strong> 起始时的那位小伙伴。逐个绕圈进行计数，一些小伙伴可能会被数过不止一次。</li>
<li>你数到的最后一名小伙伴需要离开圈子，并视作输掉游戏。</li>
<li>如果圈子中仍然有不止一名小伙伴，从刚刚输掉的小伙伴的 <strong>顺时针下一位</strong> 小伙伴 <strong>开始</strong>，回到步骤 <code>2</code> 继续执行。</li>
<li>否则，圈子中最后一名小伙伴赢得游戏。</li>
</ol>
<p>给你参与游戏的小伙伴总数 <code>n</code> ，和一个整数 <code>k</code> ，返回游戏的获胜者。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/25/ic234-q2-ex11.png" alt="img" loading="lazy"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 5, k = 2</span><br><span class="line">输出：3</span><br><span class="line">解释：游戏运行步骤如下：</span><br><span class="line">1) 从小伙伴 1 开始。</span><br><span class="line">2) 顺时针数 2 名小伙伴，也就是小伙伴 1 和 2 。</span><br><span class="line">3) 小伙伴 2 离开圈子。下一次从小伙伴 3 开始。</span><br><span class="line">4) 顺时针数 2 名小伙伴，也就是小伙伴 3 和 4 。</span><br><span class="line">5) 小伙伴 4 离开圈子。下一次从小伙伴 5 开始。</span><br><span class="line">6) 顺时针数 2 名小伙伴，也就是小伙伴 5 和 1 。</span><br><span class="line">7) 小伙伴 1 离开圈子。下一次从小伙伴 3 开始。</span><br><span class="line">8) 顺时针数 2 名小伙伴，也就是小伙伴 3 和 5 。</span><br><span class="line">9) 小伙伴 5 离开圈子。只剩下小伙伴 3 。所以小伙伴 3 是游戏的获胜者。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 6, k = 5</span><br><span class="line">输出：1</span><br><span class="line">解释：小伙伴离开圈子的顺序：5、4、6、2、3 。小伙伴 1 是游戏的获胜者。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= k &lt;= n &lt;= 500</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p><strong>使用队列对题目进行模拟：</strong></p>
<ul>
<li>将所有元素存入队列</li>
<li>将前k -1个元素出队后继续加入队尾</li>
<li>将第k个元素出队，表示淘汰了一名小朋友</li>
<li>对k+1个元素作为队首元素继续之前的操作，直到队列只剩下一个元素。</li>
</ul>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findTheWinner</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 使用队列</span></span><br><span class="line"><span class="comment">     * 将元素存入队列中，</span></span><br><span class="line"><span class="comment">     * 将队首元素出队并继续加入对尾，</span></span><br><span class="line"><span class="comment">     * 直到第k个元素，出队后不在加入队尾，直接出队</span></span><br><span class="line"><span class="comment">     * 第k+1个元素作为队首元素继续执行上述操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    ArrayDeque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//将元素存入队列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        deque.offer(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (deque.size() != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//前k-1个元素加入队尾</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            deque.addLast(deque.poll());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第k个元素弹出</span></span><br><span class="line">        deque.poll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> deque.peek();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(kN)，每一轮都要取出k个元素，存入k-1个元素，一共重复n-1轮。</li>
<li>空间复杂度：O(N)，使用到了一个长度为N的队列。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 20 有效的括号</title>
    <url>/2022/04/02/Leecode-20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode-cn.com/problems/valid-parentheses/">20. 有效的括号</a></h4><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<ol>
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
</ol>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;()&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;(]&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;([)]&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>示例 5：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;&#123;[]&#125;&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 104</code></li>
<li><code>s</code> 仅由括号 <code>&#39;()[]&#123;&#125;&#39;</code> 组成</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="comment">//如果字符串的长度为奇数，则可以直接返回false</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用哈希表存储括号之间的对应关系</span></span><br><span class="line">    HashMap&lt;Character, Character&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>);</span><br><span class="line">    map.put(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">    map.put(<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;[&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//是左括号，进栈</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsValue(c)) &#123;</span><br><span class="line">            stack.push(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//是右括号，判断栈是否为空，若不为空弹出栈顶元素，比较看是否为对应的左括号</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Stack.peek()和Stack.pop(）的相同点是 获取栈顶的值，</span></span><br><span class="line"><span class="comment">             * 不同点 则是 Stack.peek()只是获取栈顶的值，而Stack.pop()是获取栈顶的值然后删除。*/</span></span><br><span class="line">            <span class="keyword">if</span> (stack.isEmpty() || stack.peek() != map.get(c)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//满足条件，弹出元素</span></span><br><span class="line">            stack.pop();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//存在全是左括号的情况，最终栈为空则返回true，栈中还有元素返回false</span></span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，正确情况下需要遍历整个完整的字符串</li>
<li>空间复杂度：O(N + 6),6代表6种括号。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 198 打家劫舍</title>
    <url>/2022/05/02/Leecode-198-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198. 打家劫舍"></a><a href="https://leetcode-cn.com/problems/house-robber/">198. 打家劫舍</a></h4><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。</p>
<p>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>不触动警报装置的情况下</strong> ，一夜之内能够偷窃到的最高金额。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：[1,2,3,1]</span><br><span class="line">输出：4</span><br><span class="line">解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</span><br><span class="line">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：[2,7,9,3,1]</span><br><span class="line">输出：12</span><br><span class="line">解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。</span><br><span class="line">     偷窃到的最高金额 = 2 + 9 + 1 = 12 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 100</code></li>
<li><code>0 &lt;= nums[i] &lt;= 400</code></li>
</ul>
<h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><h5 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h5><p>首先考虑最简单的情况。</p>
<ul>
<li>只有一间房的情况，只能偷这间房。</li>
<li>只有两间房的情况，盗窃两间房中金额较高的房。</li>
</ul>
<p>然后考虑房间大于两间房的情况：</p>
<ul>
<li>对于第i间房，如果选择偷窃，那么就不能偷窃第i-1间房，偷窃的金额就为前i-2间房偷窃的总金额加上当前房间的金额。</li>
<li>对于第i间房，如果选择不偷窃，那么偷窃的总金额即为前i-1间房偷窃的总金额。</li>
</ul>
<p>在以上两种情况下选取最大值进行偷窃，则可得到状态转移方程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[i] = Math.max(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + nums[i]);</span><br></pre></td></tr></table></figure>

<p>边界条件为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//边界条件</span></span><br><span class="line">dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<p>最终结果为dp[length - 1]，length是数组的长度。</p>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如果选择偷第i家，则证明第i-2家为最优解，加上当前i即可</span></span><br><span class="line"><span class="comment">     * 如果不选择偷第i家，则证明第i-1家为最优解</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 即  dp[i]  = Math.max(dp[i-1],dp[i -2 ] + nums[i])</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 边界条件：</span></span><br><span class="line"><span class="comment">     *       dp[0] = nums[0],只有一间房，只能偷这间房</span></span><br><span class="line"><span class="comment">     *       dp[1] = Math.max(nums[0],nums[1]) 两间房，偷钱多的哪一家</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//辅助dp数组</span></span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//边界条件</span></span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">    dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="comment">//递推公式</span></span><br><span class="line">        dp[i] = Math.max(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，需要遍历数组。</li>
<li>空间复杂度：O(N)，需要一个大小为数组长度的辅助dp数组。</li>
</ul>
<h5 id="空间优化："><a href="#空间优化：" class="headerlink" title="空间优化："></a>空间优化：</h5><p>每间房的最高总金额只和前两件房屋的最高总金额有关，所以可以只用两个值来<strong>时刻存储前两件房屋</strong>的最高金额即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//边界条件</span></span><br><span class="line">    <span class="comment">//记录前nums[i - 1]的最大金额</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//记录前nums[i-2]的最大金额</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">second</span> <span class="operator">=</span> Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="comment">//防止数据丢失</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> second;</span><br><span class="line">        <span class="comment">//状态转移方程</span></span><br><span class="line">        second = Math.max(second, first + nums[i]);</span><br><span class="line">        first = second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> second;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，需要遍历数组。</li>
<li>空间复杂度：O(1)，只使用了两个额外变量来存储前两间房屋的最高金额。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 203 移除链表元素</title>
    <url>/2022/03/31/Leecode-203-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203. 移除链表元素"></a><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">203. 移除链表元素</a></h4><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [], val = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [7,7,7,7], val = 7</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>列表中的节点数目在范围 <code>[0, 104]</code> 内</li>
<li><code>1 &lt;= Node.val &lt;= 50</code></li>
<li><code>0 &lt;= val &lt;= 50</code></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    <span class="comment">//pre代表当前节点的前一节点，cur代表当前节点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否到达链表尾部</span></span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//找到目标值，进行删除操作</span></span><br><span class="line">        <span class="keyword">if</span> (cur.val == val) &#123;</span><br><span class="line">            pre.next = cur.next;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新指针</span></span><br><span class="line">        cur = cur.next;</span><br><span class="line">        pre = pre.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 206 反转链表</title>
    <url>/2022/04/01/Leecode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><p><a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. 反转链表</a></p>
<p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2]</span><br><span class="line">输出：[2,1]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表中节点的数目范围是 <code>[0, 5000]</code></li>
<li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>
</ul>
</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p><strong>双指针迭代</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="comment">//用于保存反转的下一节点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//保存下一节点</span></span><br><span class="line">        temp = cur.next;</span><br><span class="line">        <span class="comment">//反转操作</span></span><br><span class="line">        cur.next = pre;</span><br><span class="line">        <span class="comment">//更新指针</span></span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最终cur指向null，pre指向链表头部</span></span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度:O(N)</li>
<li>空间复杂度:O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 216 组合总和III</title>
    <url>/2022/08/03/Leecode-216-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="216-组合总和-III"><a href="#216-组合总和-III" class="headerlink" title="216. 组合总和 III"></a><a href="https://leetcode.cn/problems/combination-sum-iii/">216. 组合总和 III</a></h4><p>找出所有相加之和为 <code>n</code> 的 <code>k</code> 个数的组合，且满足下列条件：</p>
<ul>
<li>只使用数字1到9</li>
<li>每个数字 <strong>最多使用一次</strong></li>
</ul>
<p>返回 <em>所有可能的有效组合的列表</em> 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: k = 3, n = 7</span><br><span class="line">输出: [[1,2,4]]</span><br><span class="line">解释:</span><br><span class="line">1 + 2 + 4 = 7</span><br><span class="line">没有其他符合的组合了。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: k = 3, n = 9</span><br><span class="line">输出: [[1,2,6], [1,3,5], [2,3,4]]</span><br><span class="line">解释:</span><br><span class="line">1 + 2 + 6 = 9</span><br><span class="line">1 + 3 + 5 = 9</span><br><span class="line">2 + 3 + 4 = 9</span><br><span class="line">没有其他符合的组合了。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: k = 4, n = 1</span><br><span class="line">输出: []</span><br><span class="line">解释: 不存在有效的组合。</span><br><span class="line">在[1,9]范围内使用4个不同的数字，我们可以得到的最小和是1+2+3+4 = 10，因为10 &gt; 1，没有有效的组合。</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li><code>2 &lt;= k &lt;= 9</code></li>
<li><code>1 &lt;= n &lt;= 60</code></li>
</ul>
<h4 id="题解代码："><a href="#题解代码：" class="headerlink" title="题解代码："></a>题解代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单条路径</span></span><br><span class="line">LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line"><span class="comment">//结果集</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    backtracking(k, <span class="number">0</span>, n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k k个数的集合，也是递归深度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sum 已经遍历得到的元素的加和</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target 目标值，也就是n</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startIndex for循环开始的起始位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> sum, <span class="type">int</span> target, <span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (path.size() == k) &#123;</span><br><span class="line">        <span class="comment">//找到符合条件的路径</span></span><br><span class="line">        <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//单层逻辑</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">        path.add(i);</span><br><span class="line">        backtracking(k, sum, target, i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//回溯</span></span><br><span class="line">        sum -= i;</span><br><span class="line">        path.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 21 合并两个有序链表</title>
    <url>/2022/03/31/Leecode-21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21. 合并两个有序链表"></a><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">21. 合并两个有序链表</a></h4><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [1,2,4], l2 = [1,3,4]</span><br><span class="line">输出：[1,1,2,3,4,4]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [], l2 = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>两个链表的节点数目范围是 <code>[0, 50]</code></li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li><code>l1</code> 和 <code>l2</code> 均按 <strong>非递减顺序</strong> 排列</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>迭代法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//哑结点，标识链表头部</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">    <span class="comment">//pre指针用来指示当前插入位置</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//两链表都非空时进行插入合并操作，有一个为空直接对另一个进行连接操作即可</span></span><br><span class="line">    <span class="keyword">while</span> (list1 != <span class="literal">null</span> &amp;&amp; list2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (list1.val &lt;= list2.val) &#123;</span><br><span class="line">            pre.next = list1;</span><br><span class="line">            list1 = list1.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre.next = list2;</span><br><span class="line">            list2 = list2.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pre = pre.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//合并之后还有部分链表没有合并，则直接将其连到链表尾端即可</span></span><br><span class="line">    pre.next = list1 == <span class="literal">null</span> ? list2:list1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(m+n)，m和n分别是两链表的长度</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 217 存在重复元素</title>
    <url>/2022/03/25/Leecode-217-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="217-存在重复元素"><a href="#217-存在重复元素" class="headerlink" title="217. 存在重复元素"></a><a href="https://leetcode-cn.com/problems/contains-duplicate/">217. 存在重复元素</a></h4><p>给你一个整数数组 <code>nums</code> 。如果任一值在数组中出现 <strong>至少两次</strong> ，返回 <code>true</code> ；如果数组中每个元素互不相同，返回 <code>false</code> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3,1]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3,4]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,1,1,3,3,4,3,2,4,2]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 105</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 10</code></li>
</ul>
<h2 id="题解1："><a href="#题解1：" class="headerlink" title="题解1："></a>题解1：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">//使用集合存储，每次存入数据时进行判断，如果集合里面已经包含该元素，则返回true</span></span><br><span class="line">    <span class="comment">//如果不包含该元素，则存入集合</span></span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (set.contains(nums[i])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度:O(N)</li>
<li>空间复杂度:O(N)</li>
</ul>
<h2 id="题解2："><a href="#题解2：" class="headerlink" title="题解2："></a>题解2：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">//使用排序，排序完成后重复元素肯定是相邻的</span></span><br><span class="line">    <span class="comment">//使用两个连续的指针进行对比，若相同则直接返回true</span></span><br><span class="line"></span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N log N)，排序所需的时间复杂度</li>
<li>空间复杂度：O(1),没有用到额外空间，若深究，Arrays.sort(nums)使用到了栈空间，为O(log N)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 222 完全二叉树的节点个数</title>
    <url>/2022/04/10/Leecode-222-%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="222-完全二叉树的节点个数"><a href="#222-完全二叉树的节点个数" class="headerlink" title="222. 完全二叉树的节点个数"></a><a href="https://leetcode-cn.com/problems/count-complete-tree-nodes/">222. 完全二叉树的节点个数</a></h4><p>难度中等659收藏分享切换为英文接收动态反馈</p>
<p>给你一棵 <strong>完全二叉树</strong> 的根节点 <code>root</code> ，求出该树的节点个数。</p>
<p><a href="https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin">完全二叉树</a> 的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 <code>h</code> 层，则该层包含 <code>1~ 2h</code> 个节点。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2,3,4,5,6]</span><br><span class="line">输出：6</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点的数目范围是<code>[0, 5 * 104]</code></li>
<li><code>0 &lt;= Node.val &lt;= 5 * 104</code></li>
<li>题目数据保证输入的树是 <strong>完全二叉树</strong></li>
</ul>
<p><strong>进阶：</strong>遍历树来统计节点是一种时间复杂度为 <code>O(n)</code> 的简单解决方案。你可以设计一个更快的算法吗？</p>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="迭代法：层序遍历"><a href="#迭代法：层序遍历" class="headerlink" title="迭代法：层序遍历"></a>迭代法：层序遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//层序遍历，记录节点的个数</span></span><br><span class="line"></span><br><span class="line">    Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    que.offer(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> que.size();</span><br><span class="line">        <span class="keyword">while</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                que.offer(node.left);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                que.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            len--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(N)</li>
</ul>
<h3 id="递归："><a href="#递归：" class="headerlink" title="递归："></a>递归：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//树为空直接返回0</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//树不为空，返回左子树节点数量加右子树节点数量加当前节点</span></span><br><span class="line">    <span class="keyword">return</span> countNodes(root.left) + countNodes(root.right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(logN)，递归系统栈占用的空间</li>
</ul>
<h3 id="完全二叉树性质"><a href="#完全二叉树性质" class="headerlink" title="完全二叉树性质"></a>完全二叉树性质</h3><p>完全二叉树只有两种情况：</p>
<ol>
<li>满二叉树</li>
<li>最后一层叶子结点没有满</li>
</ol>
<p>对于情况1，满二叉树的节点数 <code>N = 2 ^ depth - 1</code>，根节点深度为1</p>
<p>对于情况2，分别递归左孩子和右孩子，递归到某一个深度一定会有左孩子或者右孩子有满二叉树，然后按照情况1来计算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">leftDepth</span> <span class="operator">=</span> getDepth(root.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rightDepth</span> <span class="operator">=</span> getDepth(root.right);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左子树深度等于右子树深度，证明左子树是完全二叉树</span></span><br><span class="line">    <span class="keyword">if</span> (leftDepth == rightDepth) &#123;</span><br><span class="line">        <span class="comment">//将左子树的节点数算出来，然后通过递归去算出右子树的节点数</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; leftDepth) - <span class="number">1</span> + countNodes(root.right) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//左子树深度不等于右子树深度，则证明右子树为完全二叉树</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; rightDepth) - <span class="number">1</span> + countNodes(root.left) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//左子树深度不等于右子树深度，证明不是完全二叉树</span></span><br><span class="line">    <span class="comment">// 递归其左右孩子,加上根节点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//计算树的深度</span></span><br><span class="line">    <span class="keyword">while</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        root = root.left;</span><br><span class="line">        depth++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> depth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(logN * logN)</li>
<li>空间复杂度：O(logN)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 226 翻转二叉树</title>
    <url>/2022/04/05/Leecode-226-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a><a href="https://leetcode-cn.com/problems/invert-binary-tree/">226. 翻转二叉树</a></h4><p>给你一棵二叉树的根节点 <code>root</code> ，翻转这棵二叉树，并返回其根节点。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [4,2,7,1,3,6,9]</span><br><span class="line">输出：[4,7,2,9,6,3,1]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [2,1,3]</span><br><span class="line">输出：[2,3,1]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点数目范围在 <code>[0, 100]</code> 内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>只要把每个节点的左右孩子都翻转一次就可以达到整体反转的效果。</p>
<p><code>二叉树的题目递归时一定要注意采用哪一种遍历方式。</code></p>
<p>本题采用前序遍历或者后序遍历都可以，但是中序遍历不可以，可以手动模拟一下。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//递归出口</span></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//采用后序遍历</span></span><br><span class="line">    invertTree(root.left);<span class="comment">//左</span></span><br><span class="line">    invertTree(root.right);<span class="comment">//右</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//中</span></span><br><span class="line">    swapTree(root);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swapTree</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> root.left;</span><br><span class="line">    root.left = root.right;</span><br><span class="line">    root.right = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 225 用队列实现栈</title>
    <url>/2022/04/03/Leecode-225-%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225. 用队列实现栈"></a><a href="https://leetcode-cn.com/problems/implement-stack-using-queues/">225. 用队列实现栈</a></h4><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code> 和 <code>empty</code>）。</p>
<p>实现 <code>MyStack</code> 类：</p>
<ul>
<li><code>void push(int x)</code> 将元素 x 压入栈顶。</li>
<li><code>int pop()</code> 移除并返回栈顶元素。</li>
<li><code>int top()</code> 返回栈顶元素。</li>
<li><code>boolean empty()</code> 如果栈是空的，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li>你只能使用队列的基本操作 —— 也就是 <code>push to back</code>、<code>peek/pop from front</code>、<code>size</code> 和 <code>is empty</code> 这些操作。</li>
<li>你所使用的语言也许不支持队列。 你可以使用 list （列表）或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;MyStack&quot;, &quot;push&quot;, &quot;push&quot;, &quot;top&quot;, &quot;pop&quot;, &quot;empty&quot;]</span><br><span class="line">[[], [1], [2], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, 2, 2, false]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">MyStack myStack = new MyStack();</span><br><span class="line">myStack.push(1);</span><br><span class="line">myStack.push(2);</span><br><span class="line">myStack.top(); // 返回 2</span><br><span class="line">myStack.pop(); // 返回 2</span><br><span class="line">myStack.empty(); // 返回 False</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= x &lt;= 9</code></li>
<li>最多调用<code>100</code> 次 <code>push</code>、<code>pop</code>、<code>top</code> 和 <code>empty</code></li>
<li>每次调用 <code>pop</code> 和 <code>top</code> 都保证栈不为空</li>
</ul>
<p><strong>进阶：</strong>你能否仅用一个队列来实现栈。</p>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line">    <span class="comment">//使用一个队列实现栈</span></span><br><span class="line">    Deque&lt;Integer&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在入栈时做文章，在每次入队后，都将之前的元素出队重新入队，即可达到先进后出的效果</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        queue.push(x);</span><br><span class="line">        <span class="comment">//一共需要出队的元素有队列长度减一个</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; queue.size() -<span class="number">1</span>;i++)&#123;</span><br><span class="line">            queue.push(queue.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 232 用栈实现队列</title>
    <url>/2022/04/02/Leecode-232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232. 用栈实现队列"></a><a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/">232. 用栈实现队列</a></h4><p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）：</p>
<p>实现 <code>MyQueue</code> 类：</p>
<ul>
<li><code>void push(int x)</code> 将元素 x 推到队列的末尾</li>
<li><code>int pop()</code> 从队列的开头移除并返回元素</li>
<li><code>int peek()</code> 返回队列开头的元素</li>
<li><code>boolean empty()</code> 如果队列为空，返回 <code>true</code> ；否则，返回 <code>false</code></li>
</ul>
<p><strong>说明：</strong></p>
<ul>
<li>你 <strong>只能</strong> 使用标准的栈操作 —— 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, 和 <code>is empty</code> 操作是合法的。</li>
<li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li>
</ul>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;MyQueue&quot;, &quot;push&quot;, &quot;push&quot;, &quot;peek&quot;, &quot;pop&quot;, &quot;empty&quot;]</span><br><span class="line">[[], [1], [2], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, 1, 1, false]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">MyQueue myQueue = new MyQueue();</span><br><span class="line">myQueue.push(1); // queue is: [1]</span><br><span class="line">myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)</span><br><span class="line">myQueue.peek(); // return 1</span><br><span class="line">myQueue.pop(); // return 1, queue is [2]</span><br><span class="line">myQueue.empty(); // return false</span><br></pre></td></tr></table></figure>



<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= x &lt;= 9</code></li>
<li>最多调用 <code>100</code> 次 <code>push</code>、<code>pop</code>、<code>peek</code> 和 <code>empty</code></li>
<li>假设所有操作都是有效的 （例如，一个空的队列不会调用 <code>pop</code> 或者 <code>peek</code> 操作）</li>
</ul>
<p><strong>进阶：</strong></p>
<ul>
<li>你能否实现每个操作均摊时间复杂度为 <code>O(1)</code> 的队列？换句话说，执行 <code>n</code> 个操作的总时间复杂度为 <code>O(n)</code> ，即使其中一个操作可能花费较长时间。</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line">    <span class="comment">//使用两个栈来实现队列，一个作为队列的头部作为入口栈，一个作为队列的尾部作为出口栈</span></span><br><span class="line"></span><br><span class="line">    Stack&lt;Integer&gt; stackIn;</span><br><span class="line">    Stack&lt;Integer&gt; stackOut;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//入口栈负责入队</span></span><br><span class="line">        stackIn = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//出口栈负责出栈</span></span><br><span class="line">        stackOut = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        stackIn.push(x);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        dumppstackIn();</span><br><span class="line">        <span class="keyword">return</span> stackOut.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        dumppstackIn();</span><br><span class="line">        <span class="keyword">return</span> stackOut.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//两个栈均为空时，队列为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stackIn.isEmpty() &amp;&amp; stackOut.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果StackOut为空，则将StackIn中的元素全部放到StackOut中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dumppstackIn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!stackOut.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stackIn.isEmpty()) &#123;</span><br><span class="line">            stackOut.push(stackIn.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 234 回文链表</title>
    <url>/2022/04/30/Leecode-234-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="234-回文链表"><a href="#234-回文链表" class="headerlink" title="234. 回文链表"></a><a href="https://leetcode-cn.com/problems/palindrome-linked-list/">234. 回文链表</a></h4><p>给你一个单链表的头节点 <code>head</code> ，请你判断该链表是否为回文链表。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p><strong>示例 1：</strong></p>
<p><img src="/Leecode-234-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/pal1linked-list.jpg" alt="img" loading="lazy"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,2,1]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="/Leecode-234-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/pal2linked-list.jpg" alt="img" loading="lazy"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表中节点数目在范围<code>[1, 105]</code> 内</li>
<li><code>0 &lt;= Node.val &lt;= 9</code></li>
</ul>
<p><strong>进阶：</strong>你能否用 <code>O(n)</code> 时间复杂度和 <code>O(1)</code> 空间复杂度解决此题？</p>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 235 二叉搜索树的最近公共祖先</title>
    <url>/2022/04/07/Leecode-235-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235. 二叉搜索树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/">235. 二叉搜索树的最近公共祖先</a></h4><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p>
<p><a href="https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p>
<p>例如，给定如下二叉搜索树: root &#x3D; [6,2,8,0,4,7,9,null,null,3,5]</p>


<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8</span><br><span class="line">输出: 6 </span><br><span class="line">解释: 节点 2 和节点 8 的最近公共祖先是 6。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4</span><br><span class="line">输出: 2</span><br><span class="line">解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。</span><br></pre></td></tr></table></figure>

<p><strong>说明:</strong></p>
<ul>
<li>所有节点的值都是唯一的。</li>
<li>p、q 为不同节点且均存在于给定的二叉搜索树中。</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><blockquote>
<p><strong>二叉搜索树的特点：</strong>左子树的所有节点都小于当前节点，右子树的所有节点都大于当前节点。</p>
</blockquote>
<h4 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h4><p>根据分析，首先要找到p，q两个节点，然后才能找到他们的公共祖先。</p>
<p>根据二叉搜索树的特性来对两节点进行搜索，会有三种情况：</p>
<ol>
<li>两节点值都小于根节点，则从根节点的左子树中继续查找两节点</li>
<li>两节点值都大于根节点，则从根节点的右子树中继续查找两节点</li>
<li>两节点不满足上述条件，则证明当前节点就是最近公共祖先。<strong>此时两节点要么分别在当前节点的左右子树中，要么其中一个就是当前节点。</strong></li>
</ol>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//cur指向当前节点</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">//两节点值都小于根节点，则从根节点的左子树中继续查找两节点</span></span><br><span class="line">        <span class="keyword">if</span> (cur.val &gt; p.val &amp;&amp; cur.val &gt; q.val) &#123;</span><br><span class="line">            cur = cur.left;</span><br><span class="line">            <span class="comment">//两节点值都大于根节点，则从根节点的右子树中继续查找两节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur.val &lt; p.val &amp;&amp; cur.val &lt; q.val) &#123;</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，最坏情况下，树为链式结构，且p，q是树中尾端的两节点。</li>
<li>空间复杂度：O(1)，没有使用到额外空间。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 242 有效的字母异位词</title>
    <url>/2022/03/30/Leecode-242-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242. 有效的字母异位词"></a><a href="https://leetcode-cn.com/problems/valid-anagram/">242. 有效的字母异位词</a></h4><p>给定两个字符串 <code>*s*</code> 和 <code>*t*</code> ，编写一个函数来判断 <code>*t*</code> 是否是 <code>*s*</code> 的字母异位词。</p>
<p><strong>注意：</strong>若 <code>*s*</code> 和 <code>*t*</code> 中每个字符出现的次数都相同，则称 <code>*s*</code> 和 <code>*t*</code> 互为字母异位词。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;rat&quot;, t = &quot;car&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li><code>1 &lt;= s.length, t.length &lt;= 5 * 104</code></li>
<li><code>s</code> 和 <code>t</code> 仅包含小写字母</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>哈希表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="comment">//如果两字符串长度不相等，则肯定不符合要求</span></span><br><span class="line">    <span class="keyword">if</span> (s.length() != t.length()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将第一个字符串s存入哈希表，字符为键，出现的次数为值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        map.put(c, map.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断第二个字符串中的逐个字符，如果存在，则更新次数，不存在直接返回false</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> t.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (map.keySet().contains(c)) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> map.get(c);</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                map.put(c, --count);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(n)，n是字符串s的长度</li>
<li>空间复杂度：O(|S|)，S为字符集的大小，此处为26。</li>
</ul>
<h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><p>排序，字母异位词代表字符以及字符的个数要一致，则等价于排序后两字符串相等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.length() != t.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">    <span class="type">char</span>[] chart = t.toCharArray();</span><br><span class="line"></span><br><span class="line">    Arrays.sort(chars);</span><br><span class="line">    Arrays.sort(chart);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Arrays.equals(chars,chart);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度:O(logN)，排序所用到的时间复杂度</li>
<li>空间复杂度：O(logN)，排序所用到的空间复杂度</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 350 两个数组的交集2</title>
    <url>/2022/03/27/Leecode-350-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%862/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="350-两个数组的交集-II"><a href="#350-两个数组的交集-II" class="headerlink" title="350. 两个数组的交集 II"></a><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/">350. 两个数组的交集 II</a></h4><p>给你两个整数数组 <code>nums1</code> 和 <code>nums2</code> ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line">输出：[2,2]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class="line">输出：[4,9]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>
<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>
</ul>
<p>**<em>*进阶*<em>：</em></em></p>
<ul>
<li>如果给定的数组已经排好序呢？你将如何优化你的算法？</li>
<li>如果 <code>nums1</code> 的大小比 <code>nums2</code> 小，哪种方法更优？</li>
<li>如果 <code>nums2</code> 的元素存储在磁盘上，内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</li>
</ul>
<h3 id="解法1：哈希表法"><a href="#解法1：哈希表法" class="headerlink" title="解法1：哈希表法"></a>解法1：哈希表法</h3><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><blockquote>
<p>使用哈希表存储每个数字出现的次数，对于一个数字来说，它在交集出现的次数等于该数字在两个数组中出现的次数的最小值。</p>
<p>首先遍历第一个数组，并在哈希表中记录第一个数组中的每个数字以及对应出现的次数，然后遍历第二个数组，对于第二个数组中的每个数字，如果在哈希表中存在这个数字，则将该数字添加到答案，并减少哈希表中该数字出现的次数。</p>
<p>为了降低空间复杂度，首先遍历较短的数组并在哈希表中记录每个数字以及对应出现的次数，然后遍历较长的数组得到交集</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] intersect(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">    <span class="comment">//保证nums2的长度一定小于nums1</span></span><br><span class="line">    <span class="keyword">if</span> (nums1.length &lt; nums2.length)&#123;</span><br><span class="line">        <span class="keyword">return</span> intersect(nums2,nums1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//为了节省空间，使用长度较小的数组存入哈希表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums2) &#123;</span><br><span class="line">        <span class="comment">//Map.getOrDefault(Object key,V defaultValue)方法的作用是；</span></span><br><span class="line">        <span class="comment">//当Map集合中有这个key时，就是用这个key的值，</span></span><br><span class="line">        <span class="comment">//如果没有就使用defaultValue。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> map.getOrDefault(num,<span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">        map.put(num,count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//因为是子集，所以长度不会超过最小的数组长度</span></span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[nums2.length];</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums1) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> map.getOrDefault(num,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//count大于0，证明存在重复元素，取出存入数组，更新count值</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            res[index++] = num;</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            map.remove(num);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(num,count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Arrays.copyOfRange(res,<span class="number">0</span>,index);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(m + n),遍历两个数组</li>
<li>空间复杂度：O(min(m,n))</li>
</ul>
<h3 id="解法2：排序-双指针"><a href="#解法2：排序-双指针" class="headerlink" title="解法2：排序 + 双指针"></a>解法2：排序 + 双指针</h3><h4 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h4><blockquote>
<p>首先使用两个指针指向两个数组头部，每次比较两个指针指向数字，如果不相等，则较小数字的指针右移一位，如果相等，数字添加到结果数组，直到有一个指针超出范围，遍历结束。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] intersect(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line"></span><br><span class="line">    Arrays.sort(nums1);</span><br><span class="line">    Arrays.sort(nums2);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums2.length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[Math.min(m, n)];</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; m &amp;&amp; j &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1[i] &lt; nums2[j]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums1[i] &gt; nums2[j]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res[index++] = nums1[i];</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Arrays.copyOfRange(res, <span class="number">0</span>, index);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(mlogm + nlogn)，排序的时间复杂度为O(mlogm + nlogn)，遍历的时间复杂度为O(m + n)，所以总时间复杂度为O(mlogm + nlogn)。</li>
<li>空间复杂度：O(min(m,n)),原理同解法1</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 36 有效的数独</title>
    <url>/2022/03/29/Leecode-36-%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="36-有效的数独"><a href="#36-有效的数独" class="headerlink" title="36. 有效的数独"></a><a href="https://leetcode-cn.com/problems/valid-sudoku/">36. 有效的数独</a></h4><p>请你判断一个 <code>9 x 9</code> 的数独是否有效。只需要 <strong>根据以下规则</strong> ，验证已经填入的数字是否有效即可。</p>
<ol>
<li>数字 <code>1-9</code> 在每一行只能出现一次。</li>
<li>数字 <code>1-9</code> 在每一列只能出现一次。</li>
<li>数字 <code>1-9</code> 在每一个以粗实线分隔的 <code>3x3</code> 宫内只能出现一次。（请参考示例图）</li>
</ol>
<p><strong>注意：</strong></p>
<ul>
<li>一个有效的数独（部分已被填充）不一定是可解的。</li>
<li>只需要根据以上规则，验证已经填入的数字是否有效即可。</li>
<li>空白格用 <code>&#39;.&#39;</code> 表示。</li>
</ul>
<p><strong>示例 1：</strong></p>
 

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：board = </span><br><span class="line">[[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]</span><br><span class="line">,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]</span><br><span class="line">,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：board = </span><br><span class="line">[[&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]</span><br><span class="line">,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]</span><br><span class="line">,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]</span><br><span class="line">输出：false</span><br><span class="line">解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>board.length == 9</code></li>
<li><code>board[i].length == 9</code></li>
<li><code>board[i][j]</code> 是一位数字（<code>1-9</code>）或者 <code>&#39;.&#39;</code></li>
</ul>
<h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><ol>
<li>分别建立行、列和所在的九宫格box的哈希表来记录元素</li>
<li>遍历到每个数字<code>board[i][j]</code>的时候，需要判断它是否满足一下三个条件：<ol>
<li>是否在第i行出现过</li>
<li>是否在第j列出现过</li>
<li>是否在第index个box中出现过</li>
</ol>
</li>
<li>index的取值</li>
</ol>
 

<ul>
<li>从图中可以看出，box是由i和j共同确定的，对于第一排的三个box，序号是可以通过纵坐标唯一确定的，即j&#x2F;3,但是第二排就需要用到横坐标了</li>
<li>据观察，同列不同行之间的box的index之间的差为3，第一排可以看做<code>j / 3</code>,则第二排需要在<code>j / 3</code>的基础上加上 3，第三排同理，所以得出 index &#x3D; j &#x2F; 3 + i &#x2F; 3 * 3</li>
</ul>
<h2 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidSudoku</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分别建立关于行、列、九宫格方块的哈希表</span></span><br><span class="line">    Map&lt;Integer, Set&lt;Integer&gt;&gt; row = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(), col = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(), box = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存值</span></span><br><span class="line">    <span class="comment">//键为第几行，第几列，第几个，值为当前自己所管理的九个数字</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        row.put(i, <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line">        col.put(i, <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line">        box.put(i, <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> board[i][j];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过字符c - 字符0得到c的int值</span></span><br><span class="line">            <span class="comment">//如&#x27;8&#x27;的ASCII码为56,&#x27;0&#x27;的ASCII码为&#x27;48&#x27;,&#x27;8&#x27; - &#x27;0&#x27; = 8,8为数字8的ASCII码</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">intC</span> <span class="operator">=</span> c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//由画图可得</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> j / <span class="number">3</span> + i / <span class="number">3</span> * <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果已经存在于行列或者九宫格中，则返回false</span></span><br><span class="line">            <span class="keyword">if</span> (row.get(i).contains(intC) || col.get(j).contains(intC) || box.get(index).contains(intC)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果都没有，则存入</span></span><br><span class="line">            row.get(i).add(intC);</span><br><span class="line">            col.get(j).add(intC);</span><br><span class="line">            box.get(index).add(intC);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 383 赎金信</title>
    <url>/2022/03/30/Leecode-383-%E8%B5%8E%E9%87%91%E4%BF%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383. 赎金信"></a><a href="https://leetcode-cn.com/problems/ransom-note/">383. 赎金信</a></h4><p>给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code> ，判断 <code>ransomNote</code> 能不能由 <code>magazine</code> 里面的字符构成。</p>
<p>如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。</p>
<p><code>magazine</code> 中的每个字符只能在 <code>ransomNote</code> 中使用一次。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：ransomNote = &quot;a&quot;, magazine = &quot;b&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：ransomNote = &quot;aa&quot;, magazine = &quot;ab&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：ransomNote = &quot;aa&quot;, magazine = &quot;aab&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= ransomNote.length, magazine.length &lt;= 105</code></li>
<li><code>ransomNote</code> 和 <code>magazine</code> 由小写英文字母组成</li>
</ul>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>哈希表法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">    <span class="comment">//如果ransomNote的长度大于magazine则肯定没法构成，直接返回false</span></span><br><span class="line">    <span class="keyword">if</span> (ransomNote.length() &gt; magazine.length()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将magazine中的字符作为键，出现次数作为值，存入哈希表</span></span><br><span class="line">    HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; magazine.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> magazine.charAt(i);</span><br><span class="line">        map.put(c, map.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将map中存储的字符进行取出，用来构建ransomNote看是否能成功</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ransomNote.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> ransomNote.charAt(i);</span><br><span class="line">        <span class="comment">//若ransomNote中存在magazine没有的字符，直接返回false</span></span><br><span class="line">        <span class="keyword">if</span> (map.keySet().contains(c)) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> map.get(c);</span><br><span class="line">            <span class="comment">//若存在，更新字符个数</span></span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                map.put(c, --count);</span><br><span class="line">                <span class="comment">//字符个数不够，返回false</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度:O(m + n)，m和n分别为两个字符串的长度</li>
<li>空间复杂度:<em>O</em>(∣<em>S</em>∣)，<em>S</em> 是字符集，这道题中 <em>S</em> 为全部小写英语字母，因此 |S| &#x3D; 26。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 387 字符串中第一个唯一字符</title>
    <url>/2022/03/30/Leecode-387-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="387-字符串中的第一个唯一字符"><a href="#387-字符串中的第一个唯一字符" class="headerlink" title="387. 字符串中的第一个唯一字符"></a><a href="https://leetcode-cn.com/problems/first-unique-character-in-a-string/">387. 字符串中的第一个唯一字符</a></h4><p>给定一个字符串 <code>s</code> ，找到 <em>它的第一个不重复的字符，并返回它的索引</em> 。如果不存在，则返回 <code>-1</code> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;leetcode&quot;</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;loveleetcode&quot;</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;aabb&quot;</span><br><span class="line">输出: -1</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 105</code></li>
<li><code>s</code> 只包含小写字母</li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>哈希表法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">firstUniqChar</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="comment">//将字符作为键，将字符出现次数作为值</span></span><br><span class="line">    Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//第一次遍历将字符串存入</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        map.put(c, map.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二次遍历，找到第一个值为1的字符，返回其索引即可</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (map.get(c) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>时间复杂度：O(N)，两次遍历</p>
</li>
<li><p>空间复杂度：O(∣Σ∣)，其中 Σ 是字符集，在本题中 s 只包含小写字母，因此∣Σ∣≤26。我们需要 O(∣Σ∣) 的空间存储哈希映射。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 409 最长回文串</title>
    <url>/2022/08/04/Leecode-409-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="409-最长回文串"><a href="#409-最长回文串" class="headerlink" title="409. 最长回文串"></a><a href="https://leetcode.cn/problems/longest-palindrome/">409. 最长回文串</a></h4><p>给定一个包含大写字母和小写字母的字符串 <code>s</code> ，返回 <em>通过这些字母构造成的 <strong>最长的回文串</strong></em> 。</p>
<p>在构造过程中，请注意 <strong>区分大小写</strong> 。比如 <code>&quot;Aa&quot;</code> 不能当做一个回文字符串。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入:s = &quot;abccccdd&quot;</span><br><span class="line">输出:7</span><br><span class="line">解释:</span><br><span class="line">我们可以构造的最长的回文串是&quot;dccaccd&quot;, 它的长度是 7。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入:s = &quot;a&quot;</span><br><span class="line">输入:1</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入:s = &quot;bb&quot;</span><br><span class="line">输入: 2</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 2000</code></li>
<li><code>s</code> 只能由小写和&#x2F;或大写英文字母组成</li>
</ul>
<hr>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>回文串说到底只有两种情况：</p>
<ol>
<li>aa</li>
<li>aba</li>
</ol>
<p>也就是说构成回文串的两种情况有：</p>
<ul>
<li>所有字符出现的次数都是双数，对应情况1。</li>
<li>除某个字符出现的次数为单数，其余所有字符出现的次数都为双数，对应情况2。</li>
</ul>
<p>所以就可以使用集合进行存储字符串中的字符，因为集合中的元素具有不可重复的特性，可以用于统计字符串中字符出现的次数。</p>
<p>将字符串中的字符依次存入集合</p>
<ul>
<li>如果集合中已经存在该元素，则当前字符与集合中的字符构成一对回文串，结果值加一，移除集合中该元素。</li>
<li>如果不存在该元素，则直接将其存入集合，以便与之后的字符进行匹配。</li>
</ul>
<hr>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="comment">//如果字符串长度为0，直接返回0</span></span><br><span class="line">    <span class="keyword">if</span>(s.length() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	HashSet&lt;Character&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Character&gt;();</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//最终回文串的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; s.length();i++)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="comment">//如果集合中有这个元素，则证明找到了成对的字符，将其移除，回文串长度加一</span></span><br><span class="line">        <span class="keyword">if</span>(set.contains(c))&#123;</span><br><span class="line">            set.remove(c);</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果集合中没有这个元素，则将其存入集合中</span></span><br><span class="line">        set.add(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> set.isEmpty()?res* <span class="number">2</span>:res*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>回文</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 442 数组中重复的数据</title>
    <url>/2022/05/08/Leecode-442-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="442-数组中重复的数据"><a href="#442-数组中重复的数据" class="headerlink" title="442. 数组中重复的数据"></a><a href="https://leetcode-cn.com/problems/find-all-duplicates-in-an-array/">442. 数组中重复的数据</a></h4><p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> ，其中 <code>nums</code> 的所有整数都在范围 <code>[1, n]</code> 内，且每个整数出现 <strong>一次</strong> 或 <strong>两次</strong> 。请你找出所有出现 <strong>两次</strong> 的整数，并以数组形式返回。</p>
<p>你必须设计并实现一个时间复杂度为 <code>O(n)</code> 且仅使用常量额外空间的算法解决此问题。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [4,3,2,7,8,2,3,1]</span><br><span class="line">输出：[2,3]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,1,2]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>n == nums.length</code></li>
<li><code>1 &lt;= n &lt;= 105</code></li>
<li><code>1 &lt;= nums[i] &lt;= n</code></li>
<li><code>nums</code> 中的每个元素出现 <strong>一次</strong> 或 <strong>两次</strong></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>可以遍历数组将其存入哈希表，如果存入某个元素时发现其已经在哈希表内，则证明该元素为重复元素，但是哈希表使用到了O(N)的空间复杂度，所以不能使用哈希表。</p>
<p>由于数组元素的范围是[1,n]，数组下标索引的范围是[0,n],所以可以将数组作为哈希表，第一次遍历将元素值为i的元素存入数组下标索引为i-1的位置，第二次遍历将所有不在其该有位置上的元素取出并返回，即为重复元素。</p>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 因为数组元素的范围是1 ~ n</span></span><br><span class="line"><span class="comment">     * 数组下标索引的范围是0  ~  n-1</span></span><br><span class="line"><span class="comment">     * 使用数组本身作为哈希表，</span></span><br><span class="line"><span class="comment">     * 将元素值为i的元素放在索引下标为i-1的地方，</span></span><br><span class="line"><span class="comment">     * 全部放完之后，剩下的就是重复的元素</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span> || nums == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">//nums[nums[i] - 1]表示哈希映射在该位置上的值</span></span><br><span class="line">        <span class="comment">//nums[i]表示现在存放在该位置上的值</span></span><br><span class="line">        <span class="keyword">while</span> (nums[nums[i] - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">            swap(nums, nums[i] - <span class="number">1</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找出所有不在其该有位置上的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] - <span class="number">1</span> != i) &#123;</span><br><span class="line">            res.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度:O(N)</li>
<li>空间复杂度:O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 46 全排列</title>
    <url>/2022/05/09/Leecode-46-%E5%85%A8%E6%8E%92%E5%88%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>Leecode 5 最长回文子串</title>
    <url>/2022/08/04/Leecode-5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a><a href="https://leetcode.cn/problems/longest-palindromic-substring/">5. 最长回文子串</a></h4><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;babad&quot;</span><br><span class="line">输出：&quot;bab&quot;</span><br><span class="line">解释：&quot;aba&quot; 同样是符合题意的答案。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;cbbd&quot;</span><br><span class="line">输出：&quot;bb&quot;</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li><code>s</code> 仅由数字和英文字母组成</li>
</ul>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>中心扩散法</p>
<p>以某个或某两个元素为中心，判断当前是否为回文串，然后向左右两侧进行扩充，最终分别计算出偶数长度的回文最大长度和奇数长度的回文最大长度的子串，进行子串截取并返回。</p>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结果最长回文子串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中心扩散法</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> s.length();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字符串长度小于2，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//针对于aba这种形式的回文串，以一个元素为中心</span></span><br><span class="line">        expandAroundCenter(s, i, i);</span><br><span class="line">        <span class="comment">//针对aabb这种形式的回文串，以两个元素为中心</span></span><br><span class="line">        expandAroundCenter(s, i, i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">expandAroundCenter</span><span class="params">(String s, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="comment">//如果当前两端点满足回文串的条件，就向两端进行扩散</span></span><br><span class="line">    <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length() &amp;&amp; s.charAt(left) == s.charAt(right)) &#123;</span><br><span class="line">        left--;</span><br><span class="line">        right++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终最长回文子串的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> right - left - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新最终扩展的最长的回文串</span></span><br><span class="line">    <span class="keyword">if</span> (len &gt; res.length()) &#123;</span><br><span class="line">        <span class="comment">//这里的substring是左闭右开，此时的left和right指向的是最长子串的左一个位置和右一个位置</span></span><br><span class="line">        res = s.substring(left + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>回文</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 53 最大子数组和</title>
    <url>/2022/03/25/Leecode-53-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53. 最大子数组和"></a><a href="https://leetcode-cn.com/problems/maximum-subarray/">53. 最大子数组和</a></h4><p>难度简单4599收藏分享切换为英文接收动态反馈</p>
<p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<p><strong>子数组</strong> 是数组中的一个连续部分。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [5,4,-1,7,8]</span><br><span class="line">输出：23</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 105</code></li>
<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>
</ul>
<h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><h4 id="遍历子串或者子序列的遍历方式："><a href="#遍历子串或者子序列的遍历方式：" class="headerlink" title="遍历子串或者子序列的遍历方式："></a>遍历子串或者子序列的遍历方式：</h4><ol>
<li>以某个节点为开头的所有子序列。例如数组{1，2，3}的遍历结果为：[1]，[1，2]，[1，2，3]，[2]，[2，3]</li>
<li>根据子序列的长度。比如先遍历出子序列长度为1的子序列，再遍历出自序列长度为2的子序列。</li>
<li>以某个节点为结尾的子序列，因为每个节点都可能会是子序列的结束节点，因此要遍历整个序列。例如以2为结束点的遍历结果为：[1,2]，[2]，以3为结束点的遍历结果为：[1，2，3]，[2，3]，[3]。</li>
</ol>
<p>第一种遍历方式主要用于暴力解法。</p>
<p><strong>第三种遍历方式因为可以产生递推关系，所以经常用于动态规划，这里的动态规划解法是以 先遍历出以某个节点为结束节点的所有子序列的 思路。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 使用f(i)来表示以当前元素为结尾元素的最大子序列和，</span></span><br><span class="line"><span class="comment">     * 因为一共有n个元素，所以f(i)也有n个，所以需要创建一个长度为n的f数组，时间复杂度为O(N)，</span></span><br><span class="line"><span class="comment">     * 但是考虑到f(i) 只和 f(i - 1)相关，所以只需要使用一个变量保存f(i)即可，时间复杂度为O(1)</span></span><br><span class="line"><span class="comment">     * 则f(i）的更新规则为：当前值 和 f(i - 1) 加上当前值 中的最大值</span></span><br><span class="line"><span class="comment">     * 即状态转移方程为</span></span><br><span class="line"><span class="comment">     *           f(i)  =  max&#123;(f(i-1) + nums[i]),nums[i]&#125;</span></span><br><span class="line"><span class="comment">     * 只需计算出每个元素的f(i)，最后返回最大值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用sum代表f(i)，初始化为0</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//ans 代表结果</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> n : nums) &#123;</span><br><span class="line">        sum = Math.max(sum + n, n);</span><br><span class="line">        ans = Math.max(sum,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，数组遍历</li>
<li>空间复杂度：O(1)，f(i)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 566 重塑矩阵</title>
    <url>/2022/03/28/Leecode-566-%E9%87%8D%E5%A1%91%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="566-重塑矩阵"><a href="#566-重塑矩阵" class="headerlink" title="566. 重塑矩阵"></a><a href="https://leetcode-cn.com/problems/reshape-the-matrix/">566. 重塑矩阵</a></h4><p>在 MATLAB 中，有一个非常有用的函数 <code>reshape</code> ，它可以将一个 <code>m x n</code> 矩阵重塑为另一个大小不同（<code>r x c</code>）的新矩阵，但保留其原始数据。</p>
<p>给你一个由二维数组 <code>mat</code> 表示的 <code>m x n</code> 矩阵，以及两个正整数 <code>r</code> 和 <code>c</code> ，分别表示想要的重构的矩阵的行数和列数。</p>
<p>重构后的矩阵需要将原始矩阵的所有元素以相同的 <strong>行遍历顺序</strong> 填充。</p>
<p>如果具有给定参数的 <code>reshape</code> 操作是可行且合理的，则输出新的重塑矩阵；否则，输出原始矩阵。</p>
<p><strong>示例 1：</strong></p>
 

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：mat = [[1,2],[3,4]], r = 1, c = 4</span><br><span class="line">输出：[[1,2,3,4]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
 

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：mat = [[1,2],[3,4]], r = 2, c = 4</span><br><span class="line">输出：[[1,2],[3,4]]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>m == mat.length</code></li>
<li><code>n == mat[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 100</code></li>
<li><code>-1000 &lt;= mat[i][j] &lt;= 1000</code></li>
<li><code>1 &lt;= r, c &lt;= 300</code></li>
</ul>
<h3 id="题解：简单模拟题"><a href="#题解：简单模拟题" class="headerlink" title="题解：简单模拟题"></a>题解：简单模拟题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] matrixReshape(<span class="type">int</span>[][] mat, <span class="type">int</span> r, <span class="type">int</span> c) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> mat.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> mat[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不合理的参数，直接返回原矩阵</span></span><br><span class="line">    <span class="keyword">if</span> (r * c != m * n)&#123;</span><br><span class="line">        <span class="keyword">return</span> mat;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//结果矩阵</span></span><br><span class="line">    <span class="type">int</span>[][] ans = <span class="keyword">new</span> <span class="title class_">int</span>[r][c];</span><br><span class="line">    <span class="comment">//先将数组转存到一维数组中</span></span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[m*n];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ;i &lt; m;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; n;j++)&#123;</span><br><span class="line">            arr[k] = mat[i][j];</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将一维数组的值转存到新的多维数组</span></span><br><span class="line">    k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ;i &lt; r;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; c;j++)&#123;</span><br><span class="line">            ans[i][j] = arr[k];</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(m * n)，遍历了两次数组</li>
<li>空间复杂度：O(m * n)，使用了一个大小为m * n的一维数组</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 583 两个字符串的删除操作</title>
    <url>/2022/05/16/Leecode-583-%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="583-两个字符串的删除操作"><a href="#583-两个字符串的删除操作" class="headerlink" title="583. 两个字符串的删除操作"></a><a href="https://leetcode.cn/problems/delete-operation-for-two-strings/">583. 两个字符串的删除操作</a></h4><p>给定两个单词 <code>word1</code> 和 <code>word2</code> ，返回使得 <code>word1</code> 和 <code>word2</code> <strong>相同</strong>所需的<strong>最小步数</strong>。</p>
<p><strong>每步</strong> 可以删除任意一个字符串中的一个字符。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: word1 = &quot;sea&quot;, word2 = &quot;eat&quot;</span><br><span class="line">输出: 2</span><br><span class="line">解释: 第一步将 &quot;sea&quot; 变为 &quot;ea&quot; ，第二步将 &quot;eat &quot;变为 &quot;ea&quot;</span><br></pre></td></tr></table></figure>

<p><strong>示例  2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：word1 = &quot;leetcode&quot;, word2 = &quot;etco&quot;</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= word1.length, word2.length &lt;= 500</code></li>
<li><code>word1</code> 和 <code>word2</code> 只包含小写英文字母</li>
</ul>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解:"></a>题解:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 动态规划</span></span><br><span class="line"><span class="comment">     * 类似于找出两个字符串的最长公共子序列</span></span><br><span class="line"><span class="comment">     * 找出后，用两个字符串的长度之和减去两倍的公共子序列的长度即为所需删除的最小步数</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> word1.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> word2.length();</span><br><span class="line">    <span class="comment">//辅助dp数组</span></span><br><span class="line">    <span class="comment">//dp[i][j] 表示 word1 的前 i 个字符与 word2 的前 j 个字符的最长公共子序列。</span></span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//边界条件</span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (word1.charAt(i-<span class="number">1</span>) == word2.charAt(j-<span class="number">1</span>)) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m + n - <span class="number">2</span> * dp[m][n];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(m * n)</li>
<li>空间复杂度：O(m * n)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 455 分发饼干</title>
    <url>/2022/05/10/Leecode-455-%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="455-分发饼干"><a href="#455-分发饼干" class="headerlink" title="455. 分发饼干"></a><a href="https://leetcode.cn/problems/assign-cookies/">455. 分发饼干</a></h4><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p>
<p>对每个孩子 <code>i</code>，都有一个胃口值 <code>g[i]</code>，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 <code>j</code>，都有一个尺寸 <code>s[j]</code> 。如果 <code>s[j] &gt;= g[i]</code>，我们可以将这个饼干 <code>j</code> 分配给孩子 <code>i</code> ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: g = [1,2,3], s = [1,1]</span><br><span class="line">输出: 1</span><br><span class="line">解释: </span><br><span class="line">你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。</span><br><span class="line">虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。</span><br><span class="line">所以你应该输出1。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: g = [1,2], s = [1,2,3]</span><br><span class="line">输出: 2</span><br><span class="line">解释: </span><br><span class="line">你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。</span><br><span class="line">你拥有的饼干数量和尺寸都足以让所有孩子满足。</span><br><span class="line">所以你应该输出2.</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= g.length &lt;= 3 * 104</code></li>
<li><code>0 &lt;= s.length &lt;= 3 * 104</code></li>
<li><code>1 &lt;= g[i], s[j] &lt;= 231 - 1</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><h5 id="贪心：大饼干先满足大胃口"><a href="#贪心：大饼干先满足大胃口" class="headerlink" title="贪心：大饼干先满足大胃口"></a>贪心：大饼干先满足大胃口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findContentChildren</span><span class="params">(<span class="type">int</span>[] g, <span class="type">int</span>[] s)</span> &#123;</span><br><span class="line">    Arrays.sort(g);</span><br><span class="line">    Arrays.sort(s);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> s.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> g.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(start &gt;= <span class="number">0</span>&amp;&amp;s[start] &gt;= g[i])&#123;</span><br><span class="line">            start--;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="贪心：小饼干先满足小胃口"><a href="#贪心：小饼干先满足小胃口" class="headerlink" title="贪心：小饼干先满足小胃口"></a>贪心：小饼干先满足小胃口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findContentChildren</span><span class="params">(<span class="type">int</span>[] g, <span class="type">int</span>[] s)</span> &#123;</span><br><span class="line">    Arrays.sort(g);</span><br><span class="line">    Arrays.sort(s);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//小饼干先喂饱小胃口</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (start &lt; g.length &amp;&amp; s[i] &gt;= g[start]) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(MlogM+NlogN)，排序所产生的时间复杂度为O(logM+logN)，遍历数组的时间复杂度是O(M+N)，所以总时间复杂度为O(MlogM+NlogN)。</li>
<li>空间复杂度：O(logM+logN),排序所产生的空间复杂度。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 653 两数之和IV-输入BST</title>
    <url>/2022/04/07/Leecode-653-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8CIV-%E8%BE%93%E5%85%A5BST/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="653-两数之和-IV-输入-BST"><a href="#653-两数之和-IV-输入-BST" class="headerlink" title="653. 两数之和 IV - 输入 BST"></a><a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/">653. 两数之和 IV - 输入 BST</a></h4><p>难度简单386收藏分享切换为英文接收动态反馈</p>
<p>给定一个二叉搜索树 <code>root</code> 和一个目标结果 <code>k</code>，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 <code>true</code>。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: root = [5,3,6,2,4,null,7], k = 9</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: root = [5,3,6,2,4,null,7], k = 28</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li>二叉树的节点个数的范围是 <code>[1, 104]</code>.</li>
<li><code>-104 &lt;= Node.val &lt;= 104</code></li>
<li><code>root</code> 为二叉搜索树</li>
<li><code>-105 &lt;= k &lt;= 105</code></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="解法1：DFS-哈希表"><a href="#解法1：DFS-哈希表" class="headerlink" title="解法1：DFS + 哈希表"></a>解法1：DFS + 哈希表</h3><p>通过DFS来遍历整棵树，用哈希表记录遍历过的结点值。</p>
<p>对于一个值为<code>x</code>的节点，只要检查哈希表中是否存在<code>k - x</code>即可。</p>
<p>如果找到存在对应的元素，则返回true。</p>
<p>否则，将当前结点值存入哈希表。</p>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//深度优先搜索+哈希表</span></span><br><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findTarget</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断哈希表中是否含有对应元素</span></span><br><span class="line">    <span class="keyword">if</span> (set.contains(k - root.val)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    set.add(root.val);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> findTarget(root.left, k) || findTarget(root.right, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，需要遍历整棵树</li>
<li>空间复杂度：O(N)，最坏情况需要一个存储整棵树所有结点值的哈希表</li>
</ul>
<h3 id="解法2：BFS-哈希表"><a href="#解法2：BFS-哈希表" class="headerlink" title="解法2：BFS + 哈希表"></a>解法2：BFS + 哈希表</h3><p>原理同解法1，只是遍历方式不同</p>
<h4 id="代码如下：-1"><a href="#代码如下：-1" class="headerlink" title="代码如下："></a>代码如下：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findTarget</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    que.offer(root);</span><br><span class="line"></span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">        <span class="keyword">if</span> (set.contains(k - node.val)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        set.add(node.val);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里一定记住是当前节点node，不是root</span></span><br><span class="line">        <span class="comment">//错了好几次了</span></span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            que.offer(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            que.offer(node.right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，需要遍历整棵树</li>
<li>空间复杂度：O(N)，最坏情况需要一个存储整棵树所有结点值的哈希表和队列</li>
</ul>
<h3 id="解法3：DFS-中序遍历-双指针"><a href="#解法3：DFS-中序遍历-双指针" class="headerlink" title="解法3：DFS + 中序遍历 + 双指针"></a>解法3：DFS + 中序遍历 + 双指针</h3><p>二叉搜索树的中序遍历结果是一个递增序列，可以遍历得到整棵树的结点值，然后使用双指针找到是否有两数之和等于目标值的元素。如果两数之和大于目标值，右指针左移；如果两数之和小于目标值，左指针右移。</p>
<h4 id="代码如下：-2"><a href="#代码如下：-2" class="headerlink" title="代码如下："></a>代码如下：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findTarget</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    inorderTraversal(root, list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = list.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="comment">//两数之和大于目标值，右指针左移</span></span><br><span class="line">        <span class="keyword">if</span> (list.get(left) + list.get(right) &gt; k) &#123;</span><br><span class="line">            right--;</span><br><span class="line">        <span class="comment">//两数之和小于目标值，左指针右移</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list.get(left) + list.get(right) &lt; k) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root, List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inorderTraversal(root.left, list);</span><br><span class="line">    list.add(root.val);</span><br><span class="line">    inorderTraversal(root.right, list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，需要遍历整棵树</li>
<li>空间复杂度：O(N)，需要一个存储整棵树所有结点值的集合</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 70 爬楼梯</title>
    <url>/2022/05/09/Leecode-70-%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a><a href="https://leetcode.cn/problems/climbing-stairs/">70. 爬楼梯</a></h4><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。</p>
<p>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：2</span><br><span class="line">解释：有两种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶</span><br><span class="line">2. 2 阶</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：3</span><br><span class="line">解释：有三种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶 + 1 阶</span><br><span class="line">2. 1 阶 + 2 阶</span><br><span class="line">3. 2 阶 + 1 阶</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 45</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p><strong>简单动态规划</strong></p>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(N)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 700 二叉搜索树中的搜索</title>
    <url>/2022/04/06/Leecode-700-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="700-二叉搜索树中的搜索"><a href="#700-二叉搜索树中的搜索" class="headerlink" title="700. 二叉搜索树中的搜索"></a><a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/">700. 二叉搜索树中的搜索</a></h4><p>给定二叉搜索树（BST）的根节点 <code>root</code> 和一个整数值 <code>val</code>。</p>
<p>你需要在 BST 中找到节点值等于 <code>val</code> 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 <code>null</code> 。</p>
<p><strong>示例 1:</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [4,2,7,1,3], val = 2</span><br><span class="line">输出：[2,1,3]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [4,2,7,1,3], val = 5</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>数中节点数在 <code>[1, 5000]</code> 范围内</li>
<li><code>1 &lt;= Node.val &lt;= 107</code></li>
<li><code>root</code> 是二叉搜索树</li>
<li><code>1 &lt;= val &lt;= 107</code></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h4 id="思路一：借助队列广度优先遍历搜索"><a href="#思路一：借助队列广度优先遍历搜索" class="headerlink" title="思路一：借助队列广度优先遍历搜索"></a>思路一：借助队列广度优先遍历搜索</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">searchBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="comment">//据观察，此题应该广度优先遍历，找到目标节点，就将以该节点为根的子树返回</span></span><br><span class="line">    Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//根节点不为空，入队</span></span><br><span class="line">    <span class="keyword">if</span>(root != <span class="literal">null</span>)&#123;</span><br><span class="line">        que.offer(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> que.size();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">        <span class="keyword">if</span> (node.val == val)&#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            que.offer(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            que.offer(node.right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="思路二：递归"><a href="#思路二：递归" class="headerlink" title="思路二：递归"></a>思路二：递归</h4><p>根据二叉搜索数的特性来写递归</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">searchBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="comment">//递归出口</span></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span> || root.val == val)&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//因为是二叉搜索数，所以右节点的值一定大于左节点，根据此特性可写出如下代码</span></span><br><span class="line">    <span class="keyword">return</span> val &gt; root.val ? searchBST(root.right,val) : searchBST(root.left,val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="思路三：根据二叉搜索树的特性进行迭代"><a href="#思路三：根据二叉搜索树的特性进行迭代" class="headerlink" title="思路三：根据二叉搜索树的特性进行迭代"></a>思路三：根据二叉搜索树的特性进行迭代</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> TreeNode <span class="title function_">searchBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(root != <span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="comment">//目标节点在左子树,root指针指向左子树</span></span><br><span class="line">         <span class="keyword">if</span>(root.val &gt; val)&#123;</span><br><span class="line">             root = root.left;</span><br><span class="line">         &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val &lt; val)&#123;</span><br><span class="line">             <span class="comment">//目标节点在右子树，root指针指向右子树</span></span><br><span class="line">             root = root.right;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="comment">//root为目标节点，直接返回</span></span><br><span class="line">             <span class="keyword">return</span> root;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//没有找到，返回null</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 701 二叉搜索树中的插入操作</title>
    <url>/2022/04/06/Leecode-701-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="701-二叉搜索树中的插入操作"><a href="#701-二叉搜索树中的插入操作" class="headerlink" title="701. 二叉搜索树中的插入操作"></a><a href="https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/">701. 二叉搜索树中的插入操作</a></h4><p>难度中等285收藏分享切换为英文接收动态反馈</p>
<p>给定二叉搜索树（BST）的根节点 <code>root</code> 和要插入树中的值 <code>value</code> ，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 <strong>保证</strong> ，新值和原始二叉搜索树中的任意节点值都不同。</p>
<p><strong>注意</strong>，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 <strong>任意有效的结果</strong> 。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [4,2,7,1,3], val = 5</span><br><span class="line">输出：[4,2,7,1,3,5]</span><br></pre></td></tr></table></figure>

<p>解释：另一个满足题目要求可以通过的树是：</p>


<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [40,20,60,10,30,50,70], val = 25</span><br><span class="line">输出：[40,20,60,10,30,50,70,null,null,25]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [4,2,7,1,3,null,null,null,null,null,null], val = 5</span><br><span class="line">输出：[4,2,7,1,3,5]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中的节点数将在 <code>[0, 104]</code>的范围内。</li>
<li><code>-108 &lt;= Node.val &lt;= 108</code></li>
<li>所有值 <code>Node.val</code> 是 <strong>独一无二</strong> 的。</li>
<li><code>-108 &lt;= val &lt;= 108</code></li>
<li><strong>保证</strong> <code>val</code> 在原始BST中不存在。</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">insertIntoBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="comment">//递归出口</span></span><br><span class="line">    <span class="comment">//如果当前节点为空，则证明val找到了合适的位置，直接创建节点并返回</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//结点应插入到左子树中，对左子树进行递归操作</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; val) &#123;</span><br><span class="line">        root.left = insertIntoBST(root.left, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.val &lt; val) &#123;</span><br><span class="line">        <span class="comment">//结点应插入到右子树中，对右子树进行递归操作</span></span><br><span class="line">        root.right = insertIntoBST(root.right, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 73 矩阵置零</title>
    <url>/2022/03/29/Leecode-73-%E7%9F%A9%E9%98%B5%E7%BD%AE%E9%9B%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="73-矩阵置零"><a href="#73-矩阵置零" class="headerlink" title="73. 矩阵置零"></a><a href="https://leetcode-cn.com/problems/set-matrix-zeroes/">73. 矩阵置零</a></h4><p>给定一个 <code>*m* x *n*</code> 的矩阵，如果一个元素为 <strong>0</strong> ，则将其所在行和列的所有元素都设为 <strong>0</strong> 。请使用 <strong><a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 算法<strong>。</strong></p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：matrix = [[1,1,1],[1,0,1],[1,1,1]]</span><br><span class="line">输出：[[1,0,1],[0,0,0],[1,0,1]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]</span><br><span class="line">输出：[[0,0,0,0],[0,4,5,0],[0,3,1,0]]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>m == matrix.length</code></li>
<li><code>n == matrix[0].length</code></li>
<li><code>1 &lt;= m, n &lt;= 200</code></li>
<li><code>-231 &lt;= matrix[i][j] &lt;= 231 - 1</code></li>
</ul>
<p><strong>进阶：</strong></p>
<ul>
<li>一个直观的解决方案是使用  <code>O(*m**n*)</code> 的额外空间，但这并不是一个好的解决方案。</li>
<li>一个简单的改进方案是使用 <code>O(*m* + *n*)</code> 的额外空间，但这仍然不是最好的解决方案。</li>
<li>你能想出一个仅使用常量空间的解决方案吗？</li>
</ul>
<h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>我们不能遇到0后直接对该行该列进行直接修改，因为这样后面出现的0会被“覆盖”，该0所对应的行和列就没有被置0。</p>
<p>解决办法是将出现0的行和列分别存放在标记数组中，再次遍历矩阵的时将对应出现行和列置为0.</p>
<h3 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h3><p>使用O(m + n)额外空间来作为标记数组，两遍遍历，第一遍找出存在0的行和列，第二遍根据第一遍找出来的行列对矩阵进行置零操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要O(m + n)空间的解法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setZeroes</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录当前行、列是否含有0</span></span><br><span class="line">    HashSet&lt;Integer&gt; row_zero = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    HashSet&lt;Integer&gt; col_zero = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一次遍历用来记录</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; row;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; col;j++)&#123;</span><br><span class="line">            <span class="comment">//当前数字为0，记录下来他所在的行和列</span></span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                row_zero.add(i);</span><br><span class="line">                col_zero.add(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二次遍历用来清零</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; row;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; col;j++)&#123;</span><br><span class="line">            <span class="comment">//只要处于所在行或者列的元素，整行整列全部清零</span></span><br><span class="line">            <span class="keyword">if</span> (row_zero.contains(i) || col_zero.contains(j))&#123;</span><br><span class="line">                matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解法1：-1"><a href="#解法1：-1" class="headerlink" title="解法1："></a>解法1：</h3><p>使用第一行第一列来作为标记数组，但这样潜在的问题是，如果第一行或者第一列本来就存在着0，那么我们需要额外对这一整行进行置0操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要O(1)空间的解法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setZeroes</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">row0_flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">col0_flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一行是否有零</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix[<span class="number">0</span>][j] == <span class="number">0</span>) &#123;</span><br><span class="line">            row0_flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一列是否有零</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; row;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">            col0_flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//把第一行第一列设为标志位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; row;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j &lt; col;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//置零操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; row;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j &lt; col;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] == <span class="number">0</span> || matrix[<span class="number">0</span>][j] ==<span class="number">0</span>)&#123;</span><br><span class="line">                matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果第一行中有0，则额外对该行置零</span></span><br><span class="line">    <span class="keyword">if</span> (row0_flag)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; col;j++)&#123;</span><br><span class="line">            matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果第一列中有0，则额外对该列置零</span></span><br><span class="line">    <span class="keyword">if</span> (col0_flag)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; row;i++)&#123;</span><br><span class="line">            matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 713 乘积小于K的子数组</title>
    <url>/2022/05/05/Leecode-713-%E4%B9%98%E7%A7%AF%E5%B0%8F%E4%BA%8EK%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="713-乘积小于-K-的子数组"><a href="#713-乘积小于-K-的子数组" class="headerlink" title="713. 乘积小于 K 的子数组"></a><a href="https://leetcode-cn.com/problems/subarray-product-less-than-k/">713. 乘积小于 K 的子数组</a></h4><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回子数组内所有元素的乘积严格小于 <code>k</code> 的连续子数组的数目。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [10,5,2,6], k = 100</span><br><span class="line">输出：8</span><br><span class="line">解释：8 个乘积小于 100 的子数组分别为：[10]、[5]、[2],、[6]、[10,5]、[5,2]、[2,6]、[5,2,6]。</span><br><span class="line">需要注意的是 [10,5,2] 并不是乘积小于 100 的子数组。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3], k = 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong> </p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li>
<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>
<li><code>0 &lt;= k &lt;= 106</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p><strong>滑动窗口</strong>，</p>
<ul>
<li>使用left和right两个指针代表窗口的左右两端</li>
<li>计算窗口内所有元素的乘积<ul>
<li>如果乘积小于k，则right指针右移，继续累乘。记录有效子数组个数</li>
<li>如果乘积大于k，则left指针右移，来减少累乘的结果。</li>
</ul>
</li>
<li>因为乘积小于k的子数组，所有的子数组都满足答案，所以只需要对于每个右指针，找到其左指针的个数，即只需要计算以right为右边界的有效子数组的个数，为<code>right - left +1</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSubarrayProductLessThanK</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录当前窗口的乘积</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">prod</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结果个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (right &lt; length) &#123;</span><br><span class="line">        prod *= nums[right];</span><br><span class="line">        <span class="comment">//乘积大于k，左指针右移</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right &amp;&amp; prod &gt;= k) &#123;</span><br><span class="line">            prod /= nums[left];</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//记录以当前right为右边界的有效子数组的个数</span></span><br><span class="line">        ans += (right - left + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//更新右指针</span></span><br><span class="line">        right++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，需要遍历整个数组</li>
<li>空间复杂度：O(1)，只使用到了常数个额外空间。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 744 寻找比目标字母大的最小字母</title>
    <url>/2022/04/03/Leecode-744-%E5%AF%BB%E6%89%BE%E6%AF%94%E7%9B%AE%E6%A0%87%E5%AD%97%E6%AF%8D%E5%A4%A7%E7%9A%84%E6%9C%80%E5%B0%8F%E5%AD%97%E6%AF%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="744-寻找比目标字母大的最小字母"><a href="#744-寻找比目标字母大的最小字母" class="headerlink" title="744. 寻找比目标字母大的最小字母"></a><a href="https://leetcode-cn.com/problems/find-smallest-letter-greater-than-target/">744. 寻找比目标字母大的最小字母</a></h4><p>给你一个排序后的字符列表 <code>letters</code> ，列表中只包含小写英文字母。另给出一个目标字母 <code>target</code>，请你寻找在这一有序列表里比目标字母大的最小字母。</p>
<p>在比较时，字母是依序循环出现的。举个例子：</p>
<ul>
<li>如果目标字母 <code>target = &#39;z&#39;</code> 并且字符列表为 <code>letters = [&#39;a&#39;, &#39;b&#39;]</code>，则答案返回 <code>&#39;a&#39;</code></li>
</ul>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: letters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]，target = &quot;a&quot;</span><br><span class="line">输出: &quot;c&quot;</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: letters = [&quot;c&quot;,&quot;f&quot;,&quot;j&quot;], target = &quot;c&quot;</span><br><span class="line">输出: &quot;f&quot;</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: letters = [&quot;c&quot;,&quot;f&quot;,&quot;j&quot;], target = &quot;d&quot;</span><br><span class="line">输出: &quot;f&quot;</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>2 &lt;= letters.length &lt;= 104</code></li>
<li><code>letters[i]</code> 是一个小写字母</li>
<li><code>letters</code> 按非递减顺序排序</li>
<li><code>letters</code> 最少包含两个不同的字母</li>
<li><code>target</code> 是一个小写字母</li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">char</span> <span class="title function_">nextGreatestLetter</span><span class="params">(<span class="type">char</span>[] letters, <span class="type">char</span> target)</span> &#123;</span><br><span class="line">    <span class="comment">//线性查找</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; letters.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (letters[i] &gt; target) &#123;</span><br><span class="line">            <span class="keyword">return</span> letters[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//因为字母是循环出现的，所以如果一次遍历没有查找到就直接返回第一个字符</span></span><br><span class="line">    <span class="keyword">return</span> letters[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N),遍历了一次字符数组</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 728 自除数</title>
    <url>/2022/03/31/Leecode-728-%E8%87%AA%E9%99%A4%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="728-自除数"><a href="#728-自除数" class="headerlink" title="728. 自除数"></a><a href="https://leetcode-cn.com/problems/self-dividing-numbers/">728. 自除数</a></h4><p><strong>自除数</strong> 是指可以被它包含的每一位数整除的数。</p>
<ul>
<li>例如，<code>128</code> 是一个 <strong>自除数</strong> ，因为 <code>128 % 1 == 0</code>，<code>128 % 2 == 0</code>，<code>128 % 8 == 0</code>。</li>
</ul>
<p><strong>自除数</strong> 不允许包含 0 。</p>
<p>给定两个整数 <code>left</code> 和 <code>right</code> ，返回一个列表，<em>列表的元素是范围 <code>[left, right]</code> 内所有的 <strong>自除数</strong></em> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：left = 1, right = 22</span><br><span class="line">输出：[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：left = 47, right = 85</span><br><span class="line">输出：[48,55,66,77]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= left &lt;= right &lt;= 104</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>暴力法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">selfDividingNumbers</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="comment">//结果集合</span></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//从给定的区间开始逐个值判断是否为自除数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> left; num &lt;= right; num++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isSelfNumber(num)) &#123;</span><br><span class="line">            list.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为自除数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSelfNumber</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="comment">//用于拆分的副本num</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> num;</span><br><span class="line">    <span class="comment">//逐次取余得到每个位置上的值</span></span><br><span class="line">    <span class="keyword">while</span> (temp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="comment">//取得当前整数的最后一位</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">digit</span> <span class="operator">=</span> temp % <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//不满足条件，直接返回false</span></span><br><span class="line">        <span class="keyword">if</span> (digit == <span class="number">0</span> || num % digit != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新为下一个值</span></span><br><span class="line">        temp /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 75 颜色分类</title>
    <url>/2022/04/13/Leecode-75-%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="75-颜色分类"><a href="#75-颜色分类" class="headerlink" title="75. 颜色分类"></a><a href="https://leetcode-cn.com/problems/sort-colors/">75. 颜色分类</a></h4><p>给定一个包含红色、白色和蓝色、共 <code>n</code> 个元素的数组 <code>nums</code> ，**<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a>**对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p>
<p>我们使用整数 <code>0</code>、 <code>1</code> 和 <code>2</code> 分别表示红色、白色和蓝色。</p>
<p>必须在不使用库的sort函数的情况下解决这个问题。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,0,2,1,1,0]</span><br><span class="line">输出：[0,0,1,1,2,2]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,0,1]</span><br><span class="line">输出：[0,1,2]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>n == nums.length</code></li>
<li><code>1 &lt;= n &lt;= 300</code></li>
<li><code>nums[i]</code> 为 <code>0</code>、<code>1</code> 或 <code>2</code></li>
</ul>
<p><strong>进阶：</strong></p>
<ul>
<li>你可以不使用代码库中的排序函数来解决这道题吗？</li>
<li>你能想出一个仅使用常数空间的一趟扫描算法吗？</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="桶排序："><a href="#桶排序：" class="headerlink" title="桶排序："></a>桶排序：</h3><p>因为只有0，1，2三个数字，所以可以使用桶排序，首先记录他们的数量，然后根据他们的数量重写整个数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sortColors</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">//存储0,1,2出现的次数</span></span><br><span class="line">    <span class="type">int</span>[] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="comment">//计数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        bucket[num]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将桶中的数据还原到数组中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (bucket[i] != <span class="number">0</span>) &#123;</span><br><span class="line">            nums[j++] = i;</span><br><span class="line">            bucket[i]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(1)</li>
</ul>
<h3 id="双指针："><a href="#双指针：" class="headerlink" title="双指针："></a>双指针：</h3><p>使用两个指针<code>p_zero</code>和<code>p_two</code>来划分0，1，2的范围，即将数组分为<code>[0,p_zero）</code>,<code>[p_zero,i）</code>,<code>[p_two,len-1]</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sortColors</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 使用两个指针p_zero和p_two来划分0，1，2的范围</span></span><br><span class="line"><span class="comment">     *  即将数组分为[0,p_zero）,[p_zero,i）,[p_two,len-1]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了保证初始化的时候 [0, p_zero)为空，设置p_zero = 0</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">p_zero</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//为了保证初始化的时候 [p_two,len-1] 为空，设置 p_two = len</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">p_two</span> <span class="operator">=</span> len;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//当i==p_two时，子区间正好覆盖全部数组</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; p_two) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            swap(nums, p_zero, i);</span><br><span class="line">            p_zero++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] == <span class="number">2</span>) &#123;</span><br><span class="line">            p_two--;</span><br><span class="line">            swap(nums, p_two, i);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[l];</span><br><span class="line">    nums[l] = nums[r];</span><br><span class="line">    nums[r] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 77 组合</title>
    <url>/2022/08/02/Leecode-77-%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="77-组合"><a href="#77-组合" class="headerlink" title="77. 组合"></a><a href="https://leetcode.cn/problems/combinations/">77. 组合</a></h4><p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p>
<p>你可以按 <strong>任何顺序</strong> 返回答案。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 4, k = 2</span><br><span class="line">输出：</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 1, k = 1</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 20</code></li>
<li><code>1 &lt;= k &lt;= n</code></li>
</ul>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p><strong>回溯算法</strong></p>
<p>回溯法解决的问题都可以抽象为树形结构来理解，如下图</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/20201123195223940.png" alt="77.组合" loading="lazy"></p>
<p>其中n（集合长度）相当于树的宽度，k（组合子集的长度）相当于树的深度。</p>
<p>每次搜索到叶子结点，就找到了一个子集结果，然后只要把所有的从根节点搜索到叶子结点的路径收集起来，就可以求出结果集。</p>
<h4 id="回溯三部曲："><a href="#回溯三部曲：" class="headerlink" title="回溯三部曲："></a>回溯三部曲：</h4><ol>
<li><strong>递归函数的返回值以及参数</strong><ol>
<li>返回值，一般递归函数的返回值都为空</li>
<li>参数：<ol>
<li>n：集合中元素个数，遍历宽度（for循环宽度）</li>
<li>k：组合子集中元素个数，遍历深度（递归深度）</li>
<li>startIndex：用于记录下一层递归搜索的起始位置</li>
</ol>
</li>
</ol>
</li>
<li><strong>回溯终止条件</strong><ol>
<li>从根节点到达叶子节点即结束本层递归</li>
<li>也就是说path数组的大小如果达到k，说明我们找到了一个子集大小为k的组合了，在图中path存的就是根节点到叶子节点的路径</li>
</ol>
</li>
<li><strong>单层搜索逻辑</strong><ol>
<li>for循环每次从startIndex开始遍历，然后用path保存取到的节点i</li>
<li>然后通过递归函数不断调用自己 一直往深处遍历，直到遇到了叶子节点再返回。</li>
<li><strong>回溯操作，比如这次的遍历结果是{1,2}，这个结果已经保存在结果集res中了，但是我们还要遍历{1,3}，{1,4}，所以需要进行回溯，把2剔除，然后3，4才能进去。</strong></li>
</ol>
</li>
</ol>
<h4 id="回溯算法模板："><a href="#回溯算法模板：" class="headerlink" title="回溯算法模板："></a>回溯算法模板：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(参数)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (终止条件) &#123;</span><br><span class="line">        存放结果;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;</span><br><span class="line">        处理节点;</span><br><span class="line">         <span class="comment">// 递归</span></span><br><span class="line">        backtracking(路径，选择列表);</span><br><span class="line">        回溯，撤销处理结果</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单条路径</span></span><br><span class="line"><span class="keyword">public</span> LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//路径结果集</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    backtracking(n, k, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">    <span class="comment">//******************************************************//</span></span><br><span class="line">    <span class="comment">//回溯终止条件，单条路径大小达到k，说明找到了一个子集大小为k的组合</span></span><br><span class="line">    <span class="keyword">if</span> (path.size() == k) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//******************************************************//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//单层搜索过程,从startIndex开始遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt;= n; i++) &#123;</span><br><span class="line">        path.add(i);</span><br><span class="line">        backtracking(n, k, i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//回溯，撤销当前处理的节点</span></span><br><span class="line">        path.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="剪枝："><a href="#剪枝：" class="headerlink" title="剪枝："></a>剪枝：</h4><p>来举一个例子，n &#x3D; 4，k &#x3D; 4的话，那么第一层for循环的时候，从元素2开始的遍历都没有意义了，<strong>因为从元素2到元素4一共才三个元素，构不成一个4位的集合。</strong> 在第二层for循环，从元素3开始的遍历都没有意义了。</p>
<p>如图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/20210130194335207.png" alt="77.组合4" loading="lazy"></p>
<p>也就是说：</p>
<p><strong>如果for循环选择的起始位置之后的元素个数 已经不足 我们需要的元素个数了，那么就没有必要搜索了</strong>。</p>
<h5 id="优化过程："><a href="#优化过程：" class="headerlink" title="优化过程："></a>优化过程：</h5><ol>
<li>已经选择了的元素个数：path.size();</li>
<li>还需要选择的元素个数：k - path.size();</li>
<li>从集合n和还需要的元素个数(k - path.size)反推startIndex，可得在集合n中至多要从该起始位置 : n - (k - path.size()) + 1的地方开始遍历。</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/IMG_4306.PNG" alt="IMG_4306" loading="lazy"></p>
<h4 id="代码优化："><a href="#代码优化：" class="headerlink" title="代码优化："></a>代码优化：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单条路径</span></span><br><span class="line"><span class="keyword">public</span> LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//路径结果集</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    backtracking(n, k, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">    <span class="comment">//******************************************************//</span></span><br><span class="line">    <span class="comment">//回溯终止条件，单条路径大小达到k，说明找到了一个子集大小为k的组合</span></span><br><span class="line">    <span class="keyword">if</span> (path.size() == k) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//******************************************************//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//单层搜索过程,从startIndex开始遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt;= n - (k - path.size()) + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        path.add(i);</span><br><span class="line">        backtracking(n, k, i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//回溯，撤销当前处理的节点</span></span><br><span class="line">        path.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>参考自代码随想录：</strong><a href="https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html#%E5%89%AA%E6%9E%9D%E4%BC%98%E5%8C%96">https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html#%E5%89%AA%E6%9E%9D%E4%BC%98%E5%8C%96</a></p>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 796 旋转字符串</title>
    <url>/2022/04/07/Leecode-796-%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="796-旋转字符串"><a href="#796-旋转字符串" class="headerlink" title="796. 旋转字符串"></a><a href="https://leetcode-cn.com/problems/rotate-string/">796. 旋转字符串</a></h4><p>给定两个字符串, <code>s</code> 和 <code>goal</code>。如果在若干次旋转操作之后，<code>s</code> 能变成 <code>goal</code> ，那么返回 <code>true</code> 。</p>
<p><code>s</code> 的 <strong>旋转操作</strong> 就是将 <code>s</code> 最左边的字符移动到最右边。 </p>
<ul>
<li>例如, 若 <code>s = &#39;abcde&#39;</code>，在旋转一次之后结果就是<code>&#39;bcdea&#39;</code> 。</li>
</ul>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abcde&quot;, goal = &quot;cdeab&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abcde&quot;, goal = &quot;abced&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li><code>1 &lt;= s.length, goal.length &lt;= 100</code></li>
<li><code>s</code> 和 <code>goal</code> 由小写英文字母组成</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>由于每次旋转操作都是把最左侧的一个字符移动到最右侧，因此<code>goal</code>是由<code>s</code>从任意位置开始经过多步旋转而来的，而字符串<code>s + s</code>中包含了所有字符串<code>s</code>经过旋转而得到的字符串，那么满足条件的<code>goal</code>就一定会出现在<code>s + s</code>字符串中。</p>
<p><code>ps：在很多头尾相连的数组题目中也经常使用两倍数组的技巧。</code></p>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">rotateString</span><span class="params">(String s, String goal)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s.length() == goal.length() &amp;&amp; (s + s).contains(goal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，KMP算法搜索子字符串的时间复杂度为O(N)。</li>
<li>空间复杂度：O(N)，KMP算法搜索子字符串的空间复杂度为O(N)。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 806 写字符串需要的行数</title>
    <url>/2022/04/12/Leecode-806-%E5%86%99%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%9C%80%E8%A6%81%E7%9A%84%E8%A1%8C%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="806-写字符串需要的行数"><a href="#806-写字符串需要的行数" class="headerlink" title="806. 写字符串需要的行数"></a><a href="https://leetcode-cn.com/problems/number-of-lines-to-write-string/">806. 写字符串需要的行数</a></h4><p>我们要把给定的字符串 <code>S</code> 从左到右写到每一行上，每一行的最大宽度为100个单位，如果我们在写某个字母的时候会使这行超过了100 个单位，那么我们应该把这个字母写到下一行。我们给定了一个数组 <code>widths</code> ，这个数组 widths[0] 代表 ‘a’ 需要的单位， widths[1] 代表 ‘b’ 需要的单位，…， widths[25] 代表 ‘z’ 需要的单位。</p>
<p>现在回答两个问题：至少多少行能放下<code>S</code>，以及最后一行使用的宽度是多少个单位？将你的答案作为长度为2的整数列表返回。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: </span><br><span class="line">widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]</span><br><span class="line">S = &quot;abcdefghijklmnopqrstuvwxyz&quot;</span><br><span class="line">输出: [3, 60]</span><br><span class="line">解释: </span><br><span class="line">所有的字符拥有相同的占用单位10。所以书写所有的26个字母，</span><br><span class="line">我们需要2个整行和占用60个单位的一行。</span><br><span class="line">示例 2:</span><br><span class="line">输入: </span><br><span class="line">widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]</span><br><span class="line">S = &quot;bbbcccdddaaa&quot;</span><br><span class="line">输出: [2, 4]</span><br><span class="line">解释: </span><br><span class="line">除去字母&#x27;a&#x27;所有的字符都是相同的单位10，并且字符串 &quot;bbbcccdddaa&quot; 将会覆盖 9 * 10 + 2 * 4 = 98 个单位.</span><br><span class="line">最后一个字母 &#x27;a&#x27; 将会被写到第二行，因为第一行只剩下2个单位了。</span><br><span class="line">所以，这个答案是2行，第二行有4个单位宽度。</span><br></pre></td></tr></table></figure>

<p><strong>注:</strong></p>
<ul>
<li>字符串 <code>S</code> 的长度在 [1, 1000] 的范围。</li>
<li><code>S</code> 只包含小写字母。</li>
<li><code>widths</code> 是长度为 <code>26</code>的数组。</li>
<li><code>widths[i]</code> 值的范围在 <code>[2, 10]</code>。</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="简单模拟题"><a href="#简单模拟题" class="headerlink" title="简单模拟题"></a>简单模拟题</h3><p>从左到右遍历字符串，<code>line</code>表示当前行数，<code>width</code>表示当前行已经使用的宽度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] numberOfLines(<span class="type">int</span>[] widths, String s) &#123;</span><br><span class="line">    <span class="comment">//总行数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">line</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//当前行的宽度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="comment">//当前字符</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="comment">//当前字符所需要的单位</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> widths[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="comment">//更新当前行</span></span><br><span class="line">        width += num;</span><br><span class="line">		<span class="comment">//当前行已经写满，更新行数</span></span><br><span class="line">        <span class="keyword">if</span> (width &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            line++;</span><br><span class="line">            <span class="comment">//当前行不足的直接写到下一行的情况</span></span><br><span class="line">            width = num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;line, width&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 83 删除排序链表中的重复元素</title>
    <url>/2022/04/01/Leecode-83-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="83-删除排序链表中的重复元素"><a href="#83-删除排序链表中的重复元素" class="headerlink" title="83. 删除排序链表中的重复元素"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">83. 删除排序链表中的重复元素</a></h4><p>给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> 。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/04/list1.jpg" alt="img" loading="lazy"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,1,2]</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/04/list2.jpg" alt="img" loading="lazy"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,1,2,3,3]</span><br><span class="line">输出：[1,2,3]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表中节点数目在范围 <code>[0, 300]</code> 内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li>题目数据保证链表已经按升序 <strong>排列</strong></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p><strong>双指针</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 双指针法：</span></span><br><span class="line"><span class="comment">    *       因为是排序链表，所以重复元素肯定相邻</span></span><br><span class="line"><span class="comment">    *       使用两个并列的指针对链表进行遍历，</span></span><br><span class="line"><span class="comment">    *       逐一比较</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (pre.val == cur.val)&#123;</span><br><span class="line">            pre.next = cur.next;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 88 合并两个有序数组</title>
    <url>/2022/03/26/Leecode-88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="88-合并两个有序数组"><a href="#88-合并两个有序数组" class="headerlink" title="88. 合并两个有序数组"></a><a href="https://leetcode-cn.com/problems/merge-sorted-array/">88. 合并两个有序数组</a></h4><p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p>
<p>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p>
<p><strong>注意：</strong>最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span><br><span class="line">输出：[1,2,2,3,5,6]</span><br><span class="line">解释：需要合并 [1,2,3] 和 [2,5,6] 。</span><br><span class="line">合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1], m = 1, nums2 = [], n = 0</span><br><span class="line">输出：[1]</span><br><span class="line">解释：需要合并 [1] 和 [] 。</span><br><span class="line">合并结果是 [1] 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [0], m = 0, nums2 = [1], n = 1</span><br><span class="line">输出：[1]</span><br><span class="line">解释：需要合并的数组是 [] 和 [1] 。</span><br><span class="line">合并结果是 [1] 。</span><br><span class="line">注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>nums1.length == m + n</code></li>
<li><code>nums2.length == n</code></li>
<li><code>0 &lt;= m, n &lt;= 200</code></li>
<li><code>1 &lt;= m + n &lt;= 200</code></li>
<li><code>-109 &lt;= nums1[i], nums2[j] &lt;= 109</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> m, <span class="type">int</span>[] nums2, <span class="type">int</span> n)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//逆向双指针，比较两个数组最后的元素，选择较大的一个塞到数组尾部</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//i指向nums1最后一个被插入元素的后一位置，nums1.length和 m + n等同</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//如果num1中还有元素，就进行比较选取较大值</span></span><br><span class="line">        <span class="keyword">if</span> (m &gt; <span class="number">0</span> &amp;&amp; nums1[m - <span class="number">1</span>] &gt; nums2[n -<span class="number">1</span>])&#123;</span><br><span class="line">            nums1[--i] = nums1[--m];</span><br><span class="line">            <span class="comment">//nums1中元素小或者nums1已为空，就把nums2存入</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            nums1[--i] = nums2[--n];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 905 按奇偶排序数组</title>
    <url>/2022/04/29/Leecode-905-%E6%8C%89%E5%A5%87%E5%81%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="905-按奇偶排序数组"><a href="#905-按奇偶排序数组" class="headerlink" title="905. 按奇偶排序数组"></a><a href="https://leetcode-cn.com/problems/sort-array-by-parity/">905. 按奇偶排序数组</a></h4><p>给你一个整数数组 <code>nums</code>，将 <code>nums</code> 中的的所有偶数元素移动到数组的前面，后跟所有奇数元素。</p>
<p>返回满足此条件的 <strong>任一数组</strong> 作为答案。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,1,2,4]</span><br><span class="line">输出：[2,4,3,1]</span><br><span class="line">解释：[4,2,3,1]、[2,4,1,3] 和 [4,2,1,3] 也会被视作正确答案。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 5000</code></li>
<li><code>0 &lt;= nums[i] &lt;= 5000</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>简单模拟题，双指针</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] sortArrayByParity(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[l] % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; nums[r] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.swap(nums, l, r);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[l] % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; nums[r] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            l++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[l] % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; nums[r] % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            r--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l++;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    nums[i] = nums[i] ^ nums[j];</span><br><span class="line">    nums[j] = nums[i] ^ nums[j];</span><br><span class="line">    nums[i] = nums[i] ^ nums[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，只需要遍历一次数组即可。</li>
<li>空间复杂度：O(1)，没有使用到额外空间。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 908 最小差值 1</title>
    <url>/2022/04/30/Leecode-908-%E6%9C%80%E5%B0%8F%E5%B7%AE%E5%80%BC-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="908-最小差值-I"><a href="#908-最小差值-I" class="headerlink" title="908. 最小差值 I"></a><a href="https://leetcode-cn.com/problems/smallest-range-i/">908. 最小差值 I</a></h4><p>给你一个整数数组 <code>nums</code>，和一个整数 <code>k</code> 。</p>
<p>在一个操作中，您可以选择 <code>0 &lt;= i &lt; nums.length</code> 的任何索引 <code>i</code> 。将 <code>nums[i]</code> 改为 <code>nums[i] + x</code> ，其中 <code>x</code> 是一个范围为 <code>[-k, k]</code> 的整数。对于每个索引 <code>i</code> ，最多 <strong>只能</strong> 应用 <strong>一次</strong> 此操作。</p>
<p><code>nums</code> 的 <strong>分数</strong> 是 <code>nums</code> 中最大和最小元素的差值。 </p>
<p><em>在对 <code>nums</code> 中的每个索引最多应用一次上述操作后，返回 <code>nums</code> 的最低 <strong>分数</strong></em> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1], k = 0</span><br><span class="line">输出：0</span><br><span class="line">解释：分数是 max(nums) - min(nums) = 1 - 1 = 0。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,10], k = 2</span><br><span class="line">输出：6</span><br><span class="line">解释：将 nums 改为 [2,8]。分数是 max(nums) - min(nums) = 8 - 2 = 6。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,3,6], k = 3</span><br><span class="line">输出：0</span><br><span class="line">解释：将 nums 改为 [4,4,4]。分数是 max(nums) - min(nums) = 4 - 4 = 0。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 104</code></li>
<li><code>0 &lt;= nums[i] &lt;= 104</code></li>
<li><code>0 &lt;= k &lt;= 104</code></li>
</ul>
<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>最低分数，即为数组中最大值和最小值的差值。</p>
<p>即<code>maxNum - minNum</code>，对于本题，只需要将最大值减去<code>k</code>，最小值加上<code>k</code>，然后相减才会得到最低分数。</p>
<p>会有两种情况：</p>
<ul>
<li>最小值加上k小于最大值减去k，即<code>minNum + k &lt; maxNum - k</code>,直接将改变后的最值差返回即可</li>
<li>最小值加上k大于最大值减去k，即<code>minNum + k &gt;= maxNum - k</code>，因为最低分数不能小于0，所以这种情况就返回0</li>
</ul>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">smallestRangeI</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="comment">//数组的最大最小值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">minNum</span> <span class="operator">=</span> <span class="number">10001</span>, maxNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        minNum = Math.min(minNum, num);</span><br><span class="line">        maxNum = Math.max(maxNum, num);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//对应上面的两种情况，移项可得</span></span><br><span class="line">    <span class="keyword">return</span> Math.max(maxNum - minNum - <span class="number">2</span> * k, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 937 重新排列日志文件</title>
    <url>/2022/05/03/Leecode-937-%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="937-重新排列日志文件"><a href="#937-重新排列日志文件" class="headerlink" title="937. 重新排列日志文件"></a><a href="https://leetcode-cn.com/problems/reorder-data-in-log-files/">937. 重新排列日志文件</a></h4><p>给你一个日志数组 <code>logs</code>。每条日志都是以空格分隔的字串，其第一个字为字母与数字混合的 <strong>标识符</strong> 。</p>
<p>有两种不同类型的日志：</p>
<ul>
<li><strong>字母日志</strong>：除标识符之外，所有字均由小写字母组成</li>
<li><strong>数字日志</strong>：除标识符之外，所有字均由数字组成</li>
</ul>
<p>请按下述规则将日志重新排序：</p>
<ul>
<li>所有 <strong>字母日志</strong> 都排在 <strong>数字日志</strong> 之前。</li>
<li><strong>字母日志</strong> 在内容不同时，忽略标识符后，按内容字母顺序排序；在内容相同时，按标识符排序。</li>
<li><strong>数字日志</strong> 应该保留原来的相对顺序。</li>
</ul>
<p>返回日志的最终顺序。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：logs = [&quot;dig1 8 1 5 1&quot;,&quot;let1 art can&quot;,&quot;dig2 3 6&quot;,&quot;let2 own kit dig&quot;,&quot;let3 art zero&quot;]</span><br><span class="line">输出：[&quot;let1 art can&quot;,&quot;let3 art zero&quot;,&quot;let2 own kit dig&quot;,&quot;dig1 8 1 5 1&quot;,&quot;dig2 3 6&quot;]</span><br><span class="line">解释：</span><br><span class="line">字母日志的内容都不同，所以顺序为 &quot;art can&quot;, &quot;art zero&quot;, &quot;own kit dig&quot; 。</span><br><span class="line">数字日志保留原来的相对顺序 &quot;dig1 8 1 5 1&quot;, &quot;dig2 3 6&quot; 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：logs = [&quot;a1 9 2 3 1&quot;,&quot;g1 act car&quot;,&quot;zo4 4 7&quot;,&quot;ab1 off key dog&quot;,&quot;a8 act zoo&quot;]</span><br><span class="line">输出：[&quot;g1 act car&quot;,&quot;a8 act zoo&quot;,&quot;ab1 off key dog&quot;,&quot;a1 9 2 3 1&quot;,&quot;zo4 4 7&quot;]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= logs.length &lt;= 100</code></li>
<li><code>3 &lt;= logs[i].length &lt;= 100</code></li>
<li><code>logs[i]</code> 中，字与字之间都用 <strong>单个</strong> 空格分隔</li>
<li>题目数据保证 <code>logs[i]</code> 都有一个标识符，并且在标识符之后至少存在一个字</li>
</ul>
<h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p><strong>自定义排序：</strong></p>
<p>将日志数组中的日志元素按照第一个空格分成两部分，第一部分为标识符，第二部分为日志内容。</p>
<p>两条日志进行比较规则：</p>
<ul>
<li>字母日志小于数字日志。</li>
<li>数字日志保留相对顺序。</li>
<li>字母日志进行比较时，先比较第二部分日志内容的大小；如果相等，在比较标识符大小。</li>
</ul>
<p>方法logCompare:</p>
<ul>
<li>log1大于log2时，返回1。</li>
<li>log1小于log2时，返回-1。</li>
<li>log1等于log2时，返回0。</li>
</ul>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lc937</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String[] reorderLogFiles(String[] logs) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> logs.length;</span><br><span class="line">        Pair[] pairs = <span class="keyword">new</span> <span class="title class_">Pair</span>[length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="comment">//赋值</span></span><br><span class="line">            pairs[i] = <span class="keyword">new</span> <span class="title class_">Pair</span>(logs[i], i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//排序操作</span></span><br><span class="line">        Arrays.sort(pairs, (a, b) -&gt; logCompare(a, b));</span><br><span class="line">        <span class="comment">//排序好的数组</span></span><br><span class="line">        String[] reorderd = <span class="keyword">new</span> <span class="title class_">String</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            reorderd[i] = pairs[i].log;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> reorderd;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志比较方法，两个日志进行比较，第一个日志大于返回1，等于返回0，小于返回-1</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">logCompare</span><span class="params">(Pair pair1, Pair pair2)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">log1</span> <span class="operator">=</span> pair1.log;</span><br><span class="line">        <span class="type">String</span> <span class="variable">log2</span> <span class="operator">=</span> pair2.log;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> pair1.index;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index2</span> <span class="operator">=</span> pair2.index;</span><br><span class="line">        <span class="comment">//split()方法的第一个参数regex为以什么字符分隔，limit是指将字符串分隔为几个字符串的数量，</span></span><br><span class="line">        <span class="comment">// 2即分隔为两个，即只分割一次</span></span><br><span class="line"></span><br><span class="line">        String[] split1 = log1.split(<span class="string">&quot; &quot;</span>, <span class="number">2</span>);</span><br><span class="line">        String[] split2 = log2.split(<span class="string">&quot; &quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断为字符日志还是数字日志</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isDigit1</span> <span class="operator">=</span> Character.isDigit(split1[<span class="number">1</span>].charAt(<span class="number">0</span>));</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isDigit2</span> <span class="operator">=</span> Character.isDigit(split2[<span class="number">1</span>].charAt(<span class="number">0</span>));</span><br><span class="line">        <span class="comment">//都是数字日志，按照顺序返回</span></span><br><span class="line">        <span class="keyword">if</span> (isDigit1 &amp;&amp; isDigit2) &#123;</span><br><span class="line">            <span class="keyword">return</span> index1 - index2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//都不是数字日志，比较字符大小</span></span><br><span class="line">        <span class="keyword">if</span> (!isDigit1 &amp;&amp; !isDigit2) &#123;</span><br><span class="line">            <span class="comment">//比较标识符后面的字符串是否相同</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sc</span> <span class="operator">=</span> split1[<span class="number">1</span>].compareTo(split2[<span class="number">1</span>]);</span><br><span class="line">            <span class="comment">//不相同直接按顺序返回</span></span><br><span class="line">            <span class="keyword">if</span> (sc != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> sc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//相同则比较前面的标识符</span></span><br><span class="line">            <span class="keyword">return</span> split1[<span class="number">0</span>].compareTo(split2[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//若有一个为字符日志，一个为数字日志</span></span><br><span class="line">        <span class="comment">//则只需要判断isDigit1是否为真，若为真，则</span></span><br><span class="line">        <span class="keyword">return</span> isDigit1 ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//日志类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span> &#123;</span><br><span class="line">    String log;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">(String log, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.log = log;</span><br><span class="line">        <span class="built_in">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 94 二叉树的中序遍历</title>
    <url>/2022/04/03/Leecode-94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94. 二叉树的中序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历</a></h4><p>给定一个二叉树的根节点 <code>root</code> ，返回 <em>它的 <strong>中序</strong> 遍历</em> 。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,null,2,3]</span><br><span class="line">输出：[1,3,2]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点数目在范围 <code>[0, 100]</code> 内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p><strong>进阶:</strong> 递归算法很简单，你可以通过迭代算法完成吗？</p>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="递归写法："><a href="#递归写法：" class="headerlink" title="递归写法："></a>递归写法：</h3><p>原理同前序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    inorder(result,root);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inorder</span><span class="params">(List&lt;Integer&gt; result,TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//左</span></span><br><span class="line">    inorder(result,root.left);</span><br><span class="line">    <span class="comment">//根</span></span><br><span class="line">    result.add(root.val);</span><br><span class="line">    <span class="comment">//右</span></span><br><span class="line">    inorder(result,root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="迭代写法："><a href="#迭代写法：" class="headerlink" title="迭代写法："></a>迭代写法：</h3><p>前序遍历的顺序是根左右，先访问的是根节点，要处理的也是根节点，<strong>处理顺序和访问顺序是一致的。</strong></p>
<p>但是中序遍历的顺序是左根右，一层一层向下访问，直到到达树的最底部然后再开始处理节点，<strong>处理顺序和访问顺序是不一致的。</strong></p>
<p>所以需要借助指针来帮助访问节点，借助栈来帮助处理节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//辅助指针</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//找到最左侧节点，有可能是含有右子树的左节点</span></span><br><span class="line">        <span class="keyword">if</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur = stack.pop();</span><br><span class="line">            <span class="comment">//将当前值存入结果数组，左</span></span><br><span class="line">            result.add(cur.val);</span><br><span class="line">            <span class="comment">//当前节点的右节点入栈，</span></span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 942 增减字符串匹配</title>
    <url>/2022/05/09/Leecode-942-%E5%A2%9E%E5%87%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="942-增减字符串匹配"><a href="#942-增减字符串匹配" class="headerlink" title="942. 增减字符串匹配"></a><a href="https://leetcode.cn/problems/di-string-match/">942. 增减字符串匹配</a></h4><p>由范围 <code>[0,n]</code> 内所有整数组成的 <code>n + 1</code> 个整数的排列序列可以表示为长度为 <code>n</code> 的字符串 <code>s</code> ，其中:</p>
<ul>
<li>如果 <code>perm[i] &lt; perm[i + 1]</code> ，那么 <code>s[i] == &#39;I&#39;</code> </li>
<li>如果 <code>perm[i] &gt; perm[i + 1]</code> ，那么 <code>s[i] == &#39;D&#39;</code></li>
</ul>
<p>给定一个字符串 <code>s</code> ，重构排列 <code>perm</code> 并返回它。如果有多个有效排列perm，则返回其中 <strong>任何一个</strong> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;IDID&quot;</span><br><span class="line">输出：[0,4,1,3,2]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;III&quot;</span><br><span class="line">输出：[0,1,2,3]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;DDI&quot;</span><br><span class="line">输出：[3,2,0,1]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 105</code></li>
<li><code>s</code> 只包含字符 <code>&quot;I&quot;</code> 或 <code>&quot;D&quot;</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p><strong>贪心：每次选取最大或者最小值加入数组。</strong></p>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] diStringMatch(String s) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> len;</span><br><span class="line">    <span class="comment">//根据题意，数组长度比字符串长度多1</span></span><br><span class="line">    <span class="type">int</span>[] perm = <span class="keyword">new</span> <span class="title class_">int</span>[len + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="comment">//如果是I，选取最小值加入数组</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;I&#x27;</span>) &#123;</span><br><span class="line">            perm[i] = low++;</span><br><span class="line">            <span class="comment">//如果是D，选取最大值加入数组</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;D&#x27;</span>) &#123;</span><br><span class="line">            perm[i] = high--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最终两指针重合，将最后一个值填入数组</span></span><br><span class="line">    perm[len] = high;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> perm;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 944 删列造序</title>
    <url>/2022/05/12/Leecode-944-%E5%88%A0%E5%88%97%E9%80%A0%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="944-删列造序"><a href="#944-删列造序" class="headerlink" title="944. 删列造序"></a><a href="https://leetcode.cn/problems/delete-columns-to-make-sorted/">944. 删列造序</a></h4><p>给你由 <code>n</code> 个小写字母字符串组成的数组 <code>strs</code>，其中每个字符串长度相等。</p>
<p>这些字符串可以每个一行，排成一个网格。例如，<code>strs = [&quot;abc&quot;, &quot;bce&quot;, &quot;cae&quot;]</code> 可以排列为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abc</span><br><span class="line">bce</span><br><span class="line">cae</span><br></pre></td></tr></table></figure>

<p>你需要找出并删除 <strong>不是按字典序升序排列的</strong> 列。在上面的例子（下标从 0 开始）中，列 0（<code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, <code>&#39;c&#39;</code>）和列 2（<code>&#39;c&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;e&#39;</code>）都是按升序排列的，而列 1（<code>&#39;b&#39;</code>, <code>&#39;c&#39;</code>, <code>&#39;a&#39;</code>）不是，所以要删除列 1 。</p>
<p>返回你需要删除的列数。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：strs = [&quot;cba&quot;,&quot;daf&quot;,&quot;ghi&quot;]</span><br><span class="line">输出：1</span><br><span class="line">解释：网格示意如下：</span><br><span class="line">  cba</span><br><span class="line">  daf</span><br><span class="line">  ghi</span><br><span class="line">列 0 和列 2 按升序排列，但列 1 不是，所以只需要删除列 1 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：strs = [&quot;a&quot;,&quot;b&quot;]</span><br><span class="line">输出：0</span><br><span class="line">解释：网格示意如下：</span><br><span class="line">  a</span><br><span class="line">  b</span><br><span class="line">只有列 0 这一列，且已经按升序排列，所以不用删除任何列。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：strs = [&quot;zyx&quot;,&quot;wvu&quot;,&quot;tsr&quot;]</span><br><span class="line">输出：3</span><br><span class="line">解释：网格示意如下：</span><br><span class="line">  zyx</span><br><span class="line">  wvu</span><br><span class="line">  tsr</span><br><span class="line">所有 3 列都是非升序排列的，所以都要删除。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>n == strs.length</code></li>
<li><code>1 &lt;= n &lt;= 100</code></li>
<li><code>1 &lt;= strs[i].length &lt;= 1000</code></li>
<li><code>strs[i]</code> 由小写英文字母组成</li>
</ul>
<h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p>简单模拟题</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDeletionSize</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">    <span class="comment">//行的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> strs.length;</span><br><span class="line">    <span class="comment">//列的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> strs[<span class="number">0</span>].length();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; col; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; row; j++) &#123;</span><br><span class="line">            <span class="comment">//判断当前列元素之间的大小关系</span></span><br><span class="line">            <span class="keyword">if</span> (strs[j].charAt(i) &lt; strs[j - <span class="number">1</span>].charAt(i)) &#123;</span><br><span class="line">                <span class="comment">//更新删除的列数</span></span><br><span class="line">                res++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(M*N)</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 978 最长湍流子数组</title>
    <url>/2022/05/01/Leecode-978-%E6%9C%80%E9%95%BF%E6%B9%8D%E6%B5%81%E5%AD%90%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="978-最长湍流子数组"><a href="#978-最长湍流子数组" class="headerlink" title="978. 最长湍流子数组"></a><a href="https://leetcode-cn.com/problems/longest-turbulent-subarray/">978. 最长湍流子数组</a></h4><p>给定一个整数数组 <code>arr</code> ，返回 <code>arr</code> 的 <em>最大湍流子数组的<strong>长度</strong></em> 。</p>
<p>如果比较符号在子数组中的每个相邻元素对之间翻转，则该子数组是 <strong>湍流子数组</strong> 。</p>
<p>更正式地来说，当 <code>arr</code> 的子数组 <code>A[i], A[i+1], ..., A[j]</code> 满足仅满足下列条件时，我们称其为<em>湍流子数组</em>：</p>
<ul>
<li>若 i &lt;&#x3D; k &lt; j ：<ul>
<li>当 <code>k</code> 为奇数时， <code>A[k] &gt; A[k+1]</code>，且</li>
<li>当 <code>k</code> 为偶数时，<code>A[k] &lt; A[k+1]</code>；</li>
</ul>
</li>
<li>或 若 i &lt;&#x3D; k &lt; j ：<ul>
<li>当 <code>k</code> 为偶数时，<code>A[k] &gt; A[k+1]</code> ，且</li>
<li>当 <code>k</code> 为奇数时， <code>A[k] &lt; A[k+1]</code>。</li>
</ul>
</li>
</ul>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [9,4,2,10,7,8,8,1,9]</span><br><span class="line">输出：5</span><br><span class="line">解释：arr[1] &gt; arr[2] &lt; arr[3] &gt; arr[4] &lt; arr[5]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [4,8,12,16]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [100]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= arr.length &lt;= 4 * 104</code></li>
<li><code>0 &lt;= arr[i] &lt;= 109</code></li>
</ul>
<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p><strong>湍流子数组的形成条件是两种相反的状态，所以需要两个dp数组来分别表示两种状态。</strong></p>
<ol>
<li>确定dp数组及其下标含义：<ol>
<li>定义<code>up[i]</code>表示以位置i结尾，并且<code>arr[i-1] &lt; arr[i]</code>的最长湍流子数组的长度</li>
<li>定义<code>down[i]</code>来表示以位置i结尾，，并且<code>arr[i-1] &gt;arr[i]</code>的最长湍流子数组的长度</li>
</ol>
</li>
<li>确定递推方程：<ol>
<li>当<code>arr[i - 1] &lt; arr[i]</code>，根据下降湍流子数组的长度更新上升数组，<code>up[i] = down[i -1] + 1</code>，并记录最大值</li>
<li>当<code>arr[i - 1] &gt; arr[i]</code>，根据上升湍流子数组的长度更新上升数组，<code>down[i] = up[i -1] + 1</code>，并记录最大值</li>
</ol>
</li>
<li>dp数组如何初始化：<ol>
<li>因为每个数字本身就是一个最小的湍流子数组，所以<code>up[i]</code>和<code>down[i]</code>初始化都为1</li>
</ol>
</li>
</ol>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxTurbulenceSize</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> arr.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于记录最长湍流子数组长度</span></span><br><span class="line">    <span class="type">int</span>[] up = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">    <span class="type">int</span>[] down = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//填充值</span></span><br><span class="line">    Arrays.fill(up, <span class="number">1</span>);</span><br><span class="line">    Arrays.fill(down, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结果值，因为每个数字都可以看做为一个最小的湍流子数组，所以初始值为1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="comment">//上升</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; arr[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="comment">//更新上升数组并比较子数组最长长度</span></span><br><span class="line">            up[i] = down[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            ans = Math.max(ans, up[i]);</span><br><span class="line">            <span class="comment">//下降</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &lt; arr[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="comment">//更新下降数组并比较子数组最长长度</span></span><br><span class="line">            down[i] = up[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            ans = Math.max(ans, down[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，只需要遍历一次数组。</li>
<li>空间复杂度：O(N)，使用到两个额外数组。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 98 验证二叉搜索树</title>
    <url>/2022/04/06/Leecode-98-%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98. 验证二叉搜索树"></a><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/">98. 验证二叉搜索树</a></h4><p>给你一个二叉树的根节点 <code>root</code> ，判断其是否是一个有效的二叉搜索树。</p>
<p><strong>有效</strong> 二叉搜索树定义如下：</p>
<ul>
<li>节点的左子树只包含 <strong>小于</strong> 当前节点的数。</li>
<li>节点的右子树只包含 <strong>大于</strong> 当前节点的数。</li>
<li>所有左子树和右子树自身必须也是二叉搜索树。</li>
</ul>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [2,1,3]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [5,1,4,null,null,3,6]</span><br><span class="line">输出：false</span><br><span class="line">解释：根节点的值是 5 ，但是右子节点的值是 4 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点数目范围在<code>[1, 104]</code> 内</li>
<li><code>-231 &lt;= Node.val &lt;= 231 - 1</code></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h4 id="写法一，借助数组递归："><a href="#写法一，借助数组递归：" class="headerlink" title="写法一，借助数组递归："></a>写法一，借助数组递归：</h4><p>二叉搜索树的中序遍历是递增序列，所以只要对该二叉树进行中序遍历，然后检查其是否有序即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存储遍历后结点值的数组</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    traveral(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (list.get(i) &lt;= list.get(i - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">traveral</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    traveral(root.left);</span><br><span class="line">    list.add(root.val);</span><br><span class="line">    traveral(root.right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="写法二，自身递归："><a href="#写法二，自身递归：" class="headerlink" title="写法二，自身递归："></a>写法二，自身递归：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存储中序遍历中前一个结点的值</span></span><br><span class="line"><span class="comment">//因为题目中Integer.MIN_VALUE在结点取值范围内，所以需要用Long</span></span><br><span class="line"><span class="type">long</span> <span class="variable">pre</span> <span class="operator">=</span> Long.MIN_VALUE;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//空树也是二叉搜索树</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//左</span></span><br><span class="line">    <span class="keyword">if</span> (!isValidBST(root.left))&#123;</span><br><span class="line">        <span class="comment">//如果左子树不是二叉搜索树，直接返回false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//中</span></span><br><span class="line">    <span class="comment">//判断当前节点值是否大于前一节点值</span></span><br><span class="line">    <span class="comment">//二叉搜索树中不能有值相同的节点，所以直接用&lt;=进行判断不满足条件的情况</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt;= pre)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新前一节点值</span></span><br><span class="line">    pre = root.val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//右</span></span><br><span class="line">    <span class="keyword">return</span> isValidBST(root.right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 删除并获得点数</title>
    <url>/2022/05/02/Leecode-%E5%88%A0%E9%99%A4%E5%B9%B6%E8%8E%B7%E5%BE%97%E7%82%B9%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="740-删除并获得点数"><a href="#740-删除并获得点数" class="headerlink" title="740. 删除并获得点数"></a><a href="https://leetcode-cn.com/problems/delete-and-earn/">740. 删除并获得点数</a></h4><p>给你一个整数数组 <code>nums</code> ，你可以对它进行一些操作。</p>
<p>每次操作中，选择任意一个 <code>nums[i]</code> ，删除它并获得 <code>nums[i]</code> 的点数。之后，你必须删除 <strong>所有</strong> 等于 <code>nums[i] - 1</code> 和 <code>nums[i] + 1</code> 的元素。</p>
<p>开始你拥有 <code>0</code> 个点数。返回你能通过这些操作获得的最大点数。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,4,2]</span><br><span class="line">输出：6</span><br><span class="line">解释：</span><br><span class="line">删除 4 获得 4 个点数，因此 3 也被删除。</span><br><span class="line">之后，删除 2 获得 2 个点数。总共获得 6 个点数。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,2,3,3,3,4]</span><br><span class="line">输出：9</span><br><span class="line">解释：</span><br><span class="line">删除 3 获得 3 个点数，接着要删除两个 2 和 4 。</span><br><span class="line">之后，再次删除 3 获得 3 个点数，再次删除 3 获得 3 个点数。</span><br><span class="line">总共获得 9 个点数。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 2 * 104</code></li>
<li><code>1 &lt;= nums[i] &lt;= 104</code></li>
</ul>
<h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p>类似于“打家劫舍“升级版，提升了报警系统，在偷金额为3的房间的时候，金额为2和金额为4的房间会报警，但是其余金额为3的房间继续偷就不会触发报警系统。</p>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteAndEarn</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 每个位置上的数字都是在前两种结果的基础上进行选择的：</span></span><br><span class="line"><span class="comment">     *       1.如果不删除当前i位置元素，则得到的是前一个位置上元素的最优解。</span></span><br><span class="line"><span class="comment">     *       2.如果删除当前i位置元素，则会得到i -2 位置上的最优结果加上当前值乘以当前值的个数。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 注：偷了第i位置上的元素之后，再偷这个元素就不会有问题。</span></span><br><span class="line"><span class="comment">     * 每次取以上两个结果中最大的值进行记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 打家劫舍升级版</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        max = Math.max(max, nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造一个记录数组元素出现次数的辅助数组</span></span><br><span class="line">    <span class="comment">//  nums:  2 , 4, 3, 2, 3, 3</span></span><br><span class="line">    <span class="comment">//  all:   0,  0, 2, 3, 1</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] all = <span class="keyword">new</span> <span class="title class_">int</span>[max + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> item : nums) &#123;</span><br><span class="line">        all[item]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//辅助dp数组</span></span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[max + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//边界条件</span></span><br><span class="line">    dp[<span class="number">1</span>] = all[<span class="number">1</span>] * <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">2</span>] = Math.max(dp[<span class="number">1</span>], all[<span class="number">2</span>] * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= max; i++) &#123;</span><br><span class="line">        dp[i] = Math.max(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + all[i] * i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[max];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，需要遍历数组。</li>
<li>空间复杂度：O(N)，需要两个辅助数组。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 面试01.05 一次编辑</title>
    <url>/2022/05/13/Leecode-%E9%9D%A2%E8%AF%9501-05-%E4%B8%80%E6%AC%A1%E7%BC%96%E8%BE%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="面试题-01-05-一次编辑"><a href="#面试题-01-05-一次编辑" class="headerlink" title="面试题 01.05. 一次编辑"></a><a href="https://leetcode.cn/problems/one-away-lcci/">面试题 01.05. 一次编辑</a></h4><p>字符串有三种编辑操作:插入一个字符、删除一个字符或者替换一个字符。 给定两个字符串，编写一个函数判定它们是否只需要一次(或者零次)编辑。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">first = &quot;pale&quot;</span><br><span class="line">second = &quot;ple&quot;</span><br><span class="line">输出: True</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">first = &quot;pales&quot;</span><br><span class="line">second = &quot;pal&quot;</span><br><span class="line">输出: False</span><br></pre></td></tr></table></figure>

<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>模拟：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">oneEditAway</span><span class="params">(String first, String second)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 分情况讨论：</span></span><br><span class="line"><span class="comment">     * first长度为m，second长度为n</span></span><br><span class="line"><span class="comment">     *           1.插入了一个字符，n - m = 1,使用双指针进行比较</span></span><br><span class="line"><span class="comment">     *           2.删除了一个字符，m - n = 1，使用双指针进行比较</span></span><br><span class="line"><span class="comment">     *           3.替换了一个字符，m = n，遍历两字符串，看逐个字符是否相同即可</span></span><br><span class="line"><span class="comment">     *           4.不符合一次编辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> first.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> second.length();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//情况一：插入字符</span></span><br><span class="line">    <span class="keyword">if</span> (n - m == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> inOrDel(first, second);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m - n == <span class="number">1</span>) &#123;<span class="comment">//情况二：删除字符</span></span><br><span class="line">        <span class="keyword">return</span> inOrDel(second, first);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m == n) &#123;<span class="comment">//情况三：替换字符,存在两字符串长度为1的情况，所以需要来记录字符不同的个数来判断</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first.charAt(i) != second.charAt(i)) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//情况四：不符合一次编辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">inOrDel</span><span class="params">(String shorter, String longer)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> shorter.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> longer.length();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> <span class="number">0</span>, index2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index1 &lt; m &amp;&amp; index2 &lt; n) &#123;</span><br><span class="line">        <span class="comment">//如果当前字符不相同，则只移动长字符串的指针</span></span><br><span class="line">        <span class="keyword">if</span> (shorter.charAt(index1) == longer.charAt(index2)) &#123;</span><br><span class="line">            index1++;</span><br><span class="line">        &#125;</span><br><span class="line">        index2++;</span><br><span class="line">        <span class="comment">//两字符串中有超过一个字符不相同了，不满足条件</span></span><br><span class="line">        <span class="keyword">if</span> (index2 - index1 &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(m+n)</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Linux常用命令小结</title>
    <url>/2022/06/15/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1、Linux命令初体验"><a href="#1、Linux命令初体验" class="headerlink" title="1、Linux命令初体验"></a>1、Linux命令初体验</h1><h2 id="1-1-常用命令演示"><a href="#1-1-常用命令演示" class="headerlink" title="1.1 常用命令演示"></a>1.1 常用命令演示</h2><p>Linux主要包含以下几个常用指令： </p>
<table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>对应英文</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>ls [目录名]</td>
<td>list</td>
<td>查看当前目录下的内容</td>
</tr>
<tr>
<td>2</td>
<td>pwd</td>
<td>print work directory</td>
<td>查看当前所在目录</td>
</tr>
<tr>
<td>3</td>
<td>cd [目录名]</td>
<td>change directory</td>
<td>切换目录</td>
</tr>
<tr>
<td>4</td>
<td>touch [文件名]</td>
<td>touch</td>
<td>如果文件不存在,创建文件</td>
</tr>
<tr>
<td>5</td>
<td>mkdir [目录名]</td>
<td>make directory</td>
<td>创建目录</td>
</tr>
<tr>
<td>6</td>
<td>rm [文件名]</td>
<td>remove</td>
<td>删除指定文件</td>
</tr>
</tbody></table>
<h3 id="指令演示"><a href="#指令演示" class="headerlink" title="指令演示"></a>指令演示</h3><p><strong>1、ls</strong> </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808191735454.png" alt="image-20220808191735454" loading="lazy"></p>
<p>指令解读: </p>
<p>​	ls 	查看当前目录下的内容(文件及目录)</p>
<p>​	ls &#x2F;   查看指定目录(&#x2F;)下的内容</p>
<p><strong>2、pwd</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808191752381.png" alt="image-20220808191752381" loading="lazy"></p>
<blockquote>
<p>指令解读: </p>
<p>​	pwd	查看当前所在目录</p>
</blockquote>
<p><strong>3、cd</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808191930247.png" alt="image-20220808191930247" loading="lazy"></p>
<blockquote>
<p>指令解读: </p>
<p>​	cd  &#x2F;		切换到根目录</p>
<p>​	cd  &#x2F;root	切换到&#x2F;root目录</p>
</blockquote>
<p><strong>4、touch</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808191904946.png" alt="image-20220808191904946" loading="lazy"></p>
<blockquote>
<p>指令解读: </p>
<p>​	touch  1.txt    创建文件1.txt</p>
<p>​	touch  2.txt 3.txt 4.txt   一次性创建文件2.txt,3.txt,3.txt</p>
</blockquote>
<p><strong>5、mkdir</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808192057663.png" alt="image-20220808192057663" loading="lazy"></p>
<blockquote>
<p>指令解读: </p>
<p>​	mkdir 01 	创建文件夹01 </p>
</blockquote>
<p><strong>6、rm</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808192212005.png" alt="image-20220808192212005" loading="lazy"></p>
<blockquote>
<p>指令解读: </p>
<p>​	rm  4.txt	删除文件 (删除文件时,需要确认,输入y, 代表确定)</p>
</blockquote>
<h3 id="命令使用小技巧"><a href="#命令使用小技巧" class="headerlink" title="命令使用小技巧"></a>命令使用小技巧</h3><p>在我们使用Linux系统命令时，可以使用以下几个技巧： </p>
<ol>
<li><p>Tab键自动补全</p>
</li>
<li><p>连续两次Tab键，给出操作提示</p>
</li>
<li><p>使用上下箭头快速调出曾经使用过的命令</p>
</li>
<li><p>使用clear命令或者Ctrl+l快捷键实现清屏</p>
</li>
</ol>
<h3 id="Linux命令格式"><a href="#Linux命令格式" class="headerlink" title="Linux命令格式"></a>Linux命令格式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command [-options] [parameter]</span><br><span class="line">	</span><br><span class="line">说明: </span><br><span class="line">	command: 	 命令名</span><br><span class="line">	[-options]:  选项，可用来对命令进行控制，也可以省略</span><br><span class="line">	[parameter]: 传给命令的参数，可以是零个、一个或者多个</span><br><span class="line">	</span><br><span class="line">注意: </span><br><span class="line">	[] 	 代表可选</span><br><span class="line">	命令名、选项、参数之间有空格进行分隔</span><br></pre></td></tr></table></figure>

<p><strong>示例：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808193036969.png" alt="image-20220808193036969" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808193449458.png" alt="image-20220808193449458" loading="lazy"></p>
<h1 id="2、文件目录操作命令"><a href="#2、文件目录操作命令" class="headerlink" title="2、文件目录操作命令"></a>2、文件目录操作命令</h1><h4 id="1、-ls"><a href="#1、-ls" class="headerlink" title="1、 ls"></a>1、 ls</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 显示指定目录下的内容</span><br><span class="line">语法: ls [-al] [dir]</span><br><span class="line">说明: </span><br><span class="line">	-a 显示所有文件及目录 (. 开头的隐藏文件也会列出)</span><br><span class="line">	-l 除文件名称外，同时将文件型态(d表示目录，-表示文件)、权限、拥有者、文件大小等信息详细列出</span><br><span class="line">	</span><br><span class="line">注意: </span><br><span class="line">	由于我们使用ls命令时经常需要加入-l选项，所以Linux为ls -l命令提供了一种简写方式，即ll</span><br><span class="line">	</span><br><span class="line">常见用法: </span><br><span class="line">	ls -al 	查看当前目录的所有文件及目录详细信息</span><br><span class="line">	ls -al /etc   查看/etc目录下所有文件及目录详细信息</span><br><span class="line">	ll  	查看当前目录文件及目录的详细信息 </span><br></pre></td></tr></table></figure>

<p><strong>示例:</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808194205997.png" alt="image-20220808194205997" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808194242037.png" alt="image-20220808194242037" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808194309473.png" alt="image-20220808194309473" loading="lazy"></p>
<h4 id="2、cd"><a href="#2、cd" class="headerlink" title="2、cd"></a>2、cd</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 用于切换当前工作目录，即进入指定目录</span><br><span class="line">语法: cd [dirName]</span><br><span class="line">	</span><br><span class="line">特殊说明: </span><br><span class="line">	~	表示用户的home目录</span><br><span class="line">	. 	表示目前所在的目录</span><br><span class="line">	.. 	表示目前目录位置的上级目录</span><br><span class="line">	</span><br><span class="line">举例: </span><br><span class="line">	cd 	..		切换到当前目录的上级目录</span><br><span class="line">	cd 	~		切换到用户的home目录</span><br><span class="line">	cd 	/usr/local	切换到/usr/local目录</span><br></pre></td></tr></table></figure>

<blockquote>
<p>备注: </p>
<p>​	用户的home目录 </p>
<p>​	root用户	&#x2F;root</p>
<p>​	其他用户	&#x2F;home&#x2F;xxx</p>
</blockquote>
<p><strong>示例：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808194511923.png" alt="image-20220808194511923" loading="lazy"></p>
<h4 id="3、cat"><a href="#3、cat" class="headerlink" title="3、cat"></a>3、cat</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 用于显示文件内容</span><br><span class="line">语法: cat [-n] fileName</span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line">	-n: 由1开始对所有输出的行数编号</span><br><span class="line"></span><br><span class="line">举例:</span><br><span class="line">	cat /etc/profile		查看/etc目录下的profile文件内容</span><br></pre></td></tr></table></figure>



<p><strong>示例:</strong> </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808194705417.png" alt="image-20220808194705417" loading="lazy"></p>
<p>cat -n &#x2F;etc&#x2F;profile，每一行前面就加上了编号</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808194746567.png" alt="image-20220808194746567" loading="lazy"></p>
<p>cat 指令会一次性查看文件的所有内容，如果文件内容比较多，这个时候查看起来就不是很方便了，这个时候我们可以通过一个新的指令more。</p>
<h4 id="4、more"><a href="#4、more" class="headerlink" title="4、more"></a>4、more</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 以分页的形式显示文件内容</span><br><span class="line">语法: more fileName</span><br><span class="line"></span><br><span class="line">操作说明:</span><br><span class="line">    回车键 	向下滚动一行</span><br><span class="line">    空格键 	向下滚动一屏</span><br><span class="line">    b 		返回上一屏</span><br><span class="line">    q或者Ctrl+C	退出more</span><br><span class="line">	</span><br><span class="line">举例：</span><br><span class="line">	more /etc/profile		以分页方式显示/etc目录下的profile文件内容</span><br></pre></td></tr></table></figure>



<p><strong>示例：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808195019010.png" alt="image-20220808195019010" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808195029006.png" alt="image-20220808195029006" loading="lazy"></p>
<p>当我们在查看一些比较大的文件时，我们可能需要经常查询文件尾部的数据信息，那这个时候如果文件很大，我们要一直向下翻页，直到最后一页，去看最新添加的数据，这种方式就比较繁琐了，此时，我们可以借助于tail指令。</p>
<h4 id="5、tail"><a href="#5、tail" class="headerlink" title="5、tail"></a>5、tail</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 查看文件末尾的内容</span><br><span class="line">语法: tail [-f] fileName</span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line">	-f : 动态读取文件末尾内容并显示，通常用于日志文件的内容输出</span><br><span class="line">	</span><br><span class="line">举例: </span><br><span class="line">tail /etc/profile		显示/etc目录下的profile文件末尾10行的内容</span><br><span class="line">tail -20 /etc/profile	显示/etc目录下的profile文件末尾20行的内容</span><br><span class="line">tail -f /itcast/my.log	动态读取/itcast目录下的my.log文件末尾内容并显示</span><br></pre></td></tr></table></figure>



<p><strong>示例：</strong></p>
<p>默认查看文件尾部10行数据</p>
<p><img src="C:/Users/%E9%99%88%E7%8E%89%E7%9A%93/AppData/Roaming/Typora/typora-user-images/image-20220808195619165.png" alt="image-20220808195619165" loading="lazy"></p>
<p>最后两行</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808195206932.png" alt="image-20220808195206932" loading="lazy"></p>
<p>动态读取文件尾部的数据</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808202645939.png" alt="image-20220808202645939" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808202705095.png" alt="image-20220808202705095" loading="lazy"></p>
<p>在窗口1中执行指令 <code>tail -f 1.txt</code> 动态查看文件尾部的数据。然后在顶部的标签中右键选择 “复制标签”，打开新的窗口2 , 此时再新打开的窗口2中执行指令 <code>echo 1 &gt;&gt; 1.txt</code> , 往1.txt文件尾部追加内容，然后我们就可以在窗口1中看到最新的文件尾部的数据。</p>
<p>如果我们不想查看文件尾部的数据了，可以直接使用快捷键 Ctrl+C ， 结束当前进程。</p>
<h4 id="6、mkdir"><a href="#6、mkdir" class="headerlink" title="6、mkdir"></a>6、mkdir</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 创建目录</span><br><span class="line">语法: mkdir [-p] dirName</span><br><span class="line"></span><br><span class="line">说明: </span><br><span class="line">	-p: 确保目录名称存在，不存在的就创建一个。通过此选项，可以实现多层目录同时创建</span><br><span class="line"></span><br><span class="line">举例: </span><br><span class="line">    mkdir itcast  在当前目录下，建立一个名为itcast的子目录</span><br><span class="line">    mkdir -p itcast/test   在工作目录下的itcast目录中建立一个名为test的子目录，若itcast目录不存在，则建立一个</span><br></pre></td></tr></table></figure>

<p><strong>示例:</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808203201830.png" alt="image-20220808203201830" loading="lazy"></p>
<h4 id="7、-rmdir"><a href="#7、-rmdir" class="headerlink" title="7、 rmdir"></a>7、 rmdir</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 删除空目录</span><br><span class="line">语法: rmdir [-p] dirName</span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line">	-p: 当子目录被删除后使父目录为空目录的话，则一并删除</span><br><span class="line"></span><br><span class="line">举例:</span><br><span class="line">    rmdir itcast   删除名为itcast的空目录</span><br><span class="line">    rmdir -p itcast/test   删除itcast目录中名为test的子目录，若test目录删除后itcast目录变为空目录，则也被删除</span><br><span class="line">    rmdir itcast*   删除名称以itcast开始的空目录</span><br></pre></td></tr></table></figure>

<p><strong>示例:</strong> </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808203530008.png" alt="image-20220808203530008" loading="lazy"></p>
<h4 id="8、rm"><a href="#8、rm" class="headerlink" title="8、rm"></a>8、rm</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 删除文件或者目录</span><br><span class="line">语法: rm [-rf] name</span><br><span class="line"></span><br><span class="line">说明: </span><br><span class="line">    -r: 将目录及目录中所有文件（目录）逐一删除，即递归删除</span><br><span class="line">    -f: 无需确认，直接删除</span><br><span class="line">	</span><br><span class="line">举例: </span><br><span class="line">    rm -r itcast/     删除名为itcast的目录和目录中所有文件，删除前需确认</span><br><span class="line">    rm -rf itcast/    无需确认，直接删除名为itcast的目录和目录中所有文件</span><br><span class="line">    rm -f hello.txt   无需确认，直接删除hello.txt文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>示例:</strong> </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808203941220.png" alt="image-20220808203941220" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808204021728.png" alt="image-20220808204021728" loading="lazy"></p>
<p>&#x3D;&#x3D;注意: 对于 rm -rf xxx 这样的指令，在执行的时候，一定要慎重，确认无误后再进行删除，避免误删。&#x3D;&#x3D;</p>
<h1 id="3、-拷贝移动命令"><a href="#3、-拷贝移动命令" class="headerlink" title="3、 拷贝移动命令"></a>3、 拷贝移动命令</h1><h4 id="1、-cp"><a href="#1、-cp" class="headerlink" title="1、 cp"></a>1、 cp</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 用于复制文件或目录</span><br><span class="line">语法: cp [-r] source dest</span><br><span class="line"></span><br><span class="line">说明: </span><br><span class="line">	-r: 如果复制的是目录需要使用此选项，此时将复制该目录下所有的子目录和文件</span><br><span class="line"></span><br><span class="line">举例: </span><br><span class="line">    cp hello.txt itcast/            将hello.txt复制到itcast目录中</span><br><span class="line">    cp hello.txt ./hi.txt           将hello.txt复制到当前目录，并改名为hi.txt</span><br><span class="line">    cp -r itcast/ ./itheima/    	将itcast目录和目录下所有文件复制到itheima目录下</span><br><span class="line">    cp -r itcast/* ./itheima/ 	 	将itcast目录下所有文件复制到itheima目录下</span><br></pre></td></tr></table></figure>

<p><strong>示例:</strong> </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808204233101.png" alt="image-20220808204233101" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808204242485.png" alt="image-20220808204242485" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808204250220.png" alt="image-20220808204250220" loading="lazy"></p>
<p><strong>如果拷贝的内容是目录，需要加上参数 -r</strong>。 </p>
<h4 id="2、mv"><a href="#2、mv" class="headerlink" title="2、mv"></a>2、mv</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 为文件或目录改名、或将文件或目录移动到其它位置</span><br><span class="line">语法: mv source dest</span><br><span class="line"></span><br><span class="line">举例: </span><br><span class="line">    mv hello.txt hi.txt                 将hello.txt改名为hi.txt</span><br><span class="line">    mv hi.txt itheima/                  将文件hi.txt移动到itheima目录中</span><br><span class="line">    mv hi.txt itheima/hello.txt   		将hi.txt移动到itheima目录中，并改名为hello.txt</span><br><span class="line">    mv itcast/ itheima/                 如果itheima目录不存在，将itcast目录改名为itheima</span><br><span class="line">    mv itcast/ itheima/                 如果itheima目录存在，将itcast目录移动到itheima目录中</span><br></pre></td></tr></table></figure>



<p><strong>示例:</strong> </p>
<p>mv 命令既能够改名，又可以移动，具体是改名还是移动,系统会根据我们输入的参数进行判定(如果第二个参数dest是一个已存在的目录,将执行移动操作,其他情况都是改名)</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808204308814.png" alt="image-20220808204308814" loading="lazy"></p>
<h1 id="4、-打包压缩命令"><a href="#4、-打包压缩命令" class="headerlink" title="4、 打包压缩命令"></a>4、 打包压缩命令</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 对文件进行打包、解包、压缩、解压</span><br><span class="line">语法: tar  [-zcxvf]  fileName  [files]</span><br><span class="line">    包文件后缀为.tar表示只是完成了打包，并没有压缩</span><br><span class="line">    包文件后缀为.tar.gz表示打包的同时还进行了压缩</span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line">    -z: z代表的是gzip，通过gzip命令处理文件，gzip可以对文件压缩或者解压</span><br><span class="line">    -c: c代表的是create，即创建新的包文件</span><br><span class="line">    -x: x代表的是extract，实现从包文件中还原文件</span><br><span class="line">    -v: v代表的是verbose，显示命令的执行过程</span><br><span class="line">    -f: f代表的是file，用于指定包文件的名称</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line">    打包</span><br><span class="line">        tar -cvf hello.tar ./*		  		将当前目录下所有文件打包，打包后的文件名为hello.tar</span><br><span class="line">        tar -zcvf hello.tar.gz ./*		  	将当前目录下所有文件打包并压缩，打包后的文件名为hello.tar.gz</span><br><span class="line">		</span><br><span class="line">    解包</span><br><span class="line">        tar -xvf hello.tar		  			将hello.tar文件进行解包，并将解包后的文件放在当前目录</span><br><span class="line">        tar -zxvf hello.tar.gz		  		将hello.tar.gz文件进行解压，并将解压后的文件放在当前目录</span><br><span class="line">        tar -zxvf hello.tar.gz -C /usr/local     将hello.tar.gz文件进行解压，并将解压后的文件放在/usr/local目录</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>示例:</strong> </p>
<ol>
<li><strong>打包</strong></li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808205139104.png" alt="image-20220808205139104" loading="lazy"></p>
<ol start="2">
<li><strong>打包并压缩</strong></li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808205157828.png" alt="image-20220808205157828" loading="lazy"></p>
<ol start="3">
<li><strong>解包</strong></li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20210811190307630.png" alt="image-20210811190307630" loading="lazy"></p>
<ol start="4">
<li><strong>解压</strong></li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20210811190450820.png" alt="image-20210811190450820" loading="lazy"></p>
<p>解压到指定目录,需要加上参数 -C</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20210811190626414.png" alt="image-20210811190626414" loading="lazy"></p>
<h1 id="5、-文本编辑命令"><a href="#5、-文本编辑命令" class="headerlink" title="5、 文本编辑命令"></a>5、 文本编辑命令</h1><p>文本编辑的命令，主要包含两个: vi 和 vim，两个命令的用法类似，我们课程中主要讲解vim的使用。</p>
<h4 id="1、-vi-amp-vim介绍"><a href="#1、-vi-amp-vim介绍" class="headerlink" title="1、 vi&amp;vim介绍"></a>1、 vi&amp;vim介绍</h4><p><strong>作用:</strong> vi命令是Linux系统提供的一个文本编辑工具，可以对文件内容进行编辑，类似于Windows中的记事本</p>
<p>语法: vi fileName</p>
<p>说明: </p>
<ol>
<li>vim是从vi发展来的一个功能更加强大的文本编辑工具，编辑文件时可以对文本内容进行着色，方便我们对文件进行编辑处理，所以实际工作中vim更加常用。</li>
<li>要使用vim命令，需要我们自己完成安装。可以使用下面的命令来完成安装：<code>yum install vim</code></li>
</ol>
<h4 id="2、-vim安装"><a href="#2、-vim安装" class="headerlink" title="2、 vim安装"></a>2、 vim安装</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808210625425.png" alt="image-20220808210625425" loading="lazy"></p>
<p>安装成功~</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808210640869.png" alt="image-20220808210640869" loading="lazy"></p>
<h4 id="3、vim使用"><a href="#3、vim使用" class="headerlink" title="3、vim使用"></a>3、vim使用</h4><p>作用: 对文件内容进行编辑，vim其实就是一个文本编辑器<br>语法: vim fileName<br>说明:<br>    1). 在使用vim命令编辑文件时，如果指定的文件存在则直接打开此文件。如果指定的文件不存在则新建文件。<br>    2). vim在进行文本编辑时共分为三种模式，分别是 命令模式（Command mode），插入模式（Insert mode）和底行模式（Last line mode）。这三种模式之间可以相互切换。我们在使用vim时一定要注意我们当前所处的是哪种模式。</p>
<p>三种模式:<br>    - 命令模式<br>      A. 命令模式下可以查看文件内容、移动光标（上下左右箭头、gg、G）<br>      B. 通过vim命令打开文件后，默认进入命令模式<br>      C. 另外两种模式需要首先进入命令模式，才能进入彼此</p>
<pre><code>  | 命令模式指令 | 含义                              |
  | ------------ | --------------------------------- |
  | gg           | 定位到文本内容的第一行            |
  | G            | 定位到文本内容的最后一行          |
  | dd           | 删除光标所在行的数据              |
  | ndd          | 删除当前光标所在行及之后的n行数据 |
  | u            | 撤销操作                          |
  | shift+zz     | 保存并退出                        |
  | i 或 a 或 o  | 进入插入模式                      |
</code></pre>
<p>​      </p>
<ul>
<li><p>插入模式<br>A. 插入模式下可以对文件内容进行编辑<br>B. 在命令模式下按下[i,a,o]任意一个，可以进入插入模式。进入插入模式后，下方会出现【insert】字样<br>C. 在插入模式下按下ESC键，回到命令模式</p>
</li>
<li><p>底行模式<br>A. 底行模式下可以通过命令对文件内容进行查找、显示行号、退出等操作<br>B. 在命令模式下按下[:,&#x2F;]任意一个，可以进入底行模式<br>C. 通过&#x2F;方式进入底行模式后，可以对文件内容进行查找<br>D. 通过:方式进入底行模式后，可以输入wq（保存并退出）、q!（不保存退出）、set nu（显示行号）</p>
<table>
<thead>
<tr>
<th>底行模式命令</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>:wq</td>
<td>保存并退出</td>
</tr>
<tr>
<td>:q!</td>
<td>不保存退出</td>
</tr>
<tr>
<td>:set nu</td>
<td>显示行号</td>
</tr>
<tr>
<td>:set nonu</td>
<td>取消行号显示</td>
</tr>
<tr>
<td>:n</td>
<td>定位到第n行, 如 :10 就是定位到第10行</td>
</tr>
</tbody></table>
</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808202245567.png" alt="image-20220808202245567" loading="lazy"></p>
<p><strong>示例：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808211241852.png" alt="image-20220808211241852" loading="lazy"></p>
<h1 id="6、查找命令"><a href="#6、查找命令" class="headerlink" title="6、查找命令"></a>6、查找命令</h1><h4 id="1、-find"><a href="#1、-find" class="headerlink" title="1、 find"></a>1、 find</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 在指定目录下查找文件</span><br><span class="line">语法: find dirName -option fileName</span><br><span class="line">举例:</span><br><span class="line">    find  .  –name &quot;*.java&quot;			在当前目录及其子目录下查找.java结尾文件</span><br><span class="line">    find  /itcast  -name &quot;*.java&quot;	在/itcast目录及其子目录下查找.java结尾的文件</span><br></pre></td></tr></table></figure>

<p><strong>操作示例:</strong> </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808211301070.png" alt="image-20220808211301070" loading="lazy"></p>
<h4 id="2、-grep"><a href="#2、-grep" class="headerlink" title="2、 grep"></a>2、 grep</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 从指定文件中查找指定的文本内容</span><br><span class="line">语法: grep word fileName</span><br><span class="line">举例: </span><br><span class="line">    grep Hello HelloWorld.java	查找HelloWorld.java文件中出现的Hello字符串的位置</span><br><span class="line">    grep hello *.java			查找当前目录中所有.java结尾的文件中包含hello字符串的位置</span><br></pre></td></tr></table></figure>

<p><strong>操作示例:</strong> </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808211309511.png" alt="image-20220808211309511" loading="lazy"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux软件安装&amp;项目部署</title>
    <url>/2022/08/07/Linux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、Linux软件安装方式"><a href="#一、Linux软件安装方式" class="headerlink" title="一、Linux软件安装方式"></a>一、Linux软件安装方式</h1><h3 id="1-1-软件安装方式"><a href="#1-1-软件安装方式" class="headerlink" title="1.1 软件安装方式"></a>1.1 软件安装方式</h3><p>在Linux系统中，安装软件的方式主要有四种，这四种安装方式的特点如下：</p>
<table>
<thead>
<tr>
<th>安装方式</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>二进制发布包安装</td>
<td>软件已经针对具体平台编译打包发布，只要解压，修改配置即可</td>
</tr>
<tr>
<td>rpm安装</td>
<td>软件已经按照redhat的包管理规范进行打包，使用rpm命令进行安装，&#x3D;&#x3D;不能自行解决库依赖问题&#x3D;&#x3D;</td>
</tr>
<tr>
<td>yum安装</td>
<td>一种在线软件安装方式，本质上还是rpm安装，自动下载安装包并安装，安装过程中自动解决库依赖问题(安装过程需要联网)</td>
</tr>
<tr>
<td>源码编译安装</td>
<td>软件以源码工程的形式发布，需要自己编译打包</td>
</tr>
</tbody></table>
<h3 id="1-2-安装JDK"><a href="#1-2-安装JDK" class="headerlink" title="1.2 安装JDK"></a>1.2 安装JDK</h3><h4 id="1-上传安装包"><a href="#1-上传安装包" class="headerlink" title="1. 上传安装包"></a><strong>1. 上传安装包</strong></h4><p>使用FinalShell自带的上传工具将jdk的二进制发布包上传到Linux</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809194738668.png" alt="image-20220809194738668" loading="lazy"></p>
<p>由于上述在进行文件上传时，选择的上传目录为根目录 &#x2F;，上传完毕后，我们执行指令 cd &#x2F; 切换到根目录下，可以看到安装包已经上传成功了。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809194748923.png" alt="image-20220809194748923" loading="lazy"></p>
<h4 id="2-解压安装包"><a href="#2-解压安装包" class="headerlink" title="2.解压安装包"></a>2.解压安装包</h4><p>执行如下指令，将上传上来的压缩包进行解压，并通过-C参数指定解压文件存放目录为 &#x2F;usr&#x2F;local。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809195212651.png" alt="image-20220809195212651" loading="lazy"></p>
<p>来到&#x2F;usr&#x2F;local，查看文件，解压成功。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809195019071.png" alt="image-20220809195019071" loading="lazy"></p>
<h4 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3.配置环境变量"></a>3.配置环境变量</h4><p>环境变量要在&#x2F;etc&#x2F;profile文件中进行配置，使用vim命令修改&#x2F;etc&#x2F;profile文件</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809195653433.png" alt="image-20220809195653433" loading="lazy">在文件末尾加入如下配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=/usr/local/jdk1.8.0_171</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>

<p>具体操作指令如下: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1). 编辑/etc/profile文件，进入命令模式</span><br><span class="line">	vim /etc/profile</span><br><span class="line"></span><br><span class="line">2). 在命令模式中，输入指令 G ， 切换到文件最后</span><br><span class="line">	G</span><br><span class="line"></span><br><span class="line">3). 在命令模式中输入 i/a/o 进入插入模式，然后切换到文件最后一行</span><br><span class="line">	i</span><br><span class="line"></span><br><span class="line">4). 将上述的配置拷贝到文件中</span><br><span class="line">	JAVA_HOME=/usr/local/jdk1.8.0_171</span><br><span class="line">	PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">	</span><br><span class="line">5). 从插入模式，切换到指令模式</span><br><span class="line">	ESC</span><br><span class="line">	</span><br><span class="line">6). 按:进入底行模式，然后输入wq，回车保存</span><br><span class="line">	:wq</span><br></pre></td></tr></table></figure>



<h4 id="4-重新加载profile文件"><a href="#4-重新加载profile文件" class="headerlink" title="4. 重新加载profile文件"></a><strong>4. 重新加载profile文件</strong></h4><p>为了使更改的配置立即生效，需要重新加载profile文件，执行命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h4 id="5-检查安装是否成功"><a href="#5-检查安装是否成功" class="headerlink" title="5. 检查安装是否成功"></a><strong>5. 检查安装是否成功</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809195916518.png" alt="image-20220809195916518" loading="lazy"></p>
<p>JDK安装成功~</p>
<h3 id="1-3-安装Tomcat"><a href="#1-3-安装Tomcat" class="headerlink" title="1.3 安装Tomcat"></a>1.3 安装Tomcat</h3><p>和安装JDK几乎一样的步骤</p>
<h4 id="1-上传安装包-1"><a href="#1-上传安装包-1" class="headerlink" title="1.上传安装包"></a>1.上传安装包</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809200123231.png" alt="image-20220809200123231" loading="lazy"></p>
<h4 id="2-解压安装包-1"><a href="#2-解压安装包-1" class="headerlink" title="2.解压安装包"></a>2.解压安装包</h4><p>将上传上来的安装包解压到指定目录&#x2F;usr&#x2F;local下，执行命令为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-7.0.57.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809200343732.png" alt="image-20220809200343732" loading="lazy"></p>
<h4 id="3-启动Tomcat"><a href="#3-启动Tomcat" class="headerlink" title="3. 启动Tomcat"></a><strong>3. 启动Tomcat</strong></h4><p>进入Tomcat的bin目录启动服务。执行命令为: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/apache-tomcat-7.0.57/</span><br><span class="line"></span><br><span class="line">cd bin</span><br><span class="line"></span><br><span class="line">sh startup.sh或者./startup.sh</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809200518775.png" alt="image-20220809200518775" loading="lazy"></p>
<h4 id="4-Tomcat进程查看"><a href="#4-Tomcat进程查看" class="headerlink" title="4. Tomcat进程查看"></a>4. Tomcat进程查看</h4><p>上述我们将Tomcat启动完成之后，并不能知道Tomcat是否正常运行，那么我们验证Tomcat启动是否成功，有多种方式，我们这里主要介绍常见的两种方式： </p>
<p><strong>1). 查看启动日志</strong></p>
<p>Tomcat的启动日志输出在Tomcat的安装目录下的logs目录中，Tomcat的启动及运行日志文件名为 catalina.out，所以我们查看Tomcat启动日志，主要可以通过两条指令，如下： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1). 分页查询Tomcat的日志信息</span><br><span class="line">more /usr/local/apache-tomcat-7.0.57/logs/catalina.out</span><br><span class="line"></span><br><span class="line">2). 查询日志文件尾部的50行记录</span><br><span class="line">tail -50 /usr/local/apache-tomcat-7.0.57/logs/catalina.out</span><br></pre></td></tr></table></figure>

<p>只要Tomcat在启动的过程中，日志输出没有报错，基本可以判定Tomcat启动成功了。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809200702095.png" alt="image-20220809200702095" loading="lazy"></p>
<p><strong>2). 查询系统进程</strong></p>
<p>我们也可以通过Linux系统的查看系统进程的指令，来判定Tomcat进程是否存在，从而判定Tomcat是否启动。执行如下指令： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef|grep tomcat</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809201223933.png" alt="image-20220809201223933" loading="lazy"></p>
<p><strong>说明:</strong> </p>
<ul>
<li><p>&#x3D;&#x3D;ps&#x3D;&#x3D;命令是linux下非常强大的进程查看命令，通过ps -ef可以查看当前运行的所有进程的详细信息</p>
</li>
<li><p>&#x3D;&#x3D;”|”&#x3D;&#x3D; 在Linux中称为管道符，可以将前一个命令的结果输出给后一个命令作为输入</p>
</li>
<li><p>使用ps命令查看进程时，经常配合管道符和查找命令 grep 一起使用，来查看特定进程</p>
</li>
</ul>
<h4 id="5-防火墙操作"><a href="#5-防火墙操作" class="headerlink" title="5.防火墙操作"></a>5.防火墙操作</h4><p>我的Linuxip地址为：192.168.2.130</p>
<p>这里来访问一下tomcat，发现访问不到</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809201453330.png" alt="image-20220809201453330" loading="lazy"></p>
<p>那为什么tomcat启动成功了，但就是访问不到呢？</p>
<p>原因就在于Linux系统的防火墙，系统安装完毕后，系统启动时，防火墙自动启动，防火墙拦截了所有端口的访问。</p>
<p>接下来需要学习一下如何操作防火墙，具体指令如下： </p>
<table>
<thead>
<tr>
<th>操作</th>
<th>指令</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>查看防火墙状态</td>
<td>systemctl status firewalld &#x2F; firewall-cmd –state</td>
<td></td>
</tr>
<tr>
<td>暂时关闭防火墙</td>
<td>systemctl stop firewalld</td>
<td></td>
</tr>
<tr>
<td>永久关闭防火墙(禁用开机自启)</td>
<td>systemctl disable firewalld</td>
<td>&#x3D;&#x3D;下次启动,才生效&#x3D;&#x3D;</td>
</tr>
<tr>
<td>暂时开启防火墙</td>
<td>systemctl start firewalld</td>
<td></td>
</tr>
<tr>
<td>永久开启防火墙(启用开机自启)</td>
<td>systemctl enable firewalld</td>
<td>&#x3D;&#x3D;下次启动,才生效&#x3D;&#x3D;</td>
</tr>
<tr>
<td>开放指定端口</td>
<td>firewall-cmd –zone&#x3D;public –add-port&#x3D;8080&#x2F;tcp –permanent</td>
<td>&#x3D;&#x3D;需要重新加载生效&#x3D;&#x3D;</td>
</tr>
<tr>
<td>关闭指定端口</td>
<td>firewall-cmd –zone&#x3D;public –remove-port&#x3D;8080&#x2F;tcp –permanent</td>
<td>&#x3D;&#x3D;需要重新加载生效&#x3D;&#x3D;</td>
</tr>
<tr>
<td>立即生效(重新加载)</td>
<td>firewall-cmd –reload</td>
<td></td>
</tr>
<tr>
<td>查看开放端口</td>
<td>firewall-cmd –zone&#x3D;public –list-ports</td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>注意：</p>
<p>​	A. systemctl是管理Linux中服务的命令，可以对服务进行启动、停止、重启、查看状态等操作</p>
<p>​	B. firewall-cmd是Linux中专门用于控制防火墙的命令</p>
<p>​	C. 为了保证系统安全，服务器的防火墙不建议关闭</p>
</blockquote>
<p>那么我们要想访问到Tomcat，就可以采取两种类型的操作：</p>
<p><strong>A. 关闭防火墙</strong></p>
<p>执行指令 : </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>

<p>关闭之后，再次访问Tomcat，就可以访问到了。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809202252954.png" alt="image-20220809202252954" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809202317417.png" alt="image-20220809202317417" loading="lazy"></p>
<p><font color='red'>注意: 直接关闭系统的防火墙，是不建议的，因为这样会造成系统不安全。</font></p>
<p><strong>B. 开放Tomcat的端口号8080</strong></p>
<p>执行指令: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">①. 先开启系统防火墙</span><br><span class="line">systemctl start firewalld</span><br><span class="line"></span><br><span class="line">②. 再开放8080端口号</span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line"></span><br><span class="line">③. 重新加载防火墙</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>执行上述的操作之后，就开放了当前系统中的8080端口号，再次访问Tomcat。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809202355093.png" alt="image-20220809202355093" loading="lazy"></p>
<h4 id="6-停止Tomcat"><a href="#6-停止Tomcat" class="headerlink" title="6.停止Tomcat"></a>6.停止Tomcat</h4><p>在Linux系统中，停止Tomcat服务的方式主要有两种： </p>
<p><strong>1). 运行Tomcat提供的脚本文件</strong></p>
<p>在Tomcat安装目录下有一个bin目录，这个目录中存放的是tomcat的运行脚本文件，其中有一个脚本就是用于停止tomcat服务的。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809202658764.png" alt="image-20220809202658764" loading="lazy"></p>
<p>我们可以切换到bin目录，并执行如下指令，来停止Tomcat服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh shutdown.sh</span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure>

<p>停掉之后，这边就访问不到了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809202649088.png" alt="image-20220809202649088" loading="lazy"></p>
<p><strong>2). 结束Tomcat进程</strong></p>
<p>我们可以先通过 <code>ps -ef|grep tomcat</code> 指令查看tomcat进程的信息，从进程信息中获取tomcat服务的进程号。然后通过kill -9 的形式，来杀死系统进程。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809203042728.png" alt="image-20220809203042728" loading="lazy"></p>
<p>通过上述的指令，我们可以获取到tomcat的进程号为 79947。接下来，我们就可以通过指令 ，来杀死tomcat的进程 ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -940292</span><br></pre></td></tr></table></figure>

<p>执行完上述指令之后，我们再访问Linux系统中的Tomcat，就访问不到了。</p>
<blockquote>
<p>注意：</p>
<p>​	kill命令是Linux提供的用于结束进程的命令，-9表示强制结束</p>
</blockquote>
<blockquote>
<p>注意 ： </p>
<p>​	虽然上述讲解的两种方式，都可以停止Tomcat服务，但是推荐使用第一种方式(.&#x2F;shutdown.sh)执行脚本来关闭tomcat服务，如果通过第一种方式停止不了tomcat了，这个时候，我们可以考虑使用第二种方式，强制杀死进程。</p>
</blockquote>
<h3 id="1-4-安装MySQL"><a href="#1-4-安装MySQL" class="headerlink" title="1.4 安装MySQL"></a>1.4 安装MySQL</h3><h4 id="1-MySQL安装"><a href="#1-MySQL安装" class="headerlink" title="1. MySQL安装"></a>1. MySQL安装</h4><p>对于MySQL数据库的安装，我们将要使用前面讲解的第二种安装方式rpm进行安装。那么首先我们先了解一下什么rpm？</p>
<blockquote>
<p><strong>RPM：</strong>全称为 Red-Hat Package Manager，RPM软件包管理器，是红帽Linux用于管理和安装软件的工具。</p>
</blockquote>
<p>我们要通过rpm，进行MySQL数据库的安装，主要的步骤如下：</p>
<p><strong>1). 检测当前系统是否安装过MySQL相关数据库</strong></p>
<p>需要通过rpm相关指令，来查询当前系统中是否存在已安装的mysql软件包，执行指令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -qa							查询当前系统中安装的所有软件</span><br><span class="line">rpm -qa | grep mysql			查询当前系统中安装的名称带mysql的软件</span><br><span class="line">rpm -qa | grep mariadb			查询当前系统中安装的名称带mariadb的软件</span><br></pre></td></tr></table></figure>

<p>通过rpm -qa 查询到系统通过rpm安装的所有软件，太多了，不方便查看，所以我们可以通过管道符 | 配合着grep进行过滤查询。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809203920807.png" alt="image-20220809203920807" loading="lazy"></p>
<p>通过查询，我们发现在当前系统中存在mariadb数据库，是CentOS7中自带的，而这个数据库和MySQL数据库是冲突的，所以要想保证MySQL成功安装，需要卸载mariadb数据库。</p>
<p><strong>2). 卸载现有的MySQL数据库</strong></p>
<p>在rpm中，卸载软件的语法为： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps  软件名称</span><br></pre></td></tr></table></figure>

<p>那么，我们就可以通过指令，卸载 mariadb，具体指令为： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps  mariadb-libs-5.5.60-1.el7_5.x86_64</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809204030308.png" alt="image-20220809204030308" loading="lazy"></p>
<p>我们看到执行完毕之后， 再次查询 mariadb，就查不到了，因为已经被成功卸载了。</p>
<p><strong>3). 上传MySQL安装包到Linux并解压</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809204436045.png" alt="image-20220809204436045" loading="lazy"></p>
<p>B. 解压到&#x2F;usr&#x2F;local&#x2F;mysql</p>
<p>执行如下指令: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /usr/local/mysql</span><br><span class="line">tar -zxvf mysql-5.7.25-1.el7.x86_64.rpm-bundle.tar.gz -C /usr/local/mysql</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809204816780.png" alt="image-20220809204816780" loading="lazy"></p>
<p><strong>4). 安装顺序安装rpm安装包</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-devel-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-compat-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">yum install net-tools</span><br><span class="line">rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>



<blockquote>
<p>说明: </p>
<ul>
<li>因为rpm安装方式，是不会自动处理依赖关系的，需要我们自己处理，所以对于上面的rpm包的安装顺序不能随意修改。</li>
<li>安装过程中提示缺少net-tools依赖，使用yum安装(yum是一种在线安装方式，需要保证联网)</li>
<li>可以通过指令(yum update)升级现有软件及系统内核</li>
</ul>
</blockquote>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809205320537.png" alt="image-20220809205320537" loading="lazy"></p>
<h4 id="2-MySQL启动"><a href="#2-MySQL启动" class="headerlink" title="2.MySQL启动"></a>2.MySQL启动</h4><p>MySQL安装完成之后，会自动注册为系统的服务，服务名为mysqld。那么，我们就可以通过systemctl指令来查看mysql的状态、启动mysql、停止mysql。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status mysqld		查看mysql服务状态</span><br><span class="line">systemctl start mysqld		启动mysql服务</span><br><span class="line">systemctl stop mysqld		停止mysql服务</span><br></pre></td></tr></table></figure>



<blockquote>
<p>说明： </p>
<p>​	可以设置开机时启动mysql服务，避免每次开机启动mysql。执行如下指令： </p>
<p>​	systemctl enable mysqld</p>
</blockquote>
<p>我们可以通过如下两种方式，来判定mysql是否启动：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -tunlp					查看已经启动的服务</span><br><span class="line">netstat -tunlp | grep mysql		查看mysql的服务信息</span><br><span class="line"></span><br><span class="line">ps –ef | grep mysql				查看mysql进程</span><br></pre></td></tr></table></figure>



<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809210535760.png" alt="image-20220809210535760" loading="lazy"></p>
<blockquote>
<p><font color='red'>备注: </font></p>
<p>​	<font color='red'>A. netstat命令用来打印Linux中网络系统的状态信息，可让你得知整个Linux系统的网络情况。</font></p>
<p>​		参数说明: </p>
<p>​		-l或–listening：显示监控中的服务器的Socket；<br>​		-n或–numeric：直接使用ip地址，而不通过域名服务器；<br>​		-p或–programs：显示正在使用Socket的程序识别码和程序名称；<br>​		-t或–tcp：显示TCP传输协议的连线状况；<br>​		-u或–udp：显示UDP传输协议的连线状况；</p>
<p>​	<font color='red'>B. ps命令用于查看Linux中的进程数据。</font></p>
</blockquote>
<h4 id="3-MySQL登录"><a href="#3-MySQL登录" class="headerlink" title="3. MySQL登录"></a>3. MySQL登录</h4><h5 id="1-查阅临时密码"><a href="#1-查阅临时密码" class="headerlink" title="1. 查阅临时密码"></a>1. 查阅临时密码</h5><p>MySQL启动起来之后，我们就可以测试一下登录操作，但是我们要想登录MySQL，需要一个访问密码，而刚才在安装MySQL的过程中，并没有看到让我们设置访问密码，那这个访问密码是多少呢? 那实际上，对于rpm安装的mysql，在mysql第一次启动时，会自动帮我们生成root用户的访问密码，并且输出在mysql的日志文件 &#x2F;var&#x2F;log&#x2F;mysqld.log中，我们可以查看这份日志文件，从而获取到访问密码。</p>
<p>可以执行如下指令：</p>
<p>1). cat &#x2F;var&#x2F;log&#x2F;mysqld.log</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809210733783.png" alt="image-20220809210733783" loading="lazy"></p>
<p>2). cat &#x2F;var&#x2F;log&#x2F;mysqld.log | grep password</p>
<p>我们可以通过上述指令，查询日志文件内容中包含password的行信息。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809210835247.png" alt="image-20220809210835247" loading="lazy"></p>
<h5 id="2-登录MySQL"><a href="#2-登录MySQL" class="headerlink" title="2.登录MySQL"></a>2.登录MySQL</h5><p>获取到root用户的临时密码之后，我们就可以登录mysql数据库，修改root的密码，为root设置一个新的密码。并且我们还需要开启root用户远程访问该数据库的权限，这样的话，我们就可以在windows上来访问这台MySQL数据库。</p>
<p>执行如下指令： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">①. 登录mysql（复制日志中的临时密码登录）</span><br><span class="line">	mysql -uroot -p								</span><br><span class="line"></span><br><span class="line">②. 修改密码</span><br><span class="line">    set global validate_password_length=4;			设置密码长度最低位数</span><br><span class="line">    set global validate_password_policy=LOW;		设置密码安全等级低，便于密码可以修改成root</span><br><span class="line">    set password = password(&#x27;root&#x27;);				设置密码为root</span><br><span class="line">    </span><br><span class="line">③. 开启访问权限</span><br><span class="line">    grant all on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27;;</span><br><span class="line">    flush privileges;</span><br></pre></td></tr></table></figure>

<p>操作完上述的指令之后，数据库root用户的密码以及远程访问我们就配置好了，接下来，可以执行exit退出mysql，再次通过新的密码进行登录。</p>
<p>1.临时密码登录</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809211015860.png" alt="image-20220809211015860" loading="lazy"></p>
<p>2.修改密码，设置安全等级</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809211243646.png" alt="image-20220809211243646" loading="lazy"></p>
<p>3.重新登陆</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809211309735.png" alt="image-20220809211309735" loading="lazy"></p>
<h5 id="3-外部连接"><a href="#3-外部连接" class="headerlink" title="3.外部连接"></a>3.外部连接</h5><p>使用安装在windows系统中的sNavicat来远程连接linux上的MySQL</p>
<h3 id="1-5-安装lrzsz"><a href="#1-5-安装lrzsz" class="headerlink" title="1.5 安装lrzsz"></a>1.5 安装lrzsz</h3><p>lrzsz 是用于在Linux系统中文件上传下载的软件。大家可能会存在疑问，我们用finalShell图形化界面就可以很方便的完成上传下载，为什么还要使用这个软件来完成上传下载呢？实际上是这样的，Linux的远程连接工具有很多，而finalShell只是其中的一种，而还有很多的远程连接工具并没有上传下载的功能，这个时候就需要依赖于lrzsz这个软件了。</p>
<p>对于lrzsz的安装，我们需要通过第三种软件安装方式yum来进行安装。这里，我们先对yum做一个简单介绍。</p>
<blockquote>
<p><strong>Yum：</strong> (Yellow dog Updater,Modified)，是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。</p>
</blockquote>
<p>安装lrzsz的步骤如下: </p>
<p><strong>1). 搜索lrzsz安装包</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum list lrzsz</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux目录结构小结</title>
    <url>/2022/07/31/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Linux文件及目录结构"><a href="#Linux文件及目录结构" class="headerlink" title="Linux文件及目录结构"></a>Linux文件及目录结构</h2><p><strong>Linux系统中一切皆文件。</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659249811122-856a8a45-8ec9-49df-abae-332ac8655980.png" alt="img" loading="lazy"></p>
<p>相对于Windows而言，这种管理方式更加扁平，更加高效。</p>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul>
<li><p><strong>&#x2F;bin</strong></p>
</li>
<li><ul>
<li>Binary的缩写，这个目录中存放着最经常使用的命令。</li>
</ul>
</li>
<li><p>&#x2F;sbin</p>
</li>
<li><ul>
<li>s是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</li>
</ul>
</li>
<li><p>&#x2F;home</p>
</li>
<li><ul>
<li>存放普通用户的主目录，在Linux中每个用户都用一个自己的目录，一般该目录是以用户账号命名的。</li>
</ul>
</li>
<li><p><strong>&#x2F;root</strong></p>
</li>
<li><ul>
<li>该目录为系统管理员，也称作超级权限者的用户主目录。</li>
</ul>
</li>
<li><p>&#x2F;lib</p>
</li>
<li><ul>
<li>系统开机所需要的最基本的动态连接共享库，起作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</li>
</ul>
</li>
<li><p>&#x2F;lost+found</p>
</li>
<li><ul>
<li>这个目录一般情况下是空的，当系统非法关机后，这里就会存放一些文件。</li>
</ul>
</li>
<li><p><strong>&#x2F;etc</strong></p>
</li>
<li><ul>
<li>所有的系统管理所需要的配置文件和子目录。</li>
</ul>
</li>
<li><p><strong>&#x2F;usr</strong></p>
</li>
<li><ul>
<li>这是一个非常重要的目录，用户的所有的应用程序和文件都放在这个目录下，类似于Windows下的Program files目录。</li>
</ul>
</li>
<li><p><strong>&#x2F;boot</strong></p>
</li>
<li><ul>
<li>这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件，<strong>自己安装的东西不要放在这里。</strong></li>
</ul>
</li>
<li><p>&#x2F;proc</p>
</li>
<li><ul>
<li>这个目录是一个虚拟目录，是系统内存的映射，可以通过访问这个目录来获取系统信息。</li>
</ul>
</li>
<li><p>&#x2F;srv</p>
</li>
<li><ul>
<li>service的缩写，主要存放了一些服务启动之后需要提取的数据。</li>
</ul>
</li>
<li><p>&#x2F;sys</p>
</li>
<li><ul>
<li>这是Linux2.6内核的一个很大的变化，该目录下安装了2.6内核中新出现的一个文件系统sysfs。</li>
</ul>
</li>
<li><p>&#x2F;tmp</p>
</li>
<li><ul>
<li>这个目录用来存放一些临时文件，存储空间不足了可以清清这里的文件。</li>
</ul>
</li>
<li><p>&#x2F;dev</p>
</li>
<li><ul>
<li>类似于Windows的设备管理器，将所有的硬件用文件的形式存储。</li>
</ul>
</li>
<li><p><strong>&#x2F;media(CentOS6)</strong></p>
</li>
<li><ul>
<li>Linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后会把这些识别的设备挂载到这个目录下。</li>
<li>CentOS7迁移到了&#x2F;run&#x2F;media下</li>
</ul>
</li>
<li><p><strong>&#x2F;mnt</strong></p>
</li>
<li><ul>
<li>系统提供该目录是为了让用户临时挂载别的文件系统的，可以将外部的存储挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以查看挂载来的内容。</li>
</ul>
</li>
<li><p><strong>&#x2F;opt</strong></p>
</li>
<li><ul>
<li>这是给主机额外安装软件所摆放的目录。比如安装一个mysql数据库就可以放在这个目录下，默认是空的。</li>
</ul>
</li>
<li><p><strong>&#x2F;var</strong></p>
</li>
<li><ul>
<li>这个目录存放着在不断扩充着的东西，习惯上把一些经常被修改的目录放在这个目录下，包括各种日志文件。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>MybatisPlus学习笔记</title>
    <url>/2022/08/04/MybatisPlus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis学习</title>
    <url>/2022/03/23/Mybatis%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、框架"><a href="#一、框架" class="headerlink" title="一、框架"></a>一、框架</h1><h2 id="1-1-框架概念"><a href="#1-1-框架概念" class="headerlink" title="1.1 框架概念"></a>1.1 框架概念</h2><blockquote>
<p>框架就是软件的半成品，框架完成了软件开发过程中的通用操作，程序猿只需要很少或者不用加工就能够实现特定的功能，从而简化开发人员在软件开发中的步骤，提高开发效率。</p>
</blockquote>
<h2 id="1-2-常用框架"><a href="#1-2-常用框架" class="headerlink" title="1.2 常用框架"></a>1.2 常用框架</h2><ul>
<li>MVC框架：简化了Servlet的开发步骤，负责和前端进行交互<ul>
<li>Struts2</li>
<li><strong>SpringMVC</strong></li>
</ul>
</li>
<li>持久层框架：完成数据库操作的框架，负责和数据库交互<ul>
<li><strong>MyBatis</strong>		</li>
<li>Hibernate 	</li>
<li>胶水框架：<strong>Spring</strong></li>
</ul>
</li>
</ul>
<p><strong>SSM</strong>：Spring + SpringMVC + MyBatis<br><strong>SSH</strong>：Spring + Struts2 + Hibernate</p>
<h1 id="二、MyBatis简介"><a href="#二、MyBatis简介" class="headerlink" title="二、MyBatis简介"></a>二、MyBatis简介</h1><h2 id="2-1-MyBatis介绍"><a href="#2-1-MyBatis介绍" class="headerlink" title="2.1 MyBatis介绍"></a>2.1 MyBatis介绍</h2><blockquote>
<p>MyBatis是一个<strong>半自动</strong>的<strong>ORM</strong>框架<br>ORM（Object Relation Mapping）对象关系映射，将Java中的一个对象和数据表中的一行记录一一对应。<br>ORM框架提供了实体类与数据表的映射关系，通过映射文件的配置，实现了对象的持久化。</p>
</blockquote>
<p>MyBatis特点：</p>
<ul>
<li>支持自定义SQL、存储过程</li>
<li>对原有的JDBC进行了封装，几乎消除了所有JDBC的代码，让开发人员只需要关注SQL语句本身</li>
<li>支持XML和注解配置的方式自动完成ORM操作，实现结果映射</li>
</ul>
<h2 id="2-2-MyBatis部署"><a href="#2-2-MyBatis部署" class="headerlink" title="2.2 MyBatis部署"></a>2.2 MyBatis部署</h2><blockquote>
<p>框架部署就是把框架引入到我们自己的项目里</p>
</blockquote>
<h3 id="2-2-1-创建Maven项目"><a href="#2-2-1-创建Maven项目" class="headerlink" title="2.2.1 创建Maven项目"></a>2.2.1 创建Maven项目</h3><ul>
<li>Java项目</li>
<li>Web项目</li>
</ul>
<h3 id="2-2-2-在项目中添加MyBatis依赖"><a href="#2-2-2-在项目中添加MyBatis依赖" class="headerlink" title="2.2.2 在项目中添加MyBatis依赖"></a>2.2.2 在项目中添加MyBatis依赖</h3><ul>
<li>在 pom.xml 中添加依赖<ul>
<li>mybatis</li>
<li>mysqldriver</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-3-创建MyBatis配置文件"><a href="#2-2-3-创建MyBatis配置文件" class="headerlink" title="2.2.3 创建MyBatis配置文件"></a>2.2.3 创建MyBatis配置文件</h3><ol>
<li>在resources中创建名为<strong>mybatis-config.xml</strong>的文件<br><img src="https://img-blog.csdnimg.cn/7c97aef5f42a46b98d7669fd79f59878.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"></li>
<li>在mybatis-config.xml文件中配置数据库连接信息</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--在environments中配置数据库连接信息--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--一个environments标签中可以定义而多个environment标签，</span></span><br><span class="line"><span class="comment">    每个environment标签可以定义一套连接配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--default用来指定使用哪一个environment--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--transactionManager标签用于配置数据库的管理方式--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--dataSource标签就是用来配置数据库连接信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/db1?characterEncoding=utf-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-3-MyBatis框架使用"><a href="#2-3-MyBatis框架使用" class="headerlink" title="2.3 MyBatis框架使用"></a>2.3 MyBatis框架使用</h2><blockquote>
<p>案例：学生信息的数据库操作</p>
</blockquote>
<h3 id="2-3-1-创建数据表"><a href="#2-3-1-创建数据表" class="headerlink" title="2.3.1 创建数据表"></a>2.3.1 创建数据表</h3><p><strong>tb_students</strong><br>SQL语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb students(</span><br><span class="line"> sid <span class="type">int</span> <span class="keyword">primary</span> key auto increment,</span><br><span class="line"> stu_num <span class="type">char</span>(<span class="number">5</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>, </span><br><span class="line"> stu_name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line"> stu_gender <span class="type">char</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line"> stu_age <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<h3 id="2-3-2-创建实体类"><a href="#2-3-2-创建实体类" class="headerlink" title="2.3.2 创建实体类"></a>2.3.2 创建实体类</h3><p><img src="https://img-blog.csdnimg.cn/1896cbf31e44483ba88578fb613cb5d9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="2-3-3-创建DAO接口，定义操作方法"><a href="#2-3-3-创建DAO接口，定义操作方法" class="headerlink" title="2.3.3 创建DAO接口，定义操作方法"></a>2.3.3 创建DAO接口，定义操作方法</h3><p><img src="https://img-blog.csdnimg.cn/13516178f9334cecb72ac926d1fa74f7.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="2-3-4-创建DAO接口下的映射文件"><a href="#2-3-4-创建DAO接口下的映射文件" class="headerlink" title="2.3.4 创建DAO接口下的映射文件"></a>2.3.4 创建DAO接口下的映射文件</h3><ul>
<li>在<code>resources</code>目录下，新建名为<code>mappers</code>文件夹</li>
<li>在<code>mappers</code>中新建名为<code>StudentMapper.xml</code>的映射文件（根据模板创建）</li>
<li>在映射文件中对DAO中定义的方法进行实现：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mapper文件相当于DAO接口的‘实现类’，namespace属性要指定`实现`DAO接口的全限定名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qfedu.dao.StudentDAO&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.qfedu.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        insert into tb_student(stu_num,stu_name,stu_gender,stu_age)</span><br><span class="line">        values(#&#123;stuNum&#125;,#&#123;stuName&#125;,#&#123;stuGender&#125;,#&#123;stuAge&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteStudent&quot;</span>&gt;</span></span><br><span class="line">        delete from tb_students where stu_num = #&#123;stuNum&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-5-将映射文件添加到主配置文件"><a href="#2-3-5-将映射文件添加到主配置文件" class="headerlink" title="2.3.5 将映射文件添加到主配置文件"></a>2.3.5 将映射文件添加到主配置文件</h3><p><img src="https://img-blog.csdnimg.cn/bdd91bc0e43c4324b36d781297c05f61.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="2-4-单元测试"><a href="#2-4-单元测试" class="headerlink" title="2.4 单元测试"></a>2.4 单元测试</h2><h3 id="2-4-1-添加单元测试依赖"><a href="#2-4-1-添加单元测试依赖" class="headerlink" title="2.4.1 添加单元测试依赖"></a>2.4.1 添加单元测试依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-4-2-创建单元测试类"><a href="#2-4-2-创建单元测试类" class="headerlink" title="2.4.2 创建单元测试类"></a>2.4.2 创建单元测试类</h3><p>被测试类名后，alt + insert – 选择Test<br><img src="https://img-blog.csdnimg.cn/11a7701928b942ffa73ed37be2d547ab.png" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/ab5da22c476a49c38e0ac643a5d2ea17.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="2-4-3-测试代码"><a href="#2-4-3-测试代码" class="headerlink" title="2.4.3 测试代码"></a>2.4.3 测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qfedu.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-22 9:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDAOTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载配置文件（连接信息）</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//会话工厂，连接需要连接信息</span></span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//会话（连接）</span></span><br><span class="line">            <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">            <span class="comment">//通过会话获取DAO对象</span></span><br><span class="line">            <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">            <span class="comment">//测试StudentDAO中的方法</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> studentDAO.insertStudent(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">0</span>, <span class="string">&quot;10001&quot;</span>, <span class="string">&quot;飞飞&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">21</span>));</span><br><span class="line">            <span class="comment">//需要手动提交</span></span><br><span class="line">            sqlSession.commit();</span><br><span class="line"></span><br><span class="line">            System.out.println(i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteStudent</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三、MyBatis的CRUD操作"><a href="#三、MyBatis的CRUD操作" class="headerlink" title="三、MyBatis的CRUD操作"></a>三、MyBatis的CRUD操作</h1><blockquote>
<p>案例：学生信息的增删查改</p>
</blockquote>
<h2 id="3-1-添加操作"><a href="#3-1-添加操作" class="headerlink" title="3.1 添加操作"></a>3.1 添加操作</h2><p>略</p>
<h2 id="3-2-删除操作"><a href="#3-2-删除操作" class="headerlink" title="3.2 删除操作"></a>3.2 删除操作</h2><blockquote>
<p>根据学号删除一条学生信息</p>
</blockquote>
<ol>
<li><p>在StudentDAO中定义删除方法<br><img src="https://img-blog.csdnimg.cn/a72c9bc7cf9a4b4eb91de66af568b6b4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"></p>
</li>
<li><p>在StudentMapper.xml中对接口方法进行实现<br><img src="https://img-blog.csdnimg.cn/07b69d40512a4496a5f380dce2522791.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"></p>
</li>
<li><p>单元测试：在StudentDAO的测试类中添加测试方法</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteStudent</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不能保证文件名一定是正确的，所以可能会抛出异常，需要进行捕获</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            <span class="comment">//SqlSessionFactoryBuilder</span></span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//sqlSessionFactory表示MyBatis的会话工厂</span></span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//sqlSession表示MyBatis与数据库之间的会话：通过工厂方法设计模式</span></span><br><span class="line">            <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过SqlSession对象调用getMapper方法来获取DAO对象</span></span><br><span class="line">            <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">            <span class="comment">//调用被测试方法</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> studentDAO.deleteStudent(<span class="string">&quot;10001&quot;</span>);</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-3-修改操作"><a href="#3-3-修改操作" class="headerlink" title="3.3 修改操作"></a>3.3 修改操作</h2><blockquote>
<p>根据学生学号，修改学生信息</p>
</blockquote>
<ol>
<li><p>在StudentDAO定义修改方法<br><img src="https://img-blog.csdnimg.cn/9e08d87b4efb4fbab24c55371fc3a7bf.png" alt="在这里插入图片描述" loading="lazy"></p>
</li>
<li><p>在StudentMapper.xml中对接口方法进行实现<br><img src="https://img-blog.csdnimg.cn/f2007e0bcc814a68b143764f769dc007.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"></p>
</li>
<li><p>单元测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateStudent</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不能保证文件名一定是正确的，所以可能会抛出异常，需要进行捕获</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//SqlSessionFactoryBuilder</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sqlSessionFactory表示MyBatis的会话工厂</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sqlSession表示MyBatis与数据库之间的会话：通过工厂方法设计模式</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过SqlSession对象调用getMapper方法来获取DAO对象</span></span><br><span class="line">        <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">        <span class="comment">//调用被测试方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> studentDAO.updateStudent(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">0</span>, <span class="string">&quot;10001&quot;</span>, <span class="string">&quot;佳佳&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">21</span>));</span><br><span class="line">        <span class="comment">//断言</span></span><br><span class="line">        assertEquals(<span class="number">1</span>,i);</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，assertEquals()方法表示断言，如果与期望值不同则会出现断言异常。<br><img src="https://img-blog.csdnimg.cn/ad90352371e74f8fb45f49504b9d022e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="3-4-查询操作-查询所有数据操作"><a href="#3-4-查询操作-查询所有数据操作" class="headerlink" title="3.4 查询操作-查询所有数据操作"></a>3.4 查询操作-查询所有数据操作</h2><ol>
<li><p>在StudentDAO中定义查询所有学生的方法<br><img src="https://img-blog.csdnimg.cn/d38c671da23f46f38afe7c74265ff05e.png" alt="在这里插入图片描述" loading="lazy"></p>
</li>
<li><p>在StudentMapper.xml对接口方法进行实现<br> 定义实体类和数据库表的映射关系<img src="https://img-blog.csdnimg.cn/7c0a1891c9c9471b86c1e116bf2364d4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"><br> 引用实体类和数据库表的映射关系<br> <img src="https://img-blog.csdnimg.cn/0daf24adf26346c29690b2b26030aa95.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"></p>
</li>
<li><p>单元测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListStudent</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不能保证文件名一定是正确的，所以可能会抛出异常，需要进行捕获</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//SqlSessionFactoryBuilder</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sqlSessionFactory表示MyBatis的会话工厂</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sqlSession表示MyBatis与数据库之间的会话：通过工厂方法设计模式</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过SqlSession对象调用getMapper方法来获取DAO对象</span></span><br><span class="line">        <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">        <span class="comment">//调用被测试方法</span></span><br><span class="line">        List&lt;Student&gt; students = studentDAO.listStudent();</span><br><span class="line">        <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//断言</span></span><br><span class="line">        assertNotNull(students);</span><br><span class="line">        <span class="comment">//查询操作不需要提交事务，因为不会更改数据库</span></span><br><span class="line">  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-5-查询操作-查询单条记录"><a href="#3-5-查询操作-查询单条记录" class="headerlink" title="3.5 查询操作-查询单条记录"></a>3.5 查询操作-查询单条记录</h2><ol>
<li><p>在StudentDAO中定义查询所有学生的方法<br><img src="https://img-blog.csdnimg.cn/62e16f22cecc45098a9573e5e03edae2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"></p>
</li>
<li><p>在StudentMapper.xml对接口方法实现<br><img src="https://img-blog.csdnimg.cn/c3e26c2eef3d492a96391fd222e7bbf4.png" alt="在这里插入图片描述" loading="lazy"></p>
</li>
<li><p>单元测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryStudent</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不能保证文件名一定是正确的，所以可能会抛出异常，需要进行捕获</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//SqlSessionFactoryBuilder</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sqlSessionFactory表示MyBatis的会话工厂</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sqlSession表示MyBatis与数据库之间的会话：通过工厂方法设计模式</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过SqlSession对象调用getMapper方法来获取DAO对象</span></span><br><span class="line">        <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">        <span class="comment">//调用被测试方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> studentDAO.queryStudent(<span class="string">&quot;10001&quot;</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">        <span class="comment">//断言</span></span><br><span class="line">        assertNotNull(student);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-6-查询操作-多参数查询"><a href="#3-6-查询操作-多参数查询" class="headerlink" title="3.6 查询操作-多参数查询"></a>3.6 查询操作-多参数查询</h2><p><strong>在MyBatis进行操作时：</strong></p>
<ol>
<li>如果操作方法只有一个简单类型或者字符串类型的参数，在Mapper配置中可以直接通过#{str}直接获取</li>
<li>如果操作方法只有一个对象类型的参数，在Mapper配置中可以直接通过#{attrName}来获取对象的指定属性值</li>
<li>如果操作方法有一个Map类型，在Mapper配置中可以直接通过#{key}获取key对应的value</li>
<li>如果操作方法有多个参数，可以使用<code>@Param</code>注解声明参数的别名</li>
</ol>
<blockquote>
<p>分页查询（参数 start，pageSize）</p>
</blockquote>
<ol>
<li><p>在StudentDAO定义分页查询的方法<br> <img src="https://img-blog.csdnimg.cn/e45ac52b03e443458934089273082020.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"></p>
</li>
<li><p>在StudentMapper.xml对接口方法进行实现，，使用<code>#&#123;别名&#125;</code>获取到指定的参数<br><img src="https://img-blog.csdnimg.cn/e53d08f2e2df46b7a406a364a94d1b40.png" alt="在这里插入图片描述" loading="lazy"></p>
</li>
<li><p>单元测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListStudentByPage</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不能保证文件名一定是正确的，所以可能会抛出异常，需要进行捕获</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//SqlSessionFactoryBuilder</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sqlSessionFactory表示MyBatis的会话工厂</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sqlSession表示MyBatis与数据库之间的会话：通过工厂方法设计模式</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过SqlSession对象调用getMapper方法来获取DAO对象</span></span><br><span class="line">        <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">        <span class="comment">//调用被测试方法</span></span><br><span class="line">        List&lt;Student&gt; students = studentDAO.listStudentByPage(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//断言</span></span><br><span class="line">        assertNotNull(students);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>注意：</code>如果DAO操作方法没有通过<code>@Param</code>指定参数别名，在SQL中也可以使用<code>arg0,arg1,...</code>或者<code>param1,param2,...</code>的方式来获取参数。</p>
</li>
</ol>
<h2 id="3-7-查询操作-查询总记录数"><a href="#3-7-查询操作-查询总记录数" class="headerlink" title="3.7 查询操作-查询总记录数"></a>3.7 查询操作-查询总记录数</h2><ol>
<li><p>在StudentDAO中定义操作方法<br> <img src="https://img-blog.csdnimg.cn/79cb6aeb2f5047e3add0045695069d24.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"></p>
</li>
<li><p>在StudentMapper.xml中实现接口方法，通过resultType指定当前操作的返回类型为int<br><img src="https://img-blog.csdnimg.cn/ad4b42bf78084d4ab3cea0a7ee3a26c0.png" alt="在这里插入图片描述" loading="lazy"></p>
</li>
<li><p>单元测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testgetCount</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不能保证文件名一定是正确的，所以可能会抛出异常，需要进行捕获</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//SqlSessionFactoryBuilder</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sqlSessionFactory表示MyBatis的会话工厂</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sqlSession表示MyBatis与数据库之间的会话：通过工厂方法设计模式</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过SqlSession对象调用getMapper方法来获取DAO对象</span></span><br><span class="line">        <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">        <span class="comment">//调用被测试方法</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> studentDAO.getCount();</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-7-添加操作-主键回填"><a href="#3-7-添加操作-主键回填" class="headerlink" title="3.7 添加操作-主键回填"></a>3.7 添加操作-主键回填</h2><ul>
<li>在<code>StudentMapper.xml</code>中添加操作标签–insert</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--useGeneratedKey 表示设置添加操作是否需要回填生成的主键--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--keyProperty 设置回填的主键复制到参数对象中的哪一个属性--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;stuId&quot;</span>&gt;</span></span><br><span class="line">       insert into tb_students(stu_num,stu_name,stu_gender,stu_age)</span><br><span class="line">       values(#&#123;stuNum&#125;,#&#123;stuName&#125;,#&#123;stuGender&#125;,#&#123;stuAge&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="四、工具类封装"><a href="#四、工具类封装" class="headerlink" title="四、工具类封装"></a>四、工具类封装</h1><ul>
<li>MyBatisUtil</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-23 8:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//工具类的目标是对外提供SQLSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="comment">//当我们在创建一个ThreadLocal变量后，每个线程对其进行访问的时候访问的都是线程自己的变量,这样就不会存在线程不安全问题。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SqlSession&gt; local = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;SqlSession&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载MyBatis配置文件</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">            <span class="comment">//工厂是单例的，所以只加载一次就够了</span></span><br><span class="line">            <span class="comment">//不能每做一顿红烧肉就开一家饭店</span></span><br><span class="line">            factory = builder.build(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title function_">getFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> local.get();</span><br><span class="line">        <span class="keyword">if</span> (sqlSession == <span class="literal">null</span>) &#123;</span><br><span class="line">            sqlSession = factory.openSession();</span><br><span class="line">            local.set(sqlSession);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> factory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Object</span>&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; c)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> getSqlSession();</span><br><span class="line">        <span class="keyword">return</span> sqlSession.getMapper(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="五、事务管理"><a href="#五、事务管理" class="headerlink" title="五、事务管理"></a>五、事务管理</h1><ul>
<li>SqlSession功能：</li>
</ul>
<blockquote>
<ol>
<li>getMapper(DAO.class):获取Mapper（DAO对象的实例）</li>
<li>事务管理</li>
</ol>
</blockquote>
<h2 id="5-1-手动提交事务"><a href="#5-1-手动提交事务" class="headerlink" title="5.1 手动提交事务"></a>5.1 手动提交事务</h2><h4 id="测试类中的手动事务管理"><a href="#测试类中的手动事务管理" class="headerlink" title="测试类中的手动事务管理"></a>测试类中的手动事务管理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertStudent</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">//1.当获取SqlSession对象时，就默认开启了事务</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//通过会话获取DAO对象</span></span><br><span class="line">        <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">        <span class="comment">//测试StudentDAO中的方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">5</span>, <span class="string">&quot;10009&quot;</span>, <span class="string">&quot;周杰伦&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">28</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> studentDAO.insertStudent(student);</span><br><span class="line">        <span class="comment">//2.操作成功之后，需要手动提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">//3.操作出现异常，需要对事务进行rollback回滚事务</span></span><br><span class="line">        sqlSession.rollback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-2-自动提交事务"><a href="#5-2-自动提交事务" class="headerlink" title="5.2 自动提交事务"></a>5.2 自动提交事务</h2><blockquote>
<p>通过SqlSessionFactory调用openSession方法获取SQLSession对象时，可以通过参数来设置事务是否自动提交：</p>
<ul>
<li>如果参数设置为true，表示自动事务提交</li>
<li>如果不设置参数或者设置为false，表示手动事务提交</li>
</ul>
</blockquote>
<h4 id="MyBatisUtil优化"><a href="#MyBatisUtil优化" class="headerlink" title="MyBatisUtil优化"></a>MyBatisUtil优化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-23 8:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//工具类的目标是对外提供SQLSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="comment">//当我们在创建一个ThreadLocal变量后，每个线程对其进行访问的时候访问的都是线程自己的变量,这样就不会存在线程不安全问题。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SqlSession&gt; local = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;SqlSession&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载MyBatis配置文件</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">            <span class="comment">//工厂是单例的，所以只加载一次就够了</span></span><br><span class="line">            <span class="comment">//不能每做一顿红烧肉就开一家饭店</span></span><br><span class="line">            factory = builder.build(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title function_">getFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自动提交事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">(<span class="type">boolean</span> isAutoCommit)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> local.get();</span><br><span class="line">        <span class="keyword">if</span> (sqlSession == <span class="literal">null</span>) &#123;</span><br><span class="line">            sqlSession = factory.openSession(isAutoCommit);</span><br><span class="line">            local.set(sqlSession);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手动提交事务,以重载的方式实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自动提交事务</span></span><br><span class="line">    <span class="comment">//直接获取DAO就是不想进行手动事务管理，所以直接设置为自动事务提交</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Object</span>&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; c)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> getSqlSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> sqlSession.getMapper(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="测试操作"><a href="#测试操作" class="headerlink" title="测试操作"></a>测试操作</h4><ol>
<li>手动事务提交<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertStudent</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtil.getSqlSession(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//1.当获取SqlSession对象时，就默认开启了事务</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//通过会话获取DAO对象</span></span><br><span class="line">        <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">        <span class="comment">//测试StudentDAO中的方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">5</span>, <span class="string">&quot;10009&quot;</span>, <span class="string">&quot;周杰伦&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">28</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> studentDAO.insertStudent(student);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作1</span></span><br><span class="line">        <span class="comment">//操作2</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//操作3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果需要使用SqlSession进行多步操作，建议使用手动提交事务</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.操作成功之后，需要手动提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">//3.操作出现异常，需要对事务进行rollback回滚事务</span></span><br><span class="line">        sqlSession.rollback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>自动事务提交</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteStudent</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> MyBatisUtil.getMapper(StudentDAO.class);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> studentDAO.deleteStudent(<span class="string">&quot;10001&quot;</span>);</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="五、MyBatis主配置文件"><a href="#五、MyBatis主配置文件" class="headerlink" title="五、MyBatis主配置文件"></a>五、MyBatis主配置文件</h1><blockquote>
<p>mybatis-config.xml是MyBatis框架的主配置文件，主要用于配置MyBatis数据源以及属性信息</p>
</blockquote>
<h2 id="5-1-properties标签"><a href="#5-1-properties标签" class="headerlink" title="5.1 properties标签"></a>5.1 properties标签</h2><blockquote>
<p>用于设置键值对，或者加载属性文件</p>
</blockquote>
<ul>
<li>在resources目录下创建jdbc.properties文件，配置键值对如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mysql_driver=com.mysql.jdbc.Driver</span><br><span class="line">mysql_url=jdbc:mysql://localhost:3306/db1?useSSL=true</span><br><span class="line">mysql_username=root</span><br><span class="line">mysql_password=123456</span><br></pre></td></tr></table></figure>

<ul>
<li>在mybatis-config.xml中通过properties标签引用jdbc.properties文件；</li>
<li>引入文件之后，在配置environment时可以直接使用jdbc.properties的key来获取对应的value<br><img src="https://img-blog.csdnimg.cn/96935c97d06f4faf994ec64d6be8c55a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"><br><code>注意</code>：${}是properties文件中的变量占位符，#{}是sql的参数占位符。</li>
</ul>
<h2 id="5-2-setting标签"><a href="#5-2-setting标签" class="headerlink" title="5.2 setting标签"></a>5.2 setting标签</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置mybatis的属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动二级缓存--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动延迟加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="8-3-typeAliases标签"><a href="#8-3-typeAliases标签" class="headerlink" title="8.3 typeAliases标签"></a>8.3 typeAliases标签</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--typeAliases标签用于给实体类取别名，在映射文件中可以直接使用别名来替代实体类的全限定名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.qfedu.pojo.Student&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;Student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.qfedu.pojo.Book&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-4-plugins标签"><a href="#5-4-plugins标签" class="headerlink" title="5.4 plugins标签"></a>5.4 plugins标签</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--plugins标签，用于配置MyBatis插件（分页插件）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-5-environments标签"><a href="#5-5-environments标签" class="headerlink" title="5.5 environments标签"></a>5.5 environments标签</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在environments配置数据库连接信息 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在environments标签中可以定义多个environment标签，每个environment标签可以定义一套连接配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- default属性，用来指定使用哪个environment标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  environment 标签用于配置数据库连接信息  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--transactionManager标签用于配置数据库管理方式</span></span><br><span class="line"><span class="comment">            type=&quot;JDBC&quot;  可以进行事务的提交和回滚操作</span></span><br><span class="line"><span class="comment">            type=&quot;MANAGED&quot; 依赖容器完成事务管理，本身不进行事务的提交和回滚操作 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--dataSource标签就是用来配置数据库连接信息 POOLED|UNPOOLED --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql_driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql_url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql_username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql_password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-6-mappers标签"><a href="#5-6-mappers标签" class="headerlink" title="5.6 mappers标签"></a>5.6 mappers标签</h2><blockquote>
<p>加载映射配置（映射文件、DAO注解）</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mappers标签用于载入映射文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/StudentMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="六、映射文件"><a href="#六、映射文件" class="headerlink" title="六、映射文件"></a>六、映射文件</h2><h2 id="6-1-MyBatis-Mapper初始化"><a href="#6-1-MyBatis-Mapper初始化" class="headerlink" title="6.1 MyBatis Mapper初始化"></a>6.1 MyBatis Mapper初始化</h2><blockquote>
<p>XML文件解析：读取xml文件中的标签配置封装到Java对象中</p>
</blockquote>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-n7eXPOJ3-1648176376717)(imgs&#x2F;1616487875112.png)]</p>
<h2 id="6-2-mapper根标签"><a href="#6-2-mapper根标签" class="headerlink" title="6.2 mapper根标签"></a>6.2 mapper根标签</h2><blockquote>
<p>mapper文件相当于DAO接口的‘实现类’，namespace属性要指定<code>实现</code>DAO接口的全限定名</p>
</blockquote>
<h2 id="6-3-insert标签"><a href="#6-3-insert标签" class="headerlink" title="6.3 insert标签"></a>6.3 insert标签</h2><blockquote>
<p>声明添加操作（sql: insert …）</p>
<p><strong>常用属性</strong></p>
<p>id属性，绑定对应DAO接口中的方法</p>
<p>parameterType属性，用以指定接口中对应方法的参数类型（可省略）</p>
<p>useGeneratedKeys属性， 设置添加操作是否需要回填生成的主键</p>
<p>keyProperty属性，指定回填的id设置到参数对象中的哪个属性</p>
<p>timeout属性，设置此操作的超时时间，如果不设置则一直等待</p>
</blockquote>
<p><strong>主键回填</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;stuId&quot;</span>&gt;</span></span><br><span class="line">    insert into tb_students(stu_num, stu_name, stu_gender, stu_age)</span><br><span class="line">    values (#&#123;stuNum&#125;, #&#123;stuName&#125;, #&#123;stuGender&#125;, #&#123;stuAge&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;stuId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">        select last_insert_id()</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into tb_students(stu_num, stu_name, stu_gender, stu_age)</span><br><span class="line">    values (#&#123;stuNum&#125;, #&#123;stuName&#125;, #&#123;stuGender&#125;, #&#123;stuAge&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-4-delete标签"><a href="#6-4-delete标签" class="headerlink" title="6.4 delete标签"></a>6.4 delete标签</h2><blockquote>
<p>声明删除操作</p>
</blockquote>
<h2 id="6-5-update标签"><a href="#6-5-update标签" class="headerlink" title="6.5 update标签"></a>6.5 update标签</h2><blockquote>
<p>声明修改操作</p>
</blockquote>
<h2 id="6-6-select标签"><a href="#6-6-select标签" class="headerlink" title="6.6 select标签"></a>6.6 select标签</h2><blockquote>
<p>声明查询操作</p>
<ul>
<li><p>id属性， 指定绑定方法的方法名</p>
</li>
<li><p>parameterType属性，设置参数类型</p>
</li>
<li><p>resultType属性，指定当前sql返回数据封装的对象类型（实体类）</p>
</li>
<li><p>resultMap属性，指定从数据表到实体类的字段和属性的对应关系</p>
</li>
<li><p>useCache属性，指定此查询操作是否需要缓存</p>
</li>
<li><p>timeout属性，设置超时时间</p>
</li>
</ul>
</blockquote>
<h2 id="6-7-resultMap标签"><a href="#6-7-resultMap标签" class="headerlink" title="6.7 resultMap标签"></a>6.7 resultMap标签</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- resultMap标签用于定义实体类与数据表的映射关系（ORM） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;stu_num&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuNum&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;stu_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;stu_gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuGender&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;stu_age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuAge&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-8-cache标签"><a href="#6-8-cache标签" class="headerlink" title="6.8 cache标签"></a>6.8 cache标签</h2><blockquote>
<p>设置当前DAO进行数据库操作时的缓存属性设置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span> <span class="attr">size</span>=<span class="string">&quot;&quot;</span> <span class="attr">readOnly</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-9-sql和include"><a href="#6-9-sql和include" class="headerlink" title="6.9 sql和include"></a>6.9 sql和include</h2><blockquote>
<p>SQL片段</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;wanglaoji&quot;</span>&gt;</span>sid , stu_num , stu_name , stu_gender , stu_age<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;wanglaoji&quot;</span>/&gt;</span> from tb_students</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="七、分页插件"><a href="#七、分页插件" class="headerlink" title="七、分页插件"></a>七、分页插件</h2><blockquote>
<p>分页插件是一个独立于MyBatis框架之外的第三方插件;</p>
</blockquote>
<h2 id="7-1-添加分页插件的依赖"><a href="#7-1-添加分页插件的依赖" class="headerlink" title="7.1 添加分页插件的依赖"></a>7.1 添加分页插件的依赖</h2><blockquote>
<p>PageHelper</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- pagehelper分页插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-2-配置插件"><a href="#7-2-配置插件" class="headerlink" title="7.2 配置插件"></a>7.2 配置插件</h2><blockquote>
<p>在mybatis的主配置文件<code>mybatis-config.xml</code>中通过<code>plugins</code>标签进行配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--plugins标签，用于配置MyBatis插件（分页插件）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-3-分页实例"><a href="#7-3-分页实例" class="headerlink" title="7.3 分页实例"></a>7.3 分页实例</h2><blockquote>
<p>对学生信息进行分页查询</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListStudentsByPage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> MyBatisUtil.getMapper(StudentDAO.class); <span class="comment">//sqlSession</span></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">    List&lt;Student&gt; students = studentDAO.listStudents();</span><br><span class="line"></span><br><span class="line">    PageInfo&lt;Student&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;Student&gt;(students);</span><br><span class="line">    <span class="comment">//pageInfo中就包含了数据及分页信息</span></span><br><span class="line">    List&lt;Student&gt; list = pageInfo.getList();</span><br><span class="line">    <span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>带条件分页</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListStudentsByPage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> MyBatisUtil.getMapper(StudentDAO.class);</span><br><span class="line">    PageHelper.startPage(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="comment">//List&lt;Student&gt; students = studentDAO.listStudents();</span></span><br><span class="line">    List&lt;Student&gt; list = studentDAO.listStudentsByGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    PageInfo&lt;Student&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;Student&gt;(list);</span><br><span class="line">    <span class="comment">//pageInfo中就包含了数据及分页信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="八、关联映射"><a href="#八、关联映射" class="headerlink" title="八、关联映射"></a>八、关联映射</h2><h4 id="8-1-实体关系"><a href="#8-1-实体关系" class="headerlink" title="8.1  实体关系"></a>8.1  实体关系</h4><blockquote>
<p>实体——数据实体，实体关系指的就是数据与数据之间的关系</p>
<p>例如：用户和角色、房屋和楼栋、订单和商品</p>
</blockquote>
<p>实体关系分为以下四种：</p>
<p><strong>一对一关联</strong></p>
<p>实例：人和身份证、学生和学生证、用户基本信息和详情</p>
<p>数据表关系：</p>
<ul>
<li><p>主键关联（用户表主键 和详情主键相同时，表示是匹配的数据）</p>
<p><img src="/Mybatis%E5%AD%A6%E4%B9%A0.assets/1616550990633.png" alt="1616550990633" loading="lazy"></p>
</li>
<li><p>唯一外键关联</p>
<p><img src="/Mybatis%E5%AD%A6%E4%B9%A0.assets/1616551159843.png" alt="1616551159843" loading="lazy"></p>
</li>
</ul>
<p><strong>一对多关联</strong>、<strong>多对一关联</strong></p>
<p>实例：</p>
<ul>
<li>一对多： 班级和学生 、 类别和商品、楼栋和房屋</li>
<li>多对一：学生和班级 、  商品和类别</li>
</ul>
<p>数据表关系：</p>
<ul>
<li>在多的一端添加外键和一的一段进行关联</li>
</ul>
<p><strong>多对多关联</strong></p>
<p>实例：用户和角色、角色和权限、房屋和业主、学生和社团、订单和商品</p>
<p>数据表关系：建立第三张关系表添加两个外键分别与两张表主键进行关联</p>
<p>用户(user_id)           用户角色表(uid,rid)      角色(role_id)</p>
<p>8.2 创建项目，部署MyBatis框架</p>
<ul>
<li>创建web项目（maven）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加web依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>部署MyBatis框架</p>
<ul>
<li>添加依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加MyBatis依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-29 20:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SqlSession&gt; local = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;SqlSession&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            factory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title function_">getSqlSessionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">(<span class="type">boolean</span> isAutoCommit)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> local.get();</span><br><span class="line">        <span class="keyword">if</span> (sqlSession == <span class="literal">null</span>) &#123;</span><br><span class="line">            sqlSession = factory.openSession(isAutoCommit);</span><br><span class="line">            local.set(sqlSession);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Object</span>&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; c)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> getSqlSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> sqlSession.getMapper(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Request学习</title>
    <url>/2022/04/08/Request%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h1><p>一个类型六个属性</p>
<ul>
<li>类型：models.Response</li>
<li>属性：<ul>
<li>r.text：获取网站源码</li>
<li>r.encoding：访问或定制编码方式</li>
<li>r.url：获取请求的url</li>
<li>r.content：获取响应的字节类型</li>
<li>r.status_code：响应的状态码</li>
<li>r.headers：相应的头信息</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://baidu.com/&#x27;</span></span><br><span class="line"></span><br><span class="line">response = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment">#一个类型:Response类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response))</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置响应的编码格式</span></span><br><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以字符串的形式来返回网页的源码</span></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回当前url地址</span></span><br><span class="line"><span class="built_in">print</span>(response.url)</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回二进制的网页数据</span></span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回响应的状态码</span></span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回响应头</span></span><br><span class="line"><span class="built_in">print</span>(response.headers)</span><br></pre></td></tr></table></figure>

<h1 id="2-get请求"><a href="#2-get请求" class="headerlink" title="2. get请求"></a>2. get请求</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s&#x27;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;黑子的篮球&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,params=data,headers=headers)</span><br><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">content = response.text</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<ul>
<li>参数用params传递</li>
<li>参数无需urlencode编码</li>
<li>不需要请求对象的定制</li>
<li>请求资源路径中的<code>?</code>可加可不加</li>
</ul>
<h2 id="3-Post请求"><a href="#3-Post请求" class="headerlink" title="3. Post请求"></a>3. Post请求</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&#x27;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;i&#x27;</span>: <span class="string">&#x27;love&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;AUTO&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;AUTO&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;smartresult&#x27;</span>: <span class="string">&#x27;dict&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;client&#x27;</span>: <span class="string">&#x27;fanyideskweb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;salt&#x27;</span>: <span class="string">&#x27;16494072793394&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sign&#x27;</span>: <span class="string">&#x27;58f09b7d5c54bad3cf13f284d1ad11eb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lts&#x27;</span>: <span class="string">&#x27;1649407279339&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;bv&#x27;</span>: <span class="string">&#x27;cf0f0924f577526ad20c2e2b01510b6f&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;doctype&#x27;</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">2.1</span>,</span><br><span class="line">    <span class="string">&#x27;keyfrom&#x27;</span>: <span class="string">&#x27;fanyi.web&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;FY_BY_REALTlME&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cookie&#x27;</span>:<span class="string">&#x27;OUTFOX_SEARCH_USER_ID=394345011@10.169.0.102; OUTFOX_SEARCH_USER_ID_NCOO=1734306557.6906822; _ntes_nnid=ed414fcfa561a8574af03795d7aacf0f,1645673021070; fanyi-ad-id=305426; fanyi-ad-closed=1; JSESSIONID=aaaaPSk8l2vvngf7zviay; ___rl__test__cookies=1649407279337&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url=url, data=data, headers=headers)</span><br><span class="line"></span><br><span class="line">content = response.text</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure>

<h4 id="get方式和post方式的区别和相同点？"><a href="#get方式和post方式的区别和相同点？" class="headerlink" title="get方式和post方式的区别和相同点？"></a>get方式和post方式的区别和相同点？</h4><ol>
<li>区别：<ol>
<li>get请求方式的参数名字是params，post请求方式的参数的名字是data。</li>
</ol>
</li>
<li>相同点：<ol>
<li>都不需要手动编解码</li>
<li>都不需要请求对象的定制</li>
</ol>
</li>
</ol>
<h2 id="4-代理"><a href="#4-代理" class="headerlink" title="4. 代理"></a>4. 代理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment"># @Time:2022/4/108:14</span></span><br><span class="line"><span class="comment"># @Author:陈 玉 皓</span></span><br><span class="line"><span class="comment"># @File:代理.py</span></span><br><span class="line"><span class="comment"># @Sofeware:PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">proxy定制：</span></span><br><span class="line"><span class="string">        在请求中设置proxies参数</span></span><br><span class="line"><span class="string">        参数类型是一个字典类型</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/s&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;115.218.4.207:9000&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span>: <span class="string">&#x27;ip&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url, headers=headers, params=data, proxies=proxy)</span><br><span class="line"></span><br><span class="line">content = response.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;daili.html&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(content)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5-cookie定制"><a href="#5-cookie定制" class="headerlink" title="5.cookie定制"></a>5.cookie定制</h2><p>案例：登录古诗文网</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment"># @Time:2022/4/108:33</span></span><br><span class="line"><span class="comment"># @Author:陈 玉 皓</span></span><br><span class="line"><span class="comment"># @File:古诗文网登录案例.py</span></span><br><span class="line"><span class="comment"># @Sofeware:PyCharm</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过登录  进入到主页面</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">__VIEWSTATE: 0jT+rlrbIVk5b2Vr9nfiJmkUQYCGOce8pRTotC5+WcuisZmBp0mHcX6f4IDi0J+B4yfNb0ABTvwFnP0r4uNpYGZUFyT51SAOpg9mS/iReKe81zr8fRay9e3aXqM=</span></span><br><span class="line"><span class="string">__VIEWSTATEGENERATOR: C93BE1AE</span></span><br><span class="line"><span class="string">from: http://so.gushiwen.cn/user/collect.aspx</span></span><br><span class="line"><span class="string">email: 1772302265@qq.com</span></span><br><span class="line"><span class="string">pwd: 15632453</span></span><br><span class="line"><span class="string">code: NBAO</span></span><br><span class="line"><span class="string">denglu: 登录</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#一般情况下，看不到的数据都是在页面的源码中</span></span><br><span class="line"><span class="comment"># 观察到__VIEWSTATE __VIEWSTATEGENERATOR 和 code是变化的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 难点：（1）__VIEWSTATE __VIEWSTATEGENERATOR</span></span><br><span class="line">                <span class="comment">#观察到这两个数据在页面的源码中，所以只需要获取页面的源码，然后进行解析就可以获取了</span></span><br><span class="line"><span class="comment">#      （2）验证码code</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment">#登录页面</span></span><br><span class="line">url = <span class="string">&#x27;https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line">content = response.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#解析数据</span></span><br><span class="line">soup = BeautifulSoup(content,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment">#获取viewstate</span></span><br><span class="line">viewstate = soup.select(<span class="string">&#x27;#__VIEWSTATE&#x27;</span>)[<span class="number">0</span>].attrs.get(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取viewstategenerator</span></span><br><span class="line">viewstategenerator = soup.select(<span class="string">&#x27;#__VIEWSTATEGENERATOR&#x27;</span>)[<span class="number">0</span>].attrs.get(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(viewstate)</span><br><span class="line"><span class="built_in">print</span>(viewstategenerator)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取验证码图片</span></span><br><span class="line">code = soup.select(<span class="string">&#x27;#imgCode&#x27;</span>)[<span class="number">0</span>].attrs.get(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证码地址</span></span><br><span class="line">code_url = <span class="string">&#x27;https://so.gushiwen.cn&#x27;</span>+code</span><br><span class="line"><span class="comment">#print(code_url)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#session()方法的返回值可以使请求变成同一个对象</span></span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line"><span class="comment">#验证码的url的内容</span></span><br><span class="line">response_code = session.get(code_url)</span><br><span class="line"><span class="comment"># 注意：此事要使用二进制的形式，因为图片的下载使用的是二进制</span></span><br><span class="line">content_code = response_code.content</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;code.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(content_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取验证码的图片，下载到本地，然后观察验证码，在控制台输入，</span></span><br><span class="line"><span class="comment">#将输入的值传给code的参数就可以进行登录</span></span><br><span class="line">code_name = <span class="built_in">input</span>(<span class="string">&quot;请输入验证码：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#登录</span></span><br><span class="line">url_post = <span class="string">&#x27;https://so.gushiwen.cn/user/login.aspx?from=http%3a%2f%2fso.gushiwen.cn%2fuser%2fcollect.aspx&#x27;</span></span><br><span class="line"></span><br><span class="line">data_post = &#123;</span><br><span class="line"><span class="string">&#x27;__VIEWSTATE&#x27;</span>: viewstate,</span><br><span class="line"><span class="string">&#x27;__VIEWSTATEGENERATOR&#x27;</span>: viewstategenerator,</span><br><span class="line"><span class="string">&#x27;from&#x27;</span>:<span class="string">&#x27; http://so.gushiwen.cn/user/collect.aspx&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;1772302265@qq.com&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pwd&#x27;</span>: <span class="string">&#x27;wodemaa520....&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;code&#x27;</span>: code_name,</span><br><span class="line"><span class="string">&#x27;denglu&#x27;</span>: <span class="string">&#x27;登录&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response_post  = session.post(url=url_post,headers=headers,data=data_post)</span><br><span class="line"></span><br><span class="line">content_post = response_post.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;gushiwen.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(content_post)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis面试题整理</title>
    <url>/2022/07/26/Redis%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Redis面试题整理"><a href="#Redis面试题整理" class="headerlink" title="Redis面试题整理"></a>Redis面试题整理</h1><h3 id="1-什么是Redis？"><a href="#1-什么是Redis？" class="headerlink" title="1. 什么是Redis？"></a>1. 什么是Redis？</h3><p>Redis是一个使用C语言编写的，开源的高性能非关系型的键值对的数据库。</p>
<p>它可以存储键和五种不同类型的值的映射。</p>
<ul>
<li>键的类型只能是字符串</li>
<li>值支持字符串、列表、集合、散列表、有序集合五种数据类型</li>
</ul>
<p>与传统数据库不同的是Redis的数据是存在内存中的，所以读写速度非常快，因此Redis被广泛应用于缓存方向，每秒可以处理超过十万次读写操作。另外，Redis也经常用来作分布式锁。除此之外，Redis还支持事务、持久化、LUA脚本、LRU驱动事件、多种集群方案。</p>
<h3 id="2-Redis的优点？"><a href="#2-Redis的优点？" class="headerlink" title="2. Redis的优点？"></a>2. Redis的优点？</h3><ol>
<li>读写性能优异，因为数据都存储在内存中。</li>
<li>支持数据持久化，支持AOF和RDB两种持久化方式。</li>
<li>支持事务，Redis的所有操作都是原子性的，同时Redis还支持对几个操作合并后的原子性执行。</li>
<li>数据结构丰富，除了支持字符串类型的value外还支持列表、集合、散列表、有序集合五种数据类型</li>
<li>支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。</li>
</ol>
<h3 id="3-说⼀下-Redis-和-Memcached-的区别和共同点-？"><a href="#3-说⼀下-Redis-和-Memcached-的区别和共同点-？" class="headerlink" title="3. 说⼀下 Redis 和 Memcached 的区别和共同点 ？"></a>3. 说⼀下 Redis 和 Memcached 的区别和共同点 ？</h3><p>现在公司⼀般都是⽤ Redis 来实现缓存，⽽且 Redis ⾃身也越来越强⼤了！不过，了解 Redis 和 Memcached 的区别和共同点，有助于我们在做相应的技术选型的时候，能够做到有理有据！ </p>
<p><strong>共同点</strong> ： </p>
<ol>
<li><p>都是基于内存的数据库，⼀般都⽤来当做缓存使⽤。 </p>
</li>
<li><p>都有过期策略。 </p>
</li>
<li><p>两者的性能都⾮常⾼。</p>
</li>
</ol>
<p><strong>区别</strong> ： </p>
<ol>
<li><strong>Redis</strong> <strong>⽀持更丰富的数据类型（⽀持更复杂的应⽤场景）。</strong>Redis 不仅仅⽀持简单的 k&#x2F;v 类</li>
</ol>
<p>型的数据，同时还提供 list，set，zset，hash 等数据结构的存储。Memcached 只⽀持最简 </p>
<p>单的 k&#x2F;v 数据类型。 </p>
<ol start="2">
<li><p><strong>Redis ⽀持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进⾏使⽤,⽽ Memecache 把数据全部存在内存之中。</strong></p>
</li>
<li><p><strong>Redis</strong> <strong>有灾难恢复机制。</strong> 因为可以把缓存中的数据持久化到磁盘上。 </p>
</li>
<li><p><strong>Redis 在服务器内存使⽤完之后，可以将不⽤的数据放到磁盘上。但是，Memcached在服务器内存使⽤完之后，就会直接报异常。</strong> </p>
</li>
<li><p><strong>Memcached没有原⽣的集群模式，需要依靠客户端来实现往集群中分⽚写⼊数据；但是Redis⽬前是原⽣⽀持cluster模式的。</strong></p>
</li>
<li><p><strong>Memcached</strong> <strong>是多线程，⾮阻塞</strong> <strong>IO</strong> <strong>复⽤的⽹络模型；Redis使⽤单线程的多路</strong> <strong>IO</strong> <strong>复⽤模</strong> 型。 （Redis 6.0 引⼊了多线程 IO ） </p>
</li>
<li><p><strong>Redis</strong> **⽀持发布订阅模型、Lua脚本、事务等功能，⽽ **Memcached不⽀持。并且，Redis⽀持更多的编程语⾔。</p>
</li>
<li><p><strong>Memcached</strong>过期数据的删除策略只⽤了惰性删除，⽽<strong>Redis</strong>同时使⽤了惰性删除与定期删除。</p>
</li>
</ol>
<h3 id="4-缓存数据的处理流程是怎样的？"><a href="#4-缓存数据的处理流程是怎样的？" class="headerlink" title="4.缓存数据的处理流程是怎样的？"></a>4.缓存数据的处理流程是怎样的？</h3><ol>
<li>如果用户请求的数据在缓存中就直接返回。</li>
<li>缓存中不存在的话就看数据库中是否存在。</li>
<li>数据库中存在的话就更新缓存中的数据。</li>
<li>数据库中如果也不存在就返回空数据。</li>
</ol>
<p>如图所示：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/f72ed4332bdb4db69567759526b9f989~tplv-k3u1fbpfcp-zoom-1.image" alt="img" loading="lazy"></p>
<h3 id="5-为什么要用Redis来做缓存？"><a href="#5-为什么要用Redis来做缓存？" class="headerlink" title="5.为什么要用Redis来做缓存？"></a>5.为什么要用Redis来做缓存？</h3><p>从高性能和高并发两点来谈</p>
<ul>
<li><p>高性能：</p>
<ul>
<li>假如⽤户第⼀次访问数据库中的某些数据的话，这个过程是比较慢，毕竟是从硬盘中读取的。</li>
<li>但是，如果说⽤户访问的数据属于<strong>⾼频数据并且不会经常改变</strong>的话，那么我们就可以地将这些数据存在缓存中。</li>
<li><strong>好处：</strong> 那就是保证⽤户下⼀次再访问这些数据的时候就可以直接从缓存中获取了。</li>
</ul>
<p>操作缓存就是直接操作内存，所以速度相当快。</p>
<ul>
<li>不过，要保持数据库和缓存中的数据的⼀致性。 如果数据库中的对应数据改变的之后，同步改变</li>
</ul>
<p>缓存中相应的数据即可</p>
</li>
<li><p>高并发：</p>
<ul>
<li><p>⼀般像 MySQL 这类的数据库的 QPS ⼤概都在 1w 左右（4 核 8g），但是使⽤ Redis 缓存之后</p>
<p>很容易达到 10w+，甚⾄最⾼能达到 30w+（就单机 redis 的情况，redis 集群的话会更⾼）。</p>
<blockquote>
<p>QPS（Query Per Second）：服务器每秒可以执⾏的查询次数。</p>
</blockquote>
</li>
<li><p>所以，直接操作缓存能够承受的数据库请求数量是远远⼤于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样⽤户的⼀部分请求会直接到缓存这⾥⽽不⽤经过数据库。进⽽，我们<strong>也就提⾼的系统整体的并发。</strong></p>
</li>
</ul>
</li>
</ul>
<p>如图所示：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/bbe58dc920a84fcc8c3a63c9012dcde8~tplv-k3u1fbpfcp-zoom-1.image" alt="img" loading="lazy"></p>
<p>参考自：<a href="https://github.com/Snailclimb/JavaGuide-Interview">JavaGuide面试突击版</a></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis面试题整理</title>
    <url>/2022/07/11/Mybatis%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><h3 id="1-1-MyBatis是什么？"><a href="#1-1-MyBatis是什么？" class="headerlink" title="1.1 MyBatis是什么？"></a>1.1 MyBatis是什么？</h3><ul>
<li>MyBatis是一款优秀的持久层框架，是一个半ORM(对象关系映射)框架，它支持定制化SQL、存储过程以及高级映射。</li>
<li>MyBatis避免了几乎所有的JDBC代码和手动设置参数以及获取结果集。</li>
<li>MyBatis可以使用简单的XML或者注解来配置和映射Java中的接口以及实体类作为数据库中的记录。</li>
</ul>
<h3 id="1-2-什么是ORM？"><a href="#1-2-什么是ORM？" class="headerlink" title="1.2  什么是ORM？"></a>1.2  什么是ORM？</h3><p>ORM（Object Relational Mapping），对象关系映射，是一种为了解决关系型数据库数据和简单的Java对象映射关系不匹配的技术。</p>
<p>简单地说，ORM是通过<strong>使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系型数据库中。</strong></p>
<h3 id="1-3-为什么说MyBatis是半自动ORM映射工具？它和全自动的区别在哪？"><a href="#1-3-为什么说MyBatis是半自动ORM映射工具？它和全自动的区别在哪？" class="headerlink" title="1.3 为什么说MyBatis是半自动ORM映射工具？它和全自动的区别在哪？"></a>1.3 为什么说MyBatis是半自动ORM映射工具？它和全自动的区别在哪？</h3><ul>
<li>Hibernate 是自动化的，内部封装了JDBC，连 SQL 语句都封装了，理念是即使开发人员不懂SQL语言也可以进行开发工作，向应用程序提供调用接口，直接调用即可。</li>
<li>Mybatis 是半自动化的，是介于 jdbc 和 Hibernate之间的持久层框架，也是对 JDBC 进行了封装，<strong>不过将SQL的定义工作独立了出来交给用户实现</strong>，负责完成剩下的SQL解析，处理等工作。</li>
</ul>
<h3 id="1-4-传统JDBC开发存在的问题"><a href="#1-4-传统JDBC开发存在的问题" class="headerlink" title="1.4 传统JDBC开发存在的问题"></a>1.4 传统JDBC开发存在的问题</h3><ol>
<li>频繁创建数据库连接对象、释放，容易造成系统资源浪费，影响系统性能。可以使用连接池解决这个问题。但是使用jdbc需要自己实现连接池。</li>
<li>sql语句定义、参数设置、结果集处理存在硬编码。实际项目中sql语句变化的可能性较大，一旦发生变化，需要修改Java代码，系统需要重新编译，重新发布。不好维护。</li>
<li>使用preparedStatement向占有位符号传参数存在硬编码，因为sql语句的where条件不一定，可能多也可能少，修改sql还要修改代码，系统不易维护。</li>
<li>结果集处理存在重复代码，处理麻烦。如果可以映射成Java对象会比较方便。</li>
</ol>
<h3 id="1-5-JDBC编程有哪些不足之处，MyBatis是如何解决这些问题的？"><a href="#1-5-JDBC编程有哪些不足之处，MyBatis是如何解决这些问题的？" class="headerlink" title="1.5 JDBC编程有哪些不足之处，MyBatis是如何解决这些问题的？"></a>1.5 JDBC编程有哪些不足之处，MyBatis是如何解决这些问题的？</h3><ol>
<li><p>数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库连接池可解决此问题。</p>
</li>
<li><ol>
<li>解决：在mybatis-config.xml中配置数据链接池，使用连接池管理数据库连接。</li>
</ol>
</li>
<li><p>Sql语句写在代码中造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码。</p>
</li>
<li><ol>
<li>解决：将Sql语句配置在XXXXmapper.xml文件中与Java代码分离。</li>
</ol>
</li>
<li><p>向sql语句传参数麻烦，因为sql语句的where条件不一定，可能多也可能少，占位符需要和参数一一对应。</p>
</li>
<li><ol>
<li>解决： Mybatis自动将Java对象映射至sql语句。</li>
</ol>
</li>
<li><p>对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成pojo对象解析比较方便。</p>
</li>
<li><ol>
<li>解决：Mybatis自动将sql执行结果映射至java对象。</li>
</ol>
</li>
</ol>
<h3 id="1-6-Mybatis优缺点"><a href="#1-6-Mybatis优缺点" class="headerlink" title="1.6 Mybatis优缺点"></a>1.6 Mybatis优缺点</h3><p><strong>优点：</strong></p>
<p><strong>与传统的数据库访问技术相比，ORM有以下优点：</strong></p>
<ul>
<li><strong>基于SQL语句编程</strong>，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL写在XML里，解除sql与程序代码的耦合，便于统一管理；提供XML标签，支持编写动态SQL语句，并可重用</li>
<li>与JDBC相比，减少了50%以上的代码量，<strong>消除了JDBC大量冗余的代码</strong>，不需要手动开关连接</li>
<li><strong>很好的与各种数据库兼容</strong>（因为MyBatis使用JDBC来连接数据库，所以只要JDBC支持的数据库MyBatis都支持）</li>
<li><strong>提供映射标签</strong>，支持对象与数据库的ORM字段关系映射；提供对象关系映射标签，支持对象关系组件维护</li>
<li><strong>能够与Spring很好的集成</strong></li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li><strong>SQL语句的编写工作量较大</strong>，尤其当字段多、关联表多时，对开发人员编写SQL语句的功底有一定要求。</li>
<li><strong>SQL语句依赖于数据库</strong>，导致数据库移植性差，不能随意更换数据库。</li>
</ul>
<p><a href="https://blog.csdn.net/qq_43061290/article/details/124468306">
</a></p>
<h2 id="2-MyBatis的解析和运行原理"><a href="#2-MyBatis的解析和运行原理" class="headerlink" title="2. MyBatis的解析和运行原理"></a>2. MyBatis的解析和运行原理</h2><h3 id="2-1-MyBatis的编程步骤是什么样的？"><a href="#2-1-MyBatis的编程步骤是什么样的？" class="headerlink" title="2.1 MyBatis的编程步骤是什么样的？"></a>2.1 MyBatis的编程步骤是什么样的？</h3><ol>
<li>创建SqlSessionFactory</li>
<li>通过SqlSessionFactory创建SqlSession</li>
<li>通过sqlsession执行数据库操作</li>
<li>调用session.commit()提交事务</li>
<li>调用session.close()关闭会话</li>
</ol>
<h3 id="2-2-MyBatis的工作原理"><a href="#2-2-MyBatis的工作原理" class="headerlink" title="2.2 MyBatis的工作原理"></a>2.2 MyBatis的工作原理</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657523144175-379d9482-6a01-4a59-99ca-a28d80993b23.png" alt="img" loading="lazy"></p>
<ol>
<li>读取 MyBatis 配置文件：mybatis-config.xml 为 MyBatis 的全局配置文件，配置了 MyBatis 的运行环境等信息，例如数据库连接信息。</li>
<li>加载映射文件:映射文件即 SQL 映射文件，该文件中配置了操作数据库的 SQL 语句，需要在 MyBatis 配置文件 mybatis-config.xml 中加载。mybatis-config.xml 文件可以加载多个映射文件，每个文件对应数据库中的一张表。</li>
<li>构造会话工厂：通过 MyBatis 的环境等配置信息构建会话工厂 SqlSessionFactory。</li>
<li>创建会话对象：由会话工厂创建 SqlSession 对象，该对象中包含了执行 SQL 语句的所有方法。</li>
<li>Executor 执行器：MyBatis 底层定义了一个 Executor 接口来操作数据库，它将根据 SqlSession 传递的参数动态地生成需要执行的 SQL 语句，同时负责查询缓存的维护</li>
<li>MappedStatement 对象：在 Executor 接口的执行方法中有一个 MappedStatement 类型的参数，该参数是对映射信息的封装，用于存储要映射的 SQL 语句的 id、参数等信息</li>
<li>输入参数映射：输入参数类型可以是 Map、List 等集合类型，也可以是基本数据类型和 POJO 类型。输入参数映射过程类似于 JDBC 对 preparedStatement 对象设置参数的过程。</li>
<li>输出结果映射：输出结果类型可以是 Map、 List 等集合类型，也可以是基本数据类型和 POJO 类型。输出结果映射过程类似于 JDBC 对结果集的解析过程。</li>
</ol>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>SSM整合笔记</title>
    <url>/2022/05/16/SSM%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1，SSM整合"><a href="#1，SSM整合" class="headerlink" title="1，SSM整合"></a>1，SSM整合</h2><h3 id="1-1-流程分析"><a href="#1-1-流程分析" class="headerlink" title="1.1 流程分析"></a>1.1 流程分析</h3><p>(1) 创建工程</p>
<ul>
<li>创建一个Maven的web工程</li>
<li>pom.xml添加SSM需要的依赖jar包</li>
<li>编写Web项目的入口配置类，实现<code>AbstractAnnotationConfigDispatcherServletInitializer</code>重写以下方法<ul>
<li>getRootConfigClasses()	：返回Spring的配置类-&gt;需要&#x3D;&#x3D;SpringConfig&#x3D;&#x3D;配置类</li>
<li>getServletConfigClasses() ：返回SpringMVC的配置类-&gt;需要&#x3D;&#x3D;SpringMvcConfig&#x3D;&#x3D;配置类</li>
<li>getServletMappings()      : 设置SpringMVC请求拦截路径规则</li>
<li>getServletFilters()       ：设置过滤器，解决POST请求中文乱码问题</li>
</ul>
</li>
</ul>
<p>(2)SSM整合[&#x3D;&#x3D;重点是各个配置的编写&#x3D;&#x3D;]</p>
<ul>
<li>SpringConfig<ul>
<li>标识该类为配置类 @Configuration</li>
<li>扫描Service所在的包 @ComponentScan</li>
<li>在Service层要管理事务 @EnableTransactionManagement</li>
<li>读取外部的properties配置文件 @PropertySource</li>
<li>整合Mybatis需要引入Mybatis相关配置类 @Import<ul>
<li>第三方数据源配置类 JdbcConfig<ul>
<li>构建DataSource数据源，DruidDataSouroce,需要注入数据库连接四要素， @Bean @Value</li>
<li>构建平台事务管理器，DataSourceTransactionManager,@Bean</li>
</ul>
</li>
<li>Mybatis配置类 MybatisConfig<ul>
<li>构建SqlSessionFactoryBean并设置别名扫描与数据源，@Bean</li>
<li>构建MapperScannerConfigurer并设置DAO层的包扫描</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>SpringMvcConfig<ul>
<li>标识该类为配置类 @Configuration</li>
<li>扫描Controller所在的包 @ComponentScan</li>
<li>开启SpringMVC注解支持 @EnableWebMvc</li>
</ul>
</li>
</ul>
<p>(3)功能模块[与具体的业务模块有关]</p>
<ul>
<li>创建数据库表</li>
<li>根据数据库表创建对应的模型类</li>
<li>通过Dao层完成数据库表的增删改查(接口+自动代理)</li>
<li>编写Service层[Service接口+实现类]<ul>
<li>@Service</li>
<li>@Transactional</li>
<li>整合Junit对业务层进行单元测试<ul>
<li>@RunWith</li>
<li>@ContextConfiguration</li>
<li>@Test</li>
</ul>
</li>
</ul>
</li>
<li>编写Controller层<ul>
<li>接收请求 @RequestMapping @GetMapping @PostMapping @PutMapping @DeleteMapping</li>
<li>接收数据 简单、POJO、嵌套POJO、集合、数组、JSON数据类型<ul>
<li>@RequestParam</li>
<li>@PathVariable</li>
<li>@RequestBody</li>
</ul>
</li>
<li>转发业务层 <ul>
<li>@Autowired</li>
</ul>
</li>
<li>响应结果<ul>
<li>@ResponseBody</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-2-整合配置"><a href="#1-2-整合配置" class="headerlink" title="1.2 整合配置"></a>1.2 整合配置</h3><h4 id="步骤1：创建Maven的web项目"><a href="#步骤1：创建Maven的web项目" class="headerlink" title="步骤1：创建Maven的web项目"></a>步骤1：创建Maven的web项目</h4><p>可以使用Maven的骨架创建</p>
<p><img src="D:\blog\source_posts\pic\1630561266760.png" alt="1630561266760" loading="lazy"></p>
<h4 id="步骤2-添加依赖"><a href="#步骤2-添加依赖" class="headerlink" title="步骤2:添加依赖"></a>步骤2:添加依赖</h4><p>pom.xml添加SSM所需要的依赖jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_08_ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="步骤3-创建项目包结构"><a href="#步骤3-创建项目包结构" class="headerlink" title="步骤3:创建项目包结构"></a>步骤3:创建项目包结构</h4><p><img src="D:\blog\source_posts\pic\1630561591931.png" alt="1630561591931" loading="lazy"></p>
<ul>
<li>config目录存放的是相关的配置类</li>
<li>controller编写的是Controller类</li>
<li>dao存放的是Dao接口，因为使用的是Mapper接口代理方式，所以没有实现类包</li>
<li>service存的是Service接口，impl存放的是Service实现类</li>
<li>resources:存入的是配置文件，如Jdbc.properties</li>
<li>webapp:目录可以存放静态资源</li>
<li>test&#x2F;java:存放的是测试类</li>
</ul>
<h4 id="步骤4-创建SpringConfig配置类"><a href="#步骤4-创建SpringConfig配置类" class="headerlink" title="步骤4:创建SpringConfig配置类"></a>步骤4:创建SpringConfig配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.service&quot;&#125;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MyBatisConfig.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="步骤5-创建JdbcConfig配置类"><a href="#步骤5-创建JdbcConfig配置类" class="headerlink" title="步骤5:创建JdbcConfig配置类"></a>步骤5:创建JdbcConfig配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        ds.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="步骤6-创建MybatisConfig配置类"><a href="#步骤6-创建MybatisConfig配置类" class="headerlink" title="步骤6:创建MybatisConfig配置类"></a>步骤6:创建MybatisConfig配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        factoryBean.setDataSource(dataSource);</span><br><span class="line">        factoryBean.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="步骤7-创建jdbc-properties"><a href="#步骤7-创建jdbc-properties" class="headerlink" title="步骤7:创建jdbc.properties"></a>步骤7:创建jdbc.properties</h4><p>在resources下提供jdbc.properties,设置数据库连接四要素</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm_db</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<h4 id="步骤8-创建SpringMVC配置类"><a href="#步骤8-创建SpringMVC配置类" class="headerlink" title="步骤8:创建SpringMVC配置类"></a>步骤8:创建SpringMVC配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="步骤9-创建Web项目入口配置类"><a href="#步骤9-创建Web项目入口配置类" class="headerlink" title="步骤9:创建Web项目入口配置类"></a>步骤9:创建Web项目入口配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">//加载Spring配置类</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//加载SpringMVC配置类</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置SpringMVC请求地址拦截规则</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置post请求中文乱码过滤器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>至此SSM整合的环境就已经搭建好了。在这个环境上，我们如何进行功能模块的开发呢?</p>
<h3 id="1-3-功能模块开发"><a href="#1-3-功能模块开发" class="headerlink" title="1.3 功能模块开发"></a>1.3 功能模块开发</h3><blockquote>
<p>需求:对表tbl_book进行新增、修改、删除、根据ID查询和查询所有</p>
</blockquote>
<h4 id="步骤1-创建数据库及表"><a href="#步骤1-创建数据库及表" class="headerlink" title="步骤1:创建数据库及表"></a>步骤1:创建数据库及表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database ssm_db <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">use ssm_db;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_book(</span><br><span class="line">  id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">  type <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  description <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `tbl_book`(`id`,`type`,`name`,`description`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring实战 第五版&#x27;</span>,<span class="string">&#x27;Spring入门经典教程，深入理解Spring原理技术内幕&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring 5核心原理与30个类手写实践&#x27;</span>,<span class="string">&#x27;十年沉淀之作，手写Spring精华思想&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring 5设计模式&#x27;</span>,<span class="string">&#x27;深入Spring源码刨析Spring源码中蕴含的10大设计模式&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring MVC+Mybatis开发从入门到项目实战&#x27;</span>,<span class="string">&#x27;全方位解析面向Web应用的轻量级框架，带你成为Spring MVC开发高手&#x27;</span>),(<span class="number">5</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;轻量级Java Web企业应用实战&#x27;</span>,<span class="string">&#x27;源码级刨析Spring框架，适合已掌握Java基础的读者&#x27;</span>),(<span class="number">6</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Java核心技术 卷Ⅰ 基础知识(原书第11版)&#x27;</span>,<span class="string">&#x27;Core Java第11版，Jolt大奖获奖作品，针对Java SE9、10、11全面更新&#x27;</span>),(<span class="number">7</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;深入理解Java虚拟机&#x27;</span>,<span class="string">&#x27;5个纬度全面刨析JVM,大厂面试知识点全覆盖&#x27;</span>),(<span class="number">8</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Java编程思想(第4版)&#x27;</span>,<span class="string">&#x27;Java学习必读经典，殿堂级著作！赢得了全球程序员的广泛赞誉&#x27;</span>),(<span class="number">9</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;零基础学Java(全彩版)&#x27;</span>,<span class="string">&#x27;零基础自学编程的入门图书，由浅入深，详解Java语言的编程思想和核心技术&#x27;</span>),(<span class="number">10</span>,<span class="string">&#x27;市场营销&#x27;</span>,<span class="string">&#x27;直播就这么做:主播高效沟通实战指南&#x27;</span>,<span class="string">&#x27;李子柒、李佳奇、薇娅成长为网红的秘密都在书中&#x27;</span>),(<span class="number">11</span>,<span class="string">&#x27;市场营销&#x27;</span>,<span class="string">&#x27;直播销讲实战一本通&#x27;</span>,<span class="string">&#x27;和秋叶一起学系列网络营销书籍&#x27;</span>),(<span class="number">12</span>,<span class="string">&#x27;市场营销&#x27;</span>,<span class="string">&#x27;直播带货:淘宝、天猫直播从新手到高手&#x27;</span>,<span class="string">&#x27;一本教你如何玩转直播的书，10堂课轻松实现带货月入3W+&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="步骤2-编写模型类"><a href="#步骤2-编写模型类" class="headerlink" title="步骤2:编写模型类"></a>步骤2:编写模型类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">//getter...setter...toString省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="步骤3-编写Dao接口"><a href="#步骤3-编写Dao接口" class="headerlink" title="步骤3:编写Dao接口"></a>步骤3:编写Dao接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Insert(&quot;insert into tbl_book values(null,#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_book (type,name,description) values(#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_book set type = #&#123;type&#125;, name = #&#123;name&#125;, description = #&#123;description&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="步骤4-编写Service接口和实现类"><a href="#步骤4-编写Service接口和实现类" class="headerlink" title="步骤4:编写Service接口和实现类"></a>步骤4:编写Service接口和实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按id删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按id查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        bookDao.save(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        bookDao.update(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        bookDao.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>说明:</strong></p>
<ul>
<li><p>bookDao在Service中注入的会提示一个红线提示，为什么呢?</p>
<ul>
<li>BookDao是一个接口，没有实现类，接口是不能创建对象的，所以最终注入的应该是代理对象</li>
<li>代理对象是由Spring的IOC容器来创建管理的</li>
<li>IOC容器又是在Web服务器启动的时候才会创建</li>
<li>IDEA在检测依赖关系的时候，没有找到适合的类注入，所以会提示错误提示</li>
<li>但是程序运行的时候，代理对象就会被创建，框架会使用DI进行注入，所以程序运行无影响。</li>
</ul>
</li>
<li><p>如何解决上述问题?</p>
<ul>
<li><p>可以不用理会，因为运行是正常的</p>
</li>
<li><p>设置错误提示级别</p>
<p><img src="D:\blog\source_posts\pic\1630600227357.png" loading="lazy"></p>
</li>
</ul>
</li>
</ul>
<h4 id="步骤5-编写Contorller类"><a href="#步骤5-编写Contorller类" class="headerlink" title="步骤5:编写Contorller类"></a>步骤5:编写Contorller类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.update(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于图书模块的增删改查就已经完成了编写，接下来把业务层的代码使用<code>Spring整合Junit</code>的知识点进行单元测试:</p>
<h3 id="1-4-单元测试"><a href="#1-4-单元测试" class="headerlink" title="1.4 单元测试"></a>1.4 单元测试</h3><h4 id="步骤1-新建测试类"><a href="#步骤1-新建测试类" class="headerlink" title="步骤1:新建测试类"></a>步骤1:新建测试类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="步骤2-注入Service类"><a href="#步骤2-注入Service类" class="headerlink" title="步骤2:注入Service类"></a>步骤2:注入Service类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="步骤3-编写测试方法"><a href="#步骤3-编写测试方法" class="headerlink" title="步骤3:编写测试方法"></a>步骤3:编写测试方法</h4><p>我们先来对查询进行单元测试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Book&gt; all = bookService.getAll();</span><br><span class="line">        System.out.println(all);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据ID查询，测试的结果为:</p>
<p><img src="D:\blog\source_posts\pic\1630600844191.png" alt="1630600844191" loading="lazy"></p>
<p>查询所有，测试的结果为:</p>
<p><img src="D:\blog\source_posts\pic\1630600927486.png" alt="1630600927486" loading="lazy"></p>
<h3 id="1-5-PostMan测试"><a href="#1-5-PostMan测试" class="headerlink" title="1.5 PostMan测试"></a>1.5 PostMan测试</h3><h4 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h4><p><code>http://localhost/books</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;类别测试数据&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;书名测试数据&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;描述测试数据&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="D:\blog\source_posts\pic\1630652582425.png" alt="1630652582425" loading="lazy"></p>
<h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p><code>http://localhost/books</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;类别测试数据&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;书名测试数据&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;描述测试数据&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="D:\blog\source_posts\pic\1630652758221.png" alt="1630652758221" loading="lazy"></p>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><code>http://localhost/books/14</code></p>
<p><img src="D:\blog\source_posts\pic\1630652796605.png" alt="1630652796605" loading="lazy"></p>
<h4 id="查询单个"><a href="#查询单个" class="headerlink" title="查询单个"></a>查询单个</h4><p><code>http://localhost/books/1</code></p>
<p><img src="D:\blog\source_posts\pic\1630652837682.png" alt="1630652837682" loading="lazy"></p>
<h4 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h4><p><code>http://localhost/books</code></p>
<p><img src="D:\blog\source_posts\pic\1630652867493.png" alt="1630652867493" loading="lazy"></p>
<h2 id="2，统一结果封装"><a href="#2，统一结果封装" class="headerlink" title="2，统一结果封装"></a>2，统一结果封装</h2><h3 id="2-1-表现层与前端数据传输协议定义"><a href="#2-1-表现层与前端数据传输协议定义" class="headerlink" title="2.1 表现层与前端数据传输协议定义"></a>2.1 表现层与前端数据传输协议定义</h3><p>SSM整合以及功能模块开发完成后，接下来，在上述案例的基础上分析下有哪些问题需要我们去解决下。首先第一个问题是:</p>
<ul>
<li><p>在Controller层增删改返回给前端的是boolean类型数据</p>
<p><img src="D:\blog\source_posts\pic\1630653359533.png" alt="1630653359533" loading="lazy"></p>
</li>
<li><p>在Controller层查询单个返回给前端的是对象</p>
<p><img src="D:\blog\source_posts\pic\1630653385377.png" alt="1630653385377" loading="lazy"></p>
</li>
<li><p>在Controller层查询所有返回给前端的是集合对象</p>
<p><img src="D:\blog\source_posts\pic\1630653468887.png" alt="1630653468887" loading="lazy"></p>
</li>
</ul>
<p>目前我们就已经有三种数据类型返回给前端，如果随着业务的增长，我们需要返回的数据类型会越来越多。对于前端开发人员在解析数据的时候就比较凌乱了，所以对于前端来说，如果后台能够返回一个统一的数据结果，前端在解析的时候就可以按照一种方式进行解析。开发就会变得更加简单。</p>
<p>所以我们就想能不能将返回结果的数据进行统一，具体如何来做，大体的思路为:</p>
<ul>
<li>为了封装返回的结果数据:&#x3D;&#x3D;创建结果模型类，封装数据到data属性中&#x3D;&#x3D;</li>
<li>为了封装返回的数据是何种操作及是否操作成功:&#x3D;&#x3D;封装操作结果到code属性中&#x3D;&#x3D;</li>
<li>操作失败后为了封装返回的错误信息:&#x3D;&#x3D;封装特殊消息到message(msg)属性中&#x3D;&#x3D;</li>
</ul>
<p><img src="D:\blog\source_posts\pic\1630654293972.png" alt="1630654293972" loading="lazy"></p>
<p>根据分析，我们可以设置统一数据返回结果类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Object data;</span><br><span class="line">	<span class="keyword">private</span> Integer code;</span><br><span class="line">	<span class="keyword">private</span> String msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**注意:**Result类名及类中的字段并不是固定的，可以根据需要自行增减提供若干个构造方法，方便操作。</p>
<h3 id="2-2-表现层与前端数据传输协议实现"><a href="#2-2-表现层与前端数据传输协议实现" class="headerlink" title="2.2 表现层与前端数据传输协议实现"></a>2.2 表现层与前端数据传输协议实现</h3><p>前面我们已经分析了如何封装返回结果数据，具体在项目中该如何实现，我们通过个例子来操作一把</p>
<h4 id="2-2-1-环境准备"><a href="#2-2-1-环境准备" class="headerlink" title="2.2.1 环境准备"></a>2.2.1 环境准备</h4><ul>
<li>创建一个Web的Maven项目</li>
<li>pom.xml添加SSM整合所需jar包</li>
<li>创建对应的配置类</li>
<li>编写Controller、Service接口、Service实现类、Dao接口和模型类</li>
<li>resources下提供jdbc.properties配置文件</li>
</ul>
<p>因为这个项目环境的内容和SSM整合的内容是一致的，所以我们就不在把代码粘出来了，大家在练习的时候可以在前面整合的例子案例环境下，进行本节内容的开发。</p>
<p>最终创建好的项目结构如下:</p>
<p><img src="D:\blog\source_posts\pic\1630654870632.png" alt="1630654870632" loading="lazy"></p>
<h4 id="2-2-2-结果封装"><a href="#2-2-2-结果封装" class="headerlink" title="2.2.2 结果封装"></a>2.2.2 结果封装</h4><p>对于结果封装，我们应该是在表现层进行处理，所以我们把结果类放在controller包下，当然你也可以放在domain包，这个都是可以的，具体如何实现结果封装，具体的步骤为:</p>
<h5 id="步骤1-创建Result类"><a href="#步骤1-创建Result类" class="headerlink" title="步骤1:创建Result类"></a>步骤1:创建Result类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="comment">//描述统一格式中的数据</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="comment">//描述统一格式中的编码，用于区分操作，可以简化配置0或1表示成功失败</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">//描述统一格式中的消息，可选属性</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//构造方法是方便对象的创建</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(Integer code,Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//构造方法是方便对象的创建</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(Integer code, Object data, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//setter...getter...省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="步骤2-定义返回码Code类"><a href="#步骤2-定义返回码Code类" class="headerlink" title="步骤2:定义返回码Code类"></a>步骤2:定义返回码Code类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//状态码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SAVE_OK</span> <span class="operator">=</span> <span class="number">20011</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DELETE_OK</span> <span class="operator">=</span> <span class="number">20021</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">UPDATE_OK</span> <span class="operator">=</span> <span class="number">20031</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">GET_OK</span> <span class="operator">=</span> <span class="number">20041</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SAVE_ERR</span> <span class="operator">=</span> <span class="number">20010</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DELETE_ERR</span> <span class="operator">=</span> <span class="number">20020</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">UPDATE_ERR</span> <span class="operator">=</span> <span class="number">20030</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">GET_ERR</span> <span class="operator">=</span> <span class="number">20040</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>**注意:**code类中的常量设计也不是固定的，可以根据需要自行增减，例如将查询再进行细分为GET_OK,GET_ALL_OK,GET_PAGE_OK等。</p>
<h5 id="步骤3-修改Controller类的返回值"><a href="#步骤3-修改Controller类的返回值" class="headerlink" title="步骤3:修改Controller类的返回值"></a>步骤3:修改Controller类的返回值</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统一每一个控制器方法返回值</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> bookService.save(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(flag ? Code.SAVE_OK:Code.SAVE_ERR,flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> bookService.update(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(flag ? Code.UPDATE_OK:Code.UPDATE_ERR,flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> bookService.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(flag ? Code.DELETE_OK:Code.DELETE_ERR,flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(id);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> book != <span class="literal">null</span> ? Code.GET_OK : Code.GET_ERR;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> book != <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;数据查询失败，请重试！&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,book,msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Book&gt; bookList = bookService.getAll();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> bookList != <span class="literal">null</span> ? Code.GET_OK : Code.GET_ERR;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> bookList != <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;数据查询失败，请重试！&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,bookList,msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="步骤4-启动服务测试"><a href="#步骤4-启动服务测试" class="headerlink" title="步骤4:启动服务测试"></a>步骤4:启动服务测试</h5><p><img src="D:\blog\source_posts\pic\1630656326477.png" alt="1630656326477" loading="lazy"></p>
<p>至此，我们的返回结果就已经能以一种统一的格式返回给前端。前端根据返回的结果，先从中获取<code>code</code>,根据code判断，如果成功则取<code>data</code>属性的值，如果失败，则取<code>msg</code>中的值做提示。</p>
<h2 id="3，统一异常处理"><a href="#3，统一异常处理" class="headerlink" title="3，统一异常处理"></a>3，统一异常处理</h2><h3 id="3-1-问题描述"><a href="#3-1-问题描述" class="headerlink" title="3.1 问题描述"></a>3.1 问题描述</h3><p>在讲解这一部分知识点之前，我们先来演示个效果，修改BookController类的<code>getById</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">    <span class="comment">//手动添加一个错误信息</span></span><br><span class="line">    <span class="keyword">if</span>(id==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(id);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> book != <span class="literal">null</span> ? Code.GET_OK : Code.GET_ERR;</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> book != <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;数据查询失败，请重试！&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,book,msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重新启动运行项目，使用PostMan发送请求，当传入的id为1，则会出现如下效果：</p>
<p><img src="D:\blog\source_posts\pic\1630656982337.png" alt="1630656982337" loading="lazy"></p>
<p>前端接收到这个信息后和之前我们约定的格式不一致，这个问题该如何解决?</p>
<p>在解决问题之前，我们先来看下异常的种类及出现异常的原因:</p>
<ul>
<li>框架内部抛出的异常：因使用不合规导致</li>
<li>数据层抛出的异常：因外部服务器故障导致（例如：服务器访问超时）</li>
<li>业务层抛出的异常：因业务逻辑书写错误导致（例如：遍历业务书写操作，导致索引异常等）</li>
<li>表现层抛出的异常：因数据收集、校验等规则导致（例如：不匹配的数据类型间导致异常）</li>
<li>工具类抛出的异常：因工具类书写不严谨不够健壮导致（例如：必要释放的连接长期未释放等）</li>
</ul>
<p>看完上面这些出现异常的位置，你会发现，在我们开发的任何一个位置都有可能出现异常，而且这些异常是不能避免的。所以我们就得将异常进行处理。</p>
<p><strong>思考</strong></p>
<ol>
<li><p>各个层级均出现异常，异常处理代码书写在哪一层?</p>
<p>&#x3D;&#x3D;所有的异常均抛出到表现层进行处理&#x3D;&#x3D;</p>
</li>
<li><p>异常的种类很多，表现层如何将所有的异常都处理到呢?</p>
<p>&#x3D;&#x3D;异常分类&#x3D;&#x3D;</p>
</li>
<li><p>表现层处理异常，每个方法中单独书写，代码书写量巨大且意义不强，如何解决?</p>
<p>&#x3D;&#x3D;AOP&#x3D;&#x3D;</p>
</li>
</ol>
<p>对于上面这些问题及解决方案，SpringMVC已经为我们提供了一套解决方案:</p>
<ul>
<li><p>异常处理器:</p>
<ul>
<li><p>集中的、统一的处理项目中出现的异常。</p>
<p><img src="D:\blog\source_posts\pic\1630657791653.png" alt="1630657791653" loading="lazy"></p>
</li>
</ul>
</li>
</ul>
<h3 id="3-2-异常处理器的使用"><a href="#3-2-异常处理器的使用" class="headerlink" title="3.2 异常处理器的使用"></a>3.2 异常处理器的使用</h3><h4 id="3-2-1-环境准备"><a href="#3-2-1-环境准备" class="headerlink" title="3.2.1 环境准备"></a>3.2.1 环境准备</h4><ul>
<li>创建一个Web的Maven项目</li>
<li>pom.xml添加SSM整合所需jar包</li>
<li>创建对应的配置类</li>
<li>编写Controller、Service接口、Service实现类、Dao接口和模型类</li>
<li>resources下提供jdbc.properties配置文件</li>
</ul>
<p>内容参考前面的项目或者直接使用前面的项目进行本节内容的学习。</p>
<p>最终创建好的项目结构如下:</p>
<p><img src="D:\blog\source_posts\pic\1630657972564.png" alt="1630657972564" loading="lazy"></p>
<h4 id="3-2-2-使用步骤"><a href="#3-2-2-使用步骤" class="headerlink" title="3.2.2 使用步骤"></a>3.2.2 使用步骤</h4><h5 id="步骤1-创建异常处理器类"><a href="#步骤1-创建异常处理器类" class="headerlink" title="步骤1:创建异常处理器类"></a>步骤1:创建异常处理器类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@RestControllerAdvice用于标识当前类为REST风格对应的异常处理器</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//除了自定义的异常处理器，保留对Exception类型的异常处理，用于处理非预期的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">      	System.out.println(<span class="string">&quot;嘿嘿,异常你哪里跑！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;确保SpringMvcConfig能够扫描到异常处理器类&#x3D;&#x3D;</p>
<h5 id="步骤2-让程序抛出异常"><a href="#步骤2-让程序抛出异常" class="headerlink" title="步骤2:让程序抛出异常"></a>步骤2:让程序抛出异常</h5><p>修改<code>BookController</code>的getById方法，添加<code>int i = 1/0</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">  	<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(id);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> book != <span class="literal">null</span> ? Code.GET_OK : Code.GET_ERR;</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> book != <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;数据查询失败，请重试！&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,book,msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="步骤3-运行程序，测试"><a href="#步骤3-运行程序，测试" class="headerlink" title="步骤3:运行程序，测试"></a>步骤3:运行程序，测试</h5><p><img src="D:\blog\source_posts\pic\1630658350945.png" alt="1630658350945" loading="lazy"></p>
<p>说明异常已经被拦截并执行了<code>doException</code>方法。</p>
<h5 id="异常处理器类返回结果给前端"><a href="#异常处理器类返回结果给前端" class="headerlink" title="异常处理器类返回结果给前端"></a>异常处理器类返回结果给前端</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@RestControllerAdvice用于标识当前类为REST风格对应的异常处理器</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//除了自定义的异常处理器，保留对Exception类型的异常处理，用于处理非预期的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">      	System.out.println(<span class="string">&quot;嘿嘿,异常你哪里跑！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">666</span>,<span class="literal">null</span>,<span class="string">&quot;嘿嘿,异常你哪里跑！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动运行程序，测试</p>
<p><img src="D:\blog\source_posts\pic\1630658606549.png" alt="1630658606549" loading="lazy"></p>
<p>至此，就算后台执行的过程中抛出异常，最终也能按照我们和前端约定好的格式返回给前端。</p>
<h4 id="知识点1：-RestControllerAdvice"><a href="#知识点1：-RestControllerAdvice" class="headerlink" title="知识点1：@RestControllerAdvice"></a>知识点1：@RestControllerAdvice</h4><table>
<thead>
<tr>
<th>名称</th>
<th>@RestControllerAdvice</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>&#x3D;&#x3D;类注解&#x3D;&#x3D;</td>
</tr>
<tr>
<td>位置</td>
<td>Rest风格开发的控制器增强类定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>为Rest风格开发的控制器类做增强</td>
</tr>
</tbody></table>
<p>**说明:**此注解自带@ResponseBody注解与@Component注解，具备对应的功能</p>
<p><img src="D:\blog\source_posts\pic\1630659060451.png" alt="1630659060451" loading="lazy"></p>
<h4 id="知识点2：-ExceptionHandler"><a href="#知识点2：-ExceptionHandler" class="headerlink" title="知识点2：@ExceptionHandler"></a>知识点2：@ExceptionHandler</h4><table>
<thead>
<tr>
<th>名称</th>
<th>@ExceptionHandler</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>&#x3D;&#x3D;方法注解&#x3D;&#x3D;</td>
</tr>
<tr>
<td>位置</td>
<td>专用于异常处理的控制器方法上方</td>
</tr>
<tr>
<td>作用</td>
<td>设置指定异常的处理方案，功能等同于控制器方法，<br/>出现异常后终止原始控制器执行,并转入当前方法执行</td>
</tr>
</tbody></table>
<p><strong>说明：</strong>此类方法可以根据处理的异常不同，制作多个方法分别处理对应的异常</p>
<h3 id="3-3-项目异常处理方案"><a href="#3-3-项目异常处理方案" class="headerlink" title="3.3 项目异常处理方案"></a>3.3 项目异常处理方案</h3><h4 id="3-3-1-异常分类"><a href="#3-3-1-异常分类" class="headerlink" title="3.3.1 异常分类"></a>3.3.1 异常分类</h4><p>异常处理器我们已经能够使用了，那么在咱们的项目中该如何来处理异常呢?</p>
<p>因为异常的种类有很多，如果每一个异常都对应一个@ExceptionHandler，那得写多少个方法来处理各自的异常，所以我们在处理异常之前，需要对异常进行一个分类:</p>
<ul>
<li><p>业务异常（BusinessException）</p>
<ul>
<li><p>规范的用户行为产生的异常</p>
<ul>
<li><p>用户在页面输入内容的时候未按照指定格式进行数据填写，如在年龄框输入的是字符串</p>
<p><img src="D:\blog\source_posts\pic\1630659599983.png" alt="1630659599983" loading="lazy"></p>
</li>
</ul>
</li>
<li><p>不规范的用户行为操作产生的异常</p>
<ul>
<li><p>如用户故意传递错误数据</p>
<p><img src="D:\blog\source_posts\pic\1630659622958.png" alt="1630659622958" loading="lazy"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>系统异常（SystemException）</p>
<ul>
<li>项目运行过程中可预计但无法避免的异常<ul>
<li>比如数据库或服务器宕机</li>
</ul>
</li>
</ul>
</li>
<li><p>其他异常（Exception）</p>
<ul>
<li><p>编程人员未预期到的异常，如:用到的文件不存在</p>
<p><img src="D:\blog\source_posts\pic\1630659690341.png" alt="1630659690341" loading="lazy"></p>
</li>
</ul>
</li>
</ul>
<p>将异常分类以后，针对不同类型的异常，要提供具体的解决方案:</p>
<h4 id="3-3-2-异常解决方案"><a href="#3-3-2-异常解决方案" class="headerlink" title="3.3.2 异常解决方案"></a>3.3.2 异常解决方案</h4><ul>
<li>业务异常（BusinessException）<ul>
<li>发送对应消息传递给用户，提醒规范操作<ul>
<li>大家常见的就是提示用户名已存在或密码格式不正确等</li>
</ul>
</li>
</ul>
</li>
<li>系统异常（SystemException）<ul>
<li>发送固定消息传递给用户，安抚用户<ul>
<li>系统繁忙，请稍后再试</li>
<li>系统正在维护升级，请稍后再试</li>
<li>系统出问题，请联系系统管理员等</li>
</ul>
</li>
<li>发送特定消息给运维人员，提醒维护<ul>
<li>可以发送短信、邮箱或者是公司内部通信软件</li>
</ul>
</li>
<li>记录日志<ul>
<li>发消息和记录日志对用户来说是不可见的，属于后台程序</li>
</ul>
</li>
</ul>
</li>
<li>其他异常（Exception）<ul>
<li>发送固定消息传递给用户，安抚用户</li>
<li>发送特定消息给编程人员，提醒维护（纳入预期范围内）<ul>
<li>一般是程序没有考虑全，比如未做非空校验等</li>
</ul>
</li>
<li>记录日志</li>
</ul>
</li>
</ul>
<h4 id="3-3-3-异常解决方案的具体实现"><a href="#3-3-3-异常解决方案的具体实现" class="headerlink" title="3.3.3 异常解决方案的具体实现"></a>3.3.3 异常解决方案的具体实现</h4><blockquote>
<p>思路:</p>
<p>1.先通过自定义异常，完成BusinessException和SystemException的定义</p>
<p>2.将其他异常包装成自定义异常类型</p>
<p>3.在异常处理器类中对不同的异常进行处理</p>
</blockquote>
<h5 id="步骤1-自定义异常类"><a href="#步骤1-自定义异常类" class="headerlink" title="步骤1:自定义异常类"></a>步骤1:自定义异常类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义异常处理器，用于封装异常信息，对异常进行分类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Integer code, String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义异常处理器，用于封装异常信息，对异常进行分类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(Integer code, String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>说明:</strong></p>
<ul>
<li>让自定义异常类继承<code>RuntimeException</code>的好处是，后期在抛出这两个异常的时候，就不用在try…catch…或throws了</li>
<li>自定义异常类中添加<code>code</code>属性的原因是为了更好的区分异常是来自哪个业务的</li>
</ul>
<h5 id="步骤2-将其他异常包成自定义异常"><a href="#步骤2-将其他异常包成自定义异常" class="headerlink" title="步骤2:将其他异常包成自定义异常"></a>步骤2:将其他异常包成自定义异常</h5><p>假如在BookServiceImpl的getById方法抛异常了，该如何来包装呢?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="comment">//模拟业务异常，包装成自定义异常</span></span><br><span class="line">    <span class="keyword">if</span>(id == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(Code.BUSINESS_ERR,<span class="string">&quot;请不要使用你的技术挑战我的耐性!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模拟系统异常，将可能出现的异常进行包装，转换成自定义异常</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(Code.SYSTEM_TIMEOUT_ERR,<span class="string">&quot;服务器访问超时，请重试!&quot;</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bookDao.getById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体的包装方式有：</p>
<ul>
<li>方式一:<code>try&#123;&#125;catch()&#123;&#125;</code>在catch中重新throw我们自定义异常即可。</li>
<li>方式二:直接throw自定义异常即可</li>
</ul>
<p>上面为了使<code>code</code>看着更专业些，我们在Code类中再新增需要的属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//状态码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SAVE_OK</span> <span class="operator">=</span> <span class="number">20011</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DELETE_OK</span> <span class="operator">=</span> <span class="number">20021</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">UPDATE_OK</span> <span class="operator">=</span> <span class="number">20031</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">GET_OK</span> <span class="operator">=</span> <span class="number">20041</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SAVE_ERR</span> <span class="operator">=</span> <span class="number">20010</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DELETE_ERR</span> <span class="operator">=</span> <span class="number">20020</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">UPDATE_ERR</span> <span class="operator">=</span> <span class="number">20030</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">GET_ERR</span> <span class="operator">=</span> <span class="number">20040</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SYSTEM_ERR</span> <span class="operator">=</span> <span class="number">50001</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SYSTEM_TIMEOUT_ERR</span> <span class="operator">=</span> <span class="number">50002</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SYSTEM_UNKNOW_ERR</span> <span class="operator">=</span> <span class="number">59999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">BUSINESS_ERR</span> <span class="operator">=</span> <span class="number">60002</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="步骤3-处理器类中处理自定义异常"><a href="#步骤3-处理器类中处理自定义异常" class="headerlink" title="步骤3:处理器类中处理自定义异常"></a>步骤3:处理器类中处理自定义异常</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@RestControllerAdvice用于标识当前类为REST风格对应的异常处理器</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//@ExceptionHandler用于设置当前处理器类对应的异常类型</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SystemException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doSystemException</span><span class="params">(SystemException ex)</span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        <span class="comment">//发送消息给运维</span></span><br><span class="line">        <span class="comment">//发送邮件给开发人员,ex对象发送给开发人员</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(ex.getCode(),<span class="literal">null</span>,ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doBusinessException</span><span class="params">(BusinessException ex)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(ex.getCode(),<span class="literal">null</span>,ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//除了自定义的异常处理器，保留对Exception类型的异常处理，用于处理非预期的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doOtherException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        <span class="comment">//发送消息给运维</span></span><br><span class="line">        <span class="comment">//发送邮件给开发人员,ex对象发送给开发人员</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(Code.SYSTEM_UNKNOW_ERR,<span class="literal">null</span>,<span class="string">&quot;系统繁忙，请稍后再试！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="步骤4-运行程序"><a href="#步骤4-运行程序" class="headerlink" title="步骤4:运行程序"></a>步骤4:运行程序</h5><p>根据ID查询，</p>
<p>如果传入的参数为1，会报<code>BusinessException</code></p>
<p><img src="D:\blog\source_posts\pic\1630661162758.png" alt="1630661162758" loading="lazy"></p>
<p>如果传入的是其他参数，会报<code>SystemException</code></p>
<p><img src="D:\blog\source_posts\pic\1630661192383.png" alt="1630661192383" loading="lazy"></p>
<p>对于异常我们就已经处理完成了，不管后台哪一层抛出异常，都会以我们与前端约定好的方式进行返回，前端只需要把信息获取到，根据返回的正确与否来展示不同的内容即可。</p>
<p><strong>小结</strong></p>
<p>以后项目中的异常处理方式为:</p>
<p><img src="D:\blog\source_posts\pic\1630658821746.png" alt="1630658821746" loading="lazy"></p>
<h2 id="4，前后台协议联调"><a href="#4，前后台协议联调" class="headerlink" title="4，前后台协议联调"></a>4，前后台协议联调</h2><h3 id="4-1-环境准备"><a href="#4-1-环境准备" class="headerlink" title="4.1 环境准备"></a>4.1 环境准备</h3><ul>
<li>创建一个Web的Maven项目</li>
<li>pom.xml添加SSM整合所需jar包</li>
<li>创建对应的配置类</li>
<li>编写Controller、Service接口、Service实现类、Dao接口和模型类</li>
<li>resources下提供jdbc.properties配置文件</li>
</ul>
<p>内容参考前面的项目或者直接使用前面的项目进行本节内容的学习。</p>
<p>最终创建好的项目结构如下:</p>
<p><img src="D:\blog\source_posts\pic\1630661781776.png" alt="1630661781776" loading="lazy"></p>
<ol>
<li>将<code>资料\SSM功能页面</code>下面的静态资源拷贝到webapp下。</li>
</ol>
<p><img src="D:\blog\source_posts\pic\1630663662691.png" alt="1630663662691" loading="lazy"></p>
<ol start="2">
<li>因为添加了静态资源，SpringMVC会拦截，所有需要在SpringConfig的配置类中将静态资源进行放行。</li>
</ol>
<ul>
<li><p>新建SpringMvcSupport</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/css/**&quot;</span>).addResourceLocations(<span class="string">&quot;/css/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/js/**&quot;</span>).addResourceLocations(<span class="string">&quot;/js/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/plugins/**&quot;</span>).addResourceLocations(<span class="string">&quot;/plugins/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在SpringMvcConfig中扫描SpringMvcSupport</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;,&quot;com.itheima.config&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>接下来我们就需要将所有的列表查询、新增、修改、删除等功能一个个来实现下。</p>
<h3 id="4-2-列表功能"><a href="#4-2-列表功能" class="headerlink" title="4.2 列表功能"></a>4.2 列表功能</h3><p><img src="D:\blog\source_posts\pic\1630670317859.png" alt="1630670317859" loading="lazy"></p>
<blockquote>
<p>需求:页面加载完后发送异步请求到后台获取列表数据进行展示。</p>
<p>1.找到页面的钩子函数，<code>created()</code></p>
<p>2.<code>created()</code>方法中调用了<code>this.getAll()</code>方法</p>
<p>3.在getAll()方法中使用axios发送异步请求从后台获取数据</p>
<p>4.访问的路径为<code>http://localhost/books</code></p>
<p>5.返回数据</p>
</blockquote>
<p>返回数据res.data的内容如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机理论&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring实战 第五版&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring入门经典教程，深入理解Spring原理技术内幕&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机理论&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring 5核心原理与30个类手写实践&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;十年沉淀之作，手写Spring精华思想&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span>...</span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">20041</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>发送方式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//发送ajax请求</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="D:\blog\source_posts\pic\1630666787456.png" alt="1630666787456" loading="lazy"></p>
<h3 id="4-3-添加功能"><a href="#4-3-添加功能" class="headerlink" title="4.3 添加功能"></a>4.3 添加功能</h3><p><img src="D:\blog\source_posts\pic\1630670332168.png" alt="1630670332168" loading="lazy"></p>
<blockquote>
<p>需求:完成图片的新增功能模块</p>
<p>1.找到页面上的<code>新建</code>按钮，按钮上绑定了<code>@click=&quot;handleCreate()&quot;</code>方法</p>
<p>2.在method中找到<code>handleCreate</code>方法，方法中打开新增面板</p>
<p>3.新增面板中找到<code>确定</code>按钮,按钮上绑定了<code>@click=&quot;handleAdd()&quot;</code>方法</p>
<p>4.在method中找到<code>handleAdd</code>方法</p>
<p>5.在方法中发送请求和数据，响应成功后将新增面板关闭并重新查询数据</p>
</blockquote>
<p><code>handleCreate</code>打开新增面板</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><code>handleAdd</code>方法发送异步请求并携带数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handleAdd () &#123;</span><br><span class="line">    <span class="comment">//发送ajax请求</span></span><br><span class="line">    <span class="comment">//this.formData是表单中的数据，最后是一个json数据</span></span><br><span class="line">    axios.<span class="title function_">post</span>(<span class="string">&quot;/books&quot;</span>,<span class="variable language_">this</span>.<span class="property">formData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-添加功能状态处理"><a href="#4-4-添加功能状态处理" class="headerlink" title="4.4 添加功能状态处理"></a>4.4 添加功能状态处理</h3><p>基础的新增功能已经完成，但是还有一些问题需要解决下:</p>
<blockquote>
<p>需求:新增成功是关闭面板，重新查询数据，那么新增失败以后该如何处理?</p>
<p>1.在handlerAdd方法中根据后台返回的数据来进行不同的处理</p>
<p>2.如果后台返回的是成功，则提示成功信息，并关闭面板</p>
<p>3.如果后台返回的是失败，则提示错误信息</p>
</blockquote>
<p>(1)修改前端页面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handleAdd () &#123;</span><br><span class="line">    <span class="comment">//发送ajax请求</span></span><br><span class="line">    axios.<span class="title function_">post</span>(<span class="string">&quot;/books&quot;</span>,<span class="variable language_">this</span>.<span class="property">formData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//如果操作成功，关闭弹层，显示数据</span></span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20011</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20010</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(2)后台返回操作结果，将Dao层的增删改方法返回值从<code>void</code>改成<code>int</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Insert(&quot;insert into tbl_book values(null,#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_book (type,name,description) values(#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">save</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_book set type = #&#123;type&#125;, name = #&#123;name&#125;, description = #&#123;description&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(3)在BookServiceImpl中，增删改方法根据DAO的返回值来决定返回true&#x2F;false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.save(book) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.update(book) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.delete(id) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(id == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(Code.BUSINESS_ERR,<span class="string">&quot;请不要使用你的技术挑战我的耐性!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        //将可能出现的异常进行包装，转换成自定义异常</span></span><br><span class="line"><span class="comment">//        try&#123;</span></span><br><span class="line"><span class="comment">//            int i = 1/0;</span></span><br><span class="line"><span class="comment">//        &#125;catch (Exception e)&#123;</span></span><br><span class="line"><span class="comment">//            throw new SystemException(Code.SYSTEM_TIMEOUT_ERR,&quot;服务器访问超时，请重试!&quot;,e);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">return</span> bookDao.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>(4)测试错误情况，将图书类别长度设置超出范围即可</p>
<p><img src="D:\blog\source_posts\pic\1630668954348.png" alt="1630668954348" loading="lazy"></p>
<p>处理完新增后，会发现新增还存在一个问题，</p>
<p>新增成功后，再次点击<code>新增</code>按钮会发现之前的数据还存在，这个时候就需要在新增的时候将表单内容清空。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">resetForm</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">formData</span> = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">handleCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">resetForm</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-5-修改功能"><a href="#4-5-修改功能" class="headerlink" title="4.5 修改功能"></a>4.5 修改功能</h3><p><img src="D:\blog\source_posts\pic\1630670367812.png" alt="1630670367812" loading="lazy"></p>
<blockquote>
<p>需求:完成图书信息的修改功能</p>
<p>1.找到页面中的<code>编辑</code>按钮，该按钮绑定了<code>@click=&quot;handleUpdate(scope.row)&quot;</code></p>
<p>2.在method的<code>handleUpdate</code>方法中发送异步请求根据ID查询图书信息</p>
<p>3.根据后台返回的结果，判断是否查询成功</p>
<p>​	如果查询成功打开修改面板回显数据，如果失败提示错误信息</p>
<p>4.修改完成后找到修改面板的<code>确定</code>按钮，该按钮绑定了<code>@click=&quot;handleEdit()&quot;</code></p>
<p>5.在method的<code>handleEdit</code>方法中发送异步请求提交修改数据</p>
<p>6.根据后台返回的结果，判断是否修改成功</p>
<p>​	如果成功提示错误信息，关闭修改面板，重新查询数据，如果失败提示错误信息</p>
</blockquote>
<p>scope.row代表的是当前行的行数据，也就是说,scope.row就是选中行对应的json数据，如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机理论&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring实战 第五版&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring入门经典教程，深入理解Spring原理技术内幕&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>修改<code>handleUpdate</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//弹出编辑窗口</span></span><br><span class="line"><span class="title function_">handleUpdate</span>(<span class="params">row</span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(row);   //row.id 查询条件</span></span><br><span class="line">    <span class="comment">//查询数据，根据id查询</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books/&quot;</span>+row.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20041</span>)&#123;</span><br><span class="line">            <span class="comment">//展示弹层，加载数据</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">formData</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dialogFormVisible4Edit</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改<code>handleEdit</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleEdit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//发送ajax请求</span></span><br><span class="line">    axios.<span class="title function_">put</span>(<span class="string">&quot;/books&quot;</span>,<span class="variable language_">this</span>.<span class="property">formData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//如果操作成功，关闭弹层，显示数据</span></span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20031</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dialogFormVisible4Edit</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20030</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;修改失败&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此修改功能就已经完成。</p>
<h3 id="4-6-删除功能"><a href="#4-6-删除功能" class="headerlink" title="4.6 删除功能"></a>4.6 删除功能</h3><p><img src="D:\blog\source_posts\pic\1630673984385.png" alt="1630673984385" loading="lazy"></p>
<blockquote>
<p>需求:完成页面的删除功能。</p>
<p>1.找到页面的删除按钮，按钮上绑定了<code>@click=&quot;handleDelete(scope.row)&quot;</code></p>
<p>2.method的<code>handleDelete</code>方法弹出提示框</p>
<p>3.用户点击取消,提示操作已经被取消。</p>
<p>4.用户点击确定，发送异步请求并携带需要删除数据的主键ID</p>
<p>5.根据后台返回结果做不同的操作</p>
<p>​	如果返回成功，提示成功信息，并重新查询数据</p>
<p>​	如果返回失败，提示错误信息，并重新查询数据</p>
</blockquote>
<p>修改<code>handleDelete</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleDelete</span>(<span class="params">row</span>) &#123;</span><br><span class="line">    <span class="comment">//1.弹出提示框</span></span><br><span class="line">    <span class="variable language_">this</span>.$confirm(<span class="string">&quot;此操作永久删除当前数据，是否继续？&quot;</span>,<span class="string">&quot;提示&quot;</span>,&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&#x27;info&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//2.做删除业务</span></span><br><span class="line">        axios.<span class="title function_">delete</span>(<span class="string">&quot;/books/&quot;</span>+row.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20021</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//3.取消删除</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">info</span>(<span class="string">&quot;取消删除操作&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来，下面是一个完整页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 页面meta --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringMVC案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no&quot;</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 引入样式 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../plugins/elementui/index.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../plugins/font-awesome/css/font-awesome.min.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../css/style.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;hold-transition&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content-header&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>图书管理<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;filter-container&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;图书名称&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pagination.queryString&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;filter-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;getAll()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dalfBut&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">class</span>=<span class="string">&quot;butT&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleCreate()&quot;</span>&gt;</span>新建<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">current-row-key</span>=<span class="string">&quot;id&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;dataList&quot;</span> <span class="attr">stripe</span> <span class="attr">highlight-current-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;index&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">label</span>=<span class="string">&quot;序号&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;type&quot;</span> <span class="attr">label</span>=<span class="string">&quot;图书类别&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;图书名称&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;description&quot;</span> <span class="attr">label</span>=<span class="string">&quot;描述&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleUpdate(scope.row)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleDelete(scope.row)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 新增标签弹层 --&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;add-form&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;新增图书&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogFormVisible&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;dataAddForm&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;formData&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-position</span>=<span class="string">&quot;right&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;图书类别&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;type&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.type&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;图书名称&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.name&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;描述&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.description&quot;</span> <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;dialogFormVisible = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleAdd()&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 编辑标签弹层 --&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;add-form&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;编辑检查项&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogFormVisible4Edit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;dataEditForm&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;formData&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-position</span>=<span class="string">&quot;right&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;图书类别&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;type&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.type&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;图书名称&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.name&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;描述&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.description&quot;</span> <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;dialogFormVisible4Edit = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleEdit()&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入组件库 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../plugins/elementui/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/axios-0.18.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">pagination</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">dataList</span>: [],<span class="comment">//当前页要展示的列表数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">formData</span>: &#123;&#125;,<span class="comment">//表单数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dialogFormVisible</span>: <span class="literal">false</span>,<span class="comment">//控制表单是否可见</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dialogFormVisible4Edit</span>:<span class="literal">false</span>,<span class="comment">//编辑表单是否可见</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">rules</span>: &#123;<span class="comment">//校验规则</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;图书类别为必填项&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;],</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;图书名称为必填项&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;]</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//钩子函数，VUE对象初始化完成后自动执行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//列表</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//发送ajax请求</span></span></span><br><span class="line"><span class="language-javascript">                    axios.<span class="title function_">get</span>(<span class="string">&quot;/books&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//弹出添加窗口</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handleCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">resetForm</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//重置表单</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">resetForm</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">formData</span> = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//添加</span></span></span><br><span class="line"><span class="language-javascript">                handleAdd () &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//发送ajax请求</span></span></span><br><span class="line"><span class="language-javascript">                    axios.<span class="title function_">post</span>(<span class="string">&quot;/books&quot;</span>,<span class="variable language_">this</span>.<span class="property">formData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//如果操作成功，关闭弹层，显示数据</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20011</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;添加成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20010</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;添加失败&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//弹出编辑窗口</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handleUpdate</span>(<span class="params">row</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// console.log(row);   //row.id 查询条件</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//查询数据，根据id查询</span></span></span><br><span class="line"><span class="language-javascript">                    axios.<span class="title function_">get</span>(<span class="string">&quot;/books/&quot;</span>+row.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// console.log(res.data.data);</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20041</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="comment">//展示弹层，加载数据</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">formData</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">dialogFormVisible4Edit</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//编辑</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handleEdit</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//发送ajax请求</span></span></span><br><span class="line"><span class="language-javascript">                    axios.<span class="title function_">put</span>(<span class="string">&quot;/books&quot;</span>,<span class="variable language_">this</span>.<span class="property">formData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//如果操作成功，关闭弹层，显示数据</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20031</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">dialogFormVisible4Edit</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;修改成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20030</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;修改失败&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 删除</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handleDelete</span>(<span class="params">row</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//1.弹出提示框</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.$confirm(<span class="string">&quot;此操作永久删除当前数据，是否继续？&quot;</span>,<span class="string">&quot;提示&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">type</span>:<span class="string">&#x27;info&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//2.做删除业务</span></span></span><br><span class="line"><span class="language-javascript">                        axios.<span class="title function_">delete</span>(<span class="string">&quot;/books/&quot;</span>+row.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20021</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;删除成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;删除失败&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                        &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span></span><br><span class="line"><span class="language-javascript">                        &#125;);</span></span><br><span class="line"><span class="language-javascript">                    &#125;).<span class="title function_">catch</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//3.取消删除</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">info</span>(<span class="string">&quot;取消删除操作&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5，拦截器"><a href="#5，拦截器" class="headerlink" title="5，拦截器"></a>5，拦截器</h2><p>对于拦截器这节的知识，我们需要学习如下内容:</p>
<ul>
<li>拦截器概念</li>
<li>入门案例</li>
<li>拦截器参数</li>
<li>拦截器工作流程分析</li>
</ul>
<h3 id="5-1-拦截器概念"><a href="#5-1-拦截器概念" class="headerlink" title="5.1 拦截器概念"></a>5.1 拦截器概念</h3><p>讲解拦截器的概念之前，我们先看一张图:</p>
<p><img src="D:\blog\source_posts\pic\1630676280170.png" alt="1630676280170" loading="lazy"></p>
<p>(1)浏览器发送一个请求会先到Tomcat的web服务器</p>
<p>(2)Tomcat服务器接收到请求以后，会去判断请求的是静态资源还是动态资源</p>
<p>(3)如果是静态资源，会直接到Tomcat的项目部署目录下去直接访问</p>
<p>(4)如果是动态资源，就需要交给项目的后台代码进行处理</p>
<p>(5)在找到具体的方法之前，我们可以去配置过滤器(可以配置多个)，按照顺序进行执行</p>
<p>(6)然后进入到到中央处理器(SpringMVC中的内容)，SpringMVC会根据配置的规则进行拦截</p>
<p>(7)如果满足规则，则进行处理，找到其对应的controller类中的方法进行执行,完成后返回结果</p>
<p>(8)如果不满足规则，则不进行处理</p>
<p>(9)这个时候，如果我们需要在每个Controller方法执行的前后添加业务，具体该如何来实现?</p>
<p>这个就是拦截器要做的事。</p>
<ul>
<li>拦截器（Interceptor）是一种动态拦截方法调用的机制，在SpringMVC中动态拦截控制器方法的执行</li>
<li>作用:<ul>
<li>在指定的方法调用前后执行预先设定的代码</li>
<li>阻止原始方法的执行</li>
<li>总结：拦截器就是用来做增强</li>
</ul>
</li>
</ul>
<p>看完以后，大家会发现</p>
<ul>
<li>拦截器和过滤器在作用和执行顺序上也很相似</li>
</ul>
<p>所以这个时候，就有一个问题需要思考:拦截器和过滤器之间的区别是什么?</p>
<ul>
<li>归属不同：Filter属于Servlet技术，Interceptor属于SpringMVC技术</li>
<li>拦截内容不同：Filter对所有访问进行增强，Interceptor仅针对SpringMVC的访问进行增强</li>
</ul>
<p><img src="D:\blog\source_posts\pic\1630676903190.png" alt="1630676903190" loading="lazy"></p>
<h3 id="5-2-拦截器入门案例"><a href="#5-2-拦截器入门案例" class="headerlink" title="5.2 拦截器入门案例"></a>5.2 拦截器入门案例</h3><h4 id="5-2-1-环境准备"><a href="#5-2-1-环境准备" class="headerlink" title="5.2.1 环境准备"></a>5.2.1 环境准备</h4><ul>
<li><p>创建一个Web的Maven项目</p>
</li>
<li><p>pom.xml添加SSM整合所需jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_12_interceptor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建对应的配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//乱码处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建模型类Book</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Book&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;书名=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, 价格=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book save...&quot;</span> + book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book delete...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book update...&quot;</span>+book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book update&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getById...&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book getById&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getAll...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book getAll&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>最终创建好的项目结构如下:</p>
<p><img src="D:\blog\source_posts\pic\1630677370998.png" alt="1630677370998" loading="lazy"></p>
<h4 id="5-2-2-拦截器开发"><a href="#5-2-2-拦截器开发" class="headerlink" title="5.2.2 拦截器开发"></a>5.2.2 拦截器开发</h4><h5 id="步骤1-创建拦截器类"><a href="#步骤1-创建拦截器类" class="headerlink" title="步骤1:创建拦截器类"></a>步骤1:创建拦截器类</h5><p>让类实现HandlerInterceptor接口，重写接口中的三个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//定义拦截器类，实现HandlerInterceptor接口</span></span><br><span class="line"><span class="comment">//注意当前类必须受Spring容器控制</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//原始方法调用前执行的内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//原始方法调用后执行的内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//原始方法调用完成后执行的内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**注意:**拦截器类要被SpringMVC容器扫描到。</p>
<h5 id="步骤2-配置拦截器类"><a href="#步骤2-配置拦截器类" class="headerlink" title="步骤2:配置拦截器类"></a>步骤2:配置拦截器类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//配置拦截器</span></span><br><span class="line">        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/books&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="步骤3-SpringMVC添加SpringMvcSupport包扫描"><a href="#步骤3-SpringMVC添加SpringMvcSupport包扫描" class="headerlink" title="步骤3:SpringMVC添加SpringMvcSupport包扫描"></a>步骤3:SpringMVC添加SpringMvcSupport包扫描</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;,&quot;com.itheima.config&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="步骤4-运行程序测试"><a href="#步骤4-运行程序测试" class="headerlink" title="步骤4:运行程序测试"></a>步骤4:运行程序测试</h5><p>使用PostMan发送<code>http://localhost/books</code></p>
<p><img src="D:\blog\source_posts\pic\1630678114224.png" alt="1630678114224" loading="lazy"></p>
<p>如果发送<code>http://localhost/books/100</code>会发现拦截器没有被执行，原因是拦截器的<code>addPathPatterns</code>方法配置的拦截路径是<code>/books</code>,我们现在发送的是<code>/books/100</code>，所以没有匹配上，因此没有拦截，拦截器就不会执行。</p>
<h5 id="步骤5-修改拦截器拦截规则"><a href="#步骤5-修改拦截器拦截规则" class="headerlink" title="步骤5:修改拦截器拦截规则"></a>步骤5:修改拦截器拦截规则</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//配置拦截器</span></span><br><span class="line">        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/books&quot;</span>,<span class="string">&quot;/books/*&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个时候，如果再次访问<code>http://localhost/books/100</code>，拦截器就会被执行。</p>
<p>最后说一件事，就是拦截器中的<code>preHandler</code>方法，如果返回true,则代表放行，会执行原始Controller类中要请求的方法，如果返回false，则代表拦截，后面的就不会再执行了。</p>
<h5 id="步骤6-简化SpringMvcSupport的编写"><a href="#步骤6-简化SpringMvcSupport的编写" class="headerlink" title="步骤6:简化SpringMvcSupport的编写"></a>步骤6:简化SpringMvcSupport的编写</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="comment">//实现WebMvcConfigurer接口可以简化开发，但具有一定的侵入性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//配置多拦截器</span></span><br><span class="line">        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/books&quot;</span>,<span class="string">&quot;/books/*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此后咱们就不用再写<code>SpringMvcSupport</code>类了。</p>
<p>最后我们来看下拦截器的执行流程:</p>
<p><img src="D:\blog\source_posts\pic\1630679464294.png" alt="1630679464294" loading="lazy"></p>
<p>当有拦截器后，请求会先进入preHandle方法，</p>
<p>​	如果方法返回true，则放行继续执行后面的handle[controller的方法]和后面的方法</p>
<p>​	如果返回false，则直接跳过后面方法的执行。</p>
<h3 id="5-3-拦截器参数"><a href="#5-3-拦截器参数" class="headerlink" title="5.3 拦截器参数"></a>5.3 拦截器参数</h3><h4 id="5-3-1-前置处理方法"><a href="#5-3-1-前置处理方法" class="headerlink" title="5.3.1 前置处理方法"></a>5.3.1 前置处理方法</h4><p>原始方法之前运行preHandle</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                         HttpServletResponse response,</span></span><br><span class="line"><span class="params">                         Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;preHandle&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>request:请求对象</li>
<li>response:响应对象</li>
<li>handler:被调用的处理器对象，本质上是一个方法对象，对反射中的Method对象进行了再包装</li>
</ul>
<p>使用request对象可以获取请求数据中的内容，如获取请求头的<code>Content-Type</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Content-Type&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;preHandle...&quot;</span>+contentType);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用handler参数，可以获取方法的相关信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">HandlerMethod</span> <span class="variable">hm</span> <span class="operator">=</span> (HandlerMethod)handler;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> hm.getMethod().getName();<span class="comment">//可以获取方法的名称</span></span><br><span class="line">    System.out.println(<span class="string">&quot;preHandle...&quot;</span>+methodName);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-3-2-后置处理方法"><a href="#5-3-2-后置处理方法" class="headerlink" title="5.3.2 后置处理方法"></a>5.3.2 后置处理方法</h4><p>原始方法运行后运行，如果原始方法被拦截，则不执行  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                       HttpServletResponse response,</span></span><br><span class="line"><span class="params">                       Object handler,</span></span><br><span class="line"><span class="params">                       ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;postHandle&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前三个参数和上面的是一致的。</p>
<p>modelAndView:如果处理器执行完成具有返回结果，可以读取到对应数据与页面信息，并进行调整</p>
<p>因为咱们现在都是返回json数据，所以该参数的使用率不高。</p>
<h4 id="5-3-3-完成处理方法"><a href="#5-3-3-完成处理方法" class="headerlink" title="5.3.3 完成处理方法"></a>5.3.3 完成处理方法</h4><p>拦截器最后执行的方法，无论原始方法是否执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                            HttpServletResponse response,</span></span><br><span class="line"><span class="params">                            Object handler,</span></span><br><span class="line"><span class="params">                            Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;afterCompletion&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前三个参数与上面的是一致的。</p>
<p>ex:如果处理器执行过程中出现异常对象，可以针对异常情况进行单独处理  </p>
<p>因为我们现在已经有全局异常处理器类，所以该参数的使用率也不高。</p>
<p>这三个方法中，最常用的是&#x3D;&#x3D;preHandle&#x3D;&#x3D;,在这个方法中可以通过返回值来决定是否要进行放行，我们可以把业务逻辑放在该方法中，如果满足业务则返回true放行，不满足则返回false拦截。</p>
<h3 id="5-4-拦截器链配置"><a href="#5-4-拦截器链配置" class="headerlink" title="5.4 拦截器链配置"></a>5.4 拦截器链配置</h3><p>目前，项目中只添加了一个拦截器，如果有多个，该如何配置?配置多个后，执行顺序是什么?</p>
<h4 id="5-4-1-配置多个拦截器"><a href="#5-4-1-配置多个拦截器" class="headerlink" title="5.4.1 配置多个拦截器"></a>5.4.1 配置多个拦截器</h4><h5 id="步骤1-创建拦截器类-1"><a href="#步骤1-创建拦截器类-1" class="headerlink" title="步骤1:创建拦截器类"></a>步骤1:创建拦截器类</h5><p>实现接口，并重写接口中的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectInterceptor2</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle...222&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle...222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion...222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="步骤2-配置拦截器类-1"><a href="#步骤2-配置拦截器类-1" class="headerlink" title="步骤2:配置拦截器类"></a>步骤2:配置拦截器类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="comment">//实现WebMvcConfigurer接口可以简化开发，但具有一定的侵入性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor2 projectInterceptor2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//配置多拦截器</span></span><br><span class="line">        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/books&quot;</span>,<span class="string">&quot;/books/*&quot;</span>);</span><br><span class="line">        registry.addInterceptor(projectInterceptor2).addPathPatterns(<span class="string">&quot;/books&quot;</span>,<span class="string">&quot;/books/*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>步骤3:运行程序，观察顺序</p>
<p><img src="D:\blog\source_posts\pic\1630680435269.png" alt="1630680435269" loading="lazy"></p>
<p>拦截器执行的顺序是和配置顺序有关。就和前面所提到的运维人员进入机房的案例，先进后出。</p>
<ul>
<li>当配置多个拦截器时，形成拦截器链</li>
<li>拦截器链的运行顺序参照拦截器添加顺序为准</li>
<li>当拦截器中出现对原始处理器的拦截，后面的拦截器均终止运行</li>
<li>当拦截器运行中断，仅运行配置在前面的拦截器的afterCompletion操作</li>
</ul>
<p><img src="D:\blog\source_posts\pic\1630680579735.png" alt="1630680579735" loading="lazy"></p>
<p>preHandle：与配置顺序相同，必定运行</p>
<p>postHandle:与配置顺序相反，可能不运行</p>
<p>afterCompletion:与配置顺序相反，可能不运行。</p>
<p>这个顺序不太好记，最终只需要把握住一个原则即可:&#x3D;&#x3D;以最终的运行结果为准&#x3D;&#x3D;</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Scrapy学习</title>
    <url>/2022/04/11/Scrapy%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-Scrapy框架介绍"><a href="#1-Scrapy框架介绍" class="headerlink" title="1. Scrapy框架介绍"></a>1. Scrapy框架介绍</h1><p>Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架，是一个基于Twisted的异步处理框架，是纯Python实现的爬虫框架，架构清晰，模块之间的耦合程度低，可扩展性极强，可以灵活的完成各种需求。</p>
<h1 id="2-Scrapy项目的创建以及运行"><a href="#2-Scrapy项目的创建以及运行" class="headerlink" title="2.Scrapy项目的创建以及运行"></a>2.Scrapy项目的创建以及运行</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 创建爬虫的项目  </span><br><span class="line">				   	终端输入：scrapy startproject 项目的名字</span><br><span class="line">                  	注意：项目的名字不允许数字开头，也不能包含中文</span><br><span class="line"></span><br><span class="line">2.项目结构</span><br><span class="line">	    项目名字</span><br><span class="line">        项目名字</span><br><span class="line">                spiders文件夹（存储爬虫文件）</span><br><span class="line">                        init</span><br><span class="line">                        自定义的爬虫文件   是实现爬虫核心功能文件☆☆☆☆☆</span><br><span class="line">                init</span><br><span class="line">                items           定义数据结构的地方，爬取的数据都包含哪些</span><br><span class="line">                middleware      中间件     代理</span><br><span class="line">                pipelines       管道文件，里面只有一个类      用于处理下载的数据</span><br><span class="line">                				默认是300优先级，值越小优先级越高（1-1000）</span><br><span class="line">                setting         配置文件   比如是否遵循robots协议     ua定义等</span><br><span class="line"></span><br><span class="line">3.创建爬虫文件</span><br><span class="line">            （1）跳转到spiders文件夹 cd 目录名字/目录名字/spiders </span><br><span class="line">            		要在spiders文件夹中创建爬虫文件</span><br><span class="line">                    cd  项目的名字\项目的名字\spiders</span><br><span class="line">                    cd  scrapy_baidu\scrapy_baidu\spiders</span><br><span class="line">            </span><br><span class="line">            （2）scrapy genspider 爬虫名字 网页的域名        </span><br><span class="line">                    </span><br><span class="line">                    创建爬虫文件</span><br><span class="line">                    scrapy genspider  爬虫文件的名字  要爬取网页</span><br><span class="line">                    scrapy genspider  baidu          http://baidu.com</span><br><span class="line"></span><br><span class="line">                    一般情况下不需要加http协议  因为start_urls的值是根据allow_domains修改的</span><br><span class="line">                    所以添加了http的话 start_urls就需要手动修改了</span><br><span class="line">3.运行爬虫代码</span><br><span class="line">                    scrapy crawl 爬虫的名字</span><br><span class="line">                    scrapy crawl baidu</span><br></pre></td></tr></table></figure>

<h1 id="3-Scrapy架构"><a href="#3-Scrapy架构" class="headerlink" title="3.Scrapy架构"></a>3.Scrapy架构</h1>

<ul>
<li>Engine：引擎。处理整个系统的数据流处理、触发事务、是整个框架的<strong>核心</strong>，会自动组织所有的请求对象，分发给下载器。</li>
<li>Downloader：下载器。从引擎处获取到请求对象后，下载网页内容，请求数据并将网页内容返回给Spiders蜘蛛。</li>
<li>Spiders：蜘蛛。内部定义了爬取的逻辑和网页的解析规则，主要负责解析响应并生成提取结果和新的请求。换句话说，Spiders就是定义爬取动作以及分析某个或者某些网页的地方。</li>
<li>Scheduler：调度器。接受引擎发过来的请求并将其加入到队列中，在引擎再次请求的时候将请求提供给引擎。</li>
<li>Item Pipeline：项目管道。是最终处理数据的管道，会预留接口供我们存储数据，负责处理由Spiders从网页中抽取的项目，主要任务是负责清洗、验证和存储数据。</li>
</ul>
<h1 id="4-Scrapy工作原理（数据流）"><a href="#4-Scrapy工作原理（数据流）" class="headerlink" title="4. Scrapy工作原理（数据流）"></a>4. Scrapy工作原理（数据流）</h1><p>Scrapy的数据流是引擎控制的，数据流过程如下：</p>
<ol>
<li>Engine首先打开一个网站，找到处理该网站的Spider，并向Spider请求第一个要爬取的url。</li>
<li>Engine将要爬取的url传给调度器Scheduler。</li>
<li>调度器Scheduler将url生成请求对象放入指定的队列中。</li>
<li>从队列中出队一个请求，Engine将请求交给下载器DownLoader进行处理。</li>
<li>下载器Downloader发送请求获取互联网数据。</li>
<li>一旦页面下载完毕，DownLoader生成该页面的Response，返回给Engine。</li>
<li>Engine从下载器中接收到Response，将其给到Spider。</li>
<li>Spider通过xpath进行解析，得到数据或者新的请求url。</li>
<li>Spider将解析得到的数据或者请求返回给Engine。</li>
<li>Engine判断该数据是数据还是请求url，将数据讲给项目管道处理，是url则继续交给调入器重复3-9步骤。</li>
</ol>
<h3 id="Demo-汽车之家宝马价格："><a href="#Demo-汽车之家宝马价格：" class="headerlink" title="Demo 汽车之家宝马价格："></a>Demo 汽车之家宝马价格：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;car&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;https://car.autohome.com.cn/price/brand-15.html&#x27;</span>]</span><br><span class="line">    <span class="comment">#如果请求的接口是html为结尾的，不需要加/</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://car.autohome.com.cn/price/brand-15.html&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="comment">#//div[@class=&quot;main-title&quot;]/a/text()</span></span><br><span class="line"></span><br><span class="line">        name_list = response.xpath(<span class="string">&#x27;//div[@class=&quot;main-title&quot;]/a/text()&#x27;</span>)</span><br><span class="line">        price_list = response.xpath(<span class="string">&#x27;//span[@class=&quot;font-arial&quot;]/text()&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(name_list)):</span><br><span class="line">            name = name_list[i].extract()</span><br><span class="line">            price = price_list[i].extract()</span><br><span class="line">            <span class="built_in">print</span>(name +<span class="string">&#x27;    &#x27;</span>+ price)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
  </entry>
  <entry>
    <title>Selenium学习</title>
    <url>/2022/04/07/Selenium%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-Selenium"><a href="#1-Selenium" class="headerlink" title="1. Selenium"></a>1. Selenium</h1><h2 id="1-1-什么是selenium？"><a href="#1-1-什么是selenium？" class="headerlink" title="1.1 什么是selenium？"></a>1.1 什么是selenium？</h2><ol>
<li><p>Selenium是一个用于Web应用程序测试的工具。 </p>
</li>
<li><p>Selenium 测试直接运行在浏览器中，就像真正的用户在操作一样。 </p>
</li>
<li><p>支持通过各种driver（FirfoxDriver，IternetExplorerDriver，OperaDriver，ChromeDriver）驱动 真实浏览器完成测试。 </p>
</li>
<li><p>selenium也是支持无界面浏览器操作的。</p>
</li>
</ol>
<h2 id="1-2-为什么使用Selenium"><a href="#1-2-为什么使用Selenium" class="headerlink" title="1.2 为什么使用Selenium?"></a>1.2 为什么使用Selenium?</h2><p>模拟浏览器功能，自动执行网页中的js代码，实现动态加载。</p>
<h2 id="1-3-使用步骤"><a href="#1-3-使用步骤" class="headerlink" title="1.3 使用步骤"></a>1.3 使用步骤</h2><ol>
<li>导包： form selenium import webdriver</li>
<li>创建谷歌浏览器操作对象：<ol>
<li>path &#x3D; 浏览器驱动文件路径</li>
<li>browser &#x3D; webdriver.Chrome(path)</li>
</ol>
</li>
<li>访问网址<ol>
<li>url &#x3D; “所要访问的网址”</li>
<li>browser.get(url)</li>
</ol>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">&#x27;D:\chromedriver\chromedriver.exe&#x27;</span></span><br><span class="line">browser = webdriver.Chrome(path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">browser.get(url)</span><br></pre></td></tr></table></figure>

<h3 id="1-3-1-元素定位"><a href="#1-3-1-元素定位" class="headerlink" title="1.3.1 元素定位"></a>1.3.1 元素定位</h3><p>元素定位：自动化要做的就是模拟鼠标和键盘来操作来操作这些元素，点击、输入等等。操作这些元素前首先 </p>
<p>要找到它们，WebDriver提供很多定位元素的方法。</p>
<p><strong>方法：</strong></p>
<pre><code>1. find_element(By.ID,&#39;标签id&#39;)
1. find_element(By.CLASS_NAME,&#39;标签类名&#39;)
1. find_element(By.TAG_NAME,&#39;标签名&#39;)
1. find_element(By.CSS_SELECTOR,&#39;根据选择器进行定位&#39;)
1. find_element(By.XPATH,&#39;根据XPATH进行定位&#39;)
</code></pre>
<h3 id="1-3-2-访问元素信息"><a href="#1-3-2-访问元素信息" class="headerlink" title="1.3.2 访问元素信息"></a>1.3.2 访问元素信息</h3><ol>
<li>获取元素属性: .get_attribute(‘class’)</li>
<li>获取元素文本：.text</li>
<li>获取标签名：.tag_name</li>
</ol>
<h3 id="1-3-3-交互"><a href="#1-3-3-交互" class="headerlink" title="1.3.3 交互"></a>1.3.3 交互</h3><ul>
<li><p>点击:click() </p>
</li>
<li><p>输入:send_keys() </p>
</li>
<li><p>-后退操作:browser.back() </p>
</li>
<li><p>前进操作:browser.forword() </p>
</li>
<li><p>模拟JS滚动: </p>
<ul>
<li><p>js&#x3D;’document.documentElement.scrollTop&#x3D;100000’ </p>
</li>
<li><p>browser.execute_script(js) 执行js代码</p>
</li>
</ul>
</li>
<li><p>获取网页代码：page_source </p>
</li>
<li><p>退出：browser.quit()</p>
</li>
</ul>
<h1 id="2-Phantomjs-（已废弃）"><a href="#2-Phantomjs-（已废弃）" class="headerlink" title="2.Phantomjs （已废弃）"></a>2.<strong>Phantomjs</strong> （已废弃）</h1><h2 id="2-1-什么是Phantomjs？"><a href="#2-1-什么是Phantomjs？" class="headerlink" title="2.1 什么是Phantomjs？"></a>2.1 什么是Phantomjs？</h2><ol>
<li>是一个无界面的浏览器</li>
<li>支持页面元素查找，js的执行等</li>
<li>由于不进行css和gui渲染，运行效率要比真实的浏览器要快很多</li>
</ol>
<h2 id="2-2-如何使用Phantomjs？"><a href="#2-2-如何使用Phantomjs？" class="headerlink" title="2.2 如何使用Phantomjs？"></a>2.2 如何使用Phantomjs？</h2><ol>
<li>获取PhantomJS.exe文件路径path</li>
<li>browser &#x3D; webdriver.PhantomJS(path)</li>
<li>browser.get(url)</li>
</ol>
<p>扩展：保存屏幕快照:browser.save_screenshot(‘图片.png’) </p>
<h1 id="3-Chrome-handless"><a href="#3-Chrome-handless" class="headerlink" title="3. Chrome handless"></a>3. <strong>Chrome handless</strong></h1><p>Chrome-headless 模式，是Google 针对 Chrome 浏览器 59版 新增加的一种模式，可以让你<strong>不打开UI界面的情况下</strong>使用 Chrome 浏览器，所以运行效果与 Chrome 保持完美一致。</p>
<h2 id="3-1-配置"><a href="#3-1-配置" class="headerlink" title="3.1 配置"></a>3.1 配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;‐‐headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;‐‐disable‐gpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&#x27;&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot;&#x27;</span></span><br><span class="line">chrome_options.binary_location = path</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line"></span><br><span class="line">browser.get(<span class="string">&#x27;http://www.baidu.com/&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-2-配置封装"><a href="#3-2-配置封装" class="headerlink" title="3.2 配置封装"></a>3.2 配置封装</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment">#这个是浏览器自带的 不需要我们再做额外的操作</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">share_browser</span>():</span><br><span class="line"><span class="comment">#初始化</span></span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;‐‐headless&#x27;</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;‐‐disable‐gpu&#x27;</span>)</span><br><span class="line">    <span class="comment">#浏览器的安装路径 打开文件位置</span></span><br><span class="line">    <span class="comment"># #这个路径是你谷歌浏览器的路径</span></span><br><span class="line">    path = <span class="string">r&#x27;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&#x27;</span></span><br><span class="line">    chrome_options.binary_location = path</span><br><span class="line">    browser = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line">    <span class="keyword">return</span> browser</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
  </entry>
  <entry>
    <title>Servlet小结</title>
    <url>/2021/05/05/Servlet%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="黑马Servlet学习笔记"><a href="#黑马Servlet学习笔记" class="headerlink" title="黑马Servlet学习笔记"></a>黑马Servlet学习笔记</h2><h3 id="1、Servlet-简介"><a href="#1、Servlet-简介" class="headerlink" title="1、Servlet 简介"></a>1、Servlet 简介</h3><p><img src="D:\blog\source_posts\pic\1627234763207.png" alt="1627234763207" loading="lazy"></p>
<ul>
<li><p>Servlet是JavaWeb最为<code>核心</code>的内容，它是Java提供的一门&#x3D;&#x3D;动态&#x3D;&#x3D;web资源开发技术。</p>
</li>
<li><p>使用Servlet就可以实现，根据不同的登录用户在页面上动态显示不同内容。</p>
</li>
<li><p>Servlet是JavaEE规范之一，规范对应的就是接口，我们需要定义Servlet类来实现Servlet接口，并由web服务器运行Servlet。</p>
</li>
</ul>
<h3 id="2、-快速入门"><a href="#2、-快速入门" class="headerlink" title="2、 快速入门"></a>2、 快速入门</h3><ol>
<li>创建Web项目<code>web-demo</code>，导入Servlet依赖坐标</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      此处为什么需要添加该标签?</span></span><br><span class="line"><span class="comment">      provided指的是在编译和测试过程中有效,最后生成的war包时不会加入</span></span><br><span class="line"><span class="comment">       因为Tomcat的lib目录中已经有servlet-api这个jar包，如果在生成war包的时候生效就会和Tomcat中的jar包冲突，导致报错</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建:定义一个类，实现Servlet接口，并重写接口中所有方法，并在service方法中输入一句话</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo1</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet hello world~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置:在类上使用@WebServlet注解，配置该Servlet的访问路径</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo1&quot;)</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>访问:启动Tomcat,浏览器中输入URL地址访问该Servlet</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/web-demo/demo1</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>浏览器访问该Servlet后，控制台会打印出<code>servlet hello world~</code> ，说明servlet程序已经成功运行。</li>
</ol>
<h3 id="3、Servlet执行流程"><a href="#3、Servlet执行流程" class="headerlink" title="3、Servlet执行流程"></a>3、Servlet执行流程</h3><p><img src="D:\blog\source_posts\pic\1627236923139.png" alt="1627236923139" loading="lazy"></p>
<ul>
<li>浏览器发出<code>http://localhost:8080/web-demo/demo1</code>请求，从请求中可以解析出三部分内容，分别是<code>localhost:8080</code>、<code>web-demo</code>、<code>demo1</code><ul>
<li>根据<code>localhost:8080</code>可以找到要访问的Tomcat Web服务器</li>
<li>根据<code>web-demo</code>可以找到部署在Tomcat服务器上的web-demo项目</li>
<li>根据<code>demo1</code>可以找到要访问的是项目中的哪个Servlet类，根据<code>@WebServlet</code>后面的值进行匹配</li>
</ul>
</li>
<li>找到<code>ServletDemo1</code>这个类后，Tomcat Web服务器就会为ServletDemo1这个类创建一个对象，然后调用对象中的service方法<ul>
<li><code>ServletDemo1</code>实现了Servlet接口，所以类中必然会重写service方法供Tomcat Web服务器进行调用</li>
<li><code>service</code>方法中有<code>ServletRequest</code>和<code>ServletResponse</code>两个参数，<code>ServletRequest</code>封装的是请求数据，<code>ServletResponse</code>封装的是响应数据，这两个参数是用来实现前后端之间的数据交互的</li>
</ul>
</li>
</ul>
<p><strong>小结</strong></p>
<ol>
<li>Servlet由谁创建?Servlet方法由谁调用?</li>
</ol>
<blockquote>
<p>Servlet由<code>web服务器</code>创建，Servlet方法由<code>web服务器调用</code></p>
</blockquote>
<ol start="2">
<li>服务器怎么知道Servlet中一定有service方法?</li>
</ol>
<blockquote>
<p>因为我们自定义的Servlet,必须实现Servlet接口并复写其方法，而Servlet接口中有service方法</p>
</blockquote>
<h3 id="4、-Servlet生命周期"><a href="#4、-Servlet生命周期" class="headerlink" title="4、 Servlet生命周期"></a>4、 Servlet生命周期</h3><p><strong>生命周期:</strong> 对象的生命周期指一个对象从被创建到被销毁的整个过程。</p>
<ul>
<li><p>Servlet运行在Servlet容器(web服务器)中，其生命周期由容器来管理，分为4个阶段：</p>
<ol>
<li>&#x3D;&#x3D;加载和实例化&#x3D;&#x3D;：默认情况下，当Servlet第一次被访问时，由容器创建Servlet对象</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">默认情况，Servlet会在第一次访问被容器创建，但是如果创建Servlet比较耗时的话，那么第一个访问的人等待的时间就比较长，用户的体验就比较差，那么我们能不能把Servlet的创建放到服务器启动的时候来创建，具体如何来配置?</span><br><span class="line"></span><br><span class="line">@WebServlet(urlPatterns = &quot;/demo1&quot;,loadOnStartup = 1)</span><br><span class="line">loadOnstartup的取值有两类情况</span><br><span class="line">	（1）负整数:第一次访问时创建Servlet对象</span><br><span class="line">	（2）0或正整数:服务器启动时创建Servlet对象，数字越小优先级越高</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>&#x3D;&#x3D;初始化&#x3D;&#x3D;：在Servlet实例化之后，容器将调用Servlet的&#x3D;&#x3D;init()&#x3D;&#x3D;方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只&#x3D;&#x3D;调用一次&#x3D;&#x3D;</li>
<li>&#x3D;&#x3D;请求处理&#x3D;&#x3D;：&#x3D;&#x3D;每次&#x3D;&#x3D;请求Servlet时，Servlet容器都会调用Servlet的&#x3D;&#x3D;service()&#x3D;&#x3D;方法对请求进行处理。</li>
<li>&#x3D;&#x3D;服务终止&#x3D;&#x3D;：当需要释放内存或者容器关闭时，容器就会调用Servlet实例的&#x3D;&#x3D;destroy()&#x3D;&#x3D;方法完成资源的释放。在destroy()方法调用之后，容器会释放这个Servlet实例，该实例随后会被Java的垃圾收集器所回收。</li>
</ol>
</li>
<li><p>案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Servlet生命周期方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/demo2&quot;,loadOnStartup = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo2</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  初始化方法</span></span><br><span class="line"><span class="comment">     *  1.调用时机：默认情况下，Servlet被第一次访问时，调用</span></span><br><span class="line"><span class="comment">     *      * loadOnStartup: 默认为-1，修改为0或者正整数，则会在服务器启动的时候，调用</span></span><br><span class="line"><span class="comment">     *  2.调用次数: 1次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供服务</span></span><br><span class="line"><span class="comment">     * 1.调用时机:每一次Servlet被访问时，调用</span></span><br><span class="line"><span class="comment">     * 2.调用次数: 多次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet hello world~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁方法</span></span><br><span class="line"><span class="comment">     * 1.调用时机：内存释放或者服务器关闭的时候，Servlet对象会被销毁，调用</span></span><br><span class="line"><span class="comment">     * 2.调用次数: 1次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>小结</strong></p>
<ol>
<li>Servlet对象在什么时候被创建的?</li>
</ol>
<blockquote>
<p>默认是第一次访问的时候被创建，可以使用@WebServlet(urlPatterns &#x3D; “&#x2F;demo2”,loadOnStartup &#x3D; 1)的loadOnStartup 修改成在服务器启动的时候创建。</p>
</blockquote>
<ol start="2">
<li>Servlet生命周期中涉及到的三个方法，这三个方法是什么?什么时候被调用?调用几次?</li>
</ol>
<blockquote>
<p>涉及到三个方法，分别是 init()、service()、destroy()</p>
<p>init方法在Servlet对象被创建的时候执行，只执行1次</p>
<p>service方法在Servlet被访问的时候调用，每访问1次就调用1次</p>
<p>destroy方法在Servlet对象被销毁的时候调用，只执行1次</p>
</blockquote>
<h3 id="5、-方法介绍"><a href="#5、-方法介绍" class="headerlink" title="5、 方法介绍"></a>5、 方法介绍</h3><p><strong>Servlet中总共有5个方法:</strong></p>
<ul>
<li>初始化方法，在Servlet被创建时执行，只执行一次</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> </span><br></pre></td></tr></table></figure>

<ul>
<li>提供服务方法， 每次Servlet被访问，都会调用该方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>销毁方法，当Servlet被销毁时，调用该方法。在内存释放或服务器关闭时销毁Servlet</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> </span><br></pre></td></tr></table></figure>

<ul>
<li>获取Servlet信息</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">getServletInfo</span><span class="params">()</span> </span><br><span class="line"><span class="comment">//该方法用来返回Servlet的相关信息，没有什么太大的用处，一般我们返回一个空字符串即可</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>获取ServletConfig对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<p>ServletConfig对象，在init方法的参数中有，而Tomcat Web服务器在创建Servlet对象的时候会调用init方法，必定会传入一个ServletConfig对象，我们<strong>只需要将服务器传过来的ServletConfig进行返回即可</strong>。</p>
<p>具体如何操作?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet方法介绍</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/demo3&quot;,loadOnStartup = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo3</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServletConfig servletConfig;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  初始化方法</span></span><br><span class="line"><span class="comment">     *  1.调用时机：默认情况下，Servlet被第一次访问时，调用</span></span><br><span class="line"><span class="comment">     *      * loadOnStartup: 默认为-1，修改为0或者正整数，则会在服务器启动的时候，调用</span></span><br><span class="line"><span class="comment">     *  2.调用次数: 1次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="built_in">this</span>.servletConfig = config;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> servletConfig;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供服务</span></span><br><span class="line"><span class="comment">     * 1.调用时机:每一次Servlet被访问时，调用</span></span><br><span class="line"><span class="comment">     * 2.调用次数: 多次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet hello world~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁方法</span></span><br><span class="line"><span class="comment">     * 1.调用时机：内存释放或者服务器关闭的时候，Servlet对象会被销毁，调用</span></span><br><span class="line"><span class="comment">     * 2.调用次数: 1次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>getServletInfo()和getServletConfig()这两个方法使用的不是很多，直到有这俩方法即可。</p>
<h3 id="6、-体系结构"><a href="#6、-体系结构" class="headerlink" title="6、 体系结构"></a>6、 体系结构</h3><p>Servlet的体系结构图:</p>
<p><img src="D:\blog\source_posts\pic\1627240593506.png" alt="1627240593506" loading="lazy"></p>
<p>因为我们将来开发B&#x2F;S架构的web项目，都是针对HTTP协议的，所以我们自定义的Servlet一般通过继承&#x3D;&#x3D;HttpServlet&#x3D;&#x3D;的方式创建。</p>
<p>代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo4</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// GET 请求方式处理逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// Post 请求方式处理逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;post...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>要想发送一个GET请求，请求该Servlet，只需要通过浏览器发送<code>http://localhost:8080/web-demo/demo4</code>,就能看到doGet方法被执行了</li>
<li>要想发送一个POST请求，请求该Servlet，单单通过浏览器是无法实现的，这个时候就需要编写一个form表单来发送请求，在webapp下创建一个<code>a.html</code>页面，内容如下:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/web-demo/demo4&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动测试，即可看到doPost方法被执行了。</p>
<p>Servlet的简化编写就介绍完了，接着需要思考两个问题:</p>
<ol>
<li>HttpServlet中为什么要根据请求方式的不同，调用不同的方法?</li>
<li>如何调用?</li>
</ol>
<p>针对问题一，我们需要回顾之前的知识点&#x3D;&#x3D;前端发送GET和POST请求的时候，参数的位置不一致，GET请求参数在请求行中，POST请求参数在请求体中&#x3D;&#x3D;，为了能处理不同的请求方式，我们得在service方法中进行判断，然后写不同的业务处理，这样能实现，但是每个Servlet类中都将有相似的代码，针对这个问题，有什么可以优化的策略么?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo5</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//如何调用?</span></span><br><span class="line">        <span class="comment">//获取请求方式，根据不同的请求方式进行不同的业务处理</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)req;</span><br><span class="line">       <span class="comment">//1. 获取请求方式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">        <span class="comment">//2. 判断</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;GET&quot;</span>.equals(method))&#123;</span><br><span class="line">            <span class="comment">// get方式的处理逻辑</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;POST&quot;</span>.equals(method))&#123;</span><br><span class="line">            <span class="comment">// post方式的处理逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>要解决上述问题，我们可以对Servlet接口进行继承封装，来简化代码开发。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHttpServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)req;</span><br><span class="line">        <span class="comment">//1. 获取请求方式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">        <span class="comment">//2. 判断</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;GET&quot;</span>.equals(method))&#123;</span><br><span class="line">            <span class="comment">// get方式的处理逻辑</span></span><br><span class="line">            doGet(req,res);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;POST&quot;</span>.equals(method))&#123;</span><br><span class="line">            <span class="comment">// post方式的处理逻辑</span></span><br><span class="line">            doPost(req,res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>有了MyHttpServlet这个类，以后我们再编写Servlet类的时候，只需要继承MyHttpServlet，重写父类中的doGet和doPost方法，就可以用来处理GET和POST请求的业务逻辑。接下来，可以把ServletDemo5代码进行改造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo5</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;post...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将来页面发送的是GET请求，则会进入到doGet方法中进行执行，如果是POST请求，则进入到doPost方法。这样代码在编写的时候就相对来说更加简单快捷。</p>
<p>类似MyHttpServlet这样的类Servlet中已经为我们提供好了，就是HttpServlet,翻开源码，大家可以搜索<code>service()</code>方法，你会发现HttpServlet做的事更多，不仅可以处理GET和POST还可以处理其他五种请求方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> req.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> getLastModified(req);</span><br><span class="line">            <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// servlet doesn&#x27;t support if-modified-since, no reason</span></span><br><span class="line">                <span class="comment">// to go through further expensive logic</span></span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">ifModifiedSince</span> <span class="operator">=</span> req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">                <span class="keyword">if</span> (ifModifiedSince &lt; lastModified) &#123;</span><br><span class="line">                    <span class="comment">// If the servlet mod time is later, call doGet()</span></span><br><span class="line">                    <span class="comment">// Round down to the nearest second for a proper compare</span></span><br><span class="line">                    <span class="comment">// A ifModifiedSince of -1 will always be less</span></span><br><span class="line">                    maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    doGet(req, resp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> getLastModified(req);</span><br><span class="line">            maybeSetLastModified(resp, lastModified);</span><br><span class="line">            doHead(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">            doPost(req, resp);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">            doPut(req, resp);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">            doDelete(req, resp);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">            doOptions(req,resp);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">            doTrace(req,resp);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// Note that this means NO servlet supports whatever</span></span><br><span class="line">            <span class="comment">// method was requested, anywhere on this server.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">errMsg</span> <span class="operator">=</span> lStrings.getString(<span class="string">&quot;http.method_not_implemented&quot;</span>);</span><br><span class="line">            Object[] errArgs = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">1</span>];</span><br><span class="line">            errArgs[<span class="number">0</span>] = method;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line">            </span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>小结</strong></p>
<ol>
<li>HttpServlet的使用步骤</li>
</ol>
<blockquote>
<p>继承HttpServlet</p>
<p>重写doGet和doPost方法</p>
</blockquote>
<ol start="2">
<li>HttpServlet原理</li>
</ol>
<blockquote>
<p>获取请求方式，并根据不同的请求方式，调用不同的doXxx方法</p>
</blockquote>
<h3 id="7、-urlPattern配置"><a href="#7、-urlPattern配置" class="headerlink" title="7、 urlPattern配置"></a>7、 urlPattern配置</h3><p>Servlet类编写好后，要想被访问到，就需要配置其访问路径（&#x3D;&#x3D;urlPattern&#x3D;&#x3D;）</p>
<ul>
<li><p>一个Servlet,可以配置多个urlPattern</p>
<p><img src="D:\blog\source_posts\pic\1627272805178.png" alt="1627272805178" loading="lazy"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* urlPattern: 一个Servlet可以配置多个访问路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &#123;&quot;/demo7&quot;,&quot;/demo8&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo7</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;demo7 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在浏览器上输入<code>http://localhost:8080/web-demo/demo7</code>,<code>http://localhost:8080/web-demo/demo8</code>这两个地址都能访问到ServletDemo7的doGet方法。</p>
</li>
<li><p>&#x3D;&#x3D;urlPattern配置规则&#x3D;&#x3D;</p>
<ul>
<li><p>精确匹配</p>
<p><img src="D:\blog\source_posts\pic\1627273174144.png" alt="1627273174144" loading="lazy"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UrlPattern:</span></span><br><span class="line"><span class="comment"> * * 精确匹配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/user/select&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo8</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;demo8 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问路径<code>http://localhost:8080/web-demo/user/select</code></p>
</li>
<li><p>目录匹配</p>
<p><img src="D:\blog\source_posts\pic\1627273184095.png" alt="1627273184095" loading="lazy"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UrlPattern:</span></span><br><span class="line"><span class="comment"> * * 目录匹配: /user/*</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/user/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo9</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;demo9 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问路径<code>http://localhost:8080/web-demo/user/任意</code></p>
<p>&#x3D;&#x3D;思考:&#x3D;&#x3D;</p>
<ol>
<li>访问路径<code>http://localhost:8080/web-demo/user</code>是否能访问到demo9的doGet方法?</li>
<li>访问路径<code>http://localhost:8080/web-demo/user/a/b</code>是否能访问到demo9的doGet方法?</li>
<li>访问路径<code>http://localhost:8080/web-demo/user/select</code>是否能访问到demo9还是demo8的doGet方法?</li>
</ol>
<p>答案是: 能、能、demo8，进而我们可以得到的结论是<code>/user/*</code>中的<code>/*</code>代表的是零或多个层级访问目录同时精确匹配优先级要高于目录匹配。</p>
</li>
<li><p>扩展名匹配</p>
<p><img src="D:\blog\source_posts\pic\1627273194118.png" alt="1627273194118" loading="lazy"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UrlPattern:</span></span><br><span class="line"><span class="comment"> * * 扩展名匹配: *.do</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;*.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo10</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;demo10 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问路径<code>http://localhost:8080/web-demo/任意.do</code></p>
<p>&#x3D;&#x3D;注意&#x3D;&#x3D;:</p>
<ol>
<li>如果路径配置的不是扩展名，那么在路径的前面就必须要加<code>/</code>否则会报错</li>
</ol>
<p><img src="D:\blog\source_posts\pic\1627274483755.png" alt="1627274483755" loading="lazy"></p>
<ol start="2">
<li>如果路径配置的是<code>*.do</code>,那么在*.do的前面不能加<code>/</code>,否则会报错</li>
</ol>
<p><img src="D:\blog\source_posts\pic\1627274368245.png" alt="1627274368245" loading="lazy"></p>
</li>
<li><p>任意匹配</p>
<p><img src="D:\blog\source_posts\pic\1627273201370.png" alt="1627273201370" loading="lazy"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UrlPattern:</span></span><br><span class="line"><span class="comment"> * * 任意匹配： /</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo11</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;demo11 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问路径<code>http://localhost:8080/demo-web/任意</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UrlPattern:</span></span><br><span class="line"><span class="comment"> * * 任意匹配： /*</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo12</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;demo12 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>访问路径&#96;<a href="http://localhost:8080/demo-web/%E4%BB%BB%E6%84%8F">http://localhost:8080/demo-web/任意</a></p>
<p>&#x3D;&#x3D;注意:&#x3D;&#x3D;<code>/</code>和<code>/*</code>的区别?</p>
<ol>
<li><p>当我们的项目中的Servlet配置了 “&#x2F;“,会覆盖掉tomcat中的DefaultServlet,当其他的url-pattern都匹配不上时都会走这个Servlet</p>
</li>
<li><p>当我们的项目中配置了”&#x2F;*”,意味着匹配任意访问路径</p>
</li>
<li><p>DefaultServlet是用来处理静态资源，如果配置了”&#x2F;“会把默认的覆盖掉，就会引发请求静态资源的时候没有走默认的而是走了自定义的Servlet类，最终导致静态资源不能被访问</p>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<p><strong>小结</strong></p>
<ol>
<li><p>urlPattern总共有四种配置方式，分别是精确匹配、目录匹配、扩展名匹配、任意匹配</p>
</li>
<li><p>五种配置的优先级为 精确匹配 &gt; 目录匹配&gt; 扩展名匹配 &gt; &#x2F;* &gt; &#x2F; ,无需记，以最终运行结果为准。</p>
</li>
</ol>
<h3 id="8、-XML配置"><a href="#8、-XML配置" class="headerlink" title="8、 XML配置"></a>8、 XML配置</h3><p>前面对应Servlet的配置，我们都使用的是@WebServlet,这个是Servlet从3.0版本后开始支持注解配置，3.0版本前只支持XML配置文件的配置方法。</p>
<p>对于XML的配置步骤有两步:</p>
<ul>
<li>编写Servlet类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo13</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;demo13 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在web.xml中配置该Servlet</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        Servlet 全类名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- servlet的名称，名字任意--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo13<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet的类全名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.itheima.web.ServletDemo13<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        Servlet 访问路径</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- servlet的名称，要和上面的名称一致--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo13<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- servlet的访问路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo13<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这种配置方式和注解比起来，确认麻烦很多，所以建议大家使用注解来开发。但是大家要认识上面这种配置方式，因为并不是所有的项目都是基于注解开发的。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security学习笔记</title>
    <url>/2022/06/15/Spring-Security%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-认证和授权概念"><a href="#1-认证和授权概念" class="headerlink" title="1.认证和授权概念"></a>1.认证和授权概念</h1><ul>
<li><p><strong>认证：</strong>系统提供的用于识别用户身份的功能，通常提供用户名和密码进行登录其实就是在进行认证，认证的目的是让系统知道你是谁。</p>
</li>
<li><p><strong>授权：</strong>用户认证成功后，需要为用户授权，其实就是指定当前用户可以操作哪些功能。</p>
</li>
</ul>
<h1 id="2-Spring-Security简介"><a href="#2-Spring-Security简介" class="headerlink" title="2.Spring Security简介"></a>2.Spring Security简介</h1><p>Spring Security是 Spring提供的安全认证服务的框架。 使用Spring Security可以帮助我们来简化认证和授权的过程。官网：<a href="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security</a></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659325088536-abb88c19-5084-458f-8357-7ca0c1c81c73.png" alt="img" loading="lazy"></p>
<p>对应的maven坐标：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>常用的权限框架除了Spring Security，还有Apache的shiro框架。</p>
<h1 id="3-Spring-Security入门案例"><a href="#3-Spring-Security入门案例" class="headerlink" title="3.Spring Security入门案例"></a>3.Spring Security入门案例</h1><h2 id="3-1-工程搭建"><a href="#3-1-工程搭建" class="headerlink" title="3.1 工程搭建"></a>3.1 工程搭建</h2><p>创建maven工程，打包方式为war，为了方便起见我们可以让入门案例工程依赖health_interface，这样相关的依赖都继承过来了。</p>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="string"><span class="tag">                             http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springsecuritydemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>springsecuritydemo Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>health_interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 指定端口 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>85<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 请求路径 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>提供index.html页面，内容为hello Spring Security!!</p>
<h2 id="3-2-配置web-xml"><a href="#3-2-配置web-xml" class="headerlink" title="3.2 配置web.xml"></a>3.2 配置web.xml</h2><p>在web.xml中主要配置SpringMVC的DispatcherServlet和用于整合第三方框架的DelegatingFilterProxy，用于整合Spring Security。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">web-app</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      DelegatingFilterProxy用于整合第三方框架</span></span><br><span class="line"><span class="comment">      整合Spring Security时过滤器的名称必须为springSecurityFilterChain，</span></span><br><span class="line"><span class="comment">	  否则会抛出NoSuchBeanDefinitionException异常</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定加载的配置文件 ，通过参数contextConfigLocation加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-security.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-配置spring-security-xml"><a href="#3-3-配置spring-security-xml" class="headerlink" title="3.3 配置spring-security.xml"></a>3.3 配置spring-security.xml</h2><p>在spring-security.xml中主要配置Spring Security的拦截规则和认证管理器。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:security</span>=<span class="string">&quot;http://www.springframework.org/schema/security&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">						http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">						http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">						http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">						http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="string"><span class="tag">						http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">						http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">						http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                          http://www.springframework.org/schema/security</span></span></span><br><span class="line"><span class="string"><span class="tag">                          http://www.springframework.org/schema/security/spring-security.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        http：用于定义相关权限控制</span></span><br><span class="line"><span class="comment">        auto-config：是否自动配置</span></span><br><span class="line"><span class="comment">                        设置为true时框架会提供默认的一些配置，例如提供默认的登录页面、登出处理等</span></span><br><span class="line"><span class="comment">                        设置为false时需要显示提供登录表单配置，否则会报错</span></span><br><span class="line"><span class="comment">        use-expressions：用于指定intercept-url中的access属性是否使用表达式</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:http</span> <span class="attr">auto-config</span>=<span class="string">&quot;true&quot;</span> <span class="attr">use-expressions</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            intercept-url：定义一个拦截规则</span></span><br><span class="line"><span class="comment">            pattern：对哪些url进行权限控制</span></span><br><span class="line"><span class="comment">            access：在请求对应的URL时需要什么权限，默认配置时它应该是一个以逗号分隔的角色列表，</span></span><br><span class="line"><span class="comment">				  请求的用户只需拥有其中的一个角色就能成功访问对应的URL</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">security:intercept-url</span> <span class="attr">pattern</span>=<span class="string">&quot;/**&quot;</span>  <span class="attr">access</span>=<span class="string">&quot;hasRole(&#x27;ROLE_ADMIN&#x27;)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">security:http</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        authentication-manager：认证管理器，用于处理认证操作</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:authentication-manager</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            authentication-provider：认证提供者，执行具体的认证逻辑</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">security:authentication-provider</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                user-service：用于获取用户信息，提供给authentication-provider进行认证</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">security:user-service</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                    user：定义用户信息，可以指定用户名、密码、角色，后期可以改为从数据库查询用户信息</span></span><br><span class="line"><span class="comment">				  &#123;noop&#125;：表示当前使用的密码为明文</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">security:user</span> <span class="attr">name</span>=<span class="string">&quot;admin&quot;</span> </span></span><br><span class="line"><span class="tag">                               <span class="attr">password</span>=<span class="string">&quot;&#123;noop&#125;admin&quot;</span> </span></span><br><span class="line"><span class="tag">                               <span class="attr">authorities</span>=<span class="string">&quot;ROLE_ADMIN&quot;</span>&gt;</span></span><br><span class="line">              	<span class="tag">&lt;/<span class="name">security:user</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">security:user-service</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">security:authentication-provider</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">security:authentication-manager</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-4-对入门案例改进"><a href="#3-4-对入门案例改进" class="headerlink" title="3.4 对入门案例改进"></a>3.4 对入门案例改进</h2><p>前面我们已经完成了Spring Security的入门案例，通过入门案例我们可以看到，Spring Security将我们项目中的所有资源都保护了起来，要访问这些资源必须要完成认证而且需要具有ROLE_ADMIN角色。</p>
<p>但是入门案例中的使用方法离我们真实生产环境还差很远，还存在如下一些问题：</p>
<p>1、项目中我们将所有的资源（所有请求URL）都保护起来，实际环境下往往有一些资源不需要认证也可以访问，也就是可以匿名访问。</p>
<p>2、登录页面是由框架生成的，而我们的项目往往会使用自己的登录页面。</p>
<p>3、直接将用户名和密码配置在了配置文件中，而真实生产环境下的用户名和密码往往保存在数据库中。</p>
<p>4、在配置文件中配置的密码使用明文，这非常不安全，而真实生产环境下密码需要进行加密。</p>
<p>本章节需要对这些问题进行改进。</p>
<h3 id="1-配置可匿名访问的资源"><a href="#1-配置可匿名访问的资源" class="headerlink" title="1 配置可匿名访问的资源"></a>1 配置可匿名访问的资源</h3><p>第一步：在项目中创建pages目录，在pages目录中创建a.html和b.html</p>
<p>第二步：在spring-security.xml文件中配置，指定哪些资源可以匿名访问</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  http：用于定义相关权限控制</span></span><br><span class="line"><span class="comment">  指定哪些资源不需要进行权限校验，可以使用通配符</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:http</span> <span class="attr">security</span>=<span class="string">&quot;none&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;/pages/a.html&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:http</span> <span class="attr">security</span>=<span class="string">&quot;none&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;/paegs/b.html&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:http</span> <span class="attr">security</span>=<span class="string">&quot;none&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;/pages/**&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">security:http</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过上面的配置可以发现，pages目录下的文件可以在没有认证的情况下任意访问。</p>
<h3 id="2-使用指定的登录页面"><a href="#2-使用指定的登录页面" class="headerlink" title="2 使用指定的登录页面"></a>2 使用指定的登录页面</h3><p>第一步：提供login.html作为项目的登录页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login.do&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        username：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        password：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二步：修改spring-security.xml文件，指定login.html页面可以匿名访问</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">security:http</span> <span class="attr">security</span>=<span class="string">&quot;none&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;/login.html&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>第三步：修改spring-security.xml文件，加入表单登录信息的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  form-login：定义表单登录信息</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:form-login</span> <span class="attr">login-page</span>=<span class="string">&quot;/login.html&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">username-parameter</span>=<span class="string">&quot;username&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">password-parameter</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">login-processing-url</span>=<span class="string">&quot;/login.do&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">default-target-url</span>=<span class="string">&quot;/index.html&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">authentication-failure-url</span>=<span class="string">&quot;/login.html&quot;</span></span></span><br><span class="line"><span class="tag">                     /&gt;</span></span><br></pre></td></tr></table></figure>

<p>第四步：修改spring-security.xml文件，关闭CsrfFilter过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  csrf：对应CsrfFilter过滤器</span></span><br><span class="line"><span class="comment">  disabled：是否启用CsrfFilter过滤器，如果使用自定义登录页面需要关闭此项，否则登录操作会被禁用（403）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:csrf</span> <span class="attr">disabled</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">security:csrf</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-从数据库查询用户信息"><a href="#3-从数据库查询用户信息" class="headerlink" title="3 从数据库查询用户信息"></a>3 从数据库查询用户信息</h3><p>如果我们要从数据库动态查询用户信息，就必须按照spring security框架的要求提供一个实现UserDetailsService接口的实现类，并按照框架的要求进行配置即可。框架会自动调用实现类中的方法并自动进行密码校验。</p>
<p>实现类代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="comment">//模拟数据库中的用户数据</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  Map&lt;String, com.itheima.pojo.User&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        com.itheima.pojo.<span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.itheima.pojo.User();</span><br><span class="line">        user1.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        user1.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        com.itheima.pojo.<span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.itheima.pojo.User();</span><br><span class="line">        user2.setUsername(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">        user2.setPassword(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line"></span><br><span class="line">        map.put(user1.getUsername(),user1);</span><br><span class="line">        map.put(user2.getUsername(),user2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名加载用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UsernameNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;username:&quot;</span> + username);</span><br><span class="line">        com.itheima.pojo.<span class="type">User</span> <span class="variable">userInDb</span> <span class="operator">=</span> map.get(username);<span class="comment">//模拟根据用户名查询数据库</span></span><br><span class="line">        <span class="keyword">if</span>(userInDb == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//根据用户名没有查询到用户</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟数据库中的密码，后期需要查询数据库</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">passwordInDb</span> <span class="operator">=</span> <span class="string">&quot;&#123;noop&#125;&quot;</span> + userInDb.getPassword();</span><br><span class="line"></span><br><span class="line">        List&lt;GrantedAuthority&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//授权，后期需要改为查询数据库动态获得用户拥有的权限和角色</span></span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;add&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;delete&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;ROLE_ADMIN&quot;</span>));</span><br><span class="line">      	</span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(username,passwordInDb,list);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>spring-security.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  authentication-manager：认证管理器，用于处理认证操作</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:authentication-manager</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    authentication-provider：认证提供者，执行具体的认证逻辑</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">security:authentication-provider</span> <span class="attr">user-service-ref</span>=<span class="string">&quot;userService&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">security:authentication-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">security:authentication-manager</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.security.UserService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>本章节我们提供了UserService实现类，并且按照框架的要求实现了UserDetailsService接口。在spring配置文件中注册UserService，指定其作为认证过程中根据用户名查询用户信息的处理类。当我们进行登录操作时，spring security框架会调用UserService的loadUserByUsername方法查询用户信息，并根据此方法中提供的密码和用户页面输入的密码进行比对来实现认证操作。</p>
<h3 id="4-对密码进行加密"><a href="#4-对密码进行加密" class="headerlink" title="4 对密码进行加密"></a>4 对密码进行加密</h3><p>前面我们使用的密码都是明文的，这是非常不安全的。一般情况下用户的密码需要进行加密后再保存到数据库中。</p>
<p>常见的密码加密方式有：</p>
<p>3DES、AES、DES：使用对称加密算法，可以通过解密来还原出原始密码</p>
<p>MD5、SHA1：使用单向HASH算法，无法通过计算还原出原始密码，但是可以建立彩虹表进行查表破解</p>
<p>bcrypt：将salt随机并混入最终加密后的密码，验证时也无需单独提供之前的salt，从而无需单独处理salt问题</p>
<p>加密后的格式一般为：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">$2a$10$/bTVvqqlH9UiE0ZJZ7N2Me3RIgUCdgMheyTgV0B4cMCSokPa.6oCa</span></span><br></pre></td></tr></table></figure>

<p>加密后字符串的长度为固定的60位。其中：$是分割符，无意义；2a是bcrypt加密版本号；10是cost的值；而后的前22位是salt值；再然后的字符串就是密码的密文了。</p>
<p>实现步骤：</p>
<p>第一步：在spring-security.xml文件中指定密码加密对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置密码加密对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;passwordEncoder&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--认证管理器，用于处理认证操作--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:authentication-manager</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--认证提供者，执行具体的认证逻辑--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">security:authentication-provider</span> <span class="attr">user-service-ref</span>=<span class="string">&quot;userService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定密码加密策略--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:password-encoder</span> <span class="attr">ref</span>=<span class="string">&quot;passwordEncoder&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">security:authentication-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">security:authentication-manager</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启spring注解使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="name">context:annotation-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二步：修改UserService实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BCryptPasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  Map&lt;String, com.itheima.pojo.User&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//模拟数据库中的用户数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initData</span><span class="params">()</span>&#123;</span><br><span class="line">        com.itheima.pojo.<span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.itheima.pojo.User();</span><br><span class="line">        user1.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        user1.setPassword(passwordEncoder.encode(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line"></span><br><span class="line">        com.itheima.pojo.<span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.itheima.pojo.User();</span><br><span class="line">        user2.setUsername(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">        user2.setPassword(passwordEncoder.encode(<span class="string">&quot;1234&quot;</span>));</span><br><span class="line"></span><br><span class="line">        map.put(user1.getUsername(),user1);</span><br><span class="line">        map.put(user2.getUsername(),user2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名加载用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UsernameNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        initData();</span><br><span class="line">        System.out.println(<span class="string">&quot;username:&quot;</span> + username);</span><br><span class="line">        com.itheima.pojo.<span class="type">User</span> <span class="variable">userInDb</span> <span class="operator">=</span> map.get(username);<span class="comment">//模拟根据用户名查询数据库</span></span><br><span class="line">        <span class="keyword">if</span>(userInDb == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//根据用户名没有查询到用户</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">passwordInDb</span> <span class="operator">=</span> userInDb.getPassword();<span class="comment">//模拟数据库中的密码，后期需要查询数据库</span></span><br><span class="line"></span><br><span class="line">        List&lt;GrantedAuthority&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//授权，后期需要改为查询数据库动态获得用户拥有的权限和角色</span></span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;add&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;delete&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;ROLE_ADMIN&quot;</span>));</span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(username,passwordInDb,list);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-配置多种校验规则"><a href="#5-配置多种校验规则" class="headerlink" title="5 配置多种校验规则"></a>5 配置多种校验规则</h3><p>为了测试方便，首先在项目中创建a.html、b.html、c.html、d.html几个页面</p>
<p>修改spring-security.xml文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--只要认证通过就可以访问--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:intercept-url</span> <span class="attr">pattern</span>=<span class="string">&quot;/index.jsp&quot;</span>  <span class="attr">access</span>=<span class="string">&quot;isAuthenticated()&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:intercept-url</span> <span class="attr">pattern</span>=<span class="string">&quot;/a.html&quot;</span>  <span class="attr">access</span>=<span class="string">&quot;isAuthenticated()&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--拥有add权限就可以访问b.html页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:intercept-url</span> <span class="attr">pattern</span>=<span class="string">&quot;/b.html&quot;</span>  <span class="attr">access</span>=<span class="string">&quot;hasAuthority(&#x27;add&#x27;)&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--拥有ROLE_ADMIN角色就可以访问c.html页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:intercept-url</span> <span class="attr">pattern</span>=<span class="string">&quot;/c.html&quot;</span>  <span class="attr">access</span>=<span class="string">&quot;hasRole(&#x27;ROLE_ADMIN&#x27;)&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--拥有ROLE_ADMIN角色就可以访问d.html页面，</span></span><br><span class="line"><span class="comment">	注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:intercept-url</span> <span class="attr">pattern</span>=<span class="string">&quot;/d.html&quot;</span>  <span class="attr">access</span>=<span class="string">&quot;hasRole(&#x27;ADMIN&#x27;)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-注解方式权限控制"><a href="#6-注解方式权限控制" class="headerlink" title="6 注解方式权限控制"></a>6 注解方式权限控制</h3><p>Spring Security除了可以在配置文件中配置权限校验规则，还可以使用注解方式控制类中方法的调用。例如Controller中的某个方法要求必须具有某个权限才可以访问，此时就可以使用Spring Security框架提供的注解方式进行控制。</p>
<p>实现步骤：</p>
<p>第一步：在spring-security.xml文件中配置组件扫描，用于扫描Controller</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二步：在spring-security.xml文件中开启权限注解支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启注解方式权限控制--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:global-method-security</span> <span class="attr">pre-post-annotations</span>=<span class="string">&quot;enabled&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>第三步：创建Controller类并在Controller的方法上加入注解进行权限控制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;add&#x27;)&quot;)</span><span class="comment">//表示用户必须拥有add权限才能调用当前方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ROLE_ADMIN&#x27;)&quot;)</span><span class="comment">//表示用户必须拥有ROLE_ADMIN角色才能调用当前方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;delete...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-退出登录"><a href="#7-退出登录" class="headerlink" title="7 退出登录"></a>7 退出登录</h3><p>用户完成登录后Spring Security框架会记录当前用户认证状态为已认证状态，即表示用户登录成功了。那用户如何退出登录呢？我们可以在spring-security.xml文件中进行如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  logout：退出登录</span></span><br><span class="line"><span class="comment">  logout-url：退出登录操作对应的请求路径</span></span><br><span class="line"><span class="comment">  logout-success-url：退出登录后的跳转页面</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:logout</span> <span class="attr">logout-url</span>=<span class="string">&quot;/logout.do&quot;</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">logout-success-url</span>=<span class="string">&quot;/login.html&quot;</span> <span class="attr">invalidate-session</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">       </span><br></pre></td></tr></table></figure>

<p>通过上面的配置可以发现，如果用户要退出登录，只需要请求&#x2F;logout.do这个URL地址就可以，同时会将当前session失效，最后页面会跳转到login.html页面。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot学习</title>
    <url>/2022/07/06/SpringBoot%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><h2 id="1-SpringBoot简介"><a href="#1-SpringBoot简介" class="headerlink" title="1.SpringBoot简介"></a>1.SpringBoot简介</h2><p><code>SpringBoot</code> 是由 <code>Pivotal</code> 团队提供的全新框架，其设计目的是用来&#x3D;&#x3D;简化&#x3D;&#x3D; <code>Spring</code> 应用的&#x3D;&#x3D;初始搭建&#x3D;&#x3D;以及&#x3D;&#x3D;开发过程&#x3D;&#x3D;。</p>
<p>使用了 <code>Spring</code> 框架后已经简化了我们的开发。而 <code>SpringBoot</code> 又是对 <code>Spring</code> 开发进行简化的，可想而知 <code>SpringBoot</code> 使用的简单及广泛性。既然 <code>SpringBoot</code> 是用来简化 <code>Spring</code> 开发的，那我们就先回顾一下，以 <code>SpringMVC</code> 开发为例：</p>
<ol>
<li><strong>创建工程，并在 <code>pom.xml</code> 配置文件中配置所依赖的坐标</strong></li>
</ol>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911132335452.png" alt="image-20210911132335452" style="zoom:50%;" / loading="lazy">

<ol start="2">
<li><p><strong>编写 <code>web3.0</code> 的配置类</strong></p>
<p>作为 <code>web</code> 程序，<code>web3.0</code> 的配置类不能缺少，而这个配置类还是比较麻烦的，代码如下</p>
</li>
</ol>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911133112602.png" alt="image-20210911133112602" style="zoom:50%;" / loading="lazy">

<ol start="3">
<li><strong>编写 <code>SpringMVC</code> 的配置类</strong></li>
</ol>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911133219847.png" alt="image-20210911133219847" style="zoom:50%;" / loading="lazy">

<p>​	做到这只是将工程的架子搭起来。要想被外界访问，最起码还需要提供一个 <code>Controller</code> 类，在该类中提供一个方法。</p>
<ol start="4">
<li><strong>编写 <code>Controller</code> 类</strong></li>
</ol>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911133532151.png" alt="image-20210911133532151" style="zoom:50%;" / loading="lazy">

<p>从上面的 <code>SpringMVC</code> 程序开发可以看到，前三步都是在搭建环境，而且这三步基本都是固定的。<code>SpringBoot</code> 就是对这三步进行简化了。接下来我们通过一个入门案例来体现 <code>SpingBoot</code> 简化 <code>Spring</code> 开发。</p>
<h3 id="1-1-SpringBoot快速入门"><a href="#1-1-SpringBoot快速入门" class="headerlink" title="1.1  SpringBoot快速入门"></a>1.1  SpringBoot快速入门</h3><h4 id="1-1-1-开发步骤"><a href="#1-1-1-开发步骤" class="headerlink" title="1.1.1  开发步骤"></a>1.1.1  开发步骤</h4><p><code>SpringBoot</code> 开发起来特别简单，分为如下几步：</p>
<ul>
<li>创建新模块，选择Spring初始化，并配置模块相关基础信息</li>
<li>选择当前模块需要使用的技术集</li>
<li>开发控制器类</li>
<li>运行自动生成的Application类</li>
</ul>
<p>知道了 <code>SpringBoot</code> 的开发步骤后，接下来我们进行具体的操作</p>
<h5 id="1-1-1-1-创建新模块"><a href="#1-1-1-1-创建新模块" class="headerlink" title="1.1.1.1  创建新模块"></a>1.1.1.1  创建新模块</h5><ul>
<li>点击 <code>+</code> 选择 <code>New Module</code> 创建新模块</li>
</ul>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911155135008.png" alt="image-20210911155135008" style="zoom:60%;" / loading="lazy">

<ul>
<li><p>选择 <code>Spring Initializr</code> ，用来创建 <code>SpringBoot</code> 工程</p>
<p>以前我们选择的是 <code>Maven</code> ，今天选择 <code>Spring Initializr</code> 来快速构建 <code>SpringBoot</code> 工程。而在 <code>Module SDK</code> 这一项选择我们安装的 <code>JDK</code> 版本。</p>
</li>
</ul>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911155249493.png" alt="image-20210911155249493" style="zoom:60%;" / loading="lazy">

<ul>
<li><p>对 <code>SpringBoot</code> 工程进行相关的设置</p>
<p>我们使用这种方式构建的 <code>SpringBoot</code> 工程其实也是 <code>Maven</code> 工程，而该方式只是一种快速构建的方式而已。</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911155916899.png" alt="image-20210911155916899" style="zoom:67%;" / loading="lazy">

<blockquote>
<p>&#x3D;&#x3D;注意：打包方式这里需要设置为 <code>Jar</code>&#x3D;&#x3D;</p>
</blockquote>
</li>
<li><p>选中 <code>Web</code>，然后勾选 <code>Spring Web</code></p>
<p>由于我们需要开发一个 <code>web</code> 程序，使用到了 <code>SpringMVC</code> 技术，所以按照下图红框进行勾选</p>
</li>
</ul>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911160040328.png" alt="image-20210911160040328" style="zoom:60%;" / loading="lazy">

<ul>
<li>下图界面不需要任何修改，直接点击 <code>Finish</code> 完成 <code>SpringBoot</code> 工程的构建</li>
</ul>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911160353534.png" alt="image-20210911160353534" style="zoom:70%;" / loading="lazy">

<p>经过以上步骤后就创建了如下结构的模块，它会帮我们自动生成一个 <code>Application</code> 类，而该类一会再启动服务器时会用到</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911160541833.png" alt="image-20210911160541833" style="zoom:80%;" / loading="lazy">

<blockquote>
<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p>
<ol>
<li><p>在创建好的工程中不需要创建配置类</p>
</li>
<li><p>创建好的项目会自动生成其他的一些文件，而这些文件目前对我们来说没有任何作用，所以可以将这些文件删除。</p>
<p>可以删除的目录和文件如下：</p>
<ul>
<li><code>.mvn</code>	</li>
<li><code>.gitignore</code></li>
<li><code>HELP.md</code></li>
<li><code>mvnw</code></li>
<li><code>mvnw.cmd</code></li>
</ul>
</li>
</ol>
</blockquote>
<h5 id="1-1-1-2-创建-Controller"><a href="#1-1-1-2-创建-Controller" class="headerlink" title="1.1.1.2  创建 Controller"></a>1.1.1.2  创建 <code>Controller</code></h5><p>在  <code>com.itheima.controller</code> 包下创建 <code>BookController</code> ，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id ==&gt; &quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-1-1-3-启动服务器"><a href="#1-1-1-3-启动服务器" class="headerlink" title="1.1.1.3  启动服务器"></a>1.1.1.3  启动服务器</h5><p>运行 <code>SpringBoot</code> 工程不需要使用本地的 <code>Tomcat</code> 和 插件，只运行项目 <code>com.itheima</code> 包下的 <code>Application</code> 类，我们就可以在控制台看出如下信息</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911165642280.png" alt="image-20210911165642280" loading="lazy"></p>
<h5 id="1-1-1-4-进行测试"><a href="#1-1-1-4-进行测试" class="headerlink" title="1.1.1.4  进行测试"></a>1.1.1.4  进行测试</h5><p>使用 <code>Postman</code> 工具来测试我们的程序</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911160850121.png" alt="image-20210911160850121" loading="lazy"></p>
<p>通过上面的入门案例我们可以看到使用 <code>SpringBoot</code> 进行开发，使整个开发变得很简单，那它是如何做到的呢？</p>
<p>要研究这个问题，我们需要看看 <code>Application</code> 类和 <code>pom.xml</code> 都书写了什么。先看看 <code>Applicaion</code> 类，该类内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个类中的东西很简单，就在类上添加了一个 <code>@SpringBootApplication</code> 注解，而在主方法中就一行代码。我们在启动服务器时就是执行的该类中的主方法。</p>
<p>再看看 <code>pom.xml</code> 配置文件中的内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--指定了一个父工程，父工程中的东西在该工程中可以继承过来使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot_01_quickstart<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--JDK 的版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该依赖就是我们在创建 SpringBoot 工程勾选的那个 Spring Web 产生的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--这个是单元测试的依赖，我们现在没有进行单元测试，所以这个依赖现在可以没有--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这个插件是在打包时需要的，而这里暂时还没有用到--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们代码之所以能简化，就是因为指定的父工程和 <code>Spring Web</code> 依赖实现的。具体的我们后面在聊。</p>
<h4 id="1-1-2-对比"><a href="#1-1-2-对比" class="headerlink" title="1.1.2  对比"></a>1.1.2  对比</h4><p>做完 <code>SpringBoot</code> 的入门案例后，接下来对比一下 <code>Spring</code> 程序和 <code>SpringBoot</code> 程序。如下图</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911172200292.png" alt="image-20210911172200292" style="zoom:60%;" / loading="lazy">

<ul>
<li><p><strong>坐标</strong></p>
<p><code>Spring</code> 程序中的坐标需要自己编写，而且坐标非常多</p>
<p><code>SpringBoot</code> 程序中的坐标是我们在创建工程时进行勾选自动生成的</p>
</li>
<li><p><strong>web3.0配置类</strong></p>
<p><code>Spring</code> 程序需要自己编写这个配置类。这个配置类大家之前编写过，肯定感觉很复杂</p>
<p><code>SpringBoot</code> 程序不需要我们自己书写</p>
</li>
<li><p><strong>配置类</strong></p>
<p><code>Spring/SpringMVC</code> 程序的配置类需要自己书写。而 <code>SpringBoot</code>  程序则不需要书写。</p>
</li>
</ul>
<blockquote>
<p>&#x3D;&#x3D;注意：基于Idea的 <code>Spring Initializr</code> 快速构建 <code>SpringBoot</code> 工程时需要联网。&#x3D;&#x3D; </p>
</blockquote>
<h4 id="1-1-3-官网构建工程"><a href="#1-1-3-官网构建工程" class="headerlink" title="1.1.3  官网构建工程"></a>1.1.3  官网构建工程</h4><p>在入门案例中之所以能快速构建 <code>SpringBoot</code> 工程，是因为 <code>Idea</code> 使用了官网提供了快速构建 <code>SpringBoot</code> 工程的组件实现的。那如何在官网进行工程构建呢？通过如下步骤构建</p>
<h5 id="1-1-3-1-进入SpringBoot官网"><a href="#1-1-3-1-进入SpringBoot官网" class="headerlink" title="1.1.3.1  进入SpringBoot官网"></a>1.1.3.1  进入SpringBoot官网</h5><p>官网地址如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://spring.io/projects/spring-boot</span><br></pre></td></tr></table></figure>

<p>进入到 <code>SpringBoot</code> 官网后拖到最下方就可以看到如下内容</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911173712014.png" alt="image-20210911173712014" style="zoom:60%;" / loading="lazy">

<p>然后点击 <code>Spring Initializr</code> 超链接就会跳转到如下页面</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911174110687.png" alt="image-20210911174110687" loading="lazy"></p>
<p>这个页面内容是不是感觉很眼熟的，这和我们使用 <code>Idea</code> 快速构建 <code>SpringBoot</code> 工程的界面基本相同。在上面页面输入对应的信息</p>
<h5 id="1-1-3-2-选择依赖"><a href="#1-1-3-2-选择依赖" class="headerlink" title="1.1.3.2  选择依赖"></a>1.1.3.2  选择依赖</h5><p>选择 <code>Spring Web</code> 可以点击上图右上角的 <code>ADD DEPENDENCIES... CTRL + B</code> 按钮，就会出现如下界面</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911174650679.png" alt="image-20210911174650679" loading="lazy"></p>
<h5 id="1-1-3-3-生成工程"><a href="#1-1-3-3-生成工程" class="headerlink" title="1.1.3.3  生成工程"></a>1.1.3.3  生成工程</h5><p>以上步骤完成后就可以生成 <code>SpringBoot</code> 工程了。在页面的最下方点击 <code>GENERATE CTRL + 回车</code> 按钮生成工程并下载到本地，如下图所示</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911175222857.png" alt="image-20210911175222857" loading="lazy"></p>
<p>打开下载好的压缩包可以看到工程结构和使用 <code>Idea</code> 生成的一模一样，如下图</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911175502834.png" alt="image-20210911175502834" style="zoom:80%;" / loading="lazy">

<p>而打开 <code>pom.xml</code> 文件，里面也包含了父工程和 <code>Spring Web</code> 的依赖。</p>
<p>通过上面官网的操作，我们知道 <code>Idea</code> 中快速构建 <code>SpringBoot</code> 工程其实就是使用的官网的快速构建组件，那以后即使没有 <code>Idea</code> 也可以使用官网的方式构建 <code>SpringBoot</code> 工程。</p>
<h4 id="1-1-4-SpringBoot工程快速启动"><a href="#1-1-4-SpringBoot工程快速启动" class="headerlink" title="1.1.4  SpringBoot工程快速启动"></a>1.1.4  SpringBoot工程快速启动</h4><h5 id="1-1-4-1-问题导入"><a href="#1-1-4-1-问题导入" class="headerlink" title="1.1.4.1  问题导入"></a>1.1.4.1  问题导入</h5><img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911180828611.png" alt="image-20210911180828611" style="zoom:50%;" / loading="lazy">

<p>以后我们和前端开发人员协同开发，而前端开发人员需要测试前端程序就需要后端开启服务器，这就受制于后端开发人员。为了摆脱这个受制，前端开发人员尝试着在自己电脑上安装 <code>Tomcat</code> 和 <code>Idea</code> ，在自己电脑上启动后端程序，这显然不现实。</p>
<p>我们后端可以将 <code>SpringBoot</code> 工程打成 <code>jar</code> 包，该 <code>jar</code> 包运行不依赖于 <code>Tomcat</code> 和 <code>Idea</code> 这些工具也可以正常运行，只是这个 <code>jar</code> 包在运行过程中连接和我们自己程序相同的 <code>Mysql</code> 数据库即可。这样就可以解决这个问题，如下图</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911181714437.png" alt="image-20210911181714437" style="zoom:50%;" / loading="lazy">

<p>那现在问题是如何打包呢？</p>
<h5 id="1-1-4-2-打包"><a href="#1-1-4-2-打包" class="headerlink" title="1.1.4.2  打包"></a>1.1.4.2  打包</h5><p>由于我们在构建 <code>SpringBoot</code> 工程时已经在 <code>pom.xml</code> 中配置了如下插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所以我们只需要使用 <code>Maven</code> 的 <code>package</code> 指令打包就会在 <code>target</code> 目录下生成对应的 <code>Jar</code> 包。</p>
<blockquote>
<p>&#x3D;&#x3D;注意：该插件必须配置，不然打好的 <code>jar</code> 包也是有问题的。&#x3D;&#x3D;</p>
</blockquote>
<h5 id="1-1-4-3-启动"><a href="#1-1-4-3-启动" class="headerlink" title="1.1.4.3  启动"></a>1.1.4.3  启动</h5><p>进入 <code>jar</code> 包所在位置，在 <code>命令提示符</code> 中输入如下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jar -jar springboot_01_quickstart-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p>执行上述命令就可以看到 <code>SpringBoot</code> 运行的日志信息</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911182956629.png" alt="image-20210911182956629" style="zoom:60%;" / loading="lazy">

<h3 id="1-2-SpringBoot概述"><a href="#1-2-SpringBoot概述" class="headerlink" title="1.2  SpringBoot概述"></a>1.2  SpringBoot概述</h3><p><code>SpringBoot</code> 是由Pivotal团队提供的全新框架，其设计目的是用来&#x3D;&#x3D;简化&#x3D;&#x3D;Spring应用的&#x3D;&#x3D;初始搭建&#x3D;&#x3D;以及&#x3D;&#x3D;开发过程&#x3D;&#x3D;。</p>
<p>大家已经感受了 <code>SpringBoot</code> 程序，回过头看看 <code>SpringBoot</code> 主要作用是什么，就是简化 <code>Spring</code> 的搭建过程和开发过程。</p>
<p>原始 <code>Spring</code> 环境搭建和开发存在以下问题：</p>
<ul>
<li>配置繁琐</li>
<li>依赖设置繁琐</li>
</ul>
<p><code>SpringBoot</code> 程序优点恰巧就是针对 <code>Spring</code> 的缺点</p>
<ul>
<li>自动配置。这个是用来解决 <code>Spring</code> 程序配置繁琐的问题</li>
<li>起步依赖。这个是用来解决 <code>Spring</code> 程序依赖设置繁琐的问题</li>
<li>辅助功能（内置服务器,…）。我们在启动 <code>SpringBoot</code> 程序时既没有使用本地的 <code>tomcat</code> 也没有使用 <code>tomcat</code> 插件，而是使用 <code>SpringBoot</code> 内置的服务器。</li>
</ul>
<p>接下来我们来说一下 <code>SpringBoot</code> 的起步依赖</p>
<h4 id="1-2-1-起步依赖"><a href="#1-2-1-起步依赖" class="headerlink" title="1.2.1  起步依赖"></a>1.2.1  起步依赖</h4><p>我们使用 <code>Spring Initializr</code>  方式创建的 <code>Maven</code> 工程的的 <code>pom.xml</code> 配置文件中自动生成了很多包含 <code>starter</code> 的依赖，如下图</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210918220338109.png" alt="image-20210918220338109" style="zoom:70%;" / loading="lazy">

<p>这些依赖就是&#x3D;&#x3D;启动依赖&#x3D;&#x3D;，接下来我们探究一下他是如何实现的。</p>
<h5 id="1-2-1-1-探索父工程"><a href="#1-2-1-1-探索父工程" class="headerlink" title="1.2.1.1  探索父工程"></a>1.2.1.1  探索父工程</h5><p>从上面的文件中可以看到指定了一个父工程，我们进入到父工程，发现父工程中又指定了一个父工程，如下图所示</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210918220855024.png" alt="image-20210918220855024" style="zoom:80%;" / loading="lazy">

<p>再进入到该父工程中，在该工程中我们可以看到配置内容结构如下图所示</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210918221042947.png" alt="image-20210918221042947" style="zoom:80%;" / loading="lazy">

<p>上图中的 <code>properties</code> 标签中定义了各个技术软件依赖的版本，避免了我们在使用不同软件技术时考虑版本的兼容问题。在 <code>properties</code> 中我们找 <code>servlet</code>  和 <code>mysql</code> 的版本如下图</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210918221511249.png" alt="image-20210918221511249" style="zoom:80%;" / loading="lazy">

<p><code>dependencyManagement</code> 标签是进行依赖版本锁定，但是并没有导入对应的依赖；如果我们工程需要那个依赖只需要引入依赖的 <code>groupid</code> 和 <code>artifactId</code> 不需要定义 <code>version</code>。</p>
<p>而 <code>build</code> 标签中也对插件的版本进行了锁定，如下图</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210918221942453.png" alt="image-20210918221942453" style="zoom:80%;" / loading="lazy">

<p>看完了父工程中 <code>pom.xml</code> 的配置后不难理解我们工程的的依赖为什么都没有配置 <code>version</code>。</p>
<h5 id="1-2-1-2-探索依赖"><a href="#1-2-1-2-探索依赖" class="headerlink" title="1.2.1.2  探索依赖"></a>1.2.1.2  探索依赖</h5><p>在我们创建的工程中的 <code>pom.xml</code> 中配置了如下依赖</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210918222321402.png" alt="image-20210918222321402" style="zoom:80%;" / loading="lazy">

<p>进入到该依赖，查看 <code>pom.xml</code> 的依赖会发现它引入了如下的依赖</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210918222607469.png" alt="image-20210918222607469" style="zoom:80%;" / loading="lazy">

<p>里面的引入了 <code>spring-web</code> 和 <code>spring-webmvc</code> 的依赖，这就是为什么我们的工程中没有依赖这两个包还能正常使用 <code>springMVC</code> 中的注解的原因。</p>
<p>而依赖 <code>spring-boot-starter-tomcat</code> ，从名字基本能确认内部依赖了 <code>tomcat</code>，所以我们的工程才能正常启动。</p>
<p>&#x3D;&#x3D;结论：以后需要使用技术，只需要引入该技术对应的起步依赖即可&#x3D;&#x3D;</p>
<h5 id="1-2-1-3-小结"><a href="#1-2-1-3-小结" class="headerlink" title="1.2.1.3  小结"></a>1.2.1.3  小结</h5><p><strong>starter</strong></p>
<ul>
<li><code>SpringBoot</code> 中常见项目名称，定义了当前项目使用的所有项目坐标，以达到减少依赖配置的目的</li>
</ul>
<p><strong>parent</strong></p>
<ul>
<li><p>所有 <code>SpringBoot</code> 项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的</p>
</li>
<li><p><code>spring-boot-starter-parent</code>（2.5.0）与 <code>spring-boot-starter-parent</code>（2.4.6）共计57处坐标版本不同</p>
</li>
</ul>
<p><strong>实际开发</strong></p>
<ul>
<li><p>使用任意坐标时，仅书写GAV中的G和A，V由SpringBoot提供</p>
<blockquote>
<p>G：groupid</p>
<p>A：artifactId</p>
<p>V：version</p>
</blockquote>
</li>
<li><p>如发生坐标错误，再指定version（要小心版本冲突）</p>
</li>
</ul>
<h4 id="1-2-2-程序启动"><a href="#1-2-2-程序启动" class="headerlink" title="1.2.2  程序启动"></a>1.2.2  程序启动</h4><p>创建的每一个 <code>SpringBoot</code> 程序时都包含一个类似于下面的类，我们将这个类称作引导类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot01QuickstartApplication</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot01QuickstartApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p>
<ul>
<li><p><code>SpringBoot</code> 在创建项目时，采用jar的打包方式</p>
</li>
<li><p><code>SpringBoot</code> 的引导类是项目的入口，运行 <code>main</code> 方法就可以启动项目</p>
<p>因为我们在 <code>pom.xml</code> 中配置了 <code>spring-boot-starter-web</code> 依赖，而该依赖通过前面的学习知道它依赖 <code>tomcat</code> ，所以运行 <code>main</code> 方法就可以使用 <code>tomcat</code> 启动咱们的工程。</p>
</li>
</ul>
<h4 id="1-2-3-切换web服务器"><a href="#1-2-3-切换web服务器" class="headerlink" title="1.2.3  切换web服务器"></a>1.2.3  切换web服务器</h4><p>现在我们启动工程使用的是 <code>tomcat</code> 服务器，那能不能不使用 <code>tomcat</code> 而使用 <code>jetty</code> 服务器，<code>jetty</code> 在我们 <code>maven</code> 高级时讲 <code>maven</code> 私服使用的服务器。而要切换 <code>web</code> 服务器就需要将默认的 <code>tomcat</code> 服务器给排除掉，怎么排除呢？使用 <code>exclusion</code> 标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在我们运行引导类可以吗？运行一下试试，打印的日志信息如下</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210918232512707.png" alt="image-20210918232512707" loading="lazy"></p>
<p>程序直接停止了，为什么呢？那是因为排除了 <code>tomcat</code> 服务器，程序中就没有服务器了。所以此时不光要排除 <code>tomcat</code> 服务器，还要引入 <code>jetty</code> 服务器。在 <code>pom.xml</code> 中因为 <code>jetty</code> 的起步依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来再次运行引导类，在日志信息中就可以看到使用的是 <code>jetty</code> 服务器</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210918232904623.png" alt="image-20210918232904623" loading="lazy"></p>
<p><strong>小结：</strong></p>
<p>通过切换服务器，我们不难发现在使用 <code>SpringBoot</code> 换技术时只需要导入该技术的起步依赖即可。</p>
<h2 id="2，配置文件"><a href="#2，配置文件" class="headerlink" title="2，配置文件"></a>2，配置文件</h2><h3 id="2-1-配置文件格式"><a href="#2-1-配置文件格式" class="headerlink" title="2.1  配置文件格式"></a>2.1  配置文件格式</h3><p>我们现在启动服务器默认的端口号是 <code>8080</code>，访问路径可以书写为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/books/1</span><br></pre></td></tr></table></figure>

<p>在线上环境我们还是希望将端口号改为 <code>80</code>，这样在访问的时候就可以不写端口号了，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/books/1</span><br></pre></td></tr></table></figure>

<p>而 <code>SpringBoot</code> 程序如何修改呢？<code>SpringBoot</code> 提供了多种属性配置方式</p>
<ul>
<li><p><code>application.properties</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.port=80</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>application.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>application.yaml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>&#x3D;&#x3D;注意：<code>SpringBoot</code> 程序的配置文件名必须是 <code>application</code> ，只是后缀名不同而已。&#x3D;&#x3D;</p>
</blockquote>
<h4 id="2-1-1-环境准备"><a href="#2-1-1-环境准备" class="headerlink" title="2.1.1  环境准备"></a>2.1.1  环境准备</h4><p>创建一个新工程 <code>springboot_02_base_config</code> 用来演示不同的配置文件，工程环境和入门案例一模一样，结构如下：</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917151314753.png" alt="image-20210917151314753" style="zoom:80%;" / loading="lazy">

<p>在该工程中的 <code>com.itheima.controller</code> 包下创建一个名为 <code>BookController</code> 的控制器。内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id ==&gt; &quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-1-2-不同配置文件演示"><a href="#2-1-2-不同配置文件演示" class="headerlink" title="2.1.2  不同配置文件演示"></a>2.1.2  不同配置文件演示</h4><ul>
<li><strong>application.properties配置文件</strong></li>
</ul>
<p>现在需要进行配置，配合文件必须放在 <code>resources</code> 目录下，而该目录下有一个名为 <code>application.properties</code> 的配置文件，我们就可以在该配置文件中修改端口号，在该配置文件中书写 <code>port</code> ，<code>Idea</code> 就会提示，如下</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917161422535.png" alt="image-20210917161422535" style="zoom:80%;" / loading="lazy">

<p><code>application.properties</code> 配置文件内容如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure>

<p>启动服务，会在控制台打印出日志信息，从日志信息中可以看到绑定的端口号已经修改了</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917161720855.png" alt="image-20210917161720855" style="zoom:80%;" / loading="lazy">

<ul>
<li><strong>application.yml配置文件</strong></li>
</ul>
<p>删除 <code>application.properties</code> 配置文件中的内容。在 <code>resources</code> 下创建一个名为 <code>application.yml</code> 的配置文件，在该文件中书写端口号的配置项，格式如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>&#x3D;&#x3D;注意： 在<code>:</code>后，数据前一定要加空格。&#x3D;&#x3D;</p>
</blockquote>
<p>而在 <code>yml</code> 配置文件中也是有提示功能的，我们也可以在该文件中书写 <code>port</code> ，然后 <code>idea</code> 就会提示并书写成上面的格式</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917162512646.png" alt="image-20210917162512646" style="zoom:80%;" / loading="lazy">

<p>启动服务，可以在控制台看到绑定的端口号是 <code>81</code></p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917162700711.png" alt="image-20210917162700711" loading="lazy"></p>
<ul>
<li><strong>application.yaml配置文件</strong></li>
</ul>
<p>删除 <code>application.yml</code> 配置文件和 <code>application.properties</code> 配置文件内容，然后在 <code>resources</code> 下创建名为 <code>application.yaml</code> 的配置文件，配置内容和后缀名为 <code>yml</code> 的配置文件中的内容相同，只是使用了不同的后缀名而已</p>
<p><code>application.yaml</code> 配置文件内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">83</span></span><br></pre></td></tr></table></figure>

<p>启动服务，在控制台可以看到绑定的端口号</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917163335913.png" alt="image-20210917163335913" loading="lazy"></p>
<p>&#x3D;&#x3D;注意：在配合文件中如果没有提示，可以使用一下方式解决&#x3D;&#x3D;</p>
<ul>
<li>点击 <code>File</code> 选中 <code>Project Structure</code></li>
</ul>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917163557071.png" alt="image-20210917163557071" style="zoom:80%;" / loading="lazy">

<ul>
<li>弹出如下窗口，按图中标记红框进行选择</li>
</ul>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917163736458.png" alt="image-20210917163736458" style="zoom:70%;" / loading="lazy">

<ul>
<li>通过上述操作，会弹出如下窗口</li>
</ul>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917163818051.png" alt="image-20210917163818051" style="zoom:80%;" / loading="lazy">

<ul>
<li>点击上图的 <code>+</code> 号，弹出选择该模块的配置文件</li>
</ul>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917163828518.png" alt="image-20210917163828518" style="zoom:80%;" / loading="lazy">

<ul>
<li>通过上述几步后，就可以看到如下界面。<code>properties</code> 类型的配合文件有一个，<code>ymal</code> 类型的配置文件有两个</li>
</ul>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917163846243.png" alt="image-20210917163846243" style="zoom:80%;" / loading="lazy">

<h4 id="2-1-3-三种配合文件的优先级"><a href="#2-1-3-三种配合文件的优先级" class="headerlink" title="2.1.3  三种配合文件的优先级"></a>2.1.3  三种配合文件的优先级</h4><p>在三种配合文件中分别配置不同的端口号，启动服务查看绑定的端口号。用这种方式就可以看到哪个配置文件的优先级更高一些</p>
<p><code>application.properties</code> 文件内容如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure>

<p><code>application.yml</code> 文件内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure>

<p><code>application.yaml</code> 文件内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure>

<p>启动服务，在控制台可以看到使用的端口号是 <code>80</code>。说明 <code>application.properties</code> 的优先级最高</p>
<p>注释掉 <code>application.properties</code> 配置文件内容。再次启动服务，在控制台可以看到使用的端口号是 <code>81</code>，说明 <code>application.yml</code> 配置文件为第二优先级。</p>
<p>从上述的验证结果可以确定三种配置文件的优先级是：</p>
<p>&#x3D;&#x3D;<code>application.properties</code>  &gt;  <code>application.yml</code>   &gt;  <code>application.yaml</code>&#x3D;&#x3D;</p>
<blockquote>
<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p>
<ul>
<li><p><code>SpringBoot</code> 核心配置文件名为 <code>application</code></p>
</li>
<li><p><code>SpringBoot</code> 内置属性过多，且所有属性集中在一起修改，在使用时，通过提示键+关键字修改属性</p>
<p>例如要设置日志的级别时，可以在配置文件中书写 <code>logging</code>，就会提示出来。配置内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure></li>
</ul>
</blockquote>
<h3 id="2-2-yaml格式"><a href="#2-2-yaml格式" class="headerlink" title="2.2  yaml格式"></a>2.2  yaml格式</h3><p>上面讲了三种不同类型的配置文件，而 <code>properties</code> 类型的配合文件之前我们学习过，接下来我们重点学习 <code>yaml</code> 类型的配置文件。</p>
<p><strong>YAML（YAML Ain’t Markup Language），一种数据序列化格式。</strong>这种格式的配置文件在近些年已经占有主导地位，那么这种配置文件和前期使用的配置文件是有一些优势的，我们先看之前使用的配置文件。</p>
<p>最开始我们使用的是 <code>xml</code> ，格式如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">enterprise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>16<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tel</span>&gt;</span>4006184000<span class="tag">&lt;/<span class="name">tel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">enterprise</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而 <code>properties</code> 类型的配置文件如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">enterprise.name</span>=<span class="string">itcast</span></span><br><span class="line"><span class="attr">enterprise.age</span>=<span class="string">16</span></span><br><span class="line"><span class="attr">enterprise.tel</span>=<span class="string">4006184000</span></span><br></pre></td></tr></table></figure>

<p><code>yaml</code> 类型的配置文件内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">	<span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">	<span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">	<span class="attr">tel:</span> <span class="number">4006184000</span></span><br></pre></td></tr></table></figure>

<p><strong>优点：</strong></p>
<ul>
<li><p>容易阅读</p>
<p><code>yaml</code> 类型的配置文件比 <code>xml</code> 类型的配置文件更容易阅读，结构更加清晰</p>
</li>
<li><p>容易与脚本语言交互</p>
</li>
<li><p>以数据为核心，重数据轻格式</p>
<p><code>yaml</code> 更注重数据，而 <code>xml</code> 更注重格式</p>
</li>
</ul>
<p><strong>YAML 文件扩展名：</strong></p>
<ul>
<li><code>.yml</code> (主流)</li>
<li><code>.yaml</code></li>
</ul>
<p>上面两种后缀名都可以，以后使用更多的还是 <code>yml</code> 的。</p>
<h4 id="2-2-1-语法规则"><a href="#2-2-1-语法规则" class="headerlink" title="2.2.1  语法规则"></a>2.2.1  语法规则</h4><ul>
<li><p>大小写敏感</p>
</li>
<li><p>属性层级关系使用多行描述，每行结尾使用冒号结束</p>
</li>
<li><p>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</p>
<p>空格的个数并不重要，只要保证同层级的左侧对齐即可。</p>
</li>
<li><p>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</p>
</li>
<li><p># 表示注释</p>
</li>
</ul>
<p>&#x3D;&#x3D;核心规则：数据前面要加空格与冒号隔开&#x3D;&#x3D;</p>
<p>数组数据在数据书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔，例如</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">  <span class="attr">tel:</span> <span class="number">4006184000</span></span><br><span class="line">  <span class="attr">subject:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">大数据</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-yaml配置文件数据读取"><a href="#2-3-yaml配置文件数据读取" class="headerlink" title="2.3  yaml配置文件数据读取"></a>2.3  yaml配置文件数据读取</h3><h4 id="2-3-1-环境准备"><a href="#2-3-1-环境准备" class="headerlink" title="2.3.1  环境准备"></a>2.3.1  环境准备</h4><p>新创建一个名为 <code>springboot_03_read_data</code> 的 <code>SpringBoot</code> 工程，目录结构如下</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917172736484.png" alt="image-20210917172736484" style="zoom:80%;" / loading="lazy">

<p>在 <code>com.itheima.controller</code> 包写创建名为 <code>BookController</code> 的控制器，内容如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id ==&gt; &quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>com.itheima.domain</code> 包下创建一个名为 <code>Enterprise</code> 的实体类等会用来封装数据，内容如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enterprise</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> String[] subject;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//setter and getter</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>resources</code> 下创建一个名为 <code>application.yml</code> 的配置文件，里面配置了不同的数据，内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">lesson:</span> <span class="string">SpringBoot</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">  <span class="attr">tel:</span> <span class="number">4006184000</span></span><br><span class="line">  <span class="attr">subject:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">大数据</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-2-读取配置数据"><a href="#2-3-2-读取配置数据" class="headerlink" title="2.3.2  读取配置数据"></a>2.3.2  读取配置数据</h4><h5 id="2-3-2-1-使用-Value注解"><a href="#2-3-2-1-使用-Value注解" class="headerlink" title="2.3.2.1  使用 @Value注解"></a>2.3.2.1  使用 @Value注解</h5><p>使用 <code>@Value(&quot;表达式&quot;)</code> 注解可以从配合文件中读取数据，注解中用于读取属性名引用方式是：<code>$&#123;一级属性名.二级属性名……&#125;</code></p>
<p>我们可以在 <code>BookController</code> 中使用 <code>@Value</code>  注解读取配合文件数据，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;lesson&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lesson;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;enterprise.subject[0]&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String subject_00;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(lesson);</span><br><span class="line">        System.out.println(port);</span><br><span class="line">        System.out.println(subject_00);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-2-2-Environment对象"><a href="#2-3-2-2-Environment对象" class="headerlink" title="2.3.2.2  Environment对象"></a>2.3.2.2  Environment对象</h5><p>上面方式读取到的数据特别零散，<code>SpringBoot</code> 还可以使用 <code>@Autowired</code> 注解注入 <code>Environment</code> 对象的方式读取数据。这种方式 <code>SpringBoot</code> 会将配置文件中所有的数据封装到 <code>Environment</code> 对象中，如果需要使用哪个数据只需要通过调用 <code>Environment</code> 对象的 <code>getProperty(String name)</code> 方法获取。具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;lesson&quot;</span>));</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;enterprise.name&quot;</span>));</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;enterprise.subject[0]&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>&#x3D;&#x3D;注意：这种方式，框架内容大量数据，而在开发中我们很少使用。&#x3D;&#x3D;</p>
</blockquote>
<h5 id="2-3-2-3-自定义对象"><a href="#2-3-2-3-自定义对象" class="headerlink" title="2.3.2.3  自定义对象"></a>2.3.2.3  自定义对象</h5><p><code>SpringBoot</code> 还提供了将配置文件中的数据封装到我们自定义的实体类对象中的方式。具体操作如下：</p>
<ul>
<li><p>将实体类 <code>bean</code> 的创建交给 <code>Spring</code> 管理。</p>
<p>在类上添加 <code>@Component</code> 注解</p>
</li>
<li><p>使用 <code>@ConfigurationProperties</code> 注解表示加载配置文件</p>
<p>在该注解中也可以使用 <code>prefix</code> 属性指定只加载指定前缀的数据</p>
</li>
<li><p>在 <code>BookController</code> 中进行注入</p>
</li>
</ul>
<p><strong>具体代码如下：</strong></p>
<p><code>Enterprise</code> 实体类内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;enterprise&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enterprise</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> String[] subject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTel</span><span class="params">(String tel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tel = tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getSubject() &#123;</span><br><span class="line">        <span class="keyword">return</span> subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSubject</span><span class="params">(String[] subject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Enterprise&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, tel=&#x27;&quot;</span> + tel + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, subject=&quot;</span> + Arrays.toString(subject) +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>BookController</code> 内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Enterprise enterprise;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(enterprise.getName());</span><br><span class="line">        System.out.println(enterprise.getAge());</span><br><span class="line">        System.out.println(enterprise.getSubject());</span><br><span class="line">        System.out.println(enterprise.getTel());</span><br><span class="line">        System.out.println(enterprise.getSubject()[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p>
<p>使用第三种方式，在实体类上有如下警告提示</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917180919390.png" alt="image-20210917180919390" style="zoom:70%;" / loading="lazy">

<p>这个警告提示解决是在 <code>pom.xml</code> 中添加如下依赖即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-多环境配置"><a href="#2-4-多环境配置" class="headerlink" title="2.4  多环境配置"></a>2.4  多环境配置</h3><p>以后在工作中，对于开发环境、测试环境、生产环境的配置肯定都不相同，比如我们开发阶段会在自己的电脑上安装 <code>mysql</code> ，连接自己电脑上的 <code>mysql</code> 即可，但是项目开发完毕后要上线就需要该配置，将环境的配置改为线上环境的。</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917185253557.png" alt="image-20210917185253557" style="zoom:60%;" / loading="lazy">

<p>来回的修改配置会很麻烦，而 <code>SpringBoot</code> 给开发者提供了多环境的快捷配置，需要切换环境时只需要改一个配置即可。不同类型的配置文件多环境开发的配置都不相同，接下来对不同类型的配置文件进行说明</p>
<h4 id="2-4-1-yaml文件"><a href="#2-4-1-yaml文件" class="headerlink" title="2.4.1  yaml文件"></a>2.4.1  yaml文件</h4><p>在 <code>application.yml</code> 中使用 <code>---</code> 来分割不同的配置，内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开发</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span> <span class="comment">#给开发环境起的名字</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#生产</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span> <span class="comment">#给生产环境起的名字</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span> <span class="comment">#给测试环境起的名字</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>上面配置中 <code>spring.profiles</code> 是用来给不同的配置起名字的。而如何告知 <code>SpringBoot</code> 使用哪段配置呢？可以使用如下配置来启用都一段配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置启用的环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span>  <span class="comment">#表示使用的是开发环境的配置</span></span><br></pre></td></tr></table></figure>

<p>综上所述，<code>application.yml</code> 配置文件内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置启用的环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#开发</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#生产</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p>
<p>在上面配置中给不同配置起名字的 <code>spring.profiles</code> 配置项已经过时。最新用来起名字的配置项是 </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开发</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-2-properties文件"><a href="#2-4-2-properties文件" class="headerlink" title="2.4.2  properties文件"></a>2.4.2  properties文件</h4><p><code>properties</code> 类型的配置文件配置多环境需要定义不同的配置文件</p>
<ul>
<li><p><code>application-dev.properties</code> 是开发环境的配置文件。我们在该文件中配置端口号为 <code>80</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>application-test.properties</code> 是测试环境的配置文件。我们在该文件中配置端口号为 <code>81</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">81</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>application-pro.properties</code> 是生产环境的配置文件。我们在该文件中配置端口号为 <code>82</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">82</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><code>SpringBoot</code> 只会默认加载名为 <code>application.properties</code> 的配置文件，所以需要在 <code>application.properties</code> 配置文件中设置启用哪个配置文件，配置如下:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">pro</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-3-命令行启动参数设置"><a href="#2-4-3-命令行启动参数设置" class="headerlink" title="2.4.3  命令行启动参数设置"></a>2.4.3  命令行启动参数设置</h4><p>使用 <code>SpringBoot</code> 开发的程序以后都是打成 <code>jar</code> 包，通过 <code>java -jar xxx.jar</code> 的方式启动服务的。那么就存在一个问题，如何切换环境呢？因为配置文件打到的jar包中了。</p>
<p>我们知道 <code>jar</code> 包其实就是一个压缩包，可以解压缩，然后修改配置，最后再打成jar包就可以了。这种方式显然有点麻烦，而 <code>SpringBoot</code> 提供了在运行 <code>jar</code> 时设置开启指定的环境的方式，如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java –jar xxx.jar –-spring.profiles.active=test</span><br></pre></td></tr></table></figure>

<p>那么这种方式能不能临时修改端口号呢？也是可以的，可以通过如下方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java –jar xxx.jar –-server.port=88</span><br></pre></td></tr></table></figure>

<p>当然也可以同时设置多个配置，比如即指定启用哪个环境配置，又临时指定端口，如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java –jar springboot.jar –-server.port=88 –-spring.profiles.active=test</span><br></pre></td></tr></table></figure>

<p>大家进行测试后就会发现命令行设置的端口号优先级高（也就是使用的是命令行设置的端口号），配置的优先级其实 <code>SpringBoot</code> 官网已经进行了说明，参见 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config</span><br></pre></td></tr></table></figure>

<p>进入上面网站后会看到如下页面</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917193910191.png" alt="image-20210917193910191" loading="lazy"></p>
<p>如果使用了多种方式配合同一个配置项，优先级高的生效。</p>
<h3 id="2-5-配置文件分类"><a href="#2-5-配置文件分类" class="headerlink" title="2.5  配置文件分类"></a>2.5  配置文件分类</h3><img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917194941597.png" alt="image-20210917194941597" style="zoom:70%;" / loading="lazy">

<p>有这样的场景，我们开发完毕后需要测试人员进行测试，由于测试环境和开发环境的很多配置都不相同，所以测试人员在运行我们的工程时需要临时修改很多配置，如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java –jar springboot.jar –-spring.profiles.active=test --server.port=85 --server.servlet.context-path=/heima --server.tomcat.connection-timeout=-1 …… …… …… …… ……</span><br></pre></td></tr></table></figure>

<p>针对这种情况，<code>SpringBoot</code> 定义了配置文件不同的放置的位置；而放在不同位置的优先级时不同的。</p>
<p><code>SpringBoot</code> 中4级配置文件放置位置：</p>
<ul>
<li>1级：classpath：application.yml  </li>
<li>2级：classpath：config&#x2F;application.yml</li>
<li>3级：file ：application.yml</li>
<li>4级：file ：config&#x2F;application.yml</li>
</ul>
<blockquote>
<p>&#x3D;&#x3D;说明：&#x3D;&#x3D;级别越高优先级越高</p>
</blockquote>
<h4 id="2-5-1-代码演示"><a href="#2-5-1-代码演示" class="headerlink" title="2.5.1  代码演示"></a>2.5.1  代码演示</h4><p>在这里我们只演示不同级别配置文件放置位置的优先级。</p>
<h5 id="2-5-1-1-环境准备"><a href="#2-5-1-1-环境准备" class="headerlink" title="2.5.1.1  环境准备"></a>2.5.1.1  环境准备</h5><p>创建一个名为 <code>springboot_06_config_file</code> 的 <code>SpringBoot</code> 工程，目录结构如下</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917200241282.png" alt="image-20210917200241282" style="zoom:80%;" / loading="lazy">

<p>在 <code>resources</code> 下创建一个名为 <code>config</code> 的目录，在该目录中创建 <code>application.yml</code> 配置文件，而在该配置文件中将端口号设置为 <code>81</code>，内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure>

<p>而在 <code>resources</code> 下创建的 <code>application.yml</code> 配置文件中并将端口号设置为 <code>80</code>，内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<h5 id="2-5-1-2-验证1级和2级的优先级"><a href="#2-5-1-2-验证1级和2级的优先级" class="headerlink" title="2.5.1.2  验证1级和2级的优先级"></a>2.5.1.2  验证1级和2级的优先级</h5><p>运行启动引导类，可以在控制台看到如下日志信息</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917200805389.png" alt="image-20210917200805389" loading="lazy"></p>
<p>通过这个结果可以得出&#x3D;&#x3D;类路径下的 <code>config</code> 下的配置文件优先于类路径下的配置文件。&#x3D;&#x3D;</p>
<h5 id="2-5-1-3-验证2级和4级的优先级"><a href="#2-5-1-3-验证2级和4级的优先级" class="headerlink" title="2.5.1.3  验证2级和4级的优先级"></a>2.5.1.3  验证2级和4级的优先级</h5><p>要验证4级，按照以下步骤完成</p>
<ul>
<li><p>将工程打成 <code>jar</code> 包</p>
<p>点击工程的 <code>package</code> 来打 <code>jar</code> 包</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917201243721.png" alt="image-20210917201243721" style="zoom:80%;" / loading="lazy">
</li>
<li><p>在硬盘上找到 <code>jar</code> 包所在位置</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917201523669.png" alt="image-20210917201523669" style="zoom:70%;" / loading="lazy">
</li>
<li><p>在 <code>jar</code> 包所在位置创建 <code>config</code> 文件夹，在该文件夹下创建 <code>application.yml</code> 配置文件，而在该配合文件中将端口号设置为 <code>82</code> </p>
</li>
<li><p>在命令行使用以下命令运行程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar springboot_06_config_file-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p>运行后日志信息如下</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917201922831.png" alt="image-20210917201922831" loading="lazy"></p>
<p>通过这个结果可以得出&#x3D;&#x3D;file： <code>config</code> 下的配置文件优先于类路径下的配置文件。&#x3D;&#x3D;</p>
</li>
</ul>
<blockquote>
<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p>
<p>SpringBoot 2.5.0版本存在一个bug，我们在使用这个版本时，需要在 <code>jar</code> 所在位置的 <code>config</code> 目录下创建一个任意名称的文件夹</p>
</blockquote>
<h2 id="3，SpringBoot整合junit"><a href="#3，SpringBoot整合junit" class="headerlink" title="3，SpringBoot整合junit"></a>3，SpringBoot整合junit</h2><p>回顾 <code>Spring</code> 整合 <code>junit</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>@RunWith</code> 注解指定运行器，使用 <code>@ContextConfiguration</code> 注解来指定配置类或者配置文件。而 <code>SpringBoot</code> 整合 <code>junit</code> 特别简单，分为以下三步完成</p>
<ul>
<li>在测试类上添加 <code>SpringBootTest</code> 注解</li>
<li>使用 <code>@Autowired</code> 注入要测试的资源</li>
<li>定义测试方法进行测试</li>
</ul>
<h3 id="3-1-环境准备"><a href="#3-1-环境准备" class="headerlink" title="3.1  环境准备"></a>3.1  环境准备</h3><p>创建一个名为 <code>springboot_07_test</code> 的 <code>SpringBoot</code> 工程，工程目录结构如下</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917213556673.png" alt="image-20210917213556673" style="zoom:80%;" / loading="lazy">

<p>在 <code>com.itheima.service</code> 下创建 <code>BookService</code> 接口，内容如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>com.itheima.service.impl</code> 包写创建一个 <code>BookServiceImpl</code> 类，使其实现 <code>BookService</code> 接口，内容如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service is running ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-编写测试类"><a href="#3-2-编写测试类" class="headerlink" title="3.2  编写测试类"></a>3.2  编写测试类</h3><p>在 <code>test/java</code> 下创建 <code>com.itheima</code> 包，在该包下创建测试类，将 <code>BookService</code> 注入到该测试类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot07TestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;这里的引导类所在包必须是测试类所在包及其子包。</p>
<p>例如：</p>
<ul>
<li>引导类所在包是 <code>com.itheima</code></li>
<li>测试类所在包是 <code>com.itheima</code></li>
</ul>
<p>如果不满足这个要求的话，就需要在使用 <code>@SpringBootTest</code> 注解时，使用 <code>classes</code> 属性指定引导类的字节码对象。如 <code>@SpringBootTest(classes = Springboot07TestApplication.class)</code></p>
</blockquote>
<h2 id="4，SpringBoot整合mybatis"><a href="#4，SpringBoot整合mybatis" class="headerlink" title="4，SpringBoot整合mybatis"></a>4，SpringBoot整合mybatis</h2><h3 id="4-1-回顾Spring整合Mybatis"><a href="#4-1-回顾Spring整合Mybatis" class="headerlink" title="4.1  回顾Spring整合Mybatis"></a>4.1  回顾Spring整合Mybatis</h3><p><code>Spring</code> 整合 <code>Mybatis</code> 需要定义很多配置类</p>
<ul>
<li><p><code>SpringConfig</code> 配置类</p>
<ul>
<li><p>导入 <code>JdbcConfig</code> 配置类</p>
</li>
<li><p>导入 <code>MybatisConfig</code> 配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MyBatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>JdbcConfig</code> 配置类</p>
<ul>
<li><p>定义数据源（加载properties配置项：driver、url、username、password）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>MybatisConfig</code> 配置类</p>
<ul>
<li><p>定义 <code>SqlSessionFactoryBean</code></p>
</li>
<li><p>定义映射配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">getMapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">    msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> msc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">getSqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">    <span class="type">SqlSessionFactoryBean</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">    ssfb.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">    ssfb.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">return</span> ssfb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="4-2-SpringBoot整合mybatis"><a href="#4-2-SpringBoot整合mybatis" class="headerlink" title="4.2  SpringBoot整合mybatis"></a>4.2  SpringBoot整合mybatis</h3><h4 id="4-2-1-创建模块"><a href="#4-2-1-创建模块" class="headerlink" title="4.2.1  创建模块"></a>4.2.1  创建模块</h4><ul>
<li>创建新模块，选择 <code>Spring Initializr</code>，并配置模块相关基础信息</li>
</ul>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917215913779.png" alt="image-20210917215913779" style="zoom:80%;" / loading="lazy">

<ul>
<li><p>选择当前模块需要使用的技术集（MyBatis、MySQL）</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917215958091.png" alt="image-20210917215958091" style="zoom:80%;" / loading="lazy"></li>
</ul>
<h4 id="4-2-2-定义实体类"><a href="#4-2-2-定义实体类" class="headerlink" title="4.2.2  定义实体类"></a>4.2.2  定义实体类</h4><p>在 <code>com.itheima.domain</code> 包下定义实体类 <code>Book</code>，内容如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//setter and  getter</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-3-定义dao接口"><a href="#4-2-3-定义dao接口" class="headerlink" title="4.2.3  定义dao接口"></a>4.2.3  定义dao接口</h4><p>在 <code>com.itheima.dao</code> 包下定义 <code>BookDao</code> 接口，内容如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-4-定义测试类"><a href="#4-2-4-定义测试类" class="headerlink" title="4.2.4  定义测试类"></a>4.2.4  定义测试类</h4><p>在 <code>test/java</code> 下定义包 <code>com.itheima</code> ，在该包下测试类，内容如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot08MybatisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookDao.getById(<span class="number">1</span>);</span><br><span class="line">		System.out.println(book);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-5-编写配置"><a href="#4-2-5-编写配置" class="headerlink" title="4.2.5  编写配置"></a>4.2.5  编写配置</h4><p>我们代码中并没有指定连接哪儿个数据库，用户名是什么，密码是什么。所以这部分需要在 <code>SpringBoot</code> 的配置文件中进行配合。</p>
<p>在 <code>application.yml</code> 配置文件中配置如下内容</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-6-测试"><a href="#4-2-6-测试" class="headerlink" title="4.2.6  测试"></a>4.2.6  测试</h4><p>运行测试方法，我们会看到如下错误信息</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917221427930.png" alt="image-20210917221427930" style="zoom:70%;" / loading="lazy">

<p>错误信息显示在 <code>Spring</code> 容器中没有 <code>BookDao</code> 类型的 <code>bean</code>。为什么会出现这种情况呢？</p>
<p>原因是 <code>Mybatis</code> 会扫描接口并创建接口的代码对象交给 <code>Spring</code> 管理，但是现在并没有告诉 <code>Mybatis</code> 哪个是 <code>dao</code> 接口。而我们要解决这个问题需要在<code>BookDao</code> 接口上使用 <code>@Mapper</code> ，<code>BookDao</code> 接口改进为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p>
<p><code>SpringBoot</code> 版本低于2.4.3(不含)，Mysql驱动版本大于8.0时，需要在url连接串中配置时区 <code>jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</code>，或在MySQL数据库端配置时区解决此问题</p>
</blockquote>
<h4 id="4-2-7-使用Druid数据源"><a href="#4-2-7-使用Druid数据源" class="headerlink" title="4.2.7  使用Druid数据源"></a>4.2.7  使用Druid数据源</h4><p>现在我们并没有指定数据源，<code>SpringBoot</code> 有默认的数据源，我们也可以指定使用 <code>Druid</code> 数据源，按照以下步骤实现</p>
<ul>
<li><p>导入 <code>Druid</code> 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>application.yml</code> 配置文件配置</p>
<p>可以通过 <code>spring.datasource.type</code> 来配置使用什么数据源。配置文件内容可以改进为</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5，案例"><a href="#5，案例" class="headerlink" title="5，案例"></a>5，案例</h2><p><code>SpringBoot</code> 到这就已经学习完毕，接下来我们将学习 <code>SSM</code> 时做的三大框架整合的案例用 <code>SpringBoot</code> 来实现一下。我们完成这个案例基本是将之前做的拷贝过来，修改成 <code>SpringBoot</code> 的即可，主要从以下几部分完成</p>
<ol>
<li><p>pom.xml</p>
<p>配置起步依赖，必要的资源坐标(druid)</p>
</li>
<li><p>application.yml</p>
<p>设置数据源、端口等</p>
</li>
<li><p>配置类</p>
<p>全部删除</p>
</li>
<li><p>dao</p>
<p>设置@Mapper</p>
</li>
<li><p>测试类</p>
</li>
<li><p>页面</p>
<p>放置在resources目录下的static目录中</p>
</li>
</ol>
<h3 id="5-1-创建工程"><a href="#5-1-创建工程" class="headerlink" title="5.1  创建工程"></a>5.1  创建工程</h3><p>创建 <code>SpringBoot</code> 工程，在创建工程时需要勾选 <code>web</code>、<code>mysql</code>、<code>mybatis</code>，工程目录结构如下</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917225019868.png" alt="image-20210917225019868" style="zoom:80%;" / loading="lazy">

<p>由于我们工程中使用到了 <code>Druid</code> ，所以需要导入 <code>Druid</code> 的坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-代码拷贝"><a href="#5-2-代码拷贝" class="headerlink" title="5.2  代码拷贝"></a>5.2  代码拷贝</h3><p>将 <code>springmvc_11_page</code> 工程中的 <code>java</code> 代码及测试代码连同包拷贝到 <code>springboot_09_ssm</code> 工程，按照下图进行拷贝</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917225715519.png" alt="image-20210917225715519" style="zoom:70%;" / loading="lazy">

<p>需要修改的内容如下：</p>
<ul>
<li><p><code>Springmvc_11_page</code> 中 <code>config</code> 包下的是配置类，而 <code>SpringBoot</code> 工程不需要这些配置类，所以这些可以直接删除</p>
</li>
<li><p><code>dao</code> 包下的接口上在拷贝到 <code>springboot_09-ssm</code> 工程中需要在接口中添加 <code>@Mapper</code> 注解</p>
</li>
<li><p><code>BookServiceTest</code> 测试需要改成 <code>SpringBoot</code> 整合 <code>junit</code> 的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(<span class="number">2</span>);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Book&gt; all = bookService.getAll();</span><br><span class="line">        System.out.println(all);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-3-配置文件"><a href="#5-3-配置文件" class="headerlink" title="5.3  配置文件"></a>5.3  配置文件</h3><p>在 <code>application.yml</code> 配置文件中需要配置如下内容</p>
<ul>
<li>服务的端口号</li>
<li>连接数据库的信息</li>
<li>数据源</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db</span> <span class="comment">#?servierTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>

<h3 id="5-4-静态资源"><a href="#5-4-静态资源" class="headerlink" title="5.4  静态资源"></a>5.4  静态资源</h3><p>在 <code>SpringBoot</code> 程序中是没有 <code>webapp</code> 目录的，那么在 <code>SpringBoot</code> 程序中静态资源需要放在什么位置呢？</p>
<p>静态资源需要放在 <code>resources</code> 下的 <code>static</code> 下，如下图所示</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917230702072.png" alt="image-20210917230702072" style="zoom:80%;" / loading="lazy">



]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC学习笔记</title>
    <url>/2022/04/25/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、SpringMVC概述"><a href="#一、SpringMVC概述" class="headerlink" title="一、SpringMVC概述"></a>一、SpringMVC概述</h1><blockquote>
<p>Spring MVC 是由Spring官方提供的基于MVC设计理念的web框架。</p>
<p>SpringMVC是基于Servlet封装的用于实现MVC控制的框架，实现前端和服务端的交互。</p>
</blockquote>
<h2 id="1-1、SpringMVC优势"><a href="#1-1、SpringMVC优势" class="headerlink" title="1.1、SpringMVC优势"></a>1.1、SpringMVC优势</h2><ul>
<li>严格遵守了MVC分层思想</li>
<li>采用了松耦合、插件式结构</li>
<li>SpringMVC在基于Spring的扩展、提供了一套完善的MVC注解</li>
<li>SpringMVC在数据绑定、视图解析都提供了多种处理方式，可灵活配置</li>
<li>SpringMVC对RESFUL URL设计方法提供了良好的支持</li>
</ul>
<h2 id="1-2、SpringMVC本质工作"><a href="#1-2、SpringMVC本质工作" class="headerlink" title="1.2、SpringMVC本质工作"></a>1.2、SpringMVC本质工作</h2><ul>
<li>接收并解析请求</li>
<li>处理请求</li>
<li>数据渲染、响应请求</li>
</ul>
<h1 id="二、SpringMVC框架部署"><a href="#二、SpringMVC框架部署" class="headerlink" title="二、SpringMVC框架部署"></a>二、SpringMVC框架部署</h1><h2 id="2-1、基于Maven创建一个web工程"><a href="#2-1、基于Maven创建一个web工程" class="headerlink" title="2.1、基于Maven创建一个web工程"></a>2.1、基于Maven创建一个web工程</h2><ul>
<li>SpringMVC是一个web框架，应用在web工程中</li>
</ul>
<h2 id="2-2、-添加SpringMVC依赖"><a href="#2-2、-添加SpringMVC依赖" class="headerlink" title="2.2、 添加SpringMVC依赖"></a>2.2、 添加SpringMVC依赖</h2><ul>
<li>spring-context</li>
<li>spring-aspects</li>
<li>spring-jdbc</li>
<li>spring-test</li>
<li>spring-web</li>
<li>spring-webmvc</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qfedu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc-demo2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-3-创建SpringMVC配置文件"><a href="#2-3-创建SpringMVC配置文件" class="headerlink" title="2.3 创建SpringMVC配置文件"></a>2.3 创建SpringMVC配置文件</h2><ul>
<li>在resource目录下创建名为spring-servlet.xml的文件</li>
<li>添加MVC命名空间</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--IoC采用注解配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.qfedu&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  声明MVC使用注解驱动  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-4、在web-xml中配置SpringMVC的前端控制器"><a href="#2-4、在web-xml中配置SpringMVC的前端控制器" class="headerlink" title="2.4、在web.xml中配置SpringMVC的前端控制器"></a>2.4、在web.xml中配置SpringMVC的前端控制器</h2><blockquote>
<p>SpringMVC提供了一个名为DispatcherServlet的类(SpringMVC前端控制器)，用于拦截用户请求交由SpringMVC处理</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="三、Spring-MVC框架的使用"><a href="#三、Spring-MVC框架的使用" class="headerlink" title="三、Spring MVC框架的使用"></a>三、Spring MVC框架的使用</h1><blockquote>
<p>在SpringMVC中，把接受请求、处理请求的类称为Controller（控制器）</p>
</blockquote>
<h2 id="3-1-创建控制器"><a href="#3-1-创建控制器" class="headerlink" title="3.1 创建控制器"></a>3.1 创建控制器</h2><h3 id="1-创建控制器类"><a href="#1-创建控制器类" class="headerlink" title="1. 创建控制器类"></a>1. 创建控制器类</h3><ul>
<li>创建一个名为<code>com.qfedu.controlllers</code>的包(包需要在Spring注解扫描的范围内)</li>
<li>创建一个类(无需做任何的继承和实现)</li>
<li>在类上添加<code>@Controller</code>注解声明该类是SpringMVC的控制器</li>
<li>在类上添加<code>@RequestMapping(&quot;url&quot;)</code>声明此控制器类的请求url</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">//声明该请求的路径</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-在控制器类中定义处理请求的方法"><a href="#2-在控制器类中定义处理请求的方法" class="headerlink" title="2.在控制器类中定义处理请求的方法"></a>2.在控制器类中定义处理请求的方法</h3><ul>
<li>在一个控制器类中可以定义多个方法来处理不同的请求】</li>
<li>在每个方法上添加@RequestMapping(“url”)用于声明当前方法请求的url</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">//声明该请求的路径</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book====add&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book====list&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-访问"><a href="#3-访问" class="headerlink" title="3.访问"></a>3.访问</h3><ul>
<li><a href="http://localhost:10086/springmvc_demo2/book/add">http://localhost:10086/springmvc_demo2/book/add</a></li>
<li><a href="http://localhost:10086/springmvc_demo2/book/list">http://localhost:10086/springmvc_demo2/book/list</a></li>
</ul>
<h2 id="3-2-静态资源配置"><a href="#3-2-静态资源配置" class="headerlink" title="3.2 静态资源配置"></a>3.2 静态资源配置</h2><blockquote>
<p>静态资源：指项目中的HTML、css、js、图片、字体等</p>
</blockquote>
<h3 id="1-x2F-和-x2F-的区别"><a href="#1-x2F-和-x2F-的区别" class="headerlink" title="1. &#x2F;* 和 &#x2F;的区别"></a>1. &#x2F;* 和 &#x2F;的区别</h3><ul>
<li>&#x2F;*拦截所有的HTTP请求，包括.jsp的请求，都作为控制器类的请求路径来处理</li>
<li>&#x2F;拦截所有的HTTP请求，但不包括.jsp的请求，不会放行静态资源的请求(html&#x2F;css&#x2F;js&#x2F;图片)</li>
</ul>
<h3 id="2-配置静态资源放行"><a href="#2-配置静态资源放行" class="headerlink" title="2. 配置静态资源放行"></a>2. 配置静态资源放行</h3><ul>
<li><p>在SpringMVC的配置文件，添加如下静态资源放行的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置静态资源放行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/css/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/imgs/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/imgs/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/pages/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/pages/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-3-前端提交数据到控制器"><a href="#3-3-前端提交数据到控制器" class="headerlink" title="3.3 前端提交数据到控制器"></a>3.3 前端提交数据到控制器</h2><h3 id="1-表单提交"><a href="#1-表单提交" class="headerlink" title="1.表单提交"></a>1.表单提交</h3><ul>
<li>表单提交：输入框需要提供name属性，SpringMVC控制器是通过name属性取值的</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>添加图书<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/book/add&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>图书名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>图书作者：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>图书价格：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-URL提交"><a href="#2-URL提交" class="headerlink" title="2.URL提交"></a>2.URL提交</h3><ul>
<li>url提交</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>超链接提交<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/book/add?bookName=Java&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-AJAX提交"><a href="#3-AJAX提交" class="headerlink" title="3.AJAX提交"></a>3.AJAX提交</h3><ul>
<li>AJAX提交：请求行、请求头、请求体都可以用来传值</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>AJAX提交<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ajax提交&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> obj = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">        obj.<span class="property">bookName</span> = <span class="string">&quot;Java&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        obj.<span class="property">bookAuthor</span> = <span class="string">&quot;张三&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        obj.<span class="property">bookPrice</span> = <span class="number">88.88</span>;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;book/add&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">headers</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">contentType</span>:<span class="string">&quot;application/json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:obj,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-4-控制器接收前端提交的数据"><a href="#3-4-控制器接收前端提交的数据" class="headerlink" title="3.4 控制器接收前端提交的数据"></a>3.4 控制器接收前端提交的数据</h2><h6 id="3-4-1-RequestParam-接收请求行传值"><a href="#3-4-1-RequestParam-接收请求行传值" class="headerlink" title="3.4.1 @RequestParam 接收请求行传值"></a>3.4.1 @RequestParam 接收请求行传值</h6><ul>
<li>表单提交</li>
<li>URL提交</li>
<li>$.ajax()请求的url传值</li>
<li>$.post()&#x2F;$.get()中的{}传值</li>
</ul>
<p>**<code>@RequestParam</code>**注解用于接收请求行传递的数据</p>
<ul>
<li><p>前端提交数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;book/add&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>图书名称:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>图书作者:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>图书价格:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>控制器接收数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*接收请求行数据*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String a,</span></span><br><span class="line"><span class="params">                    <span class="meta">@RequestParam(&quot;author&quot;)</span> String b,</span></span><br><span class="line"><span class="params">                    <span class="meta">@RequestParam(&quot;price&quot;)</span> <span class="type">double</span> c)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---book add&quot;</span>);</span><br><span class="line">    System.out.println(a);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><code>注意</code><strong>如果控制器方法中接收数据的参数名与请求行传值的key一致，则@RequestParam注解可省略</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">(String name,String author, <span class="type">double</span> price)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---book add&quot;</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    System.out.println(author);</span><br><span class="line">    System.out.println(price);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="3-4-2-RequestHeader接收请求头传值"><a href="#3-4-2-RequestHeader接收请求头传值" class="headerlink" title="3.4.2 @RequestHeader接收请求头传值"></a>3.4.2 @RequestHeader接收请求头传值</h6><ul>
<li><p>ajax封装请求头数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    ...,</span><br><span class="line">    <span class="attr">headers</span>:&#123;</span><br><span class="line">       </span><br><span class="line">	&#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>**<code>@RequestHeader</code>**注解用于接收请求行头传递的数据</p>
<ul>
<li><p>前端</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;ajax提交&quot;</span> id=<span class="string">&quot;btn1&quot;</span>/&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $.<span class="title function_">ajax</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">url</span>:<span class="string">&quot;book/list&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">type</span>:<span class="string">&quot;post&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">headers</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">token</span>:<span class="string">&quot;wahahaawahaha&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listBooks</span><span class="params">(<span class="meta">@RequestHeader(&quot;token&quot;)</span> String token)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---book list&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="3-4-3-RequestBody接收请求体传值"><a href="#3-4-3-RequestBody接收请求体传值" class="headerlink" title="3.4.3 @RequestBody接收请求体传值"></a>3.4.3 @RequestBody接收请求体传值</h6><ul>
<li><p>ajax封装请求体数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    ...,</span><br><span class="line">    <span class="attr">contentType</span>:<span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:obj,,</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>**<code>@RequestBody</code>**注解用于接收请求行头传递的数据</p>
<ul>
<li><p>前端</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ajax提交&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> obj = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">            obj.<span class="property">bookName</span> = <span class="string">&quot;Python&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            obj.<span class="property">bookAuthor</span>=<span class="string">&quot;杰哥&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            obj.<span class="property">bookPrice</span> = <span class="number">2.22</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> s = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj); <span class="comment">//将对象转换成JSON格式</span></span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>:<span class="string">&quot;book/update&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">contentType</span>:<span class="string">&quot;application/json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>:s,   <span class="comment">//如果data的值为json格式字符串，contentType必须设置为&quot;application/json&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>@RquestBody 将前端请求体提交的JSON格式数据转换成Java对象，依赖jackson包</p>
</blockquote>
<ul>
<li><p>导入jackson的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---book update&quot;</span>);</span><br><span class="line">    System.out.println(book);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-5-控制器响应前端请求"><a href="#3-5-控制器响应前端请求" class="headerlink" title="3.5 控制器响应前端请求"></a>3.5 控制器响应前端请求</h2><h6 id="3-5-1-控制器响应同步请求"><a href="#3-5-1-控制器响应同步请求" class="headerlink" title="3.5.1 控制器响应同步请求"></a>3.5.1 控制器响应同步请求</h6><blockquote>
<p>同步请求：form、超链接</p>
<p>处理同步请求的方法的返回类型定义为String或者ModelAndView，以实现页面的跳转</p>
</blockquote>
<ul>
<li><p>返回类型为String</p>
<p><strong>转发</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addBook</span><span class="params">(String name, String author, <span class="type">double</span> price)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---book add&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/tips.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>重定向</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addBook</span><span class="params">(String name, String author, <span class="type">double</span> price)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---book add&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/tips.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>返回类型为 ModelAndView</p>
<p><strong>转发</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">addBook</span><span class="params">(String name, String author, <span class="type">double</span> price)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---book add&quot;</span>);</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;/tips.jsp&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>重定向</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">addBook</span><span class="params">(String name, String author, <span class="type">double</span> price)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---book add&quot;</span>);</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;redirect:/tips.jsp&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="3-5-2-控制器响应异步请求"><a href="#3-5-2-控制器响应异步请求" class="headerlink" title="3.5.2 控制器响应异步请求"></a>3.5.2 控制器响应异步请求</h6><blockquote>
<p> 异步请求：ajax请求</p>
</blockquote>
<p><strong>使用response中的输出流进行响应</strong></p>
<ul>
<li>控制器方法的返回类型为<code>void</code></li>
<li>控制器方法添加 <code>HttpServletResponse response</code>参数</li>
<li>在方法中通过response获取输出流，使用流响应ajax请求</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---book update&quot;</span>);</span><br><span class="line">    System.out.println(book);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用ObjectMapper将对象转换成JSON格式字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(book);</span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">    out.println(s);</span><br><span class="line">    out.flush();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>直接在控制器方法返回响应的对象</strong></p>
<ul>
<li>控制器方法的返回类型设置为响应给ajax请求的对象类型</li>
<li>在控制器方法前添加<code>@ResponseBody</code>注解，将返回的对象转换成JSON响应给ajax请求</li>
<li>如果一个控制器类中的所有方法都是响应ajax请求，则可以直接在控制器类前添加<code>@ResponseBody</code>注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/update&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---book update&quot;</span>);</span><br><span class="line">    List&lt;Book&gt; books = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Book&gt;();</span><br><span class="line">    books.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">1</span>,<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;老张&quot;</span>,<span class="number">2.22</span>));</span><br><span class="line">    books.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">2</span>,<span class="string">&quot;C++&quot;</span>,<span class="string">&quot;老李&quot;</span>,<span class="number">3.22</span>));</span><br><span class="line">    <span class="keyword">return</span> books;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="3-5-3-控制器响应同步请求的数据传递"><a href="#3-5-3-控制器响应同步请求的数据传递" class="headerlink" title="3.5.3 控制器响应同步请求的数据传递"></a>3.5.3 控制器响应同步请求的数据传递</h6><blockquote>
<p>对于同步请求的转发响应，我们可以传递参数到转发的页面</p>
</blockquote>
<ul>
<li><p>返回类型为String:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.在控制器方法中定义一个Model类型的参数</span></span><br><span class="line"><span class="comment">//2.在return页面之前，向model中添加键值对，添加的键值对就会被传递到转发的页面</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addBook</span><span class="params">(String name, String author, <span class="type">double</span> price,Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;book&quot;</span>,<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">1</span>,<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;老张&quot;</span>,<span class="number">2.22</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/tips.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//除了使用Model对象传值外，还可以直接使用HttpServletRequest对象</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addBook</span><span class="params">(String name, String author, <span class="type">double</span> price,HttpServletRequest request)</span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;book&quot;</span>,<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">1</span>,<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;老张&quot;</span>,<span class="number">2.22</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/tips.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回类型ModelAndView:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/add2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">addBook2</span><span class="params">(String name, String author, <span class="type">double</span> price)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;/tips.jsp&quot;</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;book&quot;</span>,<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">1</span>,<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;老张&quot;</span>,<span class="number">2.22</span>));</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-6-解决中文乱码问题"><a href="#3-6-解决中文乱码问题" class="headerlink" title="3.6 解决中文乱码问题"></a>3.6 解决中文乱码问题</h2><h6 id="3-6-1-前端编码"><a href="#3-6-1-前端编码" class="headerlink" title="3.6.1 前端编码"></a>3.6.1 前端编码</h6><ul>
<li><p>JSP页面：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>HTML页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="3-6-2-服务器编码"><a href="#3-6-2-服务器编码" class="headerlink" title="3.6.2 服务器编码"></a>3.6.2 服务器编码</h6><ul>
<li><p>tomcat&#x2F;conf&#x2F;server.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span>  <span class="attr">URIEncoding</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="3-6-3-设置SpringMVC的编码方式"><a href="#3-6-3-设置SpringMVC的编码方式" class="headerlink" title="3.6.3 设置SpringMVC的编码方式"></a>3.6.3 设置SpringMVC的编码方式</h6><ul>
<li><p>在web.xml中配置SpringMVC编码过滤器的编码方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="四、SpringMVC的请求处理流程"><a href="#四、SpringMVC的请求处理流程" class="headerlink" title="四、SpringMVC的请求处理流程"></a>四、SpringMVC的请求处理流程</h2><h4 id="4-1-请求处理流程"><a href="#4-1-请求处理流程" class="headerlink" title="4.1 请求处理流程"></a>4.1 请求处理流程</h4><blockquote>
<p>SpringMVC通过前端控制器（DispatcherServlet）拦截并处理用户请求的</p>
</blockquote>
<p><img src="/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1617257389694.png" alt="1617257389694" loading="lazy"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">① 前端发送请求被前端控制器DispatcherServlet拦截</span><br><span class="line">② 前端控制器调用处理器映射器HandlerMapping对请求URL进行解析，解析之后返回调用给前端控制器</span><br><span class="line">③ 前端控制器调用处理器适配器处理调用链</span><br><span class="line">④ 处理器适配器基于反射通过适配器设计模式完成处理器(控制器)的调用处理用户请求</span><br><span class="line">⑤ 处理器适配器将控制器返回的视图和数据信息封装成ModelAndView响应给前端控制器</span><br><span class="line">⑥ 前端控制器调用视图解析器ViewResolver对ModelAndView进行解析，将解析结果（视图资源和数据）响应给前端控制器</span><br><span class="line">⑦ 前端控制器调用视图view组件将数据进行渲染，将渲染结果（静态视图）响应给前端控制器</span><br><span class="line">⑧ 前端控制器响应用户请求</span><br></pre></td></tr></table></figure>

<h4 id="4-2-SpringMVC的核心组件"><a href="#4-2-SpringMVC的核心组件" class="headerlink" title="4.2 SpringMVC的核心组件"></a>4.2 SpringMVC的核心组件</h4><ul>
<li><p><code>DispatcherServlet</code> 前端控制器、总控制器</p>
<ul>
<li>作用：接收请求，协同各组件工作、响应请求</li>
</ul>
</li>
<li><p><code>HandlerMapping</code> 处理器映射</p>
<ul>
<li>作用：负责根据用户请求的URL找到对应的Handler</li>
<li><strong>可配置</strong> SpringMVC提供多个处理器映射的实现，可以根据需要进行配置</li>
</ul>
</li>
<li><p><code>HandlerAdapter</code> 处理器适配器</p>
<ul>
<li>作用：按照处理器映射器解析的用户请求的调用链，通过适配器模式完成Handler的调用</li>
</ul>
</li>
<li><p><code>Handler</code> 处理器&#x2F;控制器</p>
<ul>
<li>由工程师根据业务的需求进行开发</li>
<li>作用：处理请求</li>
</ul>
</li>
<li><p><code>ModelAndView</code> 视图模型</p>
<ul>
<li>作用：用于封装处理器返回的数据以及相应的视图</li>
<li>ModelAndView &#x3D; Model + View</li>
</ul>
</li>
<li><p><code>ViewResolver</code> 视图解析器</p>
<ul>
<li>作用：对ModelAndView进行解析</li>
<li><strong>可配置</strong> SpringMVC提供多个视图解析器的实现，可以根据需要进行配置</li>
</ul>
</li>
<li><p><code>View</code> 视图</p>
<ul>
<li>作用：完成数据渲染</li>
</ul>
</li>
</ul>
<h4 id="4-3-处理器映射器"><a href="#4-3-处理器映射器" class="headerlink" title="4.3  处理器映射器"></a>4.3  处理器映射器</h4><blockquote>
<p>不同的处理器映射器对URL处理的方式也不相同，使用对应的处理器映射器之后我们的前端请求规则也需要发生相应的变化</p>
<p>SpringMVC提供的处理器映射器：</p>
<ul>
<li>BeanNameUrlHandlerMapping  根据控制器的ID访问控制器</li>
<li>SimpleUrlHandlerMapping 根据控制器配置的URL访问（默认）</li>
</ul>
</blockquote>
<p>配置处理器映射器：</p>
<ul>
<li><p>在SpringMVC的配置文件中通过bean标签声明处理器映射器</p>
</li>
<li><p>配置BeanNameUrlHandlerMapping  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置SimpleUrlHandlerMapping</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;/aaa&quot;</span>&gt;</span>bookController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;/bbb&quot;</span>&gt;</span>studentController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-4-视图解析器"><a href="#4-4-视图解析器" class="headerlink" title="4.4  视图解析器"></a>4.4  视图解析器</h4><blockquote>
<p>Spring提供了多个视图解析器：</p>
<ul>
<li>UrlBasedViewResolver</li>
<li>InternalResourceViewResolver</li>
</ul>
</blockquote>
<ul>
<li><p>UrlBasedViewResolver 需要依赖jstl</p>
<ul>
<li>添加JSTL的依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>配置视图解析器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.UrlBasedViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>InternalResourceViewResolver</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="五、日期格式处理"><a href="#五、日期格式处理" class="headerlink" title="五、日期格式处理"></a>五、日期格式处理</h2><h4 id="5-1-在控制器中使用对象接收数据"><a href="#5-1-在控制器中使用对象接收数据" class="headerlink" title="5.1 在控制器中使用对象接收数据"></a>5.1 在控制器中使用对象接收数据</h4><ul>
<li><p>前端：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;test/add&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;图书名称:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookName&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;图书作者:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookAuthor&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;图书价格:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookPrice&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>后端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="comment">//表单提交的多个数据，在控制器方法中可以使用对象接收</span></span><br><span class="line">    <span class="comment">//但是提交的数据的key必须要与对象的属性名一致</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addBook</span><span class="params">(Book book)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/tips.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-2-日期格式处理"><a href="#5-2-日期格式处理" class="headerlink" title="5.2 日期格式处理"></a>5.2 日期格式处理</h4><blockquote>
<p>如果前端需要输入日期数据，在控制器中转换成Date对象，SpringMVC要求前端输入的日期格式必须为<code>yyyy/MM/dd</code></p>
<p>如果甲方要求日期格式必须为指定的格式，而这个指定格式SpringMVC不接受，该如何处理呢？</p>
<ul>
<li>自定义日期转换器</li>
</ul>
</blockquote>
<h6 id="5-2-1-创建自定义日期转换器"><a href="#5-2-1-创建自定义日期转换器" class="headerlink" title="5.2.1 创建自定义日期转换器"></a>5.2.1 创建自定义日期转换器</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 1.创建一个类实现Converter接口，泛型指定从什么类型转换为什么类型</span></span><br><span class="line"><span class="comment"> * 2.实现convert转换方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDateConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, Date&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">convert</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = sdf.parse(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="5-2-2-配置自定义转换器"><a href="#5-2-2-配置自定义转换器" class="headerlink" title="5.2.2 配置自定义转换器"></a>5.2.2 配置自定义转换器</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  声明MVC使用注解驱动  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;converterFactory&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;converterFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.utils.MyDateConverter&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="六、文件上传下载"><a href="#六、文件上传下载" class="headerlink" title="六、文件上传下载"></a>六、文件上传下载</h2><h4 id="6-1-SpringMVC框架部署"><a href="#6-1-SpringMVC框架部署" class="headerlink" title="6.1 SpringMVC框架部署"></a>6.1 SpringMVC框架部署</h4><ul>
<li><p>基于Maven创建web工程</p>
</li>
<li><p>添加SpringMVC所需的依赖</p>
<ul>
<li>Spring:context aspects jdbc  test web webmvc  jackson</li>
</ul>
</li>
<li><p>创建SpringMVC配置文件</p>
</li>
<li><p>在web.xml中配置SpringMVC的前端控制器</p>
</li>
<li><p>在web.xml中配置SpringMVC的编码过滤器</p>
</li>
<li><p>配置springmvc静态资源处理策略</p>
</li>
</ul>
<h4 id="6-2-文件上传"><a href="#6-2-文件上传" class="headerlink" title="6.2 文件上传"></a>6.2 文件上传</h4><blockquote>
<p>案例：添加图书，同时提交图书的封面图片</p>
</blockquote>
<h6 id="6-2-1-前端提交文件"><a href="#6-2-1-前端提交文件" class="headerlink" title="6.2.1 前端提交文件"></a>6.2.1 前端提交文件</h6><ul>
<li>表单提示方式必须为post</li>
<li>表单enctype属性设置为<code>multipart/form-data</code></li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;book/add&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;图书名称:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookName&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;图书作者:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookAuthor&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;图书价格:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookPrice&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;图书封面:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;imgFile&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h6 id="6-2-2-控制器接收数据和文件"><a href="#6-2-2-控制器接收数据和文件" class="headerlink" title="6.2.2 控制器接收数据和文件"></a>6.2.2 控制器接收数据和文件</h6><blockquote>
<p>SpringMVC处理上传文件需要借助于CommonsMultipartResolver文件解析器</p>
</blockquote>
<ul>
<li><p>添加依赖：commons-io  commons-fileupload</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在spring-servlet.xml中配置文件解析器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10240000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;102400&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>控制器接收文件</p>
<ul>
<li>在处理文件上传的方法中定义一个MultiPartFile类型的对象，就可以接受图片了</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addBook</span><span class="params">(Book book, MultipartFile imgFile, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------add&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//imgFile就表示上传的图片</span></span><br><span class="line">        <span class="comment">//1.截取上传文件的后缀名,生成新的文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> imgFile.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ext</span> <span class="operator">=</span> originalFilename.substring( originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>) ); </span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> System.currentTimeMillis()+ext;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取imgs目录在服务器的路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;imgs&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">savePath</span> <span class="operator">=</span> dir+<span class="string">&quot;/&quot;</span>+fileName; </span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.保存文件</span></span><br><span class="line">        imgFile.transferTo( <span class="keyword">new</span> <span class="title class_">File</span>(savePath));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.将图片的访问路径设置到book对象</span></span><br><span class="line">        book.setBookImg(<span class="string">&quot;imgs/&quot;</span>+fileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.调用service保存book到数据库</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/tips.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="6-3-文件下载"><a href="#6-3-文件下载" class="headerlink" title="6.3 文件下载"></a>6.3 文件下载</h4><h6 id="6-3-1-显示文件列表"><a href="#6-3-1-显示文件列表" class="headerlink" title="6.3.1 显示文件列表"></a>6.3.1 显示文件列表</h6><ul>
<li><p>list.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span> integrity=<span class="string">&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot;</span> crossorigin=<span class="string">&quot;anonymous&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 可选的 Bootstrap 主题文件（一般不用引入） --&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap-theme.min.css&quot;</span> integrity=<span class="string">&quot;sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp&quot;</span> crossorigin=<span class="string">&quot;anonymous&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js&quot;</span> integrity=<span class="string">&quot;sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa&quot;</span> crossorigin=<span class="string">&quot;anonymous&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h4&gt;文件列表&lt;/h4&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">&quot;row&quot;</span> id=<span class="string">&quot;container&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        $.get(<span class="string">&quot;book/list&quot;</span>,function(res)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">                <span class="type">var</span> <span class="variable">fn</span> <span class="operator">=</span> res[i];</span><br><span class="line">                <span class="type">var</span> <span class="variable">htmlStr</span> <span class="operator">=</span> <span class="string">&quot;&lt;div class=&#x27;col-lg-2  col-md-3 col-sm-4 col-xs-6&#x27;&gt;&lt;div class=&#x27;thumbnail&#x27;&gt;&lt;img src=&#x27;imgs/&quot;</span>+fn+<span class="string">&quot;&#x27; alt=&#x27;...&#x27;&gt; &lt;div class=&#x27;caption&#x27;&gt;&lt;p&gt;&lt;a href=&#x27;#&#x27; class=&#x27;btn btn-primary&#x27; role=&#x27;button&#x27;&gt;下载&lt;/a&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&quot;</span>;</span><br><span class="line">                $(<span class="string">&quot;#container&quot;</span>).append(htmlStr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;json&quot;</span>);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>BookController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String[] listImgs(HttpServletRequest request)&#123;</span><br><span class="line">    <span class="comment">//从imgs目录下获取所有的图片信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;imgs&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">imgDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir);</span><br><span class="line">    String[] fileNames = imgDir.list();</span><br><span class="line">    <span class="keyword">return</span> fileNames;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="6-3-2-实现文件下载"><a href="#6-3-2-实现文件下载" class="headerlink" title="6.3.2 实现文件下载"></a>6.3.2 实现文件下载</h6><ul>
<li><p>list.jsp</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> htmlStr = <span class="string">&quot;&lt;div class=&#x27;col-lg-2  col-md-3 col-sm-4 col-xs-6&#x27;&gt;&lt;div class=&#x27;thumbnail&#x27;&gt;&lt;img src=&#x27;imgs/&quot;</span>+fn+<span class="string">&quot;&#x27; alt=&#x27;...&#x27;&gt; &lt;div class=&#x27;caption&#x27;&gt;&lt;p&gt;&lt;a href=&#x27;book/download?fname=&quot;</span>+fn+<span class="string">&quot;&#x27; class=&#x27;btn btn-primary&#x27; role=&#x27;button&#x27;&gt;下载&lt;/a&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>BookController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadImg</span><span class="params">(String fname, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//从imgs目录找到当前文件</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;imgs&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> dir+<span class="string">&quot;/&quot;</span>+fname;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line"></span><br><span class="line">    response.setContentType(<span class="string">&quot;application/exe&quot;</span>);</span><br><span class="line">    response.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+fname);</span><br><span class="line"></span><br><span class="line">    IOUtils.copy(fileInputStream, response.getOutputStream());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="七、统一异常处理"><a href="#七、统一异常处理" class="headerlink" title="七、统一异常处理"></a>七、统一异常处理</h2><blockquote>
<p>在我们的应用系统运行的过程中，可能由于运行环境、用户操作、资源不足等各方面的原因导致系统出现异常（HTTP状态异常、Exception）；如果系统出现了异常，这些异常将会通过浏览器呈现给用户，而这种异常的显示是没有必要，因此我们可以在服务器进行特定的处理——当系统出现异常之后，呈现给用户一个统一的、可读的的异常提示页面。</p>
</blockquote>
<h4 id="7-1-HTTP异常状态统一处理"><a href="#7-1-HTTP异常状态统一处理" class="headerlink" title="7.1 HTTP异常状态统一处理"></a>7.1 HTTP异常状态统一处理</h4><blockquote>
<p><strong>HTTP Status 404</strong></p>
</blockquote>
<ul>
<li><p>创建一个用于进行异常提示的页面：404.jsp</p>
</li>
<li><p>在web.xml中进行配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="7-2-Java代码异常的统一处理"><a href="#7-2-Java代码异常的统一处理" class="headerlink" title="7.2 Java代码异常的统一处理"></a>7.2 Java代码异常的统一处理</h4><h6 id="7-2-1-基于Servlet-api的处理"><a href="#7-2-1-基于Servlet-api的处理" class="headerlink" title="7.2.1 基于Servlet-api的处理"></a>7.2.1 基于Servlet-api的处理</h6><ul>
<li><p>创建异常提示页面：err.jsp</p>
</li>
<li><p>在web.xml中进行配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.NumberFormatException<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/err.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="7-2-2-SpringMVC处理"><a href="#7-2-2-SpringMVC处理" class="headerlink" title="7.2.2 SpringMVC处理"></a>7.2.2 SpringMVC处理</h6><ul>
<li><p>使用异常处理类进行统一处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(NullPointerException.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">nullHandler</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/err1.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(NumberFormatException.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">formatHandler</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/err2.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="八、拦截器"><a href="#八、拦截器" class="headerlink" title="八、拦截器"></a>八、拦截器</h2><h4 id="8-1-拦截器介绍"><a href="#8-1-拦截器介绍" class="headerlink" title="8.1 拦截器介绍"></a>8.1 拦截器介绍</h4><blockquote>
<p>SpringMVC提供的拦截器就类似于Servlet-api中的过滤器，可以对控制器的请求进行拦截实现相关的预处理和后处理。</p>
</blockquote>
<ul>
<li>过滤器<ul>
<li>是Servlet规范的一部分，所有的web项目都可以使用</li>
<li>过滤器在web.xml配置（可以使用注解），能够拦截所有web请求</li>
</ul>
</li>
<li>拦截器<ul>
<li>是SpringMVC框架的实现，只有在SpringMVC框架中才能使用</li>
<li>拦截器在SpringMVC配置文件进行配置，不会拦截SpringMVC放行的资源（jsp\html\css..）</li>
</ul>
</li>
</ul>
<h4 id="8-2-自定义拦截器"><a href="#8-2-自定义拦截器" class="headerlink" title="8.2 自定义拦截器"></a>8.2 自定义拦截器</h4><h6 id="8-2-1-创建拦截器"><a href="#8-2-1-创建拦截器" class="headerlink" title="8.2.1 创建拦截器"></a>8.2.1 创建拦截器</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//预处理方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------预处理&quot;</span>);</span><br><span class="line">        Enumeration&lt;String&gt; keys = request.getParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (keys.hasMoreElements())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keys.nextElement();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;bookId&quot;</span>.equals(key))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        response.setStatus(<span class="number">400</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后处理方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;tips&quot;</span>,<span class="string">&quot;这是通过拦截器的后处理添加的数据&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------后处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="8-2-2-配置拦截器"><a href="#8-2-2-配置拦截器" class="headerlink" title="8.2.2 配置拦截器"></a>8.2.2 配置拦截器</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/book/query&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/book/add&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/student/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/student/add&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.utils.MyInterceptor1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="8-3-拦截器链"><a href="#8-3-拦截器链" class="headerlink" title="8.3 拦截器链"></a>8.3 拦截器链</h4><blockquote>
<p>将多个拦截器按照一定的顺序构成一个执行链</p>
</blockquote>
<p><img src="/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1617334128888.png" alt="1617334128888" loading="lazy"></p>
<h2 id="九、SSM整合"><a href="#九、SSM整合" class="headerlink" title="九、SSM整合"></a>九、SSM整合</h2><h4 id="9-1-创建web项目"><a href="#9-1-创建web项目" class="headerlink" title="9.1 创建web项目"></a>9.1 创建web项目</h4><ul>
<li><p>创建maven工程</p>
</li>
<li><p>修改pom文件 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>完成maven工程web项目结构</p>
</li>
<li><p>添加web项目依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置服务器运行环境</p>
</li>
</ul>
<h4 id="9-2-部署MyBatis"><a href="#9-2-部署MyBatis" class="headerlink" title="9.2 部署MyBatis"></a>9.2 部署MyBatis</h4><ul>
<li><p>添加MyBatis依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mybatis依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建MyBatis配置文件<code>mybatis-config.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-3-部署Spring、SpringMVC"><a href="#9-3-部署Spring、SpringMVC" class="headerlink" title="9.3 部署Spring、SpringMVC"></a>9.3 部署Spring、SpringMVC</h4><h6 id="9-3-1-添加依赖"><a href="#9-3-1-添加依赖" class="headerlink" title="9.3.1 添加依赖"></a>9.3.1 添加依赖</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--context--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--aspects--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jdbc--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--test--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--webmvc--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jackson-databind--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="9-3-2-创建Spring配置"><a href="#9-3-2-创建Spring配置" class="headerlink" title="9.3.2 创建Spring配置"></a>9.3.2 创建Spring配置</h6><ul>
<li><p>多配置文件分开配置</p>
<ul>
<li><p>spring-context.xml    只配置注解声明、以及类的管理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明使用注解配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明Spring工厂注解的扫描范围 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.qfedu&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>spring-mvc.xml   进行mvc相关的配置，例如静态资源配置、拦截器配置等</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明MVC使用注解配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>spring-mybatis.xml  进行Spring与MyBatis整合相关的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h6 id="9-3-3-配置SpringMVC前端控制器"><a href="#9-3-3-配置SpringMVC前端控制器" class="headerlink" title="9.3.3 配置SpringMVC前端控制器"></a>9.3.3 配置SpringMVC前端控制器</h6><ul>
<li>在web.xml进行配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="9-4-整合配置-IoC"><a href="#9-4-整合配置-IoC" class="headerlink" title="9.4 整合配置(IoC)"></a>9.4 整合配置(IoC)</h4><h6 id="9-4-1-导入mybatis-spring依赖"><a href="#9-4-1-导入mybatis-spring依赖" class="headerlink" title="9.4.1 导入mybatis-spring依赖"></a>9.4.1 导入mybatis-spring依赖</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="9-4-2-配置druid连接池"><a href="#9-4-2-配置druid连接池" class="headerlink" title="9.4.2 配置druid连接池"></a>9.4.2 配置druid连接池</h6><ul>
<li><p>添加druid依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建druid.properties,并配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">druid.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">druid.url</span>=<span class="string">jdbc:mysql://localhost:3306/db_2010_mybatis?characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">druid.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">druid.password</span>=<span class="string">admin123</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## 连接池参数</span></span><br><span class="line"><span class="attr">druid.pool.init</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">druid.pool.minIdle</span>=<span class="string">3</span></span><br><span class="line"><span class="attr">druid.pool.maxActive</span>=<span class="string">20</span></span><br><span class="line"><span class="attr">druid.pool.timeout</span>=<span class="string">30000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在spring-mybatis.xml配置数据源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:druid.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.init&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.minIdle&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.maxActive&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxWait&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.timeout&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="9-4-3-配置SqlSessionFactory"><a href="#9-4-3-配置SqlSessionFactory" class="headerlink" title="9.4.3 配置SqlSessionFactory"></a>9.4.3 配置SqlSessionFactory</h6><ul>
<li><p>在spring-mybatis.xml配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mappers/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.qfedu.bean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="9-4-4-配置MapperScannerConfigurer"><a href="#9-4-4-配置MapperScannerConfigurer" class="headerlink" title="9.4.4 配置MapperScannerConfigurer"></a>9.4.4 配置MapperScannerConfigurer</h6><ul>
<li><p>在spring-mybatis.xml配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.qfedu.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-5-整合配置（AOP）"><a href="#9-5-整合配置（AOP）" class="headerlink" title="9.5 整合配置（AOP）"></a>9.5 整合配置（AOP）</h4><blockquote>
<p>使用Spring提供的事务管理完成DAO操作的事务管理</p>
<p>基于注解的事务管理配置：</p>
</blockquote>
<ul>
<li><p>将Spring提供的事务管理切面类配置到Spring容器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-6-整合测试"><a href="#9-6-整合测试" class="headerlink" title="9.6 整合测试"></a>9.6 整合测试</h4><h6 id="9-6-1-完成User的查询操作"><a href="#9-6-1-完成User的查询操作" class="headerlink" title="9.6.1 完成User的查询操作"></a>9.6.1 完成User的查询操作</h6><ul>
<li><p>创建实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userPwd;</span><br><span class="line">    <span class="keyword">private</span> String userRealname;</span><br><span class="line">    <span class="keyword">private</span> String userImg;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在DAO包中创建接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDAO</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserByName</span><span class="params">(String name)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在mappers目录下创建映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qfedu.dao.UserDAO&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userPwd&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_realname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userRealname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_img&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userImg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByName&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        select user_id,user_name,user_pwd,user_realname,user_img</span><br><span class="line">        from users</span><br><span class="line">        where user_name=#&#123;userName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="9-6-2-对DAO单元测试"><a href="#9-6-2-对DAO单元测试" class="headerlink" title="9.6.2 对DAO单元测试"></a>9.6.2 对DAO单元测试</h6><ul>
<li><p>添加junit、spring-test依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&#123;&quot;classpath:spring-context.xml&quot;,&quot;classpath:spring-mvc.xml&quot;,&quot;classpath:spring-mybatis.xml&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDAOTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryUserByName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDAO.queryUserByName(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC常用注解</title>
    <url>/2022/06/16/SpringMVC%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>老忘，记录一下。</p>
<h3 id="1-Controller"><a href="#1-Controller" class="headerlink" title="1.@Controller"></a>1.@Controller</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@Controller</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>类注解</td>
</tr>
<tr>
<td>位置</td>
<td>SpringMVC控制器类定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>设定SpringMVC的核心控制器bean</td>
</tr>
</tbody></table>
<h3 id="2-RequestMapping"><a href="#2-RequestMapping" class="headerlink" title="2.@RequestMapping"></a>2.@RequestMapping</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@RequestMapping</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>类注解或方法注解</td>
</tr>
<tr>
<td>位置</td>
<td>SpringMVC控制器类或方法定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>设置当前控制器方法请求访问路径</td>
</tr>
<tr>
<td>相关属性</td>
<td>value(默认)，请求访问路径</td>
</tr>
</tbody></table>
<h3 id="3-ResponseBody"><a href="#3-ResponseBody" class="headerlink" title="3.@ResponseBody"></a>3.@ResponseBody</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@ResponseBody</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>类注解或方法注解</td>
</tr>
<tr>
<td>位置</td>
<td>SpringMVC控制器类或方法定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>设置当前控制器方法响应内容为当前返回值，无需解析</td>
</tr>
</tbody></table>
<h3 id="4-ComponentScan"><a href="#4-ComponentScan" class="headerlink" title="4.@ComponentScan"></a>4.@ComponentScan</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@ComponentScan</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>类注解</td>
</tr>
<tr>
<td>位置</td>
<td>类定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>设置spring配置类扫描路径，用于加载使用注解格式定义的bean</td>
</tr>
<tr>
<td>相关属性</td>
<td>excludeFilters:排除扫描路径中加载的bean,需要指定类别(type)和具体项(classes)<br/>includeFilters:加载指定的bean，需要指定类别(type)和具体项(classes)</td>
</tr>
</tbody></table>
<h3 id="5-RequestParam"><a href="#5-RequestParam" class="headerlink" title="5.@RequestParam"></a>5.@RequestParam</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@RequestParam</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>形参注解</td>
</tr>
<tr>
<td>位置</td>
<td>SpringMVC控制器方法形参定义前面</td>
</tr>
<tr>
<td>作用</td>
<td>绑定请求参数与处理器方法形参间的关系</td>
</tr>
<tr>
<td>相关参数</td>
<td>required：是否为必传参数 <br/>defaultValue：参数默认值</td>
</tr>
</tbody></table>
<h3 id="6-EnableWebMvc"><a href="#6-EnableWebMvc" class="headerlink" title="6.@EnableWebMvc"></a>6.@EnableWebMvc</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@EnableWebMvc</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>&#x3D;&#x3D;配置类注解&#x3D;&#x3D;</td>
</tr>
<tr>
<td>位置</td>
<td>SpringMVC配置类定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>开启SpringMVC多项辅助功能</td>
</tr>
</tbody></table>
<h3 id="7-RequestBody"><a href="#7-RequestBody" class="headerlink" title="7.@RequestBody"></a>7.@RequestBody</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@RequestBody</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>&#x3D;&#x3D;形参注解&#x3D;&#x3D;</td>
</tr>
<tr>
<td>位置</td>
<td>SpringMVC控制器方法形参定义前面</td>
</tr>
<tr>
<td>作用</td>
<td>将请求中请求体所包含的数据传递给请求参数，此注解一个处理器方法只能使用一次</td>
</tr>
</tbody></table>
<h4 id="RequestBody与-RequestParam区别"><a href="#RequestBody与-RequestParam区别" class="headerlink" title="@RequestBody与@RequestParam区别"></a>@RequestBody与@RequestParam区别</h4><ul>
<li><p>区别</p>
<ul>
<li>@RequestParam用于接收url地址传参，表单传参【application&#x2F;x-www-form-urlencoded】</li>
<li>@RequestBody用于接收json数据【application&#x2F;json】</li>
</ul>
</li>
<li><p>应用</p>
<ul>
<li>后期开发中，发送json格式数据为主，@RequestBody应用较广</li>
<li>如果发送非json格式数据，选用@RequestParam接收请求参数</li>
</ul>
</li>
</ul>
<h3 id="8-RestController"><a href="#8-RestController" class="headerlink" title="8.@RestController"></a>8.@RestController</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@RestController</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>&#x3D;&#x3D;类注解&#x3D;&#x3D;</td>
</tr>
<tr>
<td>位置</td>
<td>基于SpringMVC的RESTful开发控制器类定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>设置当前控制器类为RESTful风格，<br/>等同于@Controller与@ResponseBody两个注解组合功能</td>
</tr>
</tbody></table>
<h3 id="9-GetMapping-PostMapping-PutMapping-DeleteMapping"><a href="#9-GetMapping-PostMapping-PutMapping-DeleteMapping" class="headerlink" title="9.@GetMapping @PostMapping @PutMapping @DeleteMapping"></a>9.@GetMapping @PostMapping @PutMapping @DeleteMapping</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@GetMapping @PostMapping @PutMapping @DeleteMapping</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>&#x3D;&#x3D;方法注解&#x3D;&#x3D;</td>
</tr>
<tr>
<td>位置</td>
<td>基于SpringMVC的RESTful开发控制器方法定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>设置当前控制器方法请求访问路径与请求动作，每种对应一个请求动作，<br/>例如@GetMapping对应GET请求</td>
</tr>
<tr>
<td>相关属性</td>
<td>value（默认）：请求访问路径</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Spring学习笔记</title>
    <url>/2022/04/01/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、Spring"><a href="#一、Spring" class="headerlink" title="一、Spring"></a>一、Spring</h1><h2 id="1-1-Web项目开发中的耦合度的问题"><a href="#1-1-Web项目开发中的耦合度的问题" class="headerlink" title="1.1 Web项目开发中的耦合度的问题"></a>1.1 Web项目开发中的耦合度的问题</h2><ul>
<li>在Servlet中调用service的方法，则需要在Servlet类中通过new关键字来创建Service的实例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductService</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">listProducts</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl1</span> <span class="keyword">implements</span> <span class="title class_">ProductService</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">listProducts</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//查询热销商品</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl2</span> <span class="keyword">implements</span> <span class="title class_">ProductService</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">listProducts</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//查询好评商品</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductListServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在servlet中使用new关键字创建ProductServiceImpl1对象，增加了servlet和service的耦合度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ProductService</span> <span class="variable">productService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductServiceImpl1</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span>&#123;</span><br><span class="line">        doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span>&#123;</span><br><span class="line">        productService.listProducts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在service实现类中需要调用DAO中的方法，也需要在servcie实现类通过new关键字创建DAO实现类对象</li>
<li>如果使用new关键字创建对象：<ul>
<li>失去了面向接口编程的灵活性</li>
<li>代码的侵入性增强（<strong>增加了耦合度</strong>）、降低了代码的灵活性</li>
<li>增强项目的扩展性</li>
</ul>
</li>
</ul>
<h2 id="1-2-面向接口编程"><a href="#1-2-面向接口编程" class="headerlink" title="1.2 面向接口编程"></a>1.2 面向接口编程</h2><table>
<thead>
<tr>
<th>面向接口编程</th>
</tr>
</thead>
<tbody><tr>
<td></td>
</tr>
</tbody></table>
<p><code>解决方案</code>：在Servlet中定义Service接口的对象变量，不使用new关键字创建实现类对象，在servlet的实例化的时候，通过反射动态的给Service对象变量赋值。</p>
<p><code>如何实现</code>：Spring可以做到！！！</p>
<h2 id="1-3-Spring简介"><a href="#1-3-Spring简介" class="headerlink" title="1.3 Spring简介"></a>1.3 Spring简介</h2><blockquote>
<p>Spring是一个<code>轻量级的控制反转和面向切面的容器</code>框架，用来解决企业项目开发的复杂度问题—解耦</p>
</blockquote>
<ul>
<li>轻量级：体积小，对代码没有侵入性</li>
<li>控制反转：IoC（Inverse of Control）,把创建对象的工作交由Spring完成，Spring在创建对象的时候同时可以完成对象属性赋值（DI）</li>
<li>面向切面：AOP（Aspect Oriented Programming）面向切面编程，可以在不改变原有业务逻辑的情况下实现对业务的增强</li>
<li>容器：实例的容器，管理创建的对象</li>
</ul>
<h2 id="1-4-Spring架构"><a href="#1-4-Spring架构" class="headerlink" title="1.4 Spring架构"></a>1.4 Spring架构</h2><ul>
<li><p>官网 <a href="https://spring.io/">https://spring.io/</a></p>

</li>
<li><p>Spring架构图</p>
<ul>
<li>Spring Framework是Spring生态圈最基础的项目，是其他项目的基础</li>
</ul>
</li>
</ul>
<h6 id="1-Core-Container"><a href="#1-Core-Container" class="headerlink" title="1. Core Container"></a>1. Core Container</h6><blockquote>
<p>Spring核心容器组件，用于完成实例的创建和管理</p>
<ul>
<li>core</li>
<li>beans   实例管理</li>
<li>context 容器上下文</li>
</ul>
</blockquote>
<h6 id="2-AOP、Aspects"><a href="#2-AOP、Aspects" class="headerlink" title="2. AOP、Aspects"></a>2. AOP、Aspects</h6><blockquote>
<p>Spring AOP组件，实现面向切面编程</p>
<ul>
<li>aop</li>
<li>aspects</li>
</ul>
</blockquote>
<h6 id="3-web"><a href="#3-web" class="headerlink" title="3. web"></a>3. web</h6><blockquote>
<p>Spring web组件实际指的是SpringMVC框架，实现web项目的MVC控制</p>
<ul>
<li>web (Spring对web项目的支持)</li>
<li>webmvc (SpringMVC组件)</li>
</ul>
</blockquote>
<h6 id="4-Data-Access"><a href="#4-Data-Access" class="headerlink" title="4. Data Access"></a>4. Data Access</h6><blockquote>
<p>Spring数据访问组件，也是一个基于JDBC封装的持久层框架（即使没有mybatis，Spring也可以完成持久化操作）</p>
<ul>
<li>Data Access：数据访问</li>
<li>Data Integeration：数据集成</li>
</ul>
</blockquote>
<h6 id="5-Test"><a href="#5-Test" class="headerlink" title="5. Test"></a>5. Test</h6><blockquote>
<p>Spring的单元测试组件，提供了Spring环境下的单元测试支持</p>
<ul>
<li>test</li>
</ul>
</blockquote>
<h2 id="1-5-Spring-Framework学习路线"><a href="#1-5-Spring-Framework学习路线" class="headerlink" title="1.5 Spring Framework学习路线"></a>1.5 Spring Framework学习路线</h2><ol>
<li>核心容器<ol>
<li>核心概念（IOC、DI）</li>
<li>容器基本操作</li>
</ol>
</li>
<li>整合<ol>
<li>整合MyBatis</li>
</ol>
</li>
<li>AOP<ol>
<li>核心概念</li>
<li>AOP基础操作</li>
<li>AOP使用开发</li>
</ol>
</li>
<li>事务<ol>
<li>事务实用开发</li>
</ol>
</li>
<li>家族<ol>
<li>SpringMVC</li>
<li>SpringBoot</li>
<li>SpringCloud</li>
</ol>
</li>
</ol>
<h1 id="二、Spring-IoC-—-基于XML"><a href="#二、Spring-IoC-—-基于XML" class="headerlink" title="二、Spring IoC — 基于XML"></a>二、Spring IoC — 基于XML</h1><h2 id="2-1-Spring框架部署（Ioc）"><a href="#2-1-Spring框架部署（Ioc）" class="headerlink" title="2.1 Spring框架部署（Ioc）"></a>2.1 Spring框架部署（Ioc）</h2><blockquote>
<p>SpringIoC容器组件，可以完成对象的创建、对象属性的赋值、对象管理</p>
</blockquote>
<h3 id="1-创建Maven工程"><a href="#1-创建Maven工程" class="headerlink" title="1.创建Maven工程"></a>1.创建Maven工程</h3><ul>
<li>Java</li>
<li>Web</li>
</ul>
<h3 id="2-添加SpringIoC依赖"><a href="#2-添加SpringIoC依赖" class="headerlink" title="2. 添加SpringIoC依赖"></a>2. 添加SpringIoC依赖</h3><ul>
<li>core</li>
<li>beans</li>
<li>aop</li>
<li>context</li>
<li>expression</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-beans --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-创建Spring配置文件"><a href="#3-创建Spring配置文件" class="headerlink" title="3. 创建Spring配置文件"></a>3. 创建Spring配置文件</h3><blockquote>
<p>通过配置文件“告诉”Spring容器创建什么对象，给对象属性赋什么值</p>
</blockquote>
<ul>
<li>在resources目录下创建名为<code>applicationContext.xml</code>的文件（文件名可以自定义，但是约定俗成通用使用这个）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  对于一个xml文件如果作为框架的配置文件，需要遵守框架的配置规则  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  通常一个框架为了让开发者能够正确的配置，都会提供xml的规范文件（dtd\xsd）  --&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-1-如何定制配置文件模板"><a href="#3-1-如何定制配置文件模板" class="headerlink" title="3.1 如何定制配置文件模板"></a>3.1 如何定制配置文件模板</h4>



<h2 id="2-2-SpringIOC使用"><a href="#2-2-SpringIOC使用" class="headerlink" title="2.2 SpringIOC使用"></a>2.2 SpringIOC使用</h2><blockquote>
<p>使用SpringIOC组件创建并管理对象</p>
</blockquote>
<h3 id="1-创建一个实体类"><a href="#1-创建一个实体类" class="headerlink" title="1.创建一个实体类"></a>1.创建一个实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String stuNum;</span><br><span class="line">    <span class="keyword">private</span> String stuName;</span><br><span class="line">    <span class="keyword">private</span> String stuGender;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> stuAge;</span><br><span class="line">    <span class="keyword">private</span> Date enterenceTime;<span class="comment">//入学日期</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStuNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stuNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStuNum</span><span class="params">(String stuNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stuNum = stuNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStuName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stuName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStuName</span><span class="params">(String stuName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stuName = stuName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;stuNum=&#x27;&quot;</span> + stuNum + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, stuName=&#x27;&quot;</span> + stuName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, stuGender=&#x27;&quot;</span> + stuGender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, stuAge=&quot;</span> + stuAge +</span><br><span class="line">                <span class="string">&quot;, enterenceTime=&quot;</span> + enterenceTime +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStuGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stuGender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStuGender</span><span class="params">(String stuGender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stuGender = stuGender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStuAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stuAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStuAge</span><span class="params">(<span class="type">int</span> stuAge)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stuAge = stuAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getEnterenceTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> enterenceTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnterenceTime</span><span class="params">(Date enterenceTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.enterenceTime = enterenceTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-在Spring配置文件中配置实体类"><a href="#2-在Spring配置文件中配置实体类" class="headerlink" title="2.在Spring配置文件中配置实体类"></a>2.在Spring配置文件中配置实体类</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--通过bean标签将实体类配置给Spring进行管理,id表示实体类的唯一标识--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10002&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;水中月&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuGender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuAge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-初始化Spring对象工厂，获取对象"><a href="#3-初始化Spring对象工厂，获取对象" class="headerlink" title="3.初始化Spring对象工厂，获取对象"></a>3.初始化Spring对象工厂，获取对象</h3><ul>
<li>ClassPathXMLApplicationContext</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过Spring容器创建对象</span></span><br><span class="line"><span class="comment">//1.初始化Spring容器,加载Spring配置文件，可以把context理解为Spring容器</span></span><br><span class="line"><span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">//2.通过Spring容器获取Student对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> (Student) context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(student2);</span><br></pre></td></tr></table></figure>

<h2 id="2-3-IoC和DI"><a href="#2-3-IoC和DI" class="headerlink" title="2.3 IoC和DI"></a>2.3 IoC和DI</h2><ul>
<li>IoC（Inverse of Control）控制反转，通过Spring对象工厂完成对象的创建</li>
<li>DI（Dependency Injection）依赖注入，在Spring完成对象创建的统一依赖Spring容器完成对对象属性的赋值</li>
</ul>
<h3 id="1-IoC"><a href="#1-IoC" class="headerlink" title="1. IoC"></a>1. IoC</h3><blockquote>
<p>当我们需要通过Spring对象工厂创建某个类的对象的时候，需要将这个对象交给Spring管理–通过bean标签配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过bean将实体类配置给Spring进行管理,id表示实体类的唯一表示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-DI"><a href="#2-DI" class="headerlink" title="2. DI"></a>2. DI</h3><blockquote>
<p>通过Spring容器给对象的属性进行赋值</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过bean标签将实体类配置给Spring进行管理,id表示实体类的唯一标识--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10002&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;水中月&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuGender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuAge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enterenceTime&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-4-DI依赖注入"><a href="#2-4-DI依赖注入" class="headerlink" title="2.4 DI依赖注入"></a>2.4 DI依赖注入</h2><h3 id="1-依赖注入的三种方式"><a href="#1-依赖注入的三种方式" class="headerlink" title="1.依赖注入的三种方式"></a>1.依赖注入的三种方式</h3><blockquote>
<p>Spring容器加载配置文件之后通过<code>反射</code>创建类的对象，并给属性赋值；</p>
<p>Spring容器通过反射实现属性注入有三种方式：</p>
<ul>
<li>set方法助注入</li>
<li>构造器注入</li>
<li>接口注入(不常用)</li>
</ul>
</blockquote>
<h3 id="2-set方法注入"><a href="#2-set方法注入" class="headerlink" title="2. set方法注入"></a>2. set方法注入</h3><blockquote>
<p>在bean标签中通过配置property标签给对象属性赋值，实际上就是通过反射调用set方法完成属性的注入</p>
</blockquote>
<p><strong>简单类型及字符串</strong></p>
<ul>
<li>直接通过property标签的value属性赋值</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过bean标签将实体类配置给Spring进行管理,id表示实体类的唯一标识--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--字符串类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10007&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--简单类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuAge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wight&quot;</span> <span class="attr">value</span>=<span class="string">&quot;74.56&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>日期类型</strong></p>
<ul>
<li>方式1：在<code>property</code>标签中通过<code>ref</code>引用Spring容器中的对象</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过bean标签将实体类配置给Spring进行管理,id表示实体类的唯一标识--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日期类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enterenceTime&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;year&quot;</span> <span class="attr">value</span>=<span class="string">&quot;121&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;month&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>方式2：在<code>property</code>标签中添加字标签<code>bean</code>来指定对象</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日期类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enterenceTime&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>自定义类对象属性</strong></p>
<ul>
<li>方式1：在<code>property</code>标签中通过<code>ref</code>引用Spring容器中的对象</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自定义类对象类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cla&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cla&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2020&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;className&quot;</span> <span class="attr">value</span>=<span class="string">&quot;计算机技术一班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>方式2：在<code>property</code>标签中添加字标签<code>bean</code>来指定对象</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自定义类对象类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cla&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2020&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;className&quot;</span> <span class="attr">value</span>=<span class="string">&quot;计算机技术一班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>集合类型</strong></p>
<ul>
<li><p>List</p>
<ul>
<li>List<String> List中的元素是字符串类型或者简单类型的封装类时</li>
<li>采用如下两种写法</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--写法1--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;旅游,电影,游泳&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--写法2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>旅游<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>打游戏<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>List<Object>List中的元素是对象类型时</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--写法1 bean标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--写法2 引用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>Set</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sets&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--和List元素注入方式相同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Map</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>key1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>key2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Properties：properties继承自<code>Hashtable类</code>可以直接给键值对，因为properties里面的键<strong>值对只能是字符串类型</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k1&quot;</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k2&quot;</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-构造器注入"><a href="#3-构造器注入" class="headerlink" title="3.构造器注入"></a>3.构造器注入</h3><p><strong>简单类型、字符串、Object类型</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;stuNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10008&quot;</span>/&gt;</span>  <span class="comment">&lt;!--字符串类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;stuGender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;焰灵姬&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;stuAge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span>           <span class="comment">&lt;!--简单类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;wight&quot;</span> <span class="attr">value</span>=<span class="string">&quot;46.53&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;enterenceTime&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;date&quot;</span>/&gt;</span>           <span class="comment">&lt;!--对象类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span>&gt;</span>                       <span class="comment">&lt;!--对象类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>集合类型属性</strong></p>
<p>类代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; sets;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(List&lt;String&gt; hobbies, Set&lt;String&gt; sets, Map&lt;String, Object&gt; maps, Properties properties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hobbies = hobbies;</span><br><span class="line">        <span class="built_in">this</span>.sets = sets;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">        <span class="built_in">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>11<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>22<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>33<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>cc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>key1<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>value1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>key2<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>value2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k1&quot;</span>&gt;</span>v1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k2&quot;</span>&gt;</span>v2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-5-Bean的作用域"><a href="#2-5-Bean的作用域" class="headerlink" title="2.5 Bean的作用域"></a>2.5 Bean的作用域</h2><blockquote>
<p>在bean标签可以通过scope属性指定对象的的作用域</p>
<ul>
<li>scope&#x3D;”singleton”  表示当前bean是单例模式（默认饿汉模式，Spring容器初始化阶段就会完成此对象的创建；当在bean标签中设置 lazy-init&#x3D;”true”变为懒汉模式）</li>
<li>scope&#x3D;”prototype” 表示当前bean为非单例模式，每次通过Spring容器获取此bean的对象时都会创建一个新的对象</li>
</ul>
</blockquote>
<ul>
<li>单例</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>多例</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-6-Bean的生命周期方法"><a href="#2-6-Bean的生命周期方法" class="headerlink" title="2.6 Bean的生命周期方法"></a>2.6 Bean的生命周期方法</h2><ul>
<li>Bean类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bookId;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//初始化方法：在创建当前类对象时调用的方法，进行一些资源准备工作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Init.....&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.bookId = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">this</span>.bookName = <span class="string">&quot;初始值：三国演义&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//销毁方法：在Spring容器销毁对象时调用此方法，进行一些资源回收性的工作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Spring配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在bean标签中通过init-method属性指定当前bean的初始化方法，初始化方法在构造器执行之后执行--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在bean标签中通过destory-method属性指定当前bean的销毁方法，销毁方法在对象销毁之前执行--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-7-自动装配"><a href="#2-7-自动装配" class="headerlink" title="2.7 自动装配"></a>2.7 自动装配</h2><blockquote>
<p>自动装配：Spring在实例化当前bean的时候从Spring容器中找到匹配的实例赋值给当前bean的属性</p>
<p>自动装配策略有两种：</p>
<ul>
<li>byName  根据当前Bean的属性名在Spring容器中寻找匹配的对象 ，如果根据name找打了bean但是类型不匹配则抛出异常</li>
<li>byType  根据当前Bean的属性类型在Spring容器中寻找匹配的对象，如果根据类型找到了多个bean也会抛出异常</li>
</ul>
</blockquote>
<ul>
<li>byName</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--byName   根据当前bean的属性名在Spring容器中寻找匹配的对象，如果根据name找到了bean但是类型不匹配则会抛出异常--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>byType</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--byName   根据当前bean的属性名在Spring容器中寻找匹配的对象，如果根据name找到了bean但是类型不匹配则会抛出异常--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazz2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-8-SpringIoC工作原理"><a href="#2-8-SpringIoC工作原理" class="headerlink" title="2.8 SpringIoC工作原理"></a>2.8 SpringIoC工作原理</h2><p><img src="/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220415090803104.png" alt="image-20220415090803104" loading="lazy"></p>
<h1 id="三、Spring-IoC-基于注解"><a href="#三、Spring-IoC-基于注解" class="headerlink" title="三、Spring IoC-基于注解"></a>三、Spring IoC-基于注解</h1><blockquote>
<p>SpringIoC的使用，需要通过xml将类声明给Spring容器进行管理，进而通过Spring工厂完成对象的创建以及属性值的注入；</p>
<p>Spring除了提供基于xml的配置方式，同时还提供了注解的配置：直接在实体类中添加注解声明给Spring容器管理，以简化开发步骤。</p>
</blockquote>
<h2 id="3-1-Spring-框架部署"><a href="#3-1-Spring-框架部署" class="headerlink" title="3.1 Spring 框架部署"></a>3.1 Spring 框架部署</h2><h3 id="1-创建Maven项目"><a href="#1-创建Maven项目" class="headerlink" title="1.创建Maven项目"></a>1.创建Maven项目</h3><p>略</p>
<h3 id="2-添加SpringIoC依赖-1"><a href="#2-添加SpringIoC依赖-1" class="headerlink" title="2.添加SpringIoC依赖"></a>2.添加SpringIoC依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-创建Spring配置文件-1"><a href="#3-创建Spring配置文件-1" class="headerlink" title="3.创建Spring配置文件"></a>3.创建Spring配置文件</h3><ul>
<li>Spring容器初始化时，只会加载applicationContext.xml文件，在实体类中添加的注解不会被Spring扫描，所以需要在<code>applicationContext.xml声明Spring的扫描范围</code>，以达到Spring初始化扫描带有注解的实体类并完成初始化工作。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  对于一个xml文件如果作为框架的配置文件，需要遵守框架的配置规则  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  通常一个框架为了让开发者能够正确的配置，都会提供xml的规范文件（dtd\xsd）  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明使用注解配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明Spring工厂注解的扫描范围--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.qfedu.beans&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-2-SpringIoC常用注解"><a href="#3-2-SpringIoC常用注解" class="headerlink" title="3.2 SpringIoC常用注解"></a>3.2 SpringIoC常用注解</h2><h3 id="1-Component"><a href="#1-Component" class="headerlink" title="1. @Component"></a>1. <code>@Component</code></h3><ul>
<li>类注解，声明此实体类被Spring容器进行管理，相当于bean标签的作用</li>
<li><code>@Component(value = &quot;stu&quot;)</code>:value属性用于指定当前bean的id，相当于bean标签的id属性；value属性可以忽略不写，如果省略则当前bean的id默认为类名的首字母小写</li>
<li>除了<code>@Component</code>之外，<code>@Service</code>、<code>@Controller</code>、<code>@Repository</code>这三个注解也可以将类声明给Spring管理，但是有语义上的区别:<ul>
<li><code>@Controller</code> 注解主要声明将控制器类配置给Spring管理，例如Servlet</li>
<li><code>@Service</code> 注解主要声明业务处理类配置Spring管理，Service接口的实现类</li>
<li><code>@Repository</code> 直接主要声明持久化类配置给Spring管理，DAO接口</li>
<li><code>@Component</code> 除了控制器、servcie和DAO之外的类一律使用此注解声明</li>
</ul>
</li>
</ul>
<h3 id="2-Scope"><a href="#2-Scope" class="headerlink" title="2. @Scope"></a>2. <code>@Scope</code></h3><ul>
<li>类注解，用于声明当前类单例模式还是 非单例模式，相当于bean标签的scope属性</li>
<li>@Scope(“prototype”) 表示声明当前类为非单例模式（默认单例模式）</li>
</ul>
<h3 id="3-Lazy"><a href="#3-Lazy" class="headerlink" title="3. @Lazy"></a>3. <code>@Lazy</code></h3><ul>
<li>类注解，用于声明一个单例模式的Bean是否为懒汉模式</li>
<li>@Lazy(true) 表示声明为懒汉模式，默认为饿汉模式</li>
</ul>
<h3 id="4-PostConstruct"><a href="#4-PostConstruct" class="headerlink" title="4. @PostConstruct"></a>4. <code>@PostConstruct</code></h3><ul>
<li>方法注解，声明一个方法为当前类的初始化方法（在构造器之后执行），相当于bean标签的init-method属性</li>
</ul>
<h3 id="5-PreDestroy"><a href="#5-PreDestroy" class="headerlink" title="5. @PreDestroy"></a>5. <code>@PreDestroy</code></h3><ul>
<li>方法注解，声明一个方法为当前类的销毁方法（在对象从容器中释放之前执行），相当于bean标签的destory-method属性</li>
</ul>
<h3 id="6-Autowired"><a href="#6-Autowired" class="headerlink" title="6. @Autowired"></a>6. <code>@Autowired</code></h3><ul>
<li><p>属性注解、方法注解(set方法)，声明当前属性为自动装配，默认是byType</p>
</li>
<li><p><code>@Autowired(required = false)</code>通过<code>required</code>属性来设置当前自动装配是否是必须的（默认为必须–如果在Spring容器中没有找到与属性类型相匹配的bean会抛出异常），自动装配的两种方式：</p>
<ul>
<li>byType</li>
<li>ref引用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClazz</span><span class="params">(<span class="meta">@Qualifier(&quot;c1&quot;)</span> Clazz clazz)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-Resource"><a href="#7-Resource" class="headerlink" title="7.@Resource"></a>7.<code>@Resource</code></h3><ul>
<li>属性注解，也用于声明属性自动装配</li>
<li>默认装配方式为byName，如果根据byName没有找到对应的bean，则继续根据byType继续寻找对应的bean，根据byType也没有找到对应的bean或者找到了不止一个类型匹配的bean，则抛出异常。</li>
</ul>
<h1 id="四、代理设计模式"><a href="#四、代理设计模式" class="headerlink" title="四、代理设计模式"></a>四、代理设计模式</h1><h2 id="4-1-生活中的代理"><a href="#4-1-生活中的代理" class="headerlink" title="4.1 生活中的代理"></a>4.1 生活中的代理</h2><p><img src="/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1616999162162.png" alt="1616999162162" loading="lazy"></p>
<p>代理设计模式的优点：将通用性的工作都交给代理对象完成，被代理对象只需专注自己的核心业务。</p>
<h2 id="4-2-静态代理"><a href="#4-2-静态代理" class="headerlink" title="4.2 静态代理"></a>4.2 静态代理</h2><blockquote>
<p>静态代理，代理类只能够为特定的类生产代理对象，不能代理任意类</p>
</blockquote>
<p><img src="/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1617001027208.png" alt="1617001027208" loading="lazy"></p>
<p><strong>使用代理的好处：</strong></p>
<ol>
<li>被代理类中只需要关注核心业务的实现，将通用的管理型逻辑（事务处理、日志管理等操作）和业务逻辑分离</li>
<li>将通用的代码放在代理类中实现，提供了代码的复用性</li>
<li>通过在代理类中添加代码业务逻辑，实现对原有业务逻辑的扩展增强</li>
</ol>
<h2 id="4-3-动态代理"><a href="#4-3-动态代理" class="headerlink" title="4.3 动态代理"></a>4.3 动态代理</h2><blockquote>
<p>动态代理，几乎可以为所有的类产生代理对象</p>
<p>实现方式有两种：</p>
<ul>
<li>JDK动态代理</li>
<li>CGLib动态代理</li>
</ul>
</blockquote>
<h3 id="1-JDK动态代理"><a href="#1-JDK动态代理" class="headerlink" title="1. JDK动态代理"></a>1. JDK动态代理</h3><ul>
<li>JDK动态代理类实现:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-18 8:53</span></span><br><span class="line"><span class="comment"> * JDk动态代理:使用过被代理对象实现的接口产生其代理对象的</span></span><br><span class="line"><span class="comment"> * 只能为实现了接口的类产生代理对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      1.创建一个类，实现InvocationHandler接口，重写invoke方法</span></span><br><span class="line"><span class="comment"> *      2.在类中定义一个Object类型的变量，并提供这个变量的有参构造器，用于将被代理对象传递进来</span></span><br><span class="line"><span class="comment"> *      3.定义getProxy方法，用于创建并返回代理对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDKDynamicProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理对象</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过构造器传入被代理对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JDKDynamicProxy</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//产生并返回代理对象</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取被代理对象的类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> obj.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//2.获取被代理对象的类实现的接口</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = obj.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">//3.产生代理对象(通过被代理对象的类加载器及实现的接口)</span></span><br><span class="line">        <span class="comment">//第一个参数：被代理对象的类加载器</span></span><br><span class="line">        <span class="comment">//第二个参数：被代理对象实现的接口</span></span><br><span class="line">        <span class="comment">//第三个参数：使用产生的代理对象，调用方法时，用于拦截方法执行的拦截器</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> Proxy.newProxyInstance(classLoader, interfaces, <span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        begin();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">returnVal</span> <span class="operator">=</span> method.invoke(obj,args);<span class="comment">//执行method方法(insert)</span></span><br><span class="line">        commit();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> returnVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======开启事务=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======提交事务=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDynamicProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建被代理对象</span></span><br><span class="line">        <span class="type">BookDAOImpl</span> <span class="variable">bookDAO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookDAOImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建动态代理对象，并将被代理对象传递到代理类中,赋值给obj</span></span><br><span class="line">        <span class="type">JDKDynamicProxy</span> <span class="variable">jdkDynamicProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JDKDynamicProxy</span>(bookDAO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//proxy就是产生的代理对象,产生的代理对象可以强制转换成被代理对象实现的接口类型</span></span><br><span class="line">        <span class="type">GenaralDao</span> <span class="variable">proxy</span> <span class="operator">=</span> (GenaralDao) jdkDynamicProxy.getProxy();</span><br><span class="line">        <span class="comment">//使用代理对象调用方法，并不会执行调用的方法，而是进入到创建代理对象时指定InvocationHandler类中的invoke方法</span></span><br><span class="line">        <span class="comment">//调用的方法作为一个参数，传递给了invoke方法</span></span><br><span class="line">        proxy.delete();</span><br><span class="line"><span class="comment">//        bookDAO.delete();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-CGLib动态代理"><a href="#2-CGLib动态代理" class="headerlink" title="2. CGLib动态代理"></a>2. CGLib动态代理</h3><blockquote>
<p>由于JDK动态代理是通过被代理类实现的接口来创建代理对象的，因此JDK动态代理只能代理实现了接口的类的对象。如果一个类没有实现任何接口，该如何产生代理对象呢？</p>
<p>CGLib动态代理，是通过创建被代理类的子类来创建代理对象的，因此即使没有实现任何接口的类也可以通过CGLib产生代理对象</p>
<p><code>注：</code>CGLib动态代理不能为final类创建代理对象，因为被final关键字修饰的类不能被继承</p>
</blockquote>
<ul>
<li>添加CGlib的依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>CGLib动态代理类实现：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-18 9:51</span></span><br><span class="line"><span class="comment"> * 1.添加CGLib依赖</span></span><br><span class="line"><span class="comment"> * 2.创建一个类，实现MethodInterceptor，同时实现接口中的intercept方法</span></span><br><span class="line"><span class="comment"> * 3.在类中定义一个Object类型的变量，并提供这个变量的you参构造器，用于传递被代理对象</span></span><br><span class="line"><span class="comment"> * 4.定义getProxy方法创建并返回代理对象（代理对象是通过创建被代理类的子类来创建的）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CGLibDynamicProxy</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CGLibDynamicProxy</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        enhancer.setSuperclass(obj.getClass());</span><br><span class="line">        enhancer.setCallback(<span class="built_in">this</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> enhancer.create();</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        begin();</span><br><span class="line">        <span class="comment">//通过反射调用被代理类中的方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">returnVal</span> <span class="operator">=</span> method.invoke(obj,objects);</span><br><span class="line">        commit();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> returnVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======开启事务=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======提交事务=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDynamicProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建被代理对象</span></span><br><span class="line">        <span class="type">BookDAOImpl</span> <span class="variable">bookDAO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookDAOImpl</span>();</span><br><span class="line">		<span class="comment">//2.通过CGLib动态代理类创建代理对象</span></span><br><span class="line">        <span class="type">CGLibDynamicProxy</span> <span class="variable">cgLibDynamicProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CGLibDynamicProxy</span>(bookDAO);</span><br><span class="line">        <span class="comment">//3.代理对象实际上是被代理对象的子类，因此代理对象可以强转为被代理类类型</span></span><br><span class="line">        <span class="type">BookDAOImpl</span> <span class="variable">proxy</span> <span class="operator">=</span> (BookDAOImpl) cgLibDynamicProxy.getProxy();</span><br><span class="line">        <span class="comment">//4.使用代理对象调用方法，实际上并没有执行这个方法，而是执行了代理类中的intercept方法，将当前调用的方法以及方法中的</span></span><br><span class="line">        <span class="comment">//参数传递到intercept方法中</span></span><br><span class="line">        proxy.update();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、-Spring-AOP"><a href="#五、-Spring-AOP" class="headerlink" title="五、 Spring AOP"></a>五、 Spring AOP</h1><h2 id="5-1-AOP概念"><a href="#5-1-AOP概念" class="headerlink" title="5.1 AOP概念"></a>5.1 AOP概念</h2><blockquote>
<p>Aspect Oriented Programming ，面向切面编程，是一种利用”横切”的技术（底层实现就是动态代理），对原有的业务逻辑进行拦截，并且可以在这个拦截的横切面上添加特定的业务逻辑，对原有的业务进行增强。</p>
<p>基于动态代理的实现可以在不改变原有业务的情况下对业务进行增强。</p>
</blockquote>
<p><img src="/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220415184022329.png" alt="image-20220415184022329" loading="lazy"></p>
<h2 id="5-2-Spring-AOP框架部署"><a href="#5-2-Spring-AOP框架部署" class="headerlink" title="5.2 Spring AOP框架部署"></a>5.2 Spring AOP框架部署</h2><h3 id="1-创建Maven项目-1"><a href="#1-创建Maven项目-1" class="headerlink" title="1. 创建Maven项目"></a>1. 创建Maven项目</h3><p>略</p>
<h3 id="2-添加依赖"><a href="#2-添加依赖" class="headerlink" title="2. 添加依赖"></a>2. 添加依赖</h3><ul>
<li>context</li>
<li>aspect</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-创建Spring配置文件-2"><a href="#3-创建Spring配置文件-2" class="headerlink" title="3.创建Spring配置文件"></a>3.创建Spring配置文件</h3><ul>
<li>引入aop的命名空间</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-3-AOP配置-语句XML"><a href="#5-3-AOP配置-语句XML" class="headerlink" title="5.3 AOP配置- 语句XML"></a>5.3 AOP配置- 语句XML</h2><blockquote>
<p>给DAO的方法添加开启事务和提交事务的逻辑</p>
</blockquote>
<h3 id="1-创建一个类，定义要添加的业务逻辑"><a href="#1-创建一个类，定义要添加的业务逻辑" class="headerlink" title="1.创建一个类，定义要添加的业务逻辑"></a>1.创建一个类，定义要添加的业务逻辑</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxManager</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开启事务&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;提交事务&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-配置AOP"><a href="#2-配置AOP" class="headerlink" title="2. 配置AOP"></a>2. 配置AOP</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  对于一个xml文件如果作为框架的配置文件，需要遵守框架的配置规则  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  通常一个框架为了让开发者能够正确的配置，都会提供xml的规范文件（dtd\xsd）  --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDAO&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.dao.BookDAOImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;txManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.dao.utils.TxManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--声明切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book_all&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.qfedu.dao.BookDAOImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--声明txManager为切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;txManager&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--增强--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;begin&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_all&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;commit&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_all&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>AOP开发步骤：</code></p>
<ol>
<li>创建切面类，在切面类定义切点方法</li>
<li>将切面类配置给Spring容器</li>
<li>声明切入点</li>
<li>配置AOP的通知策略</li>
</ol>
<h2 id="5-4-切入点的声明"><a href="#5-4-切入点的声明" class="headerlink" title="5.4 切入点的声明"></a>5.4 切入点的声明</h2><h3 id="1-各种切入点声明方式"><a href="#1-各种切入点声明方式" class="headerlink" title="1. 各种切入点声明方式"></a>1. 各种切入点声明方式</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用aop：pointcut标签声明切入点：切入点可以是一个方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book_insert&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.qfedu.dao.BookDAOImpl.insert())&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--BookDAOImpl类中所有无参数无返回值的方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book_pc1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(void com..qfedu.dao.BookDAOImpl.*())&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--BookDAOImpl类中所有无返回值的方法，对参数有没有没有限制--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book_pc2&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(void com..qfedu.dao.BookDAOImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--BookDAOImpl类中所有无参数的方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book_pc3&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com..qfedu.dao.BookDAOImpl.*())&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--BookDAOImpl类中所有的方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book_pc4&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com..qfedu.dao.BookDAOImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--dao包中所有类中所有的方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc5&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com..qfedu.dao.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--dao包中所有类中所有的方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc6&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com..qfedu.dao.*.insert(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--所有包下的所有类的所有方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc7&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* *(..))&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-AOP使用注意事项"><a href="#2-AOP使用注意事项" class="headerlink" title="2. AOP使用注意事项"></a>2. AOP使用注意事项</h3><ul>
<li>如果使用Spring AOP面向切面编程，调用切入点方法的对象必须通过Spring容器获取</li>
<li>如果一个类中的方法被声明为切入点并且织入了切点之后，通过Spring容器获取到的该类对象其实获取到的是一个该类的代理对象</li>
<li>如果一个类中的方法没有声明为切入点，通过Spring容器获取的就是这个类真实创建的对象</li>
</ul>
<h2 id="5-5-AOP通知策略"><a href="#5-5-AOP通知策略" class="headerlink" title="5.5 AOP通知策略"></a>5.5 AOP通知策略</h2><blockquote>
<p>AOP通知策略：就是声明将切面类中的切点方法如何织入到切入点</p>
<ul>
<li>before</li>
<li>after-returning</li>
<li>after-throwing</li>
<li>around</li>
<li>after</li>
</ul>
</blockquote>
<h3 id="1-定义切面类"><a href="#1-定义切面类" class="headerlink" title="1.定义切面类"></a>1.定义切面类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.dao.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-19 9:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知的切点方法，必须准守如下的定义规则：</span></span><br><span class="line">    <span class="comment">//1.必须带有一个ProceedingJoinPoint类型的参数</span></span><br><span class="line">    <span class="comment">//2.必须有Object类型的返回值</span></span><br><span class="line">    <span class="comment">//3.在前后增强的业务逻辑之间执行Object v = point.proceed();</span></span><br><span class="line">    <span class="comment">//4.方法最后返回v</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">method5</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method5-before&quot;</span>);</span><br><span class="line">        <span class="comment">//此代码的执行，就表示切入点方法的执行</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">v</span> <span class="operator">=</span> point.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;method5-after&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-配置切面类"><a href="#2-配置切面类" class="headerlink" title="2. 配置切面类"></a>2. 配置切面类</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aop:before  用于配置前置通知，切入到指定切入点之前执行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;method1&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_insert&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--aop:after-throwing  用于配置异常通知，切入点方法抛出异常后执行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;method3&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_insert&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--aop:after-returning 用于配置后置通知，切入到指定切入点之后执行。</span></span><br><span class="line"><span class="comment">    对于一个Java方法而言，return返回值也是方法的一部分</span></span><br><span class="line"><span class="comment">    因此“方法返回值返回之后”和“方法执行结束”是同一个时间点，所以after和after-returning是根据</span></span><br><span class="line"><span class="comment">    配置的顺序决定执行顺序--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;method4&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_insert&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--环绕通知  用于配置环绕通知。指定增强的方法在切入点方法之前和之后都执行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;method5&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_insert&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--aop:after  用于配置最终通知。无论增强方式时候执行是否有异常都会执行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;method2&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_insert&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="六、Spring-AOP注解配置"><a href="#六、Spring-AOP注解配置" class="headerlink" title="六、Spring AOP注解配置"></a>六、Spring AOP注解配置</h1><h2 id="6-1-Spring-AOP注解配置框架部署"><a href="#6-1-Spring-AOP注解配置框架部署" class="headerlink" title="6.1 Spring AOP注解配置框架部署"></a>6.1 Spring AOP注解配置框架部署</h2><h4 id="1-创建Maven工程-1"><a href="#1-创建Maven工程-1" class="headerlink" title="1.创建Maven工程"></a>1.创建Maven工程</h4><p>略</p>
<h4 id="2-添加Spring依赖"><a href="#2-添加Spring依赖" class="headerlink" title="2.添加Spring依赖"></a>2.添加Spring依赖</h4><ul>
<li>context</li>
<li>aspects</li>
</ul>
<h4 id="3-Spring配置文件"><a href="#3-Spring配置文件" class="headerlink" title="3.Spring配置文件"></a>3.Spring配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="name">context:annotation-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.qfedu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--基于注解配置的aop代理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-2-AOP注解配置案例"><a href="#6-2-AOP注解配置案例" class="headerlink" title="6.2 AOP注解配置案例"></a>6.2 AOP注解配置案例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-19 14:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.qfedu.dao.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pc1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pc1()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开启事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pc1()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;提交事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pc1()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">printExecuteTime</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">time1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">v</span> <span class="operator">=</span> point.proceed();</span><br><span class="line">            <span class="type">long</span> <span class="variable">time2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;方法执行时间:&quot;</span> + (time2 - time1));</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>注意：</code>注解使用虽然方便，但是只能在源码上添加注解，因此我们的自定义类提倡使用注解配置；但如果使用到第三方提供的类则需要通过xml配置形式完成配置。</p>
<h1 id="七、Spring整合MyBatis"><a href="#七、Spring整合MyBatis" class="headerlink" title="七、Spring整合MyBatis"></a>七、Spring整合MyBatis</h1><blockquote>
<p>Spring 两大核心思想：IoC 和AOP</p>
<p>IoC：控制反转，Spring容器可以完成对象的创建、属性注入、对象管理等工作</p>
<p>AOP：面向切面，在不修改原有业务逻辑的情况下，实现原有业务的增强</p>
</blockquote>
<h2 id="7-1-Spring可以对MyBatis提供哪些支持"><a href="#7-1-Spring可以对MyBatis提供哪些支持" class="headerlink" title="7.1 Spring可以对MyBatis提供哪些支持"></a>7.1 Spring可以对MyBatis提供哪些支持</h2><ul>
<li><strong>IoC支持：</strong>SpringIoC可以为MyBatis完成DataSource、SQLSessionFactory、SQLSession以及DAO对象的创建。</li>
<li><strong>AOP支持：</strong>使用Spring提供的事务管理切面类完成对MyBatis数据库操作中的事务管理</li>
</ul>
<h2 id="7-2-Spring整合MyBatis准备工作"><a href="#7-2-Spring整合MyBatis准备工作" class="headerlink" title="7.2 Spring整合MyBatis准备工作"></a>7.2 Spring整合MyBatis准备工作</h2><h3 id="1-创建Maven工程-2"><a href="#1-创建Maven工程-2" class="headerlink" title="1.创建Maven工程"></a>1.创建Maven工程</h3><p>略</p>
<h3 id="2-部署MyBatis框架"><a href="#2-部署MyBatis框架" class="headerlink" title="2.部署MyBatis框架"></a>2.部署MyBatis框架</h3><ul>
<li><p>添加依赖</p>
<ul>
<li>MySQL驱动</li>
<li>MyBatis</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建MyBatis配置文件mybatis-config.xml(创建配置文件之后无需进行任何配置)</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-部署Spring框架"><a href="#3-部署Spring框架" class="headerlink" title="3.部署Spring框架"></a>3.部署Spring框架</h3><ul>
<li>添加依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建Spring配置文件：applicationContext.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-添加Spring整合MyBatis的依赖"><a href="#4-添加Spring整合MyBatis的依赖" class="headerlink" title="4.添加Spring整合MyBatis的依赖"></a>4.添加Spring整合MyBatis的依赖</h3><ul>
<li>mybatis-spring  就是mybatis提供的兼容Spring的补丁</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-3-Spring整合MyBatis整合IoC配置"><a href="#7-3-Spring整合MyBatis整合IoC配置" class="headerlink" title="7.3 Spring整合MyBatis整合IoC配置"></a>7.3 Spring整合MyBatis整合IoC配置</h2><h3 id="1-整合Druid连接池"><a href="#1-整合Druid连接池" class="headerlink" title="1.整合Druid连接池"></a>1.整合Druid连接池</h3><ul>
<li>添加druid的依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--druid的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建druid.properties属性文件</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">druid.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">druid.url</span>=<span class="string">jdbc:mysql://localhost:3306/db1?characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">druid.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">druid.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## 连接池参数</span></span><br><span class="line"><span class="comment">#初始化连接数</span></span><br><span class="line"><span class="attr">druid.pool.init</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">#初始化连接数</span></span><br><span class="line"><span class="attr">druid.pool.minIdle</span>=<span class="string">3</span></span><br><span class="line"><span class="attr">druid.pool.maxActive</span>=<span class="string">20</span></span><br><span class="line"><span class="attr">druid.pool.timeout</span>=<span class="string">30000</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在applicationContext.xml中配置DruidDataSource</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载durid.properties属性文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:druid.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--依赖Spring容器完成数据源DataSource的创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.init&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.minIdle&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.maxActive&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxWait&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.timeout&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-整合MyBatis-创建SQLSessionFactory"><a href="#2-整合MyBatis-创建SQLSessionFactory" class="headerlink" title="2.整合MyBatis-创建SQLSessionFactory"></a>2.整合MyBatis-创建SQLSessionFactory</h3><blockquote>
<p>依赖Spring容器创建MyBatis的SQLSessionFactory对象</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖Spring容器完成MyBatis的SQLSessionFactory对象的创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置mapper映射文件的路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mappers/*Mapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置需要定义别名的实体类的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliases&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.qfedu.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可选：配置MyBatis的主配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-整合MyBatis-创建Mapper"><a href="#3-整合MyBatis-创建Mapper" class="headerlink" title="3. 整合MyBatis-创建Mapper"></a>3. 整合MyBatis-创建Mapper</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载dao包中的所有DAO接口，通过sqlSessionFactory获取SQLSession，然后创建所有的DAO接口对象</span></span><br><span class="line"><span class="comment">存储在Spring容器中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.qfedu.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-4-Spring整合MyBatis整合AOP配置"><a href="#7-4-Spring整合MyBatis整合AOP配置" class="headerlink" title="7.4 Spring整合MyBatis整合AOP配置"></a>7.4 Spring整合MyBatis整合AOP配置</h2><blockquote>
<p>使用Spring提供的事务管理切面类，完成DAO中增删改操作的事务管理</p>
</blockquote>
<h3 id="1-事务的隔离级别"><a href="#1-事务的隔离级别" class="headerlink" title="1.事务的隔离级别"></a>1.事务的隔离级别</h3>]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC面试题整理</title>
    <url>/2022/07/11/SpringMVC%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-概述："><a href="#1-概述：" class="headerlink" title="1. 概述："></a>1. 概述：</h2><h3 id="1-1-什么是SpringMVC？简单介绍下你对SpringMVC的理解？"><a href="#1-1-什么是SpringMVC？简单介绍下你对SpringMVC的理解？" class="headerlink" title="1.1 什么是SpringMVC？简单介绍下你对SpringMVC的理解？"></a>1.1 什么是SpringMVC？简单介绍下你对SpringMVC的理解？</h3><p>Spring MVC 是一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，通过把模型-视图-控制器分离，将复杂的web应用分为了清晰的几部分，Service层（处理业务）、DAO层（数据库操作）、Entity（实体类）和Controller层（控制层，返回数据给前台页面）。简化了开发，方便了组内开发人员之间的配合。</p>
<h3 id="1-2-SpringMVC的特点？"><a href="#1-2-SpringMVC的特点？" class="headerlink" title="1.2 SpringMVC的特点？"></a>1.2 SpringMVC的特点？</h3><ol>
<li><p>可以支持各种视图技术，而不仅仅局限于JSP；</p>
</li>
<li><p>与Spring框架天然集成（如IOC和AOP）；</p>
</li>
<li><p>清晰的角色分配：</p>
</li>
<li><ol>
<li>前端控制器(dispatchServlet)</li>
<li>请求到处理器映射(handlerMapping)</li>
<li>处理器适配器(HandlerAdapter)</li>
<li>视图解析器(ViewResoler)</li>
</ol>
</li>
<li><p>支持各种请求资源的映射策略。</p>
</li>
</ol>
<h2 id="2-核心组件"><a href="#2-核心组件" class="headerlink" title="2.核心组件"></a>2.核心组件</h2><h3 id="2-1-SpringMVC的主要组件？"><a href="#2-1-SpringMVC的主要组件？" class="headerlink" title="2.1 SpringMVC的主要组件？"></a>2.1 SpringMVC的主要组件？</h3><ol>
<li><p>前端控制器DispatcherServlet</p>
</li>
<li><ol>
<li>作用：接受请求，响应结果，相当于转发器，有了DispatcherServlet就减少了其他组件之间的耦合度。</li>
</ol>
</li>
<li><p>处理器映射器(HandlerMapping)</p>
</li>
<li><ol>
<li>作用：根据请求的URL来<strong>查找处理器handler</strong></li>
</ol>
</li>
<li><p>处理器适配器(HandlerAdapter)</p>
</li>
<li><ol>
<li>作用：负责执行Handler，返回视图ModelandView对象</li>
</ol>
</li>
<li><p>处理器Handler**(需要程序员开发)**</p>
</li>
<li><p>视图解析器(ViewResolver)</p>
</li>
<li><ol>
<li>作用：进行视图的解析，根据视图的逻辑名解析成真正的视图</li>
</ol>
</li>
<li><p>视图(View)<strong>(需要程序员开发)</strong></p>
</li>
<li><ol>
<li>View是一个接口，它的实现类支持不同的视图类型(比如JSP，Freemarker等等)</li>
</ol>
</li>
</ol>
<h3 id="2-2-什么是DispatcherServlet？"><a href="#2-2-什么是DispatcherServlet？" class="headerlink" title="2.2 什么是DispatcherServlet？"></a>2.2 什么是DispatcherServlet？</h3><p>Spring的MVC框架是围绕DispatcherServlet来设计的，它用来<strong>处理所有的HTTP请求和响应。</strong></p>
<h3 id="2-3-什么是SpringMVC的控制器？"><a href="#2-3-什么是SpringMVC的控制器？" class="headerlink" title="2.3 什么是SpringMVC的控制器？"></a>2.3 什么是SpringMVC的控制器？</h3><ul>
<li>控制器提供了一个访问应用程序的行为，这个行为时通过服务接口实现的。</li>
</ul>
<h3 id="2-4-SpringMVC的控制器是不是单例模式，如果是，有什么问题？"><a href="#2-4-SpringMVC的控制器是不是单例模式，如果是，有什么问题？" class="headerlink" title="2.4 SpringMVC的控制器是不是单例模式，如果是，有什么问题？"></a>2.4 SpringMVC的控制器是不是单例模式，如果是，有什么问题？</h3><p>是单例模式，所以在多线程访问的时候有线程安全问题，不要用同步，会影响性能。</p>
<h2 id="3-工作原理"><a href="#3-工作原理" class="headerlink" title="3. 工作原理"></a>3. 工作原理</h2><ol>
<li>客户端发送请求，直接请求到前端控制器DispatcherServlet。</li>
<li>DispatcherServlet根据请求信息调用HandlerMapping，解析请求对应的Handler。</li>
<li>解析到对应的Handler(也就是我们平常说得Controller控制器)之后，开始由HandlerAdapter处理器适配器进行处理。</li>
<li>处理器适配器会根据解析到的Handler来调用真正的处理器来处理请求，并处理相应的业务逻辑。</li>
<li>处理器处理完毕后，会返回一个ModelAndView对象，Model是返回的数据对象，View是个逻辑上的View。</li>
<li>ViewResolver是根据逻辑View来查找实际具体的View。</li>
<li>DispatcherServlet把返回的Model传给View，进行视图渲染，即把模型数据填充到视图中。</li>
<li>DispatcherServlet将View返回给客户端。</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657507962076-b74072c6-b42f-4240-a42d-439facb06d57.png" alt="img" loading="lazy"></p>
<h2 id="4-常用注解"><a href="#4-常用注解" class="headerlink" title="4.常用注解"></a>4.常用注解</h2><h3 id="4-1-SpringMVC常用的注解有哪些？"><a href="#4-1-SpringMVC常用的注解有哪些？" class="headerlink" title="4.1 SpringMVC常用的注解有哪些？"></a>4.1 SpringMVC常用的注解有哪些？</h3><ul>
<li><strong>@RequestMapping：</strong>用于处理请求url映射的注解，可用于类上或者方法上。用于类上表示类中所有响应请求的方法都是以该地址作为父路径。</li>
<li><strong>@RequestBody：</strong>注解实现接收http请求的json数据，将json转换为java对象。</li>
<li><strong>@ResponseBody：</strong>注解实现将conreoller方法返回对象转化为json对象响应给客户。</li>
</ul>
<h3 id="4-2-SpringMVC中的控制器注解一般用哪个？"><a href="#4-2-SpringMVC中的控制器注解一般用哪个？" class="headerlink" title="4.2 SpringMVC中的控制器注解一般用哪个？"></a>4.2 SpringMVC中的控制器注解一般用哪个？</h3><p>一般用**@Controller<strong>注解,也可以使用</strong>@RestController<strong>，</strong>@RestController<strong>注解相当于</strong>@ResponseBody+@Controller**。</p>
<h3 id="4-3-PathVariable和-RequestParam的区别？"><a href="#4-3-PathVariable和-RequestParam的区别？" class="headerlink" title="4.3 @PathVariable和@RequestParam的区别？"></a>4.3 @PathVariable和@RequestParam的区别？</h3><ul>
<li>@PathVariable是从Url路径中获取变量</li>
<li>@RequestParam是从请求中获取参数</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>Spring面试题整理</title>
    <url>/2022/07/11/Spring%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-Spring是什么？"><a href="#1-Spring是什么？" class="headerlink" title="1.Spring是什么？"></a>1.Spring是什么？</h2><p>Spring是一个轻量级的IoC和AOP容器框架。是为Java应用程序提供基础性服务的一套框架，目的是为了简化企业应用程序的开发，使开发者只需要关注业务需求。</p>
<p>常见的配置方式有两种：</p>
<ol>
<li>基于XML文件的配置方式</li>
<li>基于注解的配置方式</li>
</ol>
<p>主要由以下七个模块组成：</p>
<ul>
<li>Spring Core：核心类库，可以说Spring其他所有的功能都需要依赖这个类库。主要提供IoC服务。</li>
<li>Spring AOP：提供了面向切面的编程实现。</li>
<li>Spring JDBC：提供了Java连接数据库的实现</li>
<li>Spring ORM：对现有的ORM框架的支持，比如Hibernate。</li>
<li>Spring Web：为创建Web应用程序提供了支持。</li>
<li>SpringMVC：提供了面向WEB应用的Model-View-Controller的实现。</li>
<li>Spring Test:提供了对JUnit测试的支持。</li>
</ul>
<h2 id="2-Spring的优点？"><a href="#2-Spring的优点？" class="headerlink" title="2.Spring的优点？"></a>2.Spring的优点？</h2><ol>
<li><p>方便解耦，简化开发</p>
</li>
<li><ol>
<li>Spring就是一个大工厂，可以将所有对象的创建和依赖关系的维护，交给Spring管理。</li>
</ol>
</li>
<li><p>AOP编程的支持</p>
</li>
<li><ol>
<li>Spring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能。</li>
</ol>
</li>
<li><p>声明式事务的支持</p>
</li>
<li><ol>
<li>只需要通过配置就可以完成对事务的管理，而无需手动编程。</li>
</ol>
</li>
<li><p>方便程序的测试</p>
</li>
<li><ol>
<li>Spring对Junit4支持，可以通过注解方便的测试Spring程序。</li>
</ol>
</li>
<li><p>方便集成各种优秀框架</p>
</li>
<li><ol>
<li>Spring内部提供了对各种优秀框架的直接支持（如：Struts、Hibernate、MyBatis等）。</li>
</ol>
</li>
<li><p>降低JavaEE API的使用难度</p>
</li>
<li><ol>
<li>Spring对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低。</li>
</ol>
</li>
</ol>
<h2 id="3-谈谈你对Spring-IoC的理解？"><a href="#3-谈谈你对Spring-IoC的理解？" class="headerlink" title="3.谈谈你对Spring IoC的理解？"></a>3.谈谈你对Spring IoC的理解？</h2><ol>
<li>IoC就是控制反转，是一种<strong>设计思想</strong>。是指转移创建对象的控制权，就是<strong>原本在程序中需要手动创建对象的控制权现在交由Spring框架来管理。</strong>并由容器根据配置文件去创建实例和管理各个实例之间的依赖关系，也利于功能的复用。</li>
<li><strong>IoC容器是Spring用来实现IoC的载体，IoC容器实际上就是个Map，Map中存放的是各种对象。</strong></li>
<li>DI依赖注入，和控制反转是同一个概念的不同角度的描述，即 <strong>应用程序在运行时依赖IoC容器来动态注入对象需要的外部资源。</strong></li>
<li>将对象之间的相互依赖关系交由IoC容器来管理，并由IoC容器完成对象的注入。这样可以很大程度上简化开发，把应用从复杂得依赖关系中解放出来。</li>
<li><strong>IoC容器就像一个工厂，当我们要创建一个对象的时候，只需要配置好配置文件或者注解即可，完全不用考虑对象时怎么创建出来的。</strong></li>
<li>Spring的IoC注入方式有<strong>三种</strong>：构造器注入、Setter方法注入、根据注解注入。</li>
</ol>
<h2 id="4-谈谈你对Spring-AOP的理解？"><a href="#4-谈谈你对Spring-AOP的理解？" class="headerlink" title="4.谈谈你对Spring AOP的理解？"></a>4.谈谈你对Spring AOP的理解？</h2><h3 id="AOP理解："><a href="#AOP理解：" class="headerlink" title="AOP理解："></a>AOP理解：</h3><p>AOP是指面向切面编程，是面向对象的一种补充，能够将那些<strong>与业务无关，但是能对多个业务产生影响的共同行为和逻辑</strong>，<strong>抽取并封装为一个可重用的模块，</strong>这个模块就被命名为“切面”，<strong>便于减少系统中重复的代码，降低了模块间的耦合度，同时提高了系统的可扩展性和可维护性。</strong>可用于权限认证、日志和事务处理。</p>
<h3 id="SpringAOP和-AspectJ-Aop的区别："><a href="#SpringAOP和-AspectJ-Aop的区别：" class="headerlink" title="SpringAOP和 AspectJ Aop的区别："></a>SpringAOP和 AspectJ Aop的区别：</h3><p>AOP的实现主要在于<strong>代理模式</strong>，而AOP代理主要分为静态代理和动态代理。<strong>静态代理的代表是AspectJ；动态代理的代表是Spring AOP。</strong></p>
<ul>
<li>静态代理，就是指AOP在<strong>编译阶段生成AOP代理类</strong>，因此也被称为编译时增强，他会在编译阶段将切面织入到Java字节码中，运行时就是已经增强之后的AOP对象。</li>
<li>动态代理时输入运行时增强，是<strong>在每次运行时在内存中临时为方法生成一个AOP对象</strong>，这个AOP对象包含目标对象的全部方法，并且在特定的切点上做增强处理，然后回调原对象的方法。</li>
<li>如果切面较少，两者性能差异不大，<strong>但是如果切面太多，最好选择AspjectJ，因为它比SpringAOP快很多。</strong></li>
</ul>
<h3 id="SpringAOP动态代理的两种方式："><a href="#SpringAOP动态代理的两种方式：" class="headerlink" title="SpringAOP动态代理的两种方式："></a>SpringAOP动态代理的两种方式：</h3><p><strong>JDK动态代理和CGLIB动态代理：</strong></p>
<ul>
<li>JDK动态代理<strong>只提供接口的代理，不支持类的代理。</strong></li>
<li>所以要代理的对象如果实现了某个接口，SpringAOP就会使用JDK动态代理去创建代理对象；</li>
<li>对于没有实现接口的对象，会使用CGLIB动态代理去创建代理对象。</li>
</ul>
<h2 id="5-BeanFactory和ApplicationContext有什么区别？"><a href="#5-BeanFactory和ApplicationContext有什么区别？" class="headerlink" title="5.BeanFactory和ApplicationContext有什么区别？"></a>5.BeanFactory和ApplicationContext有什么区别？</h2><p>​        BeanFactory和ApplicationContext是Spring的两大核心接口，<strong>都可以当做Spring的容器。</strong></p>
<ul>
<li><p>但是BeanFactory 才是 Spring 容器中的顶层接口。<br>ApplicationContext 是它的子接口。</p>
</li>
<li><p>其次是创建对象的时间点不一样。</p>
</li>
<li><ul>
<li>ApplicationContext，它是在<strong>容器启动时，一次性创建了所有的Bean。</strong>这样，在容器启动时，我们就可以发现Spring中存在的配置错误，这样有利于检查所依赖属性是否注入。 </li>
<li>BeanFactroy采用的是<strong>延迟加载形式</strong>来注入Bean的，即<strong>只有在使用到某个Bean时(调用getBean())，才对该Bean进行加载实例化。</strong>这样，我们就不能发现一些存在的Spring的配置问题。</li>
<li>相对于基本的BeanFactory，ApplicationContext 唯一的不足是占用内存空间。当应用程序配置Bean较多时，程序启动较慢。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>org.springframework.beans.factory.BeanCreationException解决方法</title>
    <url>/2022/07/13/org-springframework-beans-factory-BeanCreationException%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220713205014200.png" alt="image-20220713205014200" loading="lazy"></p>
<p>今天运行Springboot项目的时候发现启动不起来了，因为我把target目录删了重新装了一次，然后就一直出现这个错误，在网上搜了好多解决方案，还重启了好多次，还是不行，最后没办法，一行一行的看，最后发现是我用插件生成的<code>Mapper</code>文件里面的<code>namespace</code>没有改成我自己的，废了我一下午时间，电脑都差点砸了。</p>
<p>这是插件生成的：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220713205316853.png" alt="image-20220713205316853" loading="lazy"></p>
<p>而我的目录是这样的：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220713205352603.png" alt="image-20220713205352603" loading="lazy"></p>
<p>将文件目录改对：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220713205454998.png" alt="image-20220713205454998" loading="lazy"></p>
<p>问题就完美解决了！</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220713205610392.png" alt="image-20220713205610392" loading="lazy"></p>
<p>以后可不能犯这种小错误，差点把自己气死！[○･｀Д´･ ○]</p>
]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
  </entry>
  <entry>
    <title>创建Springboot超时问题</title>
    <url>/2022/07/06/%E5%88%9B%E5%BB%BASpringboot%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220706091502635.png" alt="image-20220706091502635" loading="lazy"></p>
<p>在创建springboot项目的时候，可能会出现下图这种连接超时的问题，因为创建boot项目的本质是从官网下载项目导入本地，一般国内访问国外的网站就会有超时问题。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/20210717123020896.png" alt="img" loading="lazy"></p>
<p><strong>解决方案：</strong></p>
<p>不选择默认的Default，选用Custom，并使用阿里云的镜像节点来创建Springboot项目：<a href="http://start.aliyun.com/">http://start.aliyun.com</a></p>
<p>如下图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220706092015509.png" alt="image-20220706092015509" loading="lazy"></p>
]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
  </entry>
  <entry>
    <title>删除有序数组中的重复项</title>
    <url>/2022/03/24/%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Leecode-26-删除有序数组中的重复项"><a href="#Leecode-26-删除有序数组中的重复项" class="headerlink" title="Leecode 26. 删除有序数组中的重复项"></a>Leecode 26. 删除有序数组中的重复项</h2><p>给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。</p>
<p>由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。</p>
<p>将最终结果插入 nums 的前 k 个位置后返回 k 。</p>
<p>不要使用额外的空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p>
<p>示例 1：</p>
<blockquote>
<p>输入：nums &#x3D; [1,1,2]<br>输出：2, nums &#x3D; [1,2,_]<br>解释：函数应该返回新的长度 2 ，并且原数组 nums的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</p>
</blockquote>
<p>示例 2：</p>
<blockquote>
<p>输入：nums &#x3D; [0,0,1,1,1,2,2,3,3,4]<br>输出：5, nums &#x3D; [0,1,2,3,4]<br>解释：函数应该返回新的长度5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</p>
</blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>0 &lt;&#x3D; nums.length &lt;&#x3D; 3 * 104</li>
<li>-104 &lt;&#x3D; nums[i] &lt;&#x3D; 104</li>
<li>nums 已按 升序 排列</li>
</ul>
<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">点我跳转题目</a></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><strong>双指针解法</strong><br><strong>数组中删除元素即为将有效元素覆盖无效元素。</strong><br>因为数组有序且存在重复元素，所以重复元素在数组中一定相邻，使用快慢指针。<br><strong>算法流程：</strong><br>比较两指针指向的元素是否相同<br>若nums[fast] &#x3D;&#x3D; nums[slow]，则继续移动快指针，直到找到有效元素。<br>若nums[fast] !&#x3D; nums[slow]，则将fast位置上的有效元素覆盖到slow后一位，然后更新慢指针位置，继续指向有效元素的最后一位。<br>最终返回slow + 1，即为有效元素的数量。</p>
<h2 id="算法代码"><a href="#算法代码" class="headerlink" title="算法代码"></a>算法代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>,fast = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span> &amp;&amp; nums == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;fast &lt; nums.length;fast++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[fast] != nums[slow])&#123;</span><br><span class="line">            nums[++slow] = nums[fast];   </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ++slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>时间复杂度：O(N)</strong></li>
<li><strong>空间复杂度：O(1)</strong></li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>多线程笔记</title>
    <url>/2022/07/08/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-线程相关概念"><a href="#1-线程相关概念" class="headerlink" title="1.线程相关概念"></a>1.线程相关概念</h1><ul>
<li><p>程序：是为了完成特定任务、用某种语言编写的一组指令的集合。</p>
</li>
<li><p>进程：</p>
</li>
<li><ul>
<li>进程是<strong>程序的一次执行过程</strong>，或者说是<strong>正在运行的一个程序，</strong>比如我们使用QQ，就启动了一个进程，操作系统会为该进程分配内存空间。是一个动态过程，有产生、存在、消亡的过程。</li>
</ul>
</li>
<li><p>线程：</p>
</li>
<li><ul>
<li><strong>概念：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>线程是由进程创建出来的，是进程的一个实体</li>
<li>一个进程可以拥有多个线程，比如迅雷同时下载多个文件，QQ打开多个聊天窗口，可将这些看为进程里的线程</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>单线程：</strong>同一时刻，只允许执行一个线程</li>
<li><strong>多线程：</strong>同一时刻，可以执行多个线程</li>
<li><strong>并发：</strong>同一时刻，多个任务交替执行，造成一种“貌似同时进行”的错觉，单核cpu实现的多任务就是并发，就像人一心多用做好几件事，就是并发。</li>
<li><strong>并行：</strong>同一时刻，多个任务同时进行，只有多核CPU才可以实现并行，正在并行中的CPU也可以单独实现并发，两者可同时存在。</li>
</ul>
</li>
</ul>
<h1 id="2-线程基本使用"><a href="#2-线程基本使用" class="headerlink" title="2.线程基本使用"></a>2.线程基本使用</h1><h2 id="2-1-创建线程的两种方式"><a href="#2-1-创建线程的两种方式" class="headerlink" title="2.1 创建线程的两种方式"></a>2.1 创建线程的两种方式</h2><p>在Java中线程的使用有两种方法：</p>
<ol>
<li>继承Thread类，重写run方法</li>
<li>实现Runnable接口，重写run方法</li>
</ol>
<h2 id="2-2-线程创建方式1-继承Thread类"><a href="#2-2-线程创建方式1-继承Thread类" class="headerlink" title="2.2 线程创建方式1-继承Thread类"></a>2.2 线程创建方式1-继承Thread类</h2><p><strong>案例：开启一个线程，该线程每隔一秒，在控制台输出“喵喵，我是小猫咪”，当输出80次时结束该线程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        cat.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;喵喵，我是小猫咪&quot;</span> + (++count));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">80</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>注意：</code>Java 中实现真正的多线程是 start 中的 start0() 方法，run() 方法只是一个普通的方法。start0() 是本地方法，是 JVM 调用, 底层是用 c&#x2F;c++实现的，真正实现多线程的效果， 是 start0()，而不是 run。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/v2-37db4576bf6cf193c716ec5f4acb8dba_720w.jpg" alt="img" loading="lazy"></p>
<h2 id="2-3-线程创建方式2-实现Runnable接口"><a href="#2-3-线程创建方式2-实现Runnable接口" class="headerlink" title="2.3 线程创建方式2-实现Runnable接口"></a>2.3 线程创建方式2-实现Runnable接口</h2><ol>
<li>Java是单继承，所以在某些情况下一个类可能已经继承了了某个父类，这时就没办法再用Thread类方法来创建线程。</li>
<li>所以Java设计者提供了另一个方式来创建线程，就是实现Runnable接口来创建线程。</li>
</ol>
<p><strong>案例：开启一个线程，该线程每隔一秒，在控制台输出“小狗汪汪叫:旺旺旺~”，当输出10次时结束该线程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过实现Runnable接口来开发线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-07-08 14:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建了Thread对象，把dog对象放入Thread</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(dog);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;<span class="comment">//普通方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小狗汪汪叫:旺旺旺~&quot;</span> + (++count) + Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">10</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-继承Thread类和实现Runnable的区别"><a href="#2-4-继承Thread类和实现Runnable的区别" class="headerlink" title="2.4 继承Thread类和实现Runnable的区别"></a>2.4 继承Thread类和实现Runnable的区别</h2><ol>
<li>从Java的设计上来看，通过继承Thread类或者实现Runnable接口来创建线程本质上没有区别，并且Thread类本身就实现了Runnable接口。</li>
<li>实现Runnable接口的方式更适合多个线程共享一个资源的情况，并且避免了单继承的限制，建议使用Runnable。</li>
</ol>
<h2 id="2-5案例："><a href="#2-5案例：" class="headerlink" title="2.5案例："></a>2.5案例：</h2><p><strong>编辑模拟三个窗口售票100张分别使用继承Thread类和实现Runnable接口来实现，并分析有什么问题。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.ysu.ticket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-07-08 15:37</span></span><br><span class="line"><span class="comment"> * 使用多线程，模拟三个窗口同时售票</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicket</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        SellTicket01 sellTicket01 = new SellTicket01();</span></span><br><span class="line"><span class="comment">//        SellTicket01 sellTicket02 = new SellTicket01();</span></span><br><span class="line"><span class="comment">//        SellTicket01 sellTicket03 = new SellTicket01();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        sellTicket01.start();</span></span><br><span class="line"><span class="comment">//        sellTicket02.start();</span></span><br><span class="line"><span class="comment">//        sellTicket03.start();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">SellTicket02</span> <span class="variable">sellTicket02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket02</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket02);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket02);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread03</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket02);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        thread01.start();</span><br><span class="line">        thread02.start();</span><br><span class="line">        thread03.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SellTicket01</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="comment">//让多个线程共享Num</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticketNum</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;售票结束。。。。。。&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//休眠50ms</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;窗口:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;售出一张票&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;剩余票数:&quot;</span> + (ticketNum--));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SellTicket02</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//让多个线程共享Num</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticketNum</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;售票结束。。。。。。&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//休眠50ms</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;窗口:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;售出一张票&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;剩余票数:&quot;</span> + (ticketNum--));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-线程终止"><a href="#3-线程终止" class="headerlink" title="3.线程终止"></a>3.线程终止</h1><h2 id="3-1-基本说明"><a href="#3-1-基本说明" class="headerlink" title="3.1 基本说明"></a>3.1 基本说明</h2><ol>
<li>当线程完成任务后，会自动退出。</li>
<li>也可以通过<strong>使用变量</strong>的方式来控制run方法退出的方式来停止线程，即<strong>通知方式</strong>。</li>
</ol>
<h2 id="3-2-案例："><a href="#3-2-案例：" class="headerlink" title="3.2 案例："></a>3.2 案例：</h2><p><strong>启动一个线程T，在main线程中停止T线程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.ysu.exit_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-07-08 15:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadExit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//希望main线程去控制t1线程的终止，必须可以修改loop</span></span><br><span class="line">        <span class="comment">//让t1 退出run方法，从而终止t1线程  - &gt; 通知方式</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程休眠10s&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">        t1.setLoop(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置一个控制变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//为loop变量添加set方法来保证主线程可以对该变量进行修改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoop</span><span class="params">(<span class="type">boolean</span> loop)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loop = loop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;线程T运行中。。。。。。&quot;</span> + (++count));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-线程常用方法"><a href="#4-线程常用方法" class="headerlink" title="4.线程常用方法"></a>4.线程常用方法</h1><h2 id="4-1-常用方法第一组"><a href="#4-1-常用方法第一组" class="headerlink" title="4.1 常用方法第一组"></a>4.1 常用方法第一组</h2><ol>
<li>setName &#x2F;&#x2F;设置线程名称，使之与参数name相同</li>
<li>getName &#x2F;&#x2F;返回该线程的名称</li>
<li>start &#x2F;&#x2F;使该线程开始执行，Java虚拟机底层调用该线程的start0方法</li>
<li>run &#x2F;&#x2F;调用线程对象的run方法</li>
<li>setPriority &#x2F;&#x2F;更改线程的优先级</li>
<li>getPriority &#x2F;&#x2F;获取线程的优先级</li>
<li>sleep &#x2F;&#x2F;在指定的毫秒数内让当前正在执行的线程休眠(暂停执行)</li>
</ol>
<h2 id="4-2-注意事项和细节"><a href="#4-2-注意事项和细节" class="headerlink" title="4.2 注意事项和细节"></a>4.2 注意事项和细节</h2><ol>
<li>start方法的底层才会创建新的线程调用run，而run方法只是一个简单的方法调用，不会启动新线程</li>
<li>线程优先级的范围</li>
<li>interrupt，中断线程，但是没有结束线程，所以一般用于中断正在休眠的线程</li>
<li>sleep：线程的静态方法，使当前线程休眠</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMethod1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadDemo1</span> <span class="variable">td1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadDemo1</span>();</span><br><span class="line">        <span class="comment">//给线程起名字</span></span><br><span class="line">        td1.setName(<span class="string">&quot;刘亦菲&quot;</span>);</span><br><span class="line">        <span class="comment">//给线程设置优先级</span></span><br><span class="line">        td1.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">        <span class="comment">//启动子线程</span></span><br><span class="line">        td1.start();</span><br><span class="line">        <span class="comment">//测试优先级</span></span><br><span class="line">        System.out.println(<span class="string">&quot;默认优先级：&quot;</span> + Thread.currentThread().getPriority());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//interrupt测试</span></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        <span class="comment">//程序执行到这里就会中断td1线程的休眠</span></span><br><span class="line">        td1.interrupt();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadDemo1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//Thread.currentThread().getName() 获取当前线程的名称</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在吃包子&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在休眠&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">//当该线程指定到一个interrupt方法时，就会catch一个异常</span></span><br><span class="line">            <span class="comment">//InterruptedException 是指捕获到一个中断异常</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;被中断了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-3-常用方法第二组"><a href="#4-3-常用方法第二组" class="headerlink" title="4.3 常用方法第二组"></a>4.3 常用方法第二组</h2><ol>
<li><strong>yield</strong>：线程礼让。让出CPU，让其他线程执行，但礼让的时间不确定，所以也不一定礼让成功。<strong>yield是将线程从运行态，转为就绪态，然后与其他线程重新竞争。</strong></li>
<li><strong>join：</strong>线程插队。插队的线程一旦插队成功，则<strong>会先执行完插入线程的所有任务。</strong></li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220709081348581.png" alt="image-20220709081348581" loading="lazy"></p>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.ysu.method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-07-09 8:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMethod02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">T2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T2</span>();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;=<span class="number">20</span> ; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程 吃了&quot;</span> + i+ <span class="string">&quot;个汉堡&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">5</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;主线程让子线程先吃&quot;</span>);</span><br><span class="line">                <span class="comment">//join线程插队</span></span><br><span class="line">                <span class="comment">//相当于让t2线程先执行完毕</span></span><br><span class="line"><span class="comment">//                t2.join();</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//yield线程礼让</span></span><br><span class="line">                t2.yield();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程 吃了&quot;</span> + i+ <span class="string">&quot;个汉堡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-4守护线程"><a href="#4-4守护线程" class="headerlink" title="4.4守护线程"></a>4.4守护线程</h2><p>用户线程和守护线程</p>
<ol>
<li>用户线程：也叫工作线程，当线程的任务执行完或通知方式结束。</li>
<li>守护线程：一般视为工作线程服务的，当所有工作线程结束，守护线程自动结束</li>
<li>常见的守护线程：垃圾回收机制</li>
</ol>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.ysu.method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-07-09 8:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMethod03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">MyDaemonThread</span> <span class="variable">myDaemonThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDaemonThread</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果我们希望当主线程结束，子线程可以自动结束</span></span><br><span class="line">        <span class="comment">//只需将子线程设置为守护线程即可</span></span><br><span class="line">        myDaemonThread.setDaemon(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        myDaemonThread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;老板在办公室摸鱼&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;老板出来视察，我结束摸鱼，认真工作（假装）&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDaemonThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在愉快地摸鱼&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-线程的生命周期"><a href="#5-线程的生命周期" class="headerlink" title="5.线程的生命周期"></a>5.线程的生命周期</h1><h2 id="5-1-JDK-中用-Thread-State-枚举表示了线程的几种状态"><a href="#5-1-JDK-中用-Thread-State-枚举表示了线程的几种状态" class="headerlink" title="5.1 JDK 中用 Thread.State 枚举表示了线程的几种状态"></a>5.1 JDK 中用 Thread.State 枚举表示了线程的几种状态</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220709084024884.png" alt="image-20220709084024884" loading="lazy"></p>
<h2 id="5-2-线程状态转换图"><a href="#5-2-线程状态转换图" class="headerlink" title="5.2 线程状态转换图"></a>5.2 线程状态转换图</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220709084122133.png" loading="lazy"></p>
<p>Runnable状态只是代表可以运行了，但是否运行取决于线程调度器。</p>
<h2 id="5-3-案例"><a href="#5-3-案例" class="headerlink" title="5.3 案例"></a>5.3 案例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.ysu.state_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-07-09 9:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadState_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot;状态为：&quot;</span> + t.getState());</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只要线程状态不是终止状态，就打印线程t的状态</span></span><br><span class="line">        <span class="keyword">while</span> (Thread.State.TERMINATED != t.getState()) &#123;</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot;状态为：&quot;</span> + t.getState());</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot;状态为：&quot;</span> + t.getState());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-线程同步"><a href="#6-线程同步" class="headerlink" title="6. 线程同步"></a>6. 线程同步</h1><h2 id="6-1-Synchronized"><a href="#6-1-Synchronized" class="headerlink" title="6.1 Synchronized"></a>6.1 Synchronized</h2><h3 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h3><ol>
<li>在多线程编程中，一些敏感数据不允许被多个线程同时访问，此时就使用同步访问技术，保证数据在任何同一时刻，最多有一个线程访问，以保证数据的完整性。</li>
<li>线程同步：即当有一个线程对内存进行操作时，其他线程都不可以对这个内存地址进行操作，知道该线程完成操作，其他县城才能对该线程地址进行操作。</li>
</ol>
<h3 id="线程同步具体的实现方法Synchronized"><a href="#线程同步具体的实现方法Synchronized" class="headerlink" title="线程同步具体的实现方法Synchronized"></a>线程同步具体的实现方法Synchronized</h3><p>案例：卖票增强</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.ysu.synchronized_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-07-08 15:37</span></span><br><span class="line"><span class="comment"> * 使用多线程，模拟三个窗口同时售票</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicket</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SellTicket03</span> <span class="variable">sellTicket02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket03</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket02);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket02);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread03</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket02);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        thread01.start();</span><br><span class="line">        thread02.start();</span><br><span class="line">        thread03.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现接口方式，使用synchronized实现线程同步</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SellTicket03</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//让多个线程共享ticketNum</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticketNum</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        sell();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;<span class="comment">//同步方法，在同一时刻，只能有一个线程来执行run方法</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;售票结束。。。。。。&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//休眠50ms</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;窗口:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;售出一张票&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;剩余票数:&quot;</span> + (ticketNum--));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="同步原理分析"><a href="#同步原理分析" class="headerlink" title="同步原理分析"></a>同步原理分析</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220709095517528.png" alt="image-20220709095517528" loading="lazy"></p>
<p>三个线程争夺一把锁（对象锁），谁抢到谁就执行run方法中的代码，其余线程会被挡在外面，执行完毕后释放锁，然后三个线程继续争夺。</p>
<h2 id="6-2-互斥锁"><a href="#6-2-互斥锁" class="headerlink" title="6.2 互斥锁"></a>6.2 互斥锁</h2><h3 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h3><ol>
<li>Java语言中引入了对象互斥锁的概念，来保证共享数据操作的完整性。</li>
<li>每个对象都对应一个可以被称为“<strong>互斥锁</strong>”的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象。</li>
<li>关键字synchronized来与对象互斥锁联系。当某个对象用synchronized修饰时，表名该对象在任一时刻只能由一个线程访问。</li>
<li>同步的局限性：导致程序的执行效率会降低（相当于多个车排队经过一个收费站）</li>
<li>同步方法(非静态)的锁可以是this，也可以是其他对象(要求是同一对象)。</li>
<li>同步方法(静态的)的锁为当前类本身。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. public synchronized void sell() &#123;&#125; 就是一个同步方法，此时的锁在this对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;<span class="comment">//同步方法，在同一时刻，只能有一个线程来执行run方法</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;售票结束。。。。。。&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//休眠50ms</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;窗口:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;售出一张票&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;剩余票数:&quot;</span> + (ticketNum--));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//2. 也可以在代码块上写synchronized ，同步代码块，互斥锁还是在this对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;<span class="comment">//同步方法，在同一时刻，只能有一个线程来执行run方法</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;售票结束。。。。。。&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//休眠50ms</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;窗口:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;售出一张票&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;剩余票数:&quot;</span> + (ticketNum--));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 同步方法(非静态)的锁可以是this，也可以是其他对象(要求是同一对象)。</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;<span class="comment">//同步方法，在同一时刻，只能有一个线程来执行run方法</span></span><br><span class="line">        <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;售票结束。。。。。。&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//休眠50ms</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;窗口:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;售出一张票&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;剩余票数:&quot;</span> + (ticketNum--));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.同步方法(静态的)的锁为当前类本身。</span></span><br><span class="line">    <span class="comment">//m1的锁是加在SellTicket03这个类上的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(SellTicket03.class)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;m2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="注意事项和细节："><a href="#注意事项和细节：" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h3><ol>
<li>如果同步方法没有使用static修饰：默认锁对象是this</li>
<li>如果同步方法使用static进行修饰：默认锁对象是当前类.class</li>
<li>实现的步骤<ol>
<li>先分析需要进行上锁的代码</li>
<li>选择<strong>同步代码块</strong>或者同步方法，建议同步代码块，因为这样可以使得上锁的代码更少，效率相对更高一些。</li>
<li>要求多个线程的锁对象为同一个即可。</li>
</ol>
</li>
</ol>
<h2 id="6-3-线程死锁"><a href="#6-3-线程死锁" class="headerlink" title="6.3 线程死锁"></a>6.3 线程死锁</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>多个线程都互相占用了对方的锁资源，但不肯相让，导致了死锁，编程时要避免死锁的发生。</p>
<h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//模拟死锁现象</span></span><br><span class="line">        <span class="type">DeadLockDemo</span> <span class="variable">A</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>(<span class="literal">true</span>);</span><br><span class="line">        A.setName(<span class="string">&quot;A线程&quot;</span>);</span><br><span class="line">        <span class="type">DeadLockDemo</span> <span class="variable">B</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>(<span class="literal">false</span>);</span><br><span class="line">        B.setName(<span class="string">&quot;B线程&quot;</span>);</span><br><span class="line">        A.start();</span><br><span class="line">        B.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DeadLockDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">// 保证多线程，共享一个对象,这里使用static</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="type">boolean</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeadLockDemo</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面业务逻辑的分析</span></span><br><span class="line">        <span class="comment">//1. 如果flag 为 T, 线程A 就会先得到/持有 o1 对象锁, 然后尝试去获取 o2 对象锁</span></span><br><span class="line">        <span class="comment">//2. 如果线程A 得不到 o2 对象锁，就会Blocked</span></span><br><span class="line">        <span class="comment">//3. 如果flag 为 F, 线程B 就会先得到/持有 o2 对象锁, 然后尝试去获取 o1 对象锁</span></span><br><span class="line">        <span class="comment">//4. 如果线程B 得不到 o1 对象锁，就会Blocked</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o1) &#123;<span class="comment">//对象互斥锁, 下面就是同步代码</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入1&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (o2) &#123; <span class="comment">// 这里获得li对象的监视权</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入3&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (o1) &#123; <span class="comment">// 这里获得li对象的监视权</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入4&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220709104944597.png" alt="image-20220709104944597" loading="lazy"></p>
<p>两线程死锁，程序卡死。</p>
<h2 id="6-4-释放锁"><a href="#6-4-释放锁" class="headerlink" title="6.4 释放锁"></a>6.4 释放锁</h2><h3 id="会释放锁的操作"><a href="#会释放锁的操作" class="headerlink" title="会释放锁的操作"></a>会释放锁的操作</h3><ol>
<li>当前线程的同步方法、同步代码块执行结束<ul>
<li>案例：上厕所，上完厕所出来</li>
</ul>
</li>
<li>当前线程在同步代码块、同步方法中遇到break、return<ul>
<li>案例：没有正常的完事，经理叫他修改bug，不得已中断上厕所</li>
</ul>
</li>
<li>当前线程在同步代码块、同步方法中出现了未处理的Error或者Exception，导致异常结束<ul>
<li>没有正常的完事，发现忘带纸，不得已出来</li>
</ul>
</li>
<li>当前线程在同步代码块、同步方法中执行了线程对象的wait()方法，当前线程暂停，并释放锁。<ul>
<li>案例：没有正常完事，觉得需要酝酿一下，先出来，等会再进去</li>
</ul>
</li>
</ol>
<h3 id="不会释放锁的操作"><a href="#不会释放锁的操作" class="headerlink" title="不会释放锁的操作"></a>不会释放锁的操作</h3><ol>
<li>线程执行同步代码块或同步方法时，程序调用Thread.sleep()、Thread.yield()方法暂停当前线程的执行，不会释放锁。<ul>
<li>案例：上厕所，太困了，坐马桶上睡一会</li>
</ul>
</li>
<li>线程执行同步代码块或同步方法时，其他线程调用了该线程的suspend()方法将该线程挂起，该线程不会释放锁。<ul>
<li>提示：应该尽量避免suspend()和resume()来控制线程，方法不在推荐使用</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>尚硅谷爬虫学习笔记</title>
    <url>/2022/03/28/%E5%B0%9A%E7%A1%85%E8%B0%B7%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、Urllib"><a href="#一、Urllib" class="headerlink" title="一、Urllib"></a>一、Urllib</h1><h2 id="1-什么是互联网爬虫？"><a href="#1-什么是互联网爬虫？" class="headerlink" title="1.什么是互联网爬虫？"></a>1.什么是互联网爬虫？</h2><p>如果我们把互联网比作一张大的蜘蛛网，那一台计算机上的数据便是蜘蛛网上的一个猎物，而爬虫程序就是一只小蜘蛛，沿着蜘蛛网抓取自己想要的数据。</p>
<p>即通过一个程序来模拟浏览器，去向服务器发送请求，根据Url进行爬取网页，获取所需要的有用信息 </p>
<h2 id="2-爬虫核心"><a href="#2-爬虫核心" class="headerlink" title="2.爬虫核心"></a>2.爬虫核心</h2><ol>
<li><p>爬取网页：爬取整个网页 包含了网页中所有得内容 </p>
</li>
<li><p>解析数据：将网页中你得到的数据 进行解析 </p>
</li>
<li><p>难点：<strong>爬虫和反爬虫之间的博弈</strong></p>
</li>
</ol>
<h2 id="3-爬虫的用途"><a href="#3-爬虫的用途" class="headerlink" title="3.爬虫的用途"></a>3.爬虫的用途</h2><ul>
<li><p>数据分析&#x2F;人工数据集 </p>
</li>
<li><p>社交软件冷启动 </p>
</li>
<li><p>舆情监控 </p>
</li>
<li><p>竞争对手监控</p>
</li>
</ul>
<h2 id="4-爬虫分类"><a href="#4-爬虫分类" class="headerlink" title="4.爬虫分类"></a>4.爬虫分类</h2><ul>
<li>通用爬虫：<ul>
<li>功能：访问网页‐&gt;抓取数据‐&gt;数据存储‐&gt;数据处理‐&gt;提供检索服务 </li>
<li>robots协议：</li>
<li>一个约定俗成的协议，添加robots.txt文件，来说明本网站哪些内容不可以被抓取，起不到限制作用，自己写的爬虫无需遵守</li>
<li>缺点：<ul>
<li>抓取的数据大多是无用的 </li>
<li>不能根据用户的需求来精准获取数据</li>
</ul>
</li>
</ul>
</li>
<li><strong>聚焦爬虫</strong>：<ul>
<li>功能：根据需求，实现爬虫程序，抓取需要的数据</li>
<li>设计思路：<ul>
<li>确定要爬取的url</li>
<li>模拟浏览器通过http协议访问url，获取服务器返回的html代码 </li>
<li>解析html字符串（根据一定规则提取需要的数据）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="5-反爬手段"><a href="#5-反爬手段" class="headerlink" title="5.反爬手段"></a>5.反爬手段</h2><ol>
<li><p>User‐Agent：</p>
<ol>
<li><p>User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版 </p>
<p>本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。</p>
</li>
</ol>
</li>
<li><p>代理IP </p>
<ol>
<li>西次代理 </li>
<li>快代理 </li>
<li>什么是高匿名、匿名和透明代理？它们有什么区别？ <ol>
<li>使用透明代理，对方服务器可以知道你使用了代理，并且也知道你的真实IP。 </li>
<li>使用匿名代理，对方服务器可以知道你使用了代理，但不知道你的真实IP。 </li>
<li>使用高匿名代理，对方服务器不知道你使用了代理，更不知道你的真实IP。</li>
</ol>
</li>
</ol>
</li>
<li><p>验证码访问</p>
<ol>
<li>打码平台</li>
<li>云打码平台 </li>
<li>超级🦅</li>
</ol>
</li>
<li><p>动态加载网页 网站返回的是js数据 并不是网页的真实数据 </p>
<ol>
<li>selenium驱动真实的浏览器发送请求</li>
</ol>
</li>
<li><p>数据加密 </p>
<ol>
<li>分析js代码</li>
</ol>
</li>
</ol>
<h2 id="6-urllib库使用"><a href="#6-urllib库使用" class="headerlink" title="6.urllib库使用"></a>6.urllib库使用</h2><h3 id="6-1-urllib的基本使用"><a href="#6-1-urllib的基本使用" class="headerlink" title="6.1  urllib的基本使用"></a>6.1  urllib的基本使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用urllib来获取百度首页的源码</span></span><br><span class="line"><span class="comment">#(0) 导包</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment">#(1) 定义url</span></span><br><span class="line">url = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#(2) 模拟浏览器向服务器发送请求并获取响应</span></span><br><span class="line">response = urllib.request.urlopen(url)</span><br><span class="line"></span><br><span class="line"><span class="comment">#(3) 获取响应中的页面的源码</span></span><br><span class="line"><span class="comment">#read方法  返回的字节形式的二进制数据</span></span><br><span class="line"><span class="comment">#将二进制数据转换为字符串</span></span><br><span class="line"><span class="comment">#解码 decode(&#x27;编码的格式&#x27;)</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#(4) 打印数据</span></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure>



<h3 id="6-2-一个类型和六个方法"><a href="#6-2-一个类型和六个方法" class="headerlink" title="6.2 一个类型和六个方法"></a>6.2 一个类型和六个方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一个类型 HTTPResponse</span></span><br><span class="line"><span class="comment">#六个方法 read readline readlines getcode geturl getheaders</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(url)\</span><br><span class="line"></span><br><span class="line"><span class="comment">#一个类型和六个方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#response是HTTPResponse类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response))</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照一个字节一个字节的读数据</span></span><br><span class="line"><span class="comment"># content = response.read()</span></span><br><span class="line"><span class="comment"># print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#返回多少个字节,5代表返回5个字节</span></span><br><span class="line"><span class="comment"># content = response.read(5)</span></span><br><span class="line"><span class="comment"># print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取一行</span></span><br><span class="line"><span class="comment"># content = response.readline()</span></span><br><span class="line"><span class="comment"># print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取多行</span></span><br><span class="line"><span class="comment"># content = response.readlines()</span></span><br><span class="line"><span class="comment"># print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#返回状态码</span></span><br><span class="line"><span class="built_in">print</span>(response.getcode())</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回的是url地址</span></span><br><span class="line"><span class="built_in">print</span>(response.geturl())</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取状态信息</span></span><br><span class="line"><span class="built_in">print</span>(response.getheaders())</span><br></pre></td></tr></table></figure>

<h3 id="6-3-下载-网页、图片、视频"><a href="#6-3-下载-网页、图片、视频" class="headerlink" title="6.3 下载   网页、图片、视频"></a>6.3 下载   网页、图片、视频</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url_page = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载网页</span></span><br><span class="line"><span class="comment">#url代表的是下载的路径，filename代表文件的名字</span></span><br><span class="line"><span class="comment"># urllib.request.urlretrieve(url=url_page,filename=&#x27;baidu.html&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载图片</span></span><br><span class="line">url_img = <span class="string">&#x27;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fup.enterdesk.com%2Fedpic%2F2d%2F98%2F4e%2F2d984eafff42a790cbdc463b35e7e1ab.jpg&amp;refer=http%3A%2F%2Fup.enterdesk.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1651026550&amp;t=31e18a817719f780dee95ef36e2666c5&#x27;</span></span><br><span class="line"><span class="comment"># urllib.request.urlretrieve(url_img,&#x27;lisa.jpg&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载视频</span></span><br><span class="line">url_video = <span class="string">&#x27;https://vd3.bdstatic.com/mda-kjtx64epufgk8zw5/sc/cae_h264_nowatermark/1604104149/mda-kjtx64epufgk8zw5.mp4?v_from_s=hkapp-haokan-nanjing&amp;amp;auth_key=1648436966-0-0-c4052b4fdee46ddac2e5399be644e0ee&amp;amp;bcevod_channel=searchbox_feed&amp;amp;pd=1&amp;amp;cd=0&amp;amp;pt=3&amp;amp;logid=2366050261&amp;amp;vid=6647036806223333961&amp;amp;abtest=100815_1-101130_1-17451_1-3000221_7&amp;amp;klogid=2366050261&#x27;</span></span><br><span class="line"></span><br><span class="line">urllib.request.urlretrieve(url_video,<span class="string">&#x27;Lisa.mp4&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="7-请求对象的定制"><a href="#7-请求对象的定制" class="headerlink" title="7.请求对象的定制"></a>7.请求对象的定制</h2><h3 id="7-1-url的组成"><a href="#7-1-url的组成" class="headerlink" title="7.1 url的组成"></a>7.1 url的组成</h3><p>http&#x2F;https		<a href="http://www.baidu.com/">www.baidu.com</a>		80&#x2F;443			s			wd &#x3D; Lisa		#</p>
<p>协议					主机					  端口号		路径		参数				锚点</p>
<p>常见的端口：</p>
<ul>
<li>http 80</li>
<li>https 443</li>
<li>mysql 3306</li>
<li>redis 6379</li>
<li>Tomcat 8080</li>
</ul>
<h3 id="7-2-UA介绍："><a href="#7-2-UA介绍：" class="headerlink" title="7.2 UA介绍："></a>7.2 UA介绍：</h3><p>UA介绍：User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本。浏览器内核、浏览器渲染引擎、浏览器语言、浏览器插件等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com/&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#因为urlopen方法中不能存储字典，所以headers不能传递进去</span></span><br><span class="line"><span class="comment">#所以需要进行请求对象的定制</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure>

<h2 id="8-编解码"><a href="#8-编解码" class="headerlink" title="8.编解码"></a>8.编解码</h2><h3 id="8-1-编解码的演变"><a href="#8-1-编解码的演变" class="headerlink" title="8.1 编解码的演变"></a>8.1 编解码的演变</h3><blockquote>
<p>由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号， </p>
<p>这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。 </p>
<p>但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突， </p>
<p>所以，中国制定了GB2312编码，用来把中文编进去。 </p>
<p>你可以想得到的是，全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc‐kr里， </p>
<p>各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。 </p>
<p>因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。 </p>
<p>Unicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。 </p>
<p>现代操作系统和大多数编程语言都直接支持Unicode。</p>
</blockquote>
<h2 id="8-2-get请求方式1：urllib-parse-quote"><a href="#8-2-get请求方式1：urllib-parse-quote" class="headerlink" title="8.2  get请求方式1：urllib.parse.quote()"></a>8.2  get请求方式1：urllib.parse.quote()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="comment">#url  = &#x27;https://www.baidu.com/s?ie=UTF-8&amp;wd=%E6%9E%97%E4%BF%8A%E6%9D%B0&#x27;</span></span><br><span class="line"><span class="comment">#复制进来发现林俊杰变为了%E6%9E%97%E4%BF%8A%E6%9D%B0</span></span><br><span class="line"><span class="comment">#这是因为浏览器用的是ASCII编码，而python用的是Unicode编码，所以需要进行转换</span></span><br><span class="line">url  = <span class="string">&#x27;https://www.baidu.com/s?ie=UTF-8&amp;wd=&#x27;</span></span><br><span class="line"></span><br><span class="line">name = urllib.parse.quote(<span class="string">&#x27;林俊杰&#x27;</span>)</span><br><span class="line"><span class="comment">#拼接url</span></span><br><span class="line">url = url + name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment">#模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取响应内容</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印数据</span></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure>

<h2 id="8-2-get请求方式2：urllib-parse-urlencode"><a href="#8-2-get请求方式2：urllib-parse-urlencode" class="headerlink" title="8.2 get请求方式2：urllib.parse.urlencode()"></a>8.2 get请求方式2：urllib.parse.urlencode()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment">#@Time:2022/3/2814:26</span></span><br><span class="line"><span class="comment">#@Author:陈 玉 皓</span></span><br><span class="line"><span class="comment">#@File:urlencode_1.py</span></span><br><span class="line"><span class="comment">#@Sofeware:PyCharm</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="comment">#urlencode应用场景，多个参数的时候</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#例:https://www.baidu.com/s?wd=周杰伦&amp;sex=男&amp;location=中国台湾省</span></span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&#x27;https://www.baidu.com/s?&#x27;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">   <span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;周杰伦&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;location&#x27;</span>:<span class="string">&#x27;中国台湾省&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new_data = urllib.parse.urlencode(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请求资源路径</span></span><br><span class="line">url = base_url + new_data</span><br><span class="line"><span class="built_in">print</span>(url)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment">#模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取响应内容</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印数据</span></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure>

<h2 id="9-ajax的get请求"><a href="#9-ajax的get请求" class="headerlink" title="9.ajax的get请求"></a>9.ajax的get请求</h2><p>案例：豆瓣电影</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment"># @Time:2022/3/2914:49</span></span><br><span class="line"><span class="comment"># @Author:陈 玉 皓</span></span><br><span class="line"><span class="comment"># @File:douban2.py</span></span><br><span class="line"><span class="comment"># @Sofeware:PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">   base_url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;&#x27;</span></span><br><span class="line"></span><br><span class="line">   data = &#123;</span><br><span class="line">      <span class="string">&#x27;start&#x27;</span>: (page - <span class="number">1</span>) * <span class="number">20</span>,</span><br><span class="line">      <span class="string">&#x27;limit&#x27;</span>: <span class="number">20</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   data = urllib.parse.urlencode(data)</span><br><span class="line"></span><br><span class="line">   url = base_url + data</span><br><span class="line"></span><br><span class="line">   headers = &#123;</span><br><span class="line">      <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">#请求对象的定制</span></span><br><span class="line">   request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line">   <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取网页源代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">   response = urllib.request.urlopen(request)</span><br><span class="line">   content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">   <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down_load</span>(<span class="params">page, content</span>):</span><br><span class="line">   <span class="comment"># open方法默认情况下使用的是gbk的编码</span></span><br><span class="line">   <span class="comment"># 如果想保存汉字，需要在open方法中指定编码格式为utf-8</span></span><br><span class="line">   <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;douban_&#x27;</span> + <span class="built_in">str</span>(page) + <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">      fp.write(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序的入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   start_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入起始的页码：&#x27;</span>))</span><br><span class="line">   end_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入结束的页码：&#x27;</span>))</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start_page, end_page + <span class="number">1</span>):</span><br><span class="line">      <span class="comment"># 每一页都有自己的请求定制</span></span><br><span class="line">      request = create_request(page)</span><br><span class="line">      <span class="comment"># 获取响应数据</span></span><br><span class="line">      content = get_content(request)</span><br><span class="line">      <span class="comment"># 下载</span></span><br><span class="line">      down_load(page,content)</span><br></pre></td></tr></table></figure>

<h2 id="10-ajax的post请求"><a href="#10-ajax的post请求" class="headerlink" title="10.ajax的post请求"></a>10.ajax的post请求</h2><p>KFC地点查询</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment"># @Time:2022/3/2916:33</span></span><br><span class="line"><span class="comment"># @Author:陈 玉 皓</span></span><br><span class="line"><span class="comment"># @File:kfcdemo.py</span></span><br><span class="line"><span class="comment"># @Sofeware:PyCharm</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">location,page</span>):</span><br><span class="line">   url = <span class="string">&#x27;http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname&#x27;</span></span><br><span class="line">   headers = &#123;</span><br><span class="line">      <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">   data = &#123;</span><br><span class="line">      <span class="string">&#x27;cname&#x27;</span>: location,</span><br><span class="line">      <span class="string">&#x27;pid&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;pageIndex&#x27;</span>: page,</span><br><span class="line">      <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;10&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">#post方式编码</span></span><br><span class="line">   data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">   request = urllib.request.Request(url=url,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">   response = urllib.request.urlopen(request)</span><br><span class="line">   content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">   <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down_load</span>(<span class="params">content,page</span>):</span><br><span class="line">   <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;kfc_&#x27;</span>+<span class="built_in">str</span>(page)+<span class="string">&#x27;.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">      f.write(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   localtion = <span class="built_in">input</span>(<span class="string">&#x27;请输入你要查询的省份或者城市:&#x27;</span>)</span><br><span class="line">   start_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入起始页码:&#x27;</span>))</span><br><span class="line">   end_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入结束页码:&#x27;</span>))</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start_page,end_page + <span class="number">1</span>):</span><br><span class="line">      <span class="comment"># 定制请求对象</span></span><br><span class="line">      request = create_request(localtion,page)</span><br><span class="line">      <span class="comment">#获取响应内容</span></span><br><span class="line">      content = get_content(request)</span><br><span class="line">      <span class="comment">#下载每一页的数据</span></span><br><span class="line">      down_load(content,page)</span><br></pre></td></tr></table></figure>

<h2 id="11-UrlError-HTTPError"><a href="#11-UrlError-HTTPError" class="headerlink" title="11.UrlError\HTTPError"></a>11.UrlError\HTTPError</h2><p><strong>简介:</strong></p>
<ol>
<li><p>HTTPError类是URLError类的子类 </p>
</li>
<li><p>导入的包urllib.error.HTTPError         urllib.error.URLError </p>
</li>
<li><p>http错误：http错误是针对浏览器无法连接到服务器而增加出来的错误提示。引导并告诉浏览者该页是哪里出了问题。</p>
</li>
<li><p>通过urllib发送请求的时候，有可能会发送失败，这个时候如果想让你的代码更加的健壮，可以通过try‐</p>
</li>
</ol>
<p>except进行捕获异常，异常有两类，URLError\HTTPError </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"><span class="comment">#url = https://blog.csdn.net/TZ45678/article/details/123486485</span></span><br><span class="line"><span class="comment">#乱改一下会出异常</span></span><br><span class="line">url = <span class="string">&#x27;https://blog.csdn.net/TZ45678/article/details/123486485sdfasfdasdf&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">   <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line">   response = urllib.request.urlopen(request)</span><br><span class="line">   content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">   <span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> urllib.error.HTTPError:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;系统正在升级...&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="12-cookie登录"><a href="#12-cookie登录" class="headerlink" title="12.cookie登录"></a>12.cookie登录</h2>]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
  </entry>
  <entry>
    <title>工具类积累</title>
    <url>/2022/07/02/%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%A7%AF%E7%B4%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="MD5工具类"><a href="#MD5工具类" class="headerlink" title="MD5工具类"></a>MD5工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MD5Utils</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用md5的算法进行加密</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">md5</span><span class="params">(String plainText)</span> &#123;</span><br><span class="line">      <span class="type">byte</span>[] secretBytes = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         secretBytes = MessageDigest.getInstance(<span class="string">&quot;md5&quot;</span>).digest(</span><br><span class="line">               plainText.getBytes());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;没有md5这个算法！&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">String</span> <span class="variable">md5code</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="number">1</span>, secretBytes).toString(<span class="number">16</span>);<span class="comment">// 16进制数字</span></span><br><span class="line">      <span class="comment">// 如果生成数字未满32位，需要前面补0</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">32</span> - md5code.length(); i++) &#123;</span><br><span class="line">         md5code = <span class="string">&quot;0&quot;</span> + md5code;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> md5code;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      System.out.println(md5(<span class="string">&quot;1234&quot;</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="日期工具类"><a href="#日期工具类" class="headerlink" title="日期工具类"></a>日期工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期操作工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期转换-  String -&gt; Date</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dateString 字符串时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Date类型信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">parseString2Date</span><span class="params">(String dateString)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (dateString == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parseString2Date(dateString, <span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期转换-  String -&gt; Date</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dateString 字符串时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern    格式模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Date类型信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">parseString2Date</span><span class="params">(String dateString, String pattern)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (dateString == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(pattern);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> sdf.parse(dateString);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期转换 Date -&gt; String</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date Date类型信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 字符串时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">parseDate2String</span><span class="params">(Date date)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (date == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parseDate2String(date, <span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期转换 Date -&gt; String</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date    Date类型信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern 格式模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 字符串时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">parseDate2String</span><span class="params">(Date date, String pattern)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (date == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(pattern);</span><br><span class="line">        <span class="type">String</span> <span class="variable">strDate</span> <span class="operator">=</span> sdf.format(date);</span><br><span class="line">        <span class="keyword">return</span> strDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前日期的本周一是几号</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 本周一的日期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">getThisWeekMonday</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        cal.setTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">// 获得当前日期是一个星期的第几天</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">dayWeek</span> <span class="operator">=</span> cal.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == dayWeek) &#123;</span><br><span class="line">            cal.add(Calendar.DAY_OF_MONTH, -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置一个星期的第一天，按中国的习惯一个星期的第一天是星期一</span></span><br><span class="line">        cal.setFirstDayOfWeek(Calendar.MONDAY);</span><br><span class="line">        <span class="comment">// 获得当前日期是一个星期的第几天</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> cal.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">        <span class="comment">// 根据日历的规则，给当前日期减去星期几与一个星期第一天的差值</span></span><br><span class="line">        cal.add(Calendar.DATE, cal.getFirstDayOfWeek() - day);</span><br><span class="line">        <span class="keyword">return</span> cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前日期周的最后一天</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前日期周的最后一天</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">getSundayOfThisWeek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="type">int</span> <span class="variable">dayOfWeek</span> <span class="operator">=</span> c.get(Calendar.DAY_OF_WEEK) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (dayOfWeek == <span class="number">0</span>) &#123;</span><br><span class="line">            dayOfWeek = <span class="number">7</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c.add(Calendar.DATE, -dayOfWeek + <span class="number">7</span>);</span><br><span class="line">        <span class="keyword">return</span> c.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据日期区间获取月份列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minDate 开始时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxDate 结束时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 月份列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getMonthBetween</span><span class="params">(String minDate, String maxDate, String format)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ArrayList&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">min</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">max</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line"></span><br><span class="line">        min.setTime(sdf.parse(minDate));</span><br><span class="line">        min.set(min.get(Calendar.YEAR), min.get(Calendar.MONTH), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        max.setTime(sdf.parse(maxDate));</span><br><span class="line">        max.set(max.get(Calendar.YEAR), max.get(Calendar.MONTH), <span class="number">2</span>);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(format);</span><br><span class="line"></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">curr</span> <span class="operator">=</span> min;</span><br><span class="line">        <span class="keyword">while</span> (curr.before(max)) &#123;</span><br><span class="line">            result.add(sdf2.format(curr.getTime()));</span><br><span class="line">            curr.add(Calendar.MONTH, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据日期获取年度中的周索引</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date 日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 周索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">getWeekOfYear</span><span class="params">(String date)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">useDate</span> <span class="operator">=</span> parseString2Date(date);</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        cal.setTime(useDate);</span><br><span class="line">        <span class="keyword">return</span> cal.get(Calendar.WEEK_OF_YEAR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据年份获取年中周列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> year 年分</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 周列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Integer, String&gt; <span class="title function_">getWeeksOfYear</span><span class="params">(String year)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">useDate</span> <span class="operator">=</span> parseString2Date(year, <span class="string">&quot;yyyy&quot;</span>);</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        cal.setTime(useDate);</span><br><span class="line">        <span class="comment">//获取年中周数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">weeksCount</span> <span class="operator">=</span> cal.getWeeksInWeekYear();</span><br><span class="line">        Map&lt;Integer, String&gt; mapWeeks = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">55</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; weeksCount; i++) &#123;</span><br><span class="line">            cal.get(Calendar.DAY_OF_YEAR);</span><br><span class="line">            mapWeeks.put(i + <span class="number">1</span>, parseDate2String(getFirstDayOfWeek(cal.get(Calendar.YEAR), i)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mapWeeks;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某年的第几周的开始日期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> year 年分</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> week 周索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 开始日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">getFirstDayOfWeek</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> week)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>();</span><br><span class="line">        c.set(Calendar.YEAR, year);</span><br><span class="line">        c.set(Calendar.MONTH, Calendar.JANUARY);</span><br><span class="line">        c.set(Calendar.DATE, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> (GregorianCalendar) c.clone();</span><br><span class="line">        cal.add(Calendar.DATE, week * <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getFirstDayOfWeek(cal.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某年的第几周的结束日期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> year 年份</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> week 周索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结束日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">getLastDayOfWeek</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> week)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>();</span><br><span class="line">        c.set(Calendar.YEAR, year);</span><br><span class="line">        c.set(Calendar.MONTH, Calendar.JANUARY);</span><br><span class="line">        c.set(Calendar.DATE, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> (GregorianCalendar) c.clone();</span><br><span class="line">        cal.add(Calendar.DATE, week * <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getLastDayOfWeek(cal.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前时间所在周的开始日期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date 当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 开始时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">getFirstDayOfWeek</span><span class="params">(Date date)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>();</span><br><span class="line">        c.setFirstDayOfWeek(Calendar.SUNDAY);</span><br><span class="line">        c.setTime(date);</span><br><span class="line">        c.set(Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek());</span><br><span class="line">        <span class="keyword">return</span> c.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前时间所在周的结束日期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date 当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结束日期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">getLastDayOfWeek</span><span class="params">(Date date)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>();</span><br><span class="line">        c.setFirstDayOfWeek(Calendar.SUNDAY);</span><br><span class="line">        c.setTime(date);</span><br><span class="line">        c.set(Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() + <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">return</span> c.getTime();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获得上周一的日期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">geLastWeekMonday</span><span class="params">(Date date)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        cal.setTime(getThisWeekMonday(date));</span><br><span class="line">        cal.add(Calendar.DATE, -<span class="number">7</span>);</span><br><span class="line">        <span class="keyword">return</span> cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得本周一的日期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">getThisWeekMonday</span><span class="params">(Date date)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        cal.setTime(date);</span><br><span class="line">        <span class="comment">// 获得当前日期是一个星期的第几天</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">dayWeek</span> <span class="operator">=</span> cal.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == dayWeek) &#123;</span><br><span class="line">            cal.add(Calendar.DAY_OF_MONTH, -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置一个星期的第一天，按中国的习惯一个星期的第一天是星期一</span></span><br><span class="line">        cal.setFirstDayOfWeek(Calendar.MONDAY);</span><br><span class="line">        <span class="comment">// 获得当前日期是一个星期的第几天</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> cal.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">        <span class="comment">// 根据日历的规则，给当前日期减去星期几与一个星期第一天的差值</span></span><br><span class="line">        cal.add(Calendar.DATE, cal.getFirstDayOfWeek() - day);</span><br><span class="line">        <span class="keyword">return</span> cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得下周一的日期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">getNextWeekMonday</span><span class="params">(Date date)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        cal.setTime(getThisWeekMonday(date));</span><br><span class="line">        cal.add(Calendar.DATE, <span class="number">7</span>);</span><br><span class="line">        <span class="keyword">return</span> cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得今天日期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">getToday</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得本月一日的日期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">getFirstDay4ThisMonth</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        calendar.set(Calendar.DAY_OF_MONTH,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> calendar.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本周一&quot;</span> + parseDate2String(getThisWeekMonday()));</span><br><span class="line">            System.out.println(<span class="string">&quot;本月一日&quot;</span> + parseDate2String(getFirstDay4ThisMonth()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="随机生成验证码工具类"><a href="#随机生成验证码工具类" class="headerlink" title="随机生成验证码工具类"></a>随机生成验证码工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 随机生成验证码工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidateCodeUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 长度为4位或者6位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">generateValidateCode</span><span class="params">(<span class="type">int</span> length)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">4</span>)&#123;</span><br><span class="line">            code = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">9999</span>);<span class="comment">//生成随机数，最大为9999</span></span><br><span class="line">            <span class="keyword">if</span>(code &lt; <span class="number">1000</span>)&#123;</span><br><span class="line">                code = code + <span class="number">1000</span>;<span class="comment">//保证随机数为4位数字</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(length == <span class="number">6</span>)&#123;</span><br><span class="line">            code = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">999999</span>);<span class="comment">//生成随机数，最大为999999</span></span><br><span class="line">            <span class="keyword">if</span>(code &lt; <span class="number">100000</span>)&#123;</span><br><span class="line">                code = code + <span class="number">100000</span>;<span class="comment">//保证随机数为6位数字</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;只能生成4位或6位数字验证码&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成指定长度字符串验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateValidateCode4String</span><span class="params">(<span class="type">int</span> length)</span>&#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rdm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">hash1</span> <span class="operator">=</span> Integer.toHexString(rdm.nextInt());</span><br><span class="line">        <span class="type">String</span> <span class="variable">capstr</span> <span class="operator">=</span> hash1.substring(<span class="number">0</span>, length);</span><br><span class="line">        <span class="keyword">return</span> capstr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>左神动态规划专题</title>
    <url>/2022/03/27/%E5%B7%A6%E7%A5%9E%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote>
<p>机器人走路问题，假设有排成一排的N个位置，记为1-N，N一定大于等于2，规定机器人必须走K步，最终能来到P位置，则机器人到达P点一共多少种方法？</p>
<p>注：如果机器人在1位置，则下一步只能去2位置，若机器人在N位置，则下一步只能去N - 1 位置</p>
</blockquote>
<h4 id="尝试1："><a href="#尝试1：" class="headerlink" title="尝试1："></a>尝试1：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       System.out.println(way1(<span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">way1</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> start, <span class="type">int</span> aim, <span class="type">int</span> K)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> process1(start, K, aim, N);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//机器人当前的来到的位置是cur</span></span><br><span class="line">   <span class="comment">//机器人还有rest步需要去走</span></span><br><span class="line">   <span class="comment">//最终的目标是aim</span></span><br><span class="line">   <span class="comment">//有哪些位置? 1 - N</span></span><br><span class="line">   <span class="comment">//返回： 机器人从cur出发，走过rest步之后，最终停在aim的方法数有多少种。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process1</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> rest, <span class="type">int</span> aim, <span class="type">int</span> N)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (rest == <span class="number">0</span>) &#123; <span class="comment">//步数为0了，不需要走了！</span></span><br><span class="line">           <span class="comment">// 直接判断当前点是否为目标点并返回结果</span></span><br><span class="line">           <span class="type">return</span> <span class="variable">cur</span> <span class="operator">=</span>= aim ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//rest&gt; 0</span></span><br><span class="line">       <span class="comment">//还有步数要走！</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//机器人当前在左边界，下一步只能向右走,即1 -&gt; 2</span></span><br><span class="line">       <span class="keyword">if</span> (cur == <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="comment">//在1位置有rest步和在2位置有rest - 1步，没有区别，因为1 -&gt; 2这一步是固定的</span></span><br><span class="line">           <span class="keyword">return</span> process1(<span class="number">2</span>, rest - <span class="number">1</span>, aim, N);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//机器人当前在右边界，下一步只能向左走，即N - 1 &lt;- N</span></span><br><span class="line">       <span class="keyword">if</span> (cur == N) &#123;</span><br><span class="line">           <span class="keyword">return</span> process1(N - <span class="number">1</span>, rest - <span class="number">1</span>, aim, N);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//机器人在中间，可以任意向两边走,则结果为向左走的结果和向右走的结果加和</span></span><br><span class="line">       <span class="keyword">return</span> process1(cur - <span class="number">1</span>, rest - <span class="number">1</span>, aim, N) + process1(cur + <span class="number">1</span>, rest - <span class="number">1</span>, aim, N);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><code>出现重复解的暴力递归才可以优化</code></p>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>数据解析</title>
    <url>/2022/04/06/%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-XPath"><a href="#1-XPath" class="headerlink" title="1. XPath"></a>1. XPath</h1><h2 id="1-1-XPath简介"><a href="#1-1-XPath简介" class="headerlink" title="1.1 XPath简介"></a>1.1 XPath简介</h2><p>XPath，全称是<code>XML Path Language</code>，即XML路径语言，是一门在XML文档中查找信息的语言，也同样适用于HTML文档的搜索。</p>
<h2 id="1-2-XPath使用"><a href="#1-2-XPath使用" class="headerlink" title="1.2 XPath使用"></a>1.2 XPath使用</h2><ol>
<li><p>安装lxml库</p>
<p>pip install lxml -i <a href="https://pypi.douban.com/simple">https://pypi.douban.com/simple</a></p>
</li>
<li><p>导入lxml.etree</p>
<p>from lxml import etree</p>
</li>
<li><p>etree.parse()             解析本地文件</p>
<p>html_tree &#x3D; etree.parse(‘XX.html’)</p>
</li>
<li><p>etree.HTML()            解析服务器响应的文件</p>
<p>html_tree &#x3D; etree.HTML(response.read().decode(‘utf-8’))</p>
</li>
<li><p>html_tree.xpath(‘xpath路径’)</p>
</li>
</ol>
<h2 id="1-2-XPath基本语法"><a href="#1-2-XPath基本语法" class="headerlink" title="1.2 XPath基本语法"></a>1.2 XPath基本语法</h2><ul>
<li>路径查询<ul>
<li>&#x2F;&#x2F;：从当前节点选取子孙节点，不考虑层级关系</li>
<li>&#x2F;：从当前节点选取直接子节点</li>
<li><strong>.</strong> ：选取当前节点</li>
<li><strong>..</strong> :选取当前节点的父节点</li>
</ul>
</li>
<li>谓词查询(<strong>注意单引号和双引号的问题</strong>)<ul>
<li>&#x2F;&#x2F;div[@id]</li>
<li>&#x2F;&#x2F;div[@id &#x3D; “box”]</li>
</ul>
</li>
<li>属性查询<ul>
<li>&#x2F;&#x2F;@class</li>
</ul>
</li>
<li>模糊查询<ul>
<li>&#x2F;&#x2F;div[contains(@id，”he”)]，表示id中包含关键字he的的div标签</li>
<li>&#x2F;&#x2F;div[starts-with(@id，“he”)]，表示id开头是he的的div标签</li>
</ul>
</li>
<li>内容查询<ul>
<li>&#x2F;&#x2F;div&#x2F;h1&#x2F;text()，查看标签内容</li>
</ul>
</li>
<li>逻辑运算<ul>
<li>&#x2F;&#x2F;div[@id &#x3D;”head” and @class &#x3D; “s_down”] </li>
<li>&#x2F;&#x2F;div[@id &#x3D;”head” or @class &#x3D; “s_down”]</li>
</ul>
</li>
</ul>
<h2 id="1-3-实践案例"><a href="#1-3-实践案例" class="headerlink" title="1.3 实践案例"></a>1.3 实践案例</h2><p><strong>获取百度网站的百度一下</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment">#@Time:2022/4/614:32</span></span><br><span class="line"><span class="comment">#@Author:陈 玉 皓</span></span><br><span class="line"><span class="comment">#@File:解析_百度一下.py</span></span><br><span class="line"><span class="comment">#@Sofeware:PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment">#（1）获取网页的源码</span></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">   <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"><span class="comment">#模拟浏览器访问服务器</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"><span class="comment">#获取网页源码</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#（2）解析服务器响应的文件</span></span><br><span class="line">tree = etree.HTML(content)</span><br><span class="line"></span><br><span class="line">result = tree.xpath(<span class="string">&#x27;//span/input[@id=&quot;su&quot;]/@value&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#（3）打印</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<h4 id="获取站长素材前十页的老虎图片"><a href="#获取站长素材前十页的老虎图片" class="headerlink" title="获取站长素材前十页的老虎图片"></a>获取站长素材前十页的老虎图片</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment"># @Time:2022/4/614:54</span></span><br><span class="line"><span class="comment"># @Author:陈 玉 皓</span></span><br><span class="line"><span class="comment"># @File:获取站长素材前十页的老虎图片.py</span></span><br><span class="line"><span class="comment"># @Sofeware:PyCharm</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    <span class="keyword">if</span> page == <span class="number">1</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://sc.chinaz.com/tupian/laohutupian.html&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> &lt; page &lt; <span class="number">7</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://sc.chinaz.com/tupian/laohutupian_&#x27;</span> + <span class="built_in">str</span>(page) + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down_load</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="comment"># 下载图片</span></span><br><span class="line">    tree = etree.HTML(content)</span><br><span class="line">    <span class="comment"># 图片名称列表</span></span><br><span class="line">    name_list = tree.xpath(<span class="string">&#x27;//div[@id= &quot;container&quot;]//a/img/@alt&#x27;</span>)</span><br><span class="line">    <span class="comment"># 图片地址列表</span></span><br><span class="line">    src_list = tree.xpath(<span class="string">&#x27;//div[@id= &quot;container&quot;]/div/div/a/img/@src2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(name_list)):</span><br><span class="line">        name = name_list[i]</span><br><span class="line">        src = src_list[i]</span><br><span class="line">        <span class="comment">#去掉_s就是下的高清图</span></span><br><span class="line">        url = <span class="string">&quot;https:&quot;</span> + src.replace(<span class="string">&quot;_s&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        urllib.request.urlretrieve(url=url, filename=<span class="string">&quot;./tigers/&quot;</span> + name + <span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Think_pwd：214115</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入起始页码:&#x27;</span>))</span><br><span class="line">    end_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入结束页码:&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> end_page &gt; <span class="number">6</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;您输入的页数大于总页数，请输入小于7的数字！&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start_page, end_page + <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># (1) 定制请求对象</span></span><br><span class="line">            request = create_request(page)</span><br><span class="line">            <span class="comment"># (2) 获取响应对象</span></span><br><span class="line">            content = get_content(request)</span><br><span class="line">            <span class="comment"># (3) 下载</span></span><br><span class="line">            down_load(content)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;下载完成！&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="2-Beautiful-Soup"><a href="#2-Beautiful-Soup" class="headerlink" title="2. Beautiful Soup"></a>2. Beautiful Soup</h1><h2 id="2-1-BeautifulSoup简介"><a href="#2-1-BeautifulSoup简介" class="headerlink" title="2.1 BeautifulSoup简介"></a>2.1 BeautifulSoup简介</h2><ol>
<li><p>BeautifulSoup简称： </p>
<ol>
<li>bs4</li>
</ol>
</li>
<li><p>什么是BeatifulSoup？ </p>
<ol>
<li>BeautifulSoup，和lxml一样，是一个html的解析器，主要功能也是解析和提取数据</li>
</ol>
</li>
<li><p>优缺点？ </p>
<ol>
<li>缺点：效率没有lxml的效率高 </li>
<li>优点：接口设计人性化，使用方便</li>
</ol>
</li>
</ol>
<h2 id="2-2-安装以及创建"><a href="#2-2-安装以及创建" class="headerlink" title="2.2 安装以及创建"></a>2.2 安装以及创建</h2><ol>
<li><p>安装</p>
<ol>
<li>pip install bs4</li>
</ol>
</li>
<li><p>导入</p>
<ol>
<li>from bs4 import BeautifulSoup</li>
</ol>
</li>
<li><p>创建对象 </p>
<ol>
<li><p>服务器响应的文件生成对象 </p>
<p>soup &#x3D; BeautifulSoup(response.read().decode(), ‘lxml’) </p>
</li>
<li><p>本地文件生成对象 </p>
<p>soup &#x3D; BeautifulSoup(open(‘1.html’), ‘lxml’)</p>
</li>
</ol>
</li>
</ol>
<p><code>注意：默认打开文件的编码格式gbk所以需要指定打开编码格式</code></p>
<h2 id="2-3-节点定位"><a href="#2-3-节点定位" class="headerlink" title="2.3 节点定位"></a>2.3 节点定位</h2><ul>
<li>方法选择器：<ul>
<li><code>find_all()</code>，查询符合条件的所有元素的一个列表。<ul>
<li><code>name</code>：根据节点名来查询元素。例：<code>find_all(name = &#39;ul&#39;)</code></li>
<li><code>attrs</code>：根据属性来查询元素。例：<code>find_all(attrs = &#123;&#39;id&#39;：&#39;h1&#39;&#125;)</code></li>
<li><code>text</code>：根据传入的字符串或者正则表达式对象来匹配文本。例：<code>find_all(text = re.compile(&#39;link&#39;))</code></li>
</ul>
</li>
<li><code>find()</code>，查询符合条件的所有元素，只返回第一个元素。</li>
</ul>
</li>
<li>CSS选择器<ul>
<li><code>select(根据选择器的到节点对象)【推荐】</code><ul>
<li>根据标签获取节点：<code>select(标签名)</code></li>
<li>根据class获取节点：<code>select(.class)</code></li>
<li>根据id获取节点：<code>select(#id)</code></li>
<li>根据属性获取节点：<code>select(&#39;li[class]&#39;)</code></li>
<li>层级选择器：<ul>
<li>后代选择器：<code>element element</code>：div p</li>
<li>子代选择器：<code>element&gt;element</code>：div &gt; p</li>
<li>同级选择器：<code>element,element</code>：div , p</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>节点信息<ul>
<li>获取节点内容：<ul>
<li>obj.get_text()</li>
<li>obj.string</li>
</ul>
</li>
<li>节点属性：<ul>
<li>tag.name 获取标签名<ul>
<li>tag.name</li>
</ul>
</li>
<li>tag.attrs 将标签属性值作为一个字典返回</li>
</ul>
</li>
<li>获取节点属性<ul>
<li>obj.attr.get(‘title’)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-4-Demo"><a href="#2-4-Demo" class="headerlink" title="2.4 Demo"></a>2.4 Demo</h2><h4 id="获取星巴克菜单中的的菜品名称"><a href="#获取星巴克菜单中的的菜品名称" class="headerlink" title="获取星巴克菜单中的的菜品名称"></a>获取星巴克菜单中的的菜品名称</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.starbucks.com.cn/menu/&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(content,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment">#//ul[@class=&quot;grid padded-3 product&quot;]//strong</span></span><br><span class="line"><span class="comment">#获取食品名称列表</span></span><br><span class="line">name_list = soup.select(<span class="string">&#x27;ul[class=&quot;grid padded-3 product&quot;] strong&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> name_list:</span><br><span class="line">    <span class="comment">#获取节点内容</span></span><br><span class="line">    <span class="built_in">print</span>(name.get_text())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
  </entry>
  <entry>
    <title>异常面试题整理</title>
    <url>/2022/07/28/%E5%BC%82%E5%B8%B8%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="try中有return，finally还会执行吗？"><a href="#try中有return，finally还会执行吗？" class="headerlink" title="try中有return，finally还会执行吗？"></a>try中有return，finally还会执行吗？</h2><p><strong>会执行，</strong>并且finally的执行会早于try中的return</p>
<p>结论：</p>
<ol>
<li>不管有木有异常，finally块中的代码都会执行</li>
<li>当try和catch中有return时，finally仍然会执行</li>
<li>因为如果存在finally代码块，try中的return语句不会立马返回给调用者，而是会记录下当前的返回值，等待finally代码块执行完毕后再向调用者返回，然后如果finally代码块中对返回值进行了修改，则会返回修改后的返回值。</li>
</ol>
<hr>
<h2 id="Exception和Error"><a href="#Exception和Error" class="headerlink" title="Exception和Error"></a>Exception和Error</h2><p>Java可能抛出的结构有三种类型：运行时异常(RuntimeException)，受检异常(CheckedException)和错误(Error)。</p>
<ul>
<li><p><strong>运行时异常(RuntimeException)</strong></p>
</li>
<li><ul>
<li><strong>定义：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>RuntimeException及其子类都被称为运行时异常。</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>特点：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>Java编译器不会检查该异常。也就是说当程序中可能出现该异常时，如果没有通过throws声明抛出它，也没有用try-catch捕获它，还是会编译通过。</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>常见的几种运行时异常：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>ClassCastException 类转换异常</li>
<li>ArithmeticException 除零异常</li>
<li>IndexOutofBoundsException 数组越界异常</li>
<li>NullPointerException 空指针异常</li>
<li>BufffferOverflflowException 缓冲区溢出异常</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>受检异常(CheckedException)</strong></p>
</li>
<li><ul>
<li><strong>定义：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>Exception本身，以及Exception的子类中除了“运行时异常”之外的其他子类都属于受检查异常。</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>特点：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>Java编译器会检查此类异常，要么通过throws对该类异常进行抛出，要么通过try-catch进行捕获处理，否则不能通过编译。</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>常见的几种被检查异常：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>IOException （读写异常）</li>
<li>FileNotFoundException （找不到文件异常）</li>
<li>SQLException （比如在使用JDBC访问数据库时需要处理的SQLException）</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>错误（Error）</strong></p>
</li>
<li><ul>
<li><strong>定义：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>Error类及其子类</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>特点：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>和运行时异常一样，编译器也不会对错误进行检查。</li>
<li>Error 类型的错误通常为虚拟机相关错误，如系统崩溃，内存不足，堆栈溢出等，一旦这类错误发生，通常应用程序会被终止，仅靠应用程序本身无法恢复。</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="throw和throws的区别是什么？"><a href="#throw和throws的区别是什么？" class="headerlink" title="throw和throws的区别是什么？"></a>throw和throws的区别是什么？</h2><p>Java中的异常处理除了捕获和处理异常之外，还可以抛出异常，可以通过throws关键字在方法上声明该方法要抛出的异常，或者在方法内部通过throw关键字来抛出异常对象。</p>
<p><strong>区别：</strong></p>
<ul>
<li>throw 关键字用在方法内部，只能用于抛出一种异常，用来抛出方法或代码块中的异常，受查异常和非受查异常都可以被抛出。</li>
<li>throws 关键字用在方法声明上，可以抛出多个异常，用来标识该方法可能抛出的异常列表。一个方法用 throws 标识了可能抛出的异常列表，调用该方法的方法中必须包含可处理异常的代码，否则也要在方法签名中用 throws 关键字声明相应的异常。</li>
</ul>
<p><a href="https://blog.csdn.net/qq_43061290/article/details/124078378">
</a></p>
<h2 id="final、finally、finalize-有什么区别？"><a href="#final、finally、finalize-有什么区别？" class="headerlink" title="final、finally、finalize 有什么区别？"></a>final、finally、finalize 有什么区别？</h2><ul>
<li>final可以修饰类、变量、方法，修饰类表示该类不能被继承、修饰方法表示该方法不能被重写、修饰变量表示该变量是一个常量不能被重新赋值。</li>
<li>finally一般作用在try-catch代码块中，在处理异常的时候，通常我们将一定要执行的代码方法finally代码块中，表示不管是否出现异常，该代码块都会执行，一般用来存放一些关闭资源的代码。</li>
<li>finalize是一个方法，属于Object类的一个方法，而Object类是所有类的父类，<strong>Java 中允许使用 finalize()方法在垃圾收集器将对象从内存中（析构）清除出去之前做必要的清理工作。</strong></li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>操作系统面试题整理</title>
    <url>/2022/08/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、操作系统基础"><a href="#一、操作系统基础" class="headerlink" title="一、操作系统基础"></a>一、操作系统基础</h2><h3 id="1-什么是操作系统？"><a href="#1-什么是操作系统？" class="headerlink" title="1.什么是操作系统？"></a>1.什么是操作系统？</h3><ul>
<li>操作系统本质上是一个运行在计算机上的软件程序，用于管理计算机硬件和软件资源。</li>
<li>操作系统的存在屏蔽了硬件的复杂性，它像是硬件使用的负责人，统筹着各种相关事项。</li>
<li>操作系统的内核(Kernel)是操作系统的核心部分，主要负责系统内存、软件设备、文件系统和应用程序的管理。内核是连接应用程序和硬件的桥梁，决定着系统的性能和稳定性。</li>
</ul>
<h3 id="2-什么是系统调用？"><a href="#2-什么是系统调用？" class="headerlink" title="2.什么是系统调用？"></a>2.什么是系统调用？</h3><p>根据进程访问资源的特点，可以把进程在系统上的运行分为两个级别：</p>
<ul>
<li><strong>用户态：</strong>用户态运行的进程只可以读取用户程序的数据。</li>
<li><strong>系统态：</strong>系统态运行的进程或者程序几乎可以访问计算机的任何资源，不受限制。</li>
</ul>
<h5 id="系统调用："><a href="#系统调用：" class="headerlink" title="系统调用："></a>系统调用：</h5><p>我们运行的程序基本都是运行在用户态，如果我们调用操作系统提供的系统态级别的子功能，就需要进行系统调用。</p>
<p>也就是说我们运行的用户程序中，凡是和系统态级别的资源有关的操作(比如文件管理、进程控制、内存管理等)，都必须<strong>通过系统调用的方式向操作系统提出服务请求</strong>，并且由操作系统代为完成。</p>
<p>系统调用按照功能大致可以分为以下几类：</p>
<ul>
<li><strong>设备管理：</strong>完成设备的请求或释放，以及设备启动等功能。</li>
<li><strong>文件管理：</strong>完成文件的读、写、创建及删除等功能。</li>
<li><strong>进程控制：</strong>完成进程的创建、撤销、阻塞及唤醒等功能。</li>
<li><strong>进程通信：</strong>完成进程之间的消息传递或信号传递等功能。</li>
<li><strong>内存管理：</strong>完成内存的分配、回收以及获取作业占用内存区大小及地址等功能。</li>
</ul>
<hr>
<h2 id="二、进程与线程"><a href="#二、进程与线程" class="headerlink" title="二、进程与线程"></a>二、进程与线程</h2><h3 id="1-线程、程序、进程的基本概念。以及他们之间的关系。"><a href="#1-线程、程序、进程的基本概念。以及他们之间的关系。" class="headerlink" title="1.线程、程序、进程的基本概念。以及他们之间的关系。"></a>1.线程、程序、进程的基本概念。以及他们之间的关系。</h3><ul>
<li><p><strong>程序：</strong>是为了完成特定任务、用某种语言编写的一组指令的集合，是静态的代码</p>
</li>
<li><p><strong>进程：</strong></p>
</li>
<li><ul>
<li>进程是<strong>程序的一次执行过程</strong>，或者说是<strong>正在运行的一个程序，</strong>是系统运行程序的基本单位，比如我们使用QQ，就启动了一个进程，操作系统会为该进程分配内存空间。进程是动态的，有创建、运行、和销毁的过程。</li>
</ul>
</li>
<li><p><strong>线程：</strong></p>
</li>
<li><ul>
<li><strong>概念：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>线程是由进程创建出来的，是进程的一个实体</li>
<li>一个进程可以拥有多个线程，比如迅雷同时下载多个文件，QQ打开多个聊天窗口，可将这些看为进程里的线程。</li>
</ul>
</li>
</ul>
</li>
<li><p>线程是进程划分的更小的单位。<strong>线程与进程最大的不同在于不同的进程是相互独立的，而同一进程中的线程是有极大的可能会相互影响的。</strong></p>
</li>
<li><p>与进程不同的是同类的<strong>多个线程共享进程的堆和方法区资源</strong>，但是每个线程都有自己的<strong>程序计数器</strong>、<strong>虚拟机栈</strong>和<strong>本地方法栈</strong>，所以系统在产生一个线程或者在各个线程之间做切换工作时，负担要比进程小的多，也正因为如此，线程也被称为<strong>轻量级进程</strong>。</p>
</li>
<li><p><strong>总结：</strong> </p>
<ul>
<li>线程是进程划分成的更小的运行单位，一个进程在其执行的过程中可以产生多个线程。</li>
<li>线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。</li>
<li>线程执行开销小，但不利于资源的管理和保护；而进程正相反。</li>
</ul>
</li>
</ul>
<h3 id="2-进程有哪几种状态"><a href="#2-进程有哪几种状态" class="headerlink" title="2.进程有哪几种状态?"></a>2.进程有哪几种状态?</h3><ul>
<li><strong>创建状态(new)</strong> ：进程正在被创建，尚未到就绪状态。</li>
<li><strong>就绪状态(ready)</strong> ：进程已处于准备运行状态，即进程获得了除了处理器之外的一切所需资源，一旦得到处理器资源(处理器分配的时间片)即可运行。</li>
<li><strong>运行状态(running)</strong> ：进程正在处理器上上运行(单核 CPU 下任意时刻只有一个进程处于运行状态)。</li>
<li><strong>阻塞状态(waiting)</strong> ：又称为等待状态，进程正在等待某一事件而暂停运行如等待某资源为可用或等待 IO 操作完成。即使处理器空闲，该进程也不能运行。</li>
<li><strong>结束状态(terminated)</strong> ：进程正在从系统中消失。可能是进程正常结束或其他原因中断退出运行。</li>
</ul>
<h3 id="3-进程间常见的通信方式？"><a href="#3-进程间常见的通信方式？" class="headerlink" title="3.进程间常见的通信方式？"></a>3.进程间常见的通信方式？</h3><h4 id="进程通信概念："><a href="#进程通信概念：" class="headerlink" title="进程通信概念："></a>进程通信概念：</h4><p>每个进程各自有不同的用户地址空间，任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核，在内核中开辟一块缓冲区，进程1把数据从用户空间拷到内核缓冲区，进程2再从内核缓冲区把数据读走，内核提供的这种机制称为<strong>进程间通信（IPC，InterProcess Communication）</strong>。</p>
<p>常见的七种进程间通信方式：</p>
<ol>
<li><strong>管道&#x2F;匿名管道(Pipes)</strong> ：管道的实质是一个内核缓冲区，进程以先进先出的方式从缓冲区存取数据，管道一端的进程顺序的将数据写入缓冲区，另一端的进程则顺序的读出数据。只能用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。并且管道是半双工的，数据只能单向流动；需要双方通信时，需要建立起两个管道。</li>
<li><strong>有名管道(Names Pipes)</strong> : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循**先进先出(first in first out)**。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程之间的通信。</li>
<li><strong>信号(Signal)</strong> ：信号是Linux系统中用于进程间互相通信或者操作的一种机制，信号可以在任何时候发给某一进程，而无需知道该进程的状态。</li>
<li><strong>消息队列(Message Queuing)</strong> ：<ol>
<li>消息队列是消息的链表，具有特定的格式，存放在内存中并由消息队列标识符标识。</li>
<li>管道和消息队列的通信数据都是先进先出的原则。</li>
<li>与管道（无名管道：只存在于<strong>内存</strong>中的文件；有名管道：存在于实际的<strong>磁盘</strong>介质或者文件系统）不同的是消息队列存放在<strong>内核</strong>中，只有在内核重启(即，操作系统重启)或者显示地删除一个消息队列时，该消息队列才会被真正的删除。</li>
<li>消息队列可以实现消息的随机查询，消息不一定要以先进先出的次序读取，也可以按消息的类型读取.比 FIFO 更有优势。</li>
<li><strong>消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。</strong></li>
</ol>
</li>
<li><strong>信号量(Semaphores)</strong> ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。</li>
<li><strong>共享内存(Shared memory)</strong> ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。这种方式需要依靠某种同步操作，如互斥锁和信号量等。</li>
<li><strong>套接字(Sockets)</strong> : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP&#x2F;IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。</li>
</ol>
<h3 id="4-线程间同步的方式有哪些？"><a href="#4-线程间同步的方式有哪些？" class="headerlink" title="4.线程间同步的方式有哪些？"></a>4.线程间同步的方式有哪些？</h3><p>线程同步是指两个或多个<strong>共享关键资源</strong>的线程的并发执行。应该同步线程以避免关键的资源使用冲突。</p>
<p>操作系统中一般有三种线程同步的方式：</p>
<ol>
<li><strong>互斥量（Mutex）</strong>：采用互斥对象机制，只有拥有互斥对象的线程才能有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键字和各种锁都是这种机制。</li>
<li>**信号量(Semphares)**：允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。</li>
<li>**事件(Event)**：通过wait()和notify()的通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。</li>
</ol>
<h3 id="5-进程的调度算法有哪些？"><a href="#5-进程的调度算法有哪些？" class="headerlink" title="5.进程的调度算法有哪些？"></a>5.进程的调度算法有哪些？</h3><p>为了确定首先执行哪个进程以及最后执行哪个进程以实现最大 CPU 利用率，计算机科学家已经定义了一些算法，它们是：</p>
<ul>
<li><strong>先到先服务(FCFS)调度算法</strong> : 从就绪队列中选择一个<strong>最先进入该队列的进程</strong>为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。</li>
<li><strong>短作业优先(SJF)的调度算法</strong> : 从就绪队列中选出一个<strong>估计运行时间最短的进程</strong>为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。</li>
<li><strong>时间片轮转调度算法</strong> : 时间片轮转调度是一种最古老，最简单，<strong>最公平且使用最广的算法</strong>，又称 RR(Round robin)调度。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。</li>
<li><strong>多级反馈队列调度算法</strong> ：<ul>
<li>前面介绍的几种进程调度的算法都有一定的局限性。如<strong>短作业优先的调度算法，仅照顾了短进程而忽略了长进程</strong> 。</li>
<li>多级反馈队列调度算法是一种根据先来先服务原则给就绪队列排序，为就绪队列赋予不同的优先级数，不同的时间片，按照优先级抢占CPU的调度算法。</li>
<li>多级反馈队列调度算法既能使高优先级的作业得到响应又能使短作业（进程）迅速完成。，因而它是目前<strong>被公认的一种较好的进程调度算法</strong>，UNIX 操作系统采取的便是这种调度算法。</li>
</ul>
</li>
<li><strong>优先级调度</strong> ： 为每个进程分配优先级，首先执行具有最高优先级的进程，依此类推。具有相同优先级的进程以先到先服务的方式执行。也可以根据内存要求，时间要求或任何其他资源要求来确定优先级。</li>
</ul>
<hr>
<h2 id="三、内存管理"><a href="#三、内存管理" class="headerlink" title="三、内存管理"></a>三、内存管理</h2><h3 id="1-操作系统的内存管理是做什么的？"><a href="#1-操作系统的内存管理是做什么的？" class="headerlink" title="1.操作系统的内存管理是做什么的？"></a>1.操作系统的内存管理是做什么的？</h3><p>操作系统的内存管理主要负责内存的分配与回收（malloc 函数：申请内存，free 函数：释放内存），另外地址转换也就是将逻辑地址转换成相应的物理地址等功能也是操作系统内存管理做的事情。</p>
<h3 id="2-常见的几种内存管理机制"><a href="#2-常见的几种内存管理机制" class="headerlink" title="2.常见的几种内存管理机制"></a>2.常见的几种内存管理机制</h3><p>内存管理方式简单分为<strong>连续分配管理方式</strong>和<strong>非连续分配管理方式</strong>这两种。连续分配管理方式是指为一个用户程序分配一个连续的内存空间，常见的如 <strong>块式管理</strong> 。同样地，非连续分配管理方式允许一个用户程序使用的内存分布在离散或者说不相邻的内存中，常见的如<strong>页式管理</strong> 和 <strong>段式管理</strong>和<strong>段页式管理</strong>。</p>
<ol>
<li><strong>块式管理</strong> ：将内存分为几个固定大小的块，每个块中只包含一个进程。如果程序运行需要内存的话，操作系统就分配给它一块，如果程序运行只需要很小的空间的话，分配的这块内存很大一部分几乎被浪费了。这些在每个块中未被利用的空间，我们称之为碎片。</li>
<li><strong>页式管理</strong> ：把主存分为大小相等且固定的一页一页的形式，页较小，相对相比于块式管理的划分力度更大，提高了内存利用率，减少了碎片。页式管理通过页表对应逻辑地址和物理地址。</li>
<li><strong>段式管理</strong> ： 页式管理虽然提高了内存利用率，但是页式管理其中的页实际并无任何实际意义。 段式管理把主存分为一段段的，每一段的空间又要比一页的空间小很多 。<strong>但是，最重要的是段是有实际意义的，每个段定义了一组逻辑信息</strong>，例如，有主程序段 MAIN、子程序段 X、数据段 D 及栈段 S 等。 段式管理通过段表对应逻辑地址和物理地址。</li>
<li><strong>段页式管理机制</strong> 。段页式管理机制结合了段式管理和页式管理的优点。简单来说段页式管理机制就是把主存先分成若干段，每个段又分成若干页，也就是说 <strong>段页式管理机制</strong> 中段与段之间以及段的内部的都是离散的。</li>
</ol>
<h3 id="3-快表和多级页表"><a href="#3-快表和多级页表" class="headerlink" title="3.快表和多级页表"></a>3.快表和多级页表</h3><p>在页式内存管理中有很重要的两点需要解决：</p>
<ol>
<li>虚拟地址到物理地址的转换速度的问题。</li>
<li>虚拟地址空间大，页表也会很大的问题。</li>
</ol>
<h4 id="快表："><a href="#快表：" class="headerlink" title="快表："></a>快表：</h4><p>为了解决虚拟地址到物理地址的转换速度，操作系统才页式管理方案的基础上引入了快表来加速虚拟地址到物理地址的转换。可以把快表理解为一种特殊的高速缓冲存储器（Cache），其中的内容是页表的一部分或者全部内容。作为页表的 Cache，它的作用与页表相似，但是提高了访问速率。由于采用页表做地址转换，读写内存数据时 CPU 要访问两次主存。有了快表，有时只要访问一次高速缓冲存储器，一次主存，这样可加速查找并提高指令执行速度。</p>
<p><strong>使用快表之后的地址转换流程：</strong></p>
<ol>
<li>根据虚拟地址中的页号查快表；</li>
<li>如果该页在快表中，直接从快表中读取相应的物理地址；</li>
<li>如果该页不在快表中，就访问内存中的页表，再从页表中得到物理地址，同时将页表中的该映射表项添加到快表中；</li>
<li>当快表填满后，又要登记新页时，就按照一定的淘汰策略淘汰掉快表中的一个页。</li>
</ol>
<p>我们平时开发系统使用的缓存（比如 Redis）就是根据这个思想做的。</p>
<h4 id="多级页表："><a href="#多级页表：" class="headerlink" title="多级页表："></a>多级页表：</h4><p>为了解决解决虚拟地址空间大，页表也会很大的问题，操作系统引入了多节页表。</p>
<p>引入多级页表的主要目的是为了避免把全部页表一直放在内存中占用过多空间，特别是那些根本就不需要的页表就不需要保留在内存中。多级页表属于时间换空间的典型场景。</p>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>为了提高内存的空间性能，提出了多级页表的概念；但是提到空间性能是以浪费时间性能为基础的，因此为了补充损失的时间性能，提出了快表（即 TLB）的概念。 </p>
<h3 id="4-分页机制和分段机制的共同点和区别？"><a href="#4-分页机制和分段机制的共同点和区别？" class="headerlink" title="4.分页机制和分段机制的共同点和区别？"></a>4.分页机制和分段机制的共同点和区别？</h3><ol>
<li><strong>共同点</strong><ul>
<li>分页机制和分段机制都是为了提高内存利用率，较少内存碎片。</li>
<li>页和段都是离散存储的，所以两者都是离散分配内存的方式。但是，每个页和段中的内存是连续的。</li>
</ul>
</li>
<li><strong>区别</strong><ul>
<li>页的大小是固定的，由操作系统决定；而段的大小不固定，取决于我们当前运行的程序。</li>
<li>分页仅仅是为了满足操作系统内存管理的需求，而段是逻辑信息的单位，在程序中可以体现为代码段，数据段，能够更好满足用户的需要。</li>
</ul>
</li>
</ol>
<h3 id="5-逻辑（虚拟）地址和物理地址？"><a href="#5-逻辑（虚拟）地址和物理地址？" class="headerlink" title="5.逻辑（虚拟）地址和物理地址？"></a>5.逻辑（虚拟）地址和物理地址？</h3><p>我们编程一般只可能和逻辑地址打交道，比如在 C 语言中，指针里面存储的数值就可以理解成为内存里的一个地址，这个地址也就是我们说的逻辑地址，<strong>逻辑地址由操作系统决定</strong>。物理地址指的是真实物理内存中地址，更具体一点来说就是内存地址寄存器中的地址。<strong>物理地址是内存单元真正的地址</strong>。</p>
<h3 id="6-为什么要有虚拟地址？"><a href="#6-为什么要有虚拟地址？" class="headerlink" title="6.为什么要有虚拟地址？"></a>6.为什么要有虚拟地址？</h3><p>如果没有虚拟地址空间的时候，<strong>程序都是直接访问和操作的都是物理内存</strong> 。</p>
<p>这样就会产生很多问题：</p>
<ol>
<li>用户程序可以访问任意内存，寻址内存的每个字节，这样就很容易（有意或者无意）破坏操作系统，造成操作系统崩溃。</li>
<li>想要同时运行多个程序特别困难，比如你想同时运行一个微信和一个 QQ 音乐都不行。为什么呢？举个简单的例子：微信在运行的时候给内存地址 1xxx 赋值后，QQ 音乐也同样给内存地址 1xxx 赋值，那么 QQ 音乐对内存的赋值就会覆盖微信之前所赋的值，这就造成了微信这个程序就会崩溃。</li>
</ol>
<p><strong>总结来说：如果直接把物理地址暴露出来的话会带来严重问题，比如可能对操作系统造成伤害以及给同时运行多个程序造成困难。</strong></p>
<p>通过虚拟地址访问内存有以下<strong>优势：</strong></p>
<ul>
<li>程序可以使用一系列相邻的虚拟地址来访问物理内存中不相邻的内存缓冲区。</li>
<li>程序可以使用一系列虚拟地址来访问大于可用物理内存的内存缓冲区。当物理内存的供应量变小时，内存管理器会将物理内存页（通常大小为 4 KB）保存到磁盘文件。数据或代码页会根据需要在物理内存与磁盘之间进行传输。<strong>相当于用时间换空间。</strong></li>
<li>不同进程使用的虚拟地址彼此隔离。一个进程中的代码无法更改正在由另一进程或操作系统使用的物理内存。</li>
</ul>
<hr>
<h2 id="四、虚拟内存"><a href="#四、虚拟内存" class="headerlink" title="四、虚拟内存"></a>四、虚拟内存</h2><h3 id="1-什么是虚拟内存？"><a href="#1-什么是虚拟内存？" class="headerlink" title="1.什么是虚拟内存？"></a>1.什么是虚拟内存？</h3><p><strong>虚拟内存</strong>是计算机系统内存管理的一种技术，虚拟内存不只是“使用硬盘空间来扩展内存“的技术。<strong>虚拟内存的重要意义是它定义了一个连续的虚拟地址空间</strong>，并且 <strong>把内存扩展到硬盘空间</strong>。</p>
<p><strong>虚拟内存</strong> 使得应用程序认为它拥有连续的可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换。</p>
<p>与没有使用虚拟内存技术的系统相比，使用这种技术的系统使得大型程序的编写变得更容易，对真正的物理内存（例如 RAM）的使用也更有效率。</p>
<p>目前，大多数操作系统都使用了虚拟内存，如 Windows 家族的“虚拟内存”；Linux 的“交换空间”等。</p>
<h3 id="2-什么是局部性原理？"><a href="#2-什么是局部性原理？" class="headerlink" title="2.什么是局部性原理？"></a>2.什么是局部性原理？</h3><p>局部性原理是虚拟内存技术的基础，正是因为程序运行具有局部性原理，才可以只装入部分程序到内存就开始运行。</p>
<p>局部性原理表现在以下两个方面：</p>
<ol>
<li><strong>时间局部性</strong> ：如果程序中的某条指令一旦执行，不久以后该指令可能再次执行；如果某数据被访问过，不久以后该数据可能再次被访问。产生时间局部性的典型原因，是由于在程序中存在着大量的循环操作。</li>
<li><strong>空间局部性</strong> ：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也将被访问，即程序在一段时间内所访问的地址，可能集中在一定的范围之内，这是因为指令通常是顺序存放、顺序执行的，数据也一般是以向量、数组、表等形式簇聚存储的。</li>
</ol>
<p>时间局部性是通过将近来使用的指令和数据保存到高速缓存存储器中，并使用高速缓存的层次结构实现。</p>
<p>空间局部性通常是使用较大的高速缓存，并将预取机制集成到高速缓存控制逻辑中实现。</p>
<p>虚拟内存技术实际上就是建立了 “内存一外存”的两级存储器的结构，利用局部性原理实现髙速缓存。</p>
<h3 id="3-虚拟存储器"><a href="#3-虚拟存储器" class="headerlink" title="3.虚拟存储器"></a>3.虚拟存储器</h3><p>基于局部性原理，在程序装入时，可以将程序的一部分装入内存，而将其他部分留在外存，就可以启动程序执行。</p>
<p>由于外存往往比内存大很多，所以我们运行的软件的内存大小实际上是可以比计算机系统实际的内存大小大的。</p>
<p>在程序执行过程中，当所访问的信息不在内存时，由操作系统将所需要的部分调入内存，然后继续执行程序。</p>
<p>另一方面，操作系统将内存中暂时不使用的内容换到外存上，从而腾出空间存放将要调入内存的信息。</p>
<p>这样，计算机好像为用户提供了一个比实际内存大的多的存储器——<strong>虚拟存储器</strong>。</p>
<p><strong>实际上，我觉得虚拟内存同样是一种时间换空间的策略，你用 CPU 的计算时间，页的调入调出花费的时间，换来了一个虚拟的更大的空间来支持程序的运行。不得不感叹，程序世界几乎不是时间换空间就是空间换时间。</strong></p>
<h3 id="4-虚拟内存的技术实现"><a href="#4-虚拟内存的技术实现" class="headerlink" title="4.虚拟内存的技术实现"></a>4.虚拟内存的技术实现</h3><p><strong>虚拟内存的实现需要建立在离散分配的内存管理方式的基础上。</strong> </p>
<p>虚拟内存的实现有以下三种方式：</p>
<ol>
<li><strong>请求分页存储管理</strong> ：建立在分页管理之上，为了支持虚拟存储器功能而增加了请求调页功能和页面置换功能。请求分页是目前最常用的一种实现虚拟存储器的方法。请求分页存储管理系统中，在作业开始运行之前，仅装入当前要执行的部分段即可运行。假如在作业运行的过程中发现要访问的页面不在内存，则由处理器通知操作系统按照对应的页面置换算法将相应的页面调入到主存，同时操作系统也可以将暂时不用的页面置换到外存中。</li>
<li><strong>请求分段存储管理</strong> ：建立在分段存储管理之上，增加了请求调段功能、分段置换功能。请求分段储存管理方式就如同请求分页储存管理方式一样，在作业开始运行之前，仅装入当前要执行的部分段即可运行；在执行过程中，可使用请求调入中断动态装入要访问但又不在内存的程序段；当内存空间已满，而又需要装入新的段时，根据置换功能适当调出某个段，以便腾出空间而装入新的段。</li>
<li><strong>请求段页式存储管理</strong></li>
</ol>
<h4 id="请求分页存储管理和分页存储管理的区别"><a href="#请求分页存储管理和分页存储管理的区别" class="headerlink" title="请求分页存储管理和分页存储管理的区别"></a>请求分页存储管理和分页存储管理的区别</h4><p>它们之间的根本区别在于是否将一作业的全部地址空间同时装入主存。</p>
<p>请求分页存储管理不要求将作业全部地址空间同时装入主存。</p>
<p>基于这一点，请求分页存储管理可以提供虚存，而分页存储管理却不能提供虚存。</p>
<p>不管是上面那种实现方式，我们一般都需要：</p>
<ol>
<li>一定容量的内存和外存：在载入程序的时候，只需要将程序的一部分装入内存，而将其他部分留在外存，然后程序就可以执行了；</li>
<li><strong>缺页中断</strong>：如果<strong>需执行的指令或访问的数据尚未在内存</strong>（称为缺页或缺段），则由处理器通知操作系统将相应的页面或段<strong>调入到内存</strong>，然后继续执行程序；</li>
<li><strong>虚拟地址空间</strong> ：逻辑地址到物理地址的变换。</li>
</ol>
<h3 id="5-页面置换算法"><a href="#5-页面置换算法" class="headerlink" title="5.页面置换算法"></a>5.页面置换算法</h3><p>地址映射过程中，若在页面中发现所要访问的页面不在内存中，则称为发生了缺页中断 。</p>
<blockquote>
<p><strong>缺页中断</strong> 就是要访问的<strong>页</strong>不在主存，需要操作系统将其调入主存后再进行访问。 在这个时候，被内存映射的文件实际上成了一个分页交换文件。</p>
</blockquote>
<p>当发生缺页中断时，如果当前内存中并没有空闲的页面，操作系统就必须在内存选择一个页面将其移出内存，以便为即将调入的页面让出空间。</p>
<p>用来选择淘汰哪一页的规则叫做页面置换算法，我们<strong>可以把页面置换算法看成是淘汰页面的规则。</strong></p>
<ul>
<li><strong>OPT 页面置换算法（最佳页面置换算法）</strong> ：最佳(Optimal， OPT)置换算法所选择的被淘汰页面将是以后永不使用的，或者是在最长时间内不再被访问的页面，这样可以保证获得最低的缺页率。但由于人们目前无法预知进程在内存下的若千页面中哪个是未来最长时间内不再被访问的，因而该算法无法实现。一般作为衡量其他置换算法的方法。</li>
<li><strong>FIFO（First In First Out） 页面置换算法（先进先出页面置换算法）</strong> : 总是淘汰最先进入内存的页面，即选择在内存中驻留时间最久的页面进行淘汰。</li>
<li><strong>LRU （Least Currently Used）页面置换算法（最近最久未使用页面置换算法）</strong> ：LRU算法赋予每个页面一个访问字段，用来记录一个页面自上次被访问以来所经历的时间 T，当须淘汰一个页面时，选择现有页面中其 T 值最大的，即最近最久未使用的页面予以淘汰。</li>
<li><strong>LFU （Least Frequently Used）页面置换算法（最少使用页面置换算法）</strong> : 该置换算法选择在之前时期使用最少的页面作为淘汰页。</li>
</ul>
<p>参考文章：</p>
<p><a href="https://snailclimb.gitee.io/javaguide-interview/#/">JavaGuide哥的面试突击版</a></p>
<p><a href="https://www.jianshu.com/p/c1015f5ffa74">进程间通信</a></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>瑞吉外卖项目day04笔记</title>
    <url>/2022/08/07/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AEday04%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、文件上传下载"><a href="#一、文件上传下载" class="headerlink" title="一、文件上传下载"></a>一、文件上传下载</h1><h2 id="1-1-文件上传介绍"><a href="#1-1-文件上传介绍" class="headerlink" title="1.1 文件上传介绍"></a>1.1 文件上传介绍</h2><p>文件上传，也称为upload，是指将本地图片、视频、音频等文件上传到服务器上，可以供其他用户浏览或下载的过程。文件上传在项目中应用非常广泛，我们经常发微博、发微信朋友圈都用到了文件上传功能。</p>
<p>文件上传时，对页面的form表单有如下要求：</p>
<table>
<thead>
<tr>
<th>表单属性</th>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>method</td>
<td>post</td>
<td>必须选择post方式提交</td>
</tr>
<tr>
<td>enctype</td>
<td>multipart&#x2F;form-data</td>
<td>采用multipart格式上传文件</td>
</tr>
<tr>
<td>type</td>
<td>file</td>
<td>使用input的file控件上传</td>
</tr>
</tbody></table>
<h3 id="1-前端介绍"><a href="#1-前端介绍" class="headerlink" title="1. 前端介绍"></a>1. 前端介绍</h3><p><strong>1). 简单html页面表单</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/common/upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;myFile&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>  /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>2). ElementUI中提供的upload上传组件</strong></p>
<p>目前一些前端组件库也提供了相应的上传组件，但是底层原理还是基于form表单的文件上传。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807160953182.png" alt="image-20220807160953182" loading="lazy"> </p>
<h3 id="2-服务端介绍"><a href="#2-服务端介绍" class="headerlink" title="2.服务端介绍"></a>2.服务端介绍</h3><p>服务端要接收客户端页面上传的文件，通常都会使用Apache的两个组件：</p>
<ul>
<li><p>commons-fileupload</p>
</li>
<li><p>commons-io</p>
</li>
</ul>
<p>而Spring框架在spring-web包中对文件上传进行了封装，大大简化了服务端代码，我们只需要在Controller的方法中声明一个MultipartFile类型的参数即可接收上传的文件，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line">    System.out.println(file);</span><br><span class="line">    <span class="keyword">return</span> R.success(fileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-文件下载介绍"><a href="#1-2-文件下载介绍" class="headerlink" title="1.2 文件下载介绍"></a>1.2 文件下载介绍</h2><p>文件下载，也称为download，是指将文件从服务器传输到本地计算机的过程。通过浏览器进行文件下载，通常有两种表现形式：</p>
<p><strong>1). 以附件形式下载，弹出保存对话框，将文件保存到指定磁盘目录</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807161038817.png" alt="image-20220807161038817" loading="lazy"></p>
<p><strong>2). 直接在浏览器中打开</strong></p>
<p>而今天所需要实现的菜品展示，表现形式为在浏览器中直接打开。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807161047354.png" alt="image-20220807161047354" loading="lazy"></p>
<p>通过浏览器进行文件下载，本质上就是服务端将文件以流的形式写回浏览器的过程。</p>
<h2 id="1-3-文件上传代码实现"><a href="#1-3-文件上传代码实现" class="headerlink" title="1.3 文件上传代码实现"></a>1.3 文件上传代码实现</h2><h3 id="1-导入文件上传页面"><a href="#1-导入文件上传页面" class="headerlink" title="1.导入文件上传页面"></a>1.导入文件上传页面</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;文件上传&lt;/title&gt;</span><br><span class="line">  &lt;!-- 引入样式 --&gt;</span><br><span class="line">  &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;../../plugins/element-ui/index.css&quot;</span> /&gt;</span><br><span class="line">  &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;../../styles/common.css&quot;</span> /&gt;</span><br><span class="line">  &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;../../styles/page.css&quot;</span> /&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;shortcut icon&quot;</span> href=<span class="string">&quot;../../favicon.ico&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div class=<span class="string">&quot;addBrand-container&quot;</span> id=<span class="string">&quot;food-add-app&quot;</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">        &lt;el-upload class=<span class="string">&quot;avatar-uploader&quot;</span></span><br><span class="line">                action=<span class="string">&quot;/common/upload&quot;</span></span><br><span class="line">                :show-file-list=<span class="string">&quot;false&quot;</span></span><br><span class="line">                :on-success=<span class="string">&quot;handleAvatarSuccess&quot;</span></span><br><span class="line">                :before-upload=<span class="string">&quot;beforeUpload&quot;</span></span><br><span class="line">                ref=<span class="string">&quot;upload&quot;</span>&gt;</span><br><span class="line">            &lt;img v-<span class="keyword">if</span>=<span class="string">&quot;imageUrl&quot;</span> :src=<span class="string">&quot;imageUrl&quot;</span> class=<span class="string">&quot;avatar&quot;</span>&gt;&lt;/img&gt;</span><br><span class="line">            &lt;i v-<span class="keyword">else</span> class=<span class="string">&quot;el-icon-plus avatar-uploader-icon&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">        &lt;/el-upload&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">    &lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;../../plugins/vue/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- 引入组件库 --&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;../../plugins/element-ui/index.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- 引入axios --&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;../../plugins/axios/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;../../js/index.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#food-add-app&#x27;</span>,</span><br><span class="line">        data() &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            imageUrl: <span class="string">&#x27;&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          handleAvatarSuccess (response, file, fileList) &#123;</span><br><span class="line">              <span class="built_in">this</span>.imageUrl = `/common/download?name=$&#123;response.data&#125;`</span><br><span class="line">          &#125;,</span><br><span class="line">          beforeUpload (file) &#123;</span><br><span class="line">            <span class="keyword">if</span>(file)&#123;</span><br><span class="line">              <span class="type">const</span> <span class="variable">suffix</span> <span class="operator">=</span> file.name.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">              <span class="type">const</span> <span class="variable">size</span> <span class="operator">=</span> file.size / <span class="number">1024</span> / <span class="number">1024</span> &lt; <span class="number">2</span></span><br><span class="line">              <span class="keyword">if</span>([<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;jpeg&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>].indexOf(suffix) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.$message.error(<span class="string">&#x27;上传图片只支持 png、jpeg、jpg 格式！&#x27;</span>)</span><br><span class="line">                <span class="built_in">this</span>.$refs.upload.clearFiles()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span>(!size)&#123;</span><br><span class="line">                <span class="built_in">this</span>.$message.error(<span class="string">&#x27;上传文件大小不能超过 2MB!&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> file</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-配置文件存储路径"><a href="#2-配置文件存储路径" class="headerlink" title="2.配置文件存储路径"></a>2.配置文件存储路径</h3><p>需要在application.yml中定义文件存储路径</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reggie:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">D:\img\</span></span><br></pre></td></tr></table></figure>

<h3 id="2-添加Controller"><a href="#2-添加Controller" class="headerlink" title="2.添加Controller"></a>2.添加Controller</h3><p>编写文件上传的方法, 通过MultipartFile类型的参数即可接收上传的文件, 方法形参的名称需要与页面的file域的name属性一致。</p>
<p>所在包: com.itheima.reggie.controller</p>
<p>上传逻辑: </p>
<p>1). 获取文件的原始文件名, 通过原始文件名获取文件后缀</p>
<p>2). 通过UUID重新声明文件名, 文件名称重复造成文件覆盖</p>
<p>3). 创建文件存放目录</p>
<p>4). 将上传的临时文件转存到指定位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 16:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/common&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;reggie.path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String basePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件上传</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="comment">//file 是一个临时文件，需要转存到指定位置，否则请求完成后临时文件会删除</span></span><br><span class="line">        <span class="comment">//log.info(&quot;file:&#123;&#125;&quot;,file.toString());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//原始文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">//使用UUID随机生成文件名，防止因为文件名相同造成文件覆盖</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + suffix;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个目录对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basePath);</span><br><span class="line">        <span class="comment">//判断当前目录是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">            <span class="comment">//目录不存在</span></span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将临时文件转存到指定位置</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + fileName));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-在过滤器中进行路径放行"><a href="#3-在过滤器中进行路径放行" class="headerlink" title="3.在过滤器中进行路径放行"></a>3.在过滤器中进行路径放行</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807161831315.png" alt="image-20220807161831315" loading="lazy"></p>
<h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h3><p>成功实现文件上传。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807162005372.png" alt="image-20220807162005372" loading="lazy"></p>
<h2 id="1-4-文件下载代码实现"><a href="#1-4-文件下载代码实现" class="headerlink" title="1.4 文件下载代码实现"></a>1.4 文件下载代码实现</h2><h3 id="1-前端代码"><a href="#1-前端代码" class="headerlink" title="1.前端代码"></a>1.前端代码</h3><p>文件下载，前端页面可以使用<img>标签展示下载的图片。</p loading="lazy">
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">&quot;imageUrl&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;imageUrl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>那么，通过<img>标签如何展示图片数据呢，接下来我们来解析一下具体的流程：</p loading="lazy">
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807163952168.png" alt="image-20220807163952168" loading="lazy"></p>
<p>在文件上传成功后，在 handleAvatarSuccess 方法中获取文件上传成功之后返回的数据(文件名)，然后调用 &#x2F;common&#x2F;download?name&#x3D;xxx 进行文件的下载。在这里，我们想让上传的照片能够在页面展示出来，所以我们就需要在服务端将文件以流的形式写回浏览器。</p>
<h3 id="2-后端代码"><a href="#2-后端代码" class="headerlink" title="2.后端代码"></a>2.后端代码</h3><p>在 CommonController 中定义方法download，并接收页面传递的参数name，然后读取图片文件的数据，然后以流的形式写回浏览器。</p>
<p>具体逻辑如下： </p>
<p>1). 定义输入流，通过输入流读取文件内容</p>
<p>2). 通过response对象，获取到输出流</p>
<p>3). 通过response对象设置响应数据格式(image&#x2F;jpeg)</p>
<p>4). 通过输入流读取文件数据，然后通过上述的输出流写回浏览器</p>
<p>5). 关闭资源</p>
<p><strong>代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件下载</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String name, HttpServletResponse response)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//输入流，通过输入流读取文件内容</span></span><br><span class="line">        FileInputStream fileInputStream=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(basePath+name));</span><br><span class="line">        <span class="comment">//输出流，通过输出流将文件写回浏览器，在浏览器中展示图片</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len=fileInputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        outputStream.close();</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3><p>图片正常展示</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807164247038.png" alt="image-20220807164247038" loading="lazy"></p>
<h1 id="二、新增菜品"><a href="#二、新增菜品" class="headerlink" title="二、新增菜品"></a>二、新增菜品</h1><h2 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h2><p>后台系统中可以管理菜品信息，通过 新增功能来添加一个新的菜品，在添加菜品时需要选择当前菜品所属的菜品分类，并且需要上传菜品图片，在移动端会按照菜品分类来展示对应的菜品信息 。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807171606466.png" alt="image-20220807171606466" loading="lazy"></p>
<h2 id="2-2-数据模型"><a href="#2-2-数据模型" class="headerlink" title="2.2 数据模型"></a>2.2 数据模型</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807171635111.png" alt="image-20220807171635111" loading="lazy"></p>
<p>新增菜品，其实就是将新增页面录入的菜品信息插入到dish表，如果添加了口味做法，还需要向dish_flavor表插入数据。所以在新增菜品时，涉及到两个表：</p>
<table>
<thead>
<tr>
<th>表结构</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>dish</td>
<td>菜品表</td>
</tr>
<tr>
<td>dish_flavor</td>
<td>菜品口味表</td>
</tr>
</tbody></table>
<ol>
<li>菜品表:dish</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807171648611.png" alt="image-20220807171648611" loading="lazy"></p>
<ol start="2">
<li>菜品口味表:dish_flavor</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807171701776.png" alt="image-20220807171701776" loading="lazy"></p>
<h2 id="2-3-准备工作"><a href="#2-3-准备工作" class="headerlink" title="2.3 准备工作"></a>2.3 准备工作</h2><p>在开发业务功能前，先将需要用到的类和接口基本结构创建好：</p>
<p>1、实体类 DishFlavor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">菜品口味</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishFlavor</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味数据list</span></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、Mapper接口DishFlavorMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 17:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishFlavorMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;DishFlavor&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、业务层接口 DishFlavorService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 17:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishFlavorService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;DishFlavor&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、业务层实现类 DishFlavorServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 17:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishFlavorServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DishFlavorMapper, DishFlavor&gt; <span class="keyword">implements</span> <span class="title class_">DishFlavorService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、 控制层 DishController</p>
<p>菜品及菜品口味的相关操作，统一使用这一个controller。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 菜品管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 17:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/dish&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishFlavorService dishFlavorService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-前端页面分析"><a href="#2-4-前端页面分析" class="headerlink" title="2.4 前端页面分析"></a>2.4 前端页面分析</h2><p>在开发代码之前，需要梳理一下新增菜品时前端页面和服务端的交互过程。</p>
<ol>
<li><p>点击新建菜品按钮, 访问页面(backend&#x2F;page&#x2F;food&#x2F;add.html), 页面加载时发送ajax请求，请求服务端获取菜品分类数据并展示到下拉框中</p>
</li>
<li><p>页面发送请求进行图片上传，请求服务端将图片保存到服务器(上传功能已实现)</p>
</li>
<li><p>页面发送请求进行图片下载，将上传的图片进行回显(下载功能已实现)</p>
</li>
<li><p>点击保存按钮，发送ajax请求，将菜品相关数据以json形式提交到服务端</p>
</li>
</ol>
<p>开发新增菜品功能，其实就是在服务端编写代码去处理前端页面发送的<strong>这4次请求</strong>(上传、下载已实现)即可。经过上述的分析，我们还需要在服务端实现两块功能：</p>
<p>A. 菜品分类数据列表查询, 具体请求信息整理如下 : </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;category&#x2F;list</td>
</tr>
<tr>
<td>请求参数</td>
<td>?type&#x3D;1</td>
</tr>
</tbody></table>
<p>B. 保存菜品信息, 具体请求信息整理如下 : </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>POST</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;dish</td>
</tr>
<tr>
<td>请求参数</td>
<td>json格式</td>
</tr>
</tbody></table>
<h2 id="2-5-代码实现"><a href="#2-5-代码实现" class="headerlink" title="2.5 代码实现"></a>2.5 代码实现</h2><h3 id="1-菜品分类查询"><a href="#1-菜品分类查询" class="headerlink" title="1.菜品分类查询"></a>1.菜品分类查询</h3><p>在CategoryController中增加方法实现菜品分类查询，根据分类进行查询，并对查询的结果按照sort排序字段进行升序排序，如果sort相同，再按照修改时间倒序排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据条件查询分类数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Category&gt;&gt; <span class="title function_">list</span><span class="params">(Category category)</span> &#123;</span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加条件</span></span><br><span class="line">    lambdaQueryWrapper.eq(category.getType() != <span class="literal">null</span>, Category::getType, category.getType());</span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    lambdaQueryWrapper.orderByAsc(Category::getSort).orderByAsc(Category::getUpdateTime);</span><br><span class="line">    List&lt;Category&gt; list = categoryService.list(lambdaQueryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试：</strong></p>
<p>可以正常显示。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807172303348.png" alt="image-20220807172303348" loading="lazy"></p>
<h3 id="2-保存菜品信息"><a href="#2-保存菜品信息" class="headerlink" title="2.保存菜品信息"></a>2.保存菜品信息</h3><p>在上述的分析中，我们可以看到在保存菜品时，页面传递过来的是json格式数据，格式如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;佛跳墙&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">88800</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span><span class="string">&quot;da9e1c70-fc32-4781-9510-a1c4ccd2ff59.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;佛跳墙&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1397844357980663809&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;flavors&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;辣度&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;[\&quot;不辣\&quot;,\&quot;微辣\&quot;,\&quot;中辣\&quot;,\&quot;重辣\&quot;]&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;showOption&quot;</span><span class="punctuation">:</span><span class="keyword">false</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;忌口&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;[\&quot;不要葱\&quot;,\&quot;不要蒜\&quot;,\&quot;不要香菜\&quot;,\&quot;不要辣\&quot;]&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;showOption&quot;</span><span class="punctuation">:</span><span class="keyword">false</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在服务端应该如何来封装前端传递的数据呢，我们发现，如果使用菜品类Dish来封装，只能封装菜品的基本属性，flavors属性是无法封装的。那么这个时候，我们应该如何处理呢?</p>
<p>这个时候，我们需要自<strong>定义一个实体类，然后继承自 Dish，并对Dish的属性进行拓展，增加 flavors 集合属性(内部封装DishFlavor)。</strong></p>
<p><strong>1). 导入 DishDto 实体类</strong></p>
<p>封装页面传递的请求参数。</p>
<p>所属包: com.itheima.reggie.dto</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Dish;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.DishFlavor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishDto</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><font color='red'>拓展： 我们在做项目时，经常会涉及到各种类型的实体模型。基本包含以下几种</font> </p>
<table>
<thead>
<tr>
<th>实体模型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>DTO</td>
<td>Data Transfer Object(数据传输对象)，一般用于展示层与服务层之间的数据传输。</td>
</tr>
<tr>
<td>Entity</td>
<td>最常用实体类，基本和数据表一一对应，一个实体类对应一张表。</td>
</tr>
<tr>
<td>VO</td>
<td>Value Object(值对象), 主要用于封装前端页面展示的数据对象，用一个VO对象来封装整个页面展示所需要的对象数据</td>
</tr>
<tr>
<td>PO</td>
<td>Persistant Object(持久层对象), 是ORM(Objevt Relational Mapping)框架中Entity，PO属性和数据库中表的字段形成一一对应关系</td>
</tr>
</tbody></table>
<p><strong>2). DishController定义方法新增菜品</strong></p>
<p>在该Controller的方法中，不仅需要保存菜品的基本信息，还需要保存菜品的口味信息，需要操作两张表，所以我们需要在DishService接口中定义接口方法，在这个方法中需要保存上述的两部分数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增菜品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span>&#123;</span><br><span class="line">    log.info(dishDto.toString());</span><br><span class="line"></span><br><span class="line">    dishService.saveWithFlavor(dishDto);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>3). DishService中增加方法saveWithFlavor</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新增菜品，同时插入菜品对应的口味数据，需要操作两张表：dish、dish_flavor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span>;</span><br></pre></td></tr></table></figure>



<p><strong>4). DishServiceImpl中实现方法saveWithFlavor</strong></p>
<p>页面传递的菜品口味信息，仅仅包含name 和 value属性，缺少一个非常重要的属性dishId， 所以在保存完菜品的基本信息后，我们需要获取到菜品ID，然后为菜品口味对象属性dishId赋值。</p>
<p>具体逻辑如下：</p>
<p>①. 保存菜品基本信息 ;</p>
<p>②. 获取保存的菜品ID ;</p>
<p>③. 获取菜品口味列表，遍历列表，为菜品口味对象属性dishId赋值;</p>
<p>④. 批量保存菜品口味列表;</p>
<p>代码实现如下: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DishFlavorService dishFlavorService;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 新增菜品，同时保存对应的口味数据</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">    <span class="comment">//保存菜品的基本信息到菜品表dish</span></span><br><span class="line">    <span class="built_in">this</span>.save(dishDto);</span><br><span class="line">	</span><br><span class="line">    <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dishDto.getId();<span class="comment">//菜品id</span></span><br><span class="line">    <span class="comment">//菜品口味</span></span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line">    flavors = flavors.stream().map((item) -&gt; &#123;</span><br><span class="line">        item.setDishId(dishId);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存菜品口味数据到菜品口味表dish_flavor</span></span><br><span class="line">    dishFlavorService.saveBatch(flavors);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明: </p>
<p>​	由于在 saveWithFlavor 方法中，进行了两次数据库的保存操作，操作了两张表，那么为了保证数据的一致性，我们需要在方法上加上注解 @Transactional来控制事务。</p>
</blockquote>
<p><strong>5). 在引导类上加注解 @EnableTransactionManagement</strong></p>
<p>Service层方法上加的注解@Transactional要想生效，需要在引导类上加上注解 @EnableTransactionManagement， 开启对事务的支持。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//开启对事物管理的支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReggieApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ReggieApplication.class,args);</span><br><span class="line">        log.info(<span class="string">&quot;项目启动成功...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-6-功能测试"><a href="#2-6-功能测试" class="headerlink" title="2.6 功能测试"></a>2.6 功能测试</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808085237220.png" alt="image-20220808085237220" loading="lazy"></p>
<p>菜品表添加成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808085255338.png" alt="image-20220808085255338" loading="lazy"></p>
<p>口味表添加成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808085308284.png" alt="image-20220808085308284" loading="lazy"></p>
<h1 id="三、菜品分页查询"><a href="#三、菜品分页查询" class="headerlink" title="三、菜品分页查询"></a>三、菜品分页查询</h1><h2 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h2><p>系统中的菜品数据很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808092228949.png" alt="image-20220808092228949" loading="lazy"></p>
<p>在菜品列表展示时，除了菜品的基本信息(名称、售价、售卖状态、更新时间)外，还有两个字段略微特殊，第一个是图片字段 ，我们从数据库查询出来的仅仅是图片的名字，图片要想在表格中回显展示出来，就需要下载这个图片。第二个是菜品分类，这里展示的是分类名称，而不是分类ID，此时我们就需要根据菜品的分类ID，去分类表中查询分类信息，然后在页面展示。</p>
<h2 id="3-2-前端页面分析"><a href="#3-2-前端页面分析" class="headerlink" title="3.2 前端页面分析"></a>3.2 前端页面分析</h2><p>前端页面和服务端的<strong>交互过程</strong>：</p>
<ol>
<li><p>访问页面(backend&#x2F;page&#x2F;food&#x2F;list.html)时，发送ajax请求，将分页查询参数(page、pageSize、name)提交到服务端，获取分页数据</p>
</li>
<li><p>页面发送请求，请求服务端进行图片下载，用于页面图片展示</p>
</li>
</ol>
<p>开发菜品信息分页查询功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可，而前端发起的请求中， 图片文件下载回显的代码，我们已经实现了。所以，我们只需要开发分页查询的功能即可，分页查询具体的请求信息如下：</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;dish&#x2F;page</td>
</tr>
<tr>
<td>请求参数</td>
<td>?page&#x3D;1&amp;pageSize&#x3D;10&amp;name&#x3D;xxx</td>
</tr>
</tbody></table>
<h2 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h2><h3 id="1-分析"><a href="#1-分析" class="headerlink" title="1.分析"></a>1.分析</h3><p>在分页查询时需要给页面返回分类的名称，而<strong>分类的名称前端在接收的时候是通过 categoryName 属性获取的，那么对应的服务端也应该封装到 categoryName 属性中。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;categoryName&quot;</span> <span class="attr">label</span>=<span class="string">&quot;菜品分类&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>而在我们的实体类 Dish 中，仅仅包含 categoryId， 不包含 categoryNam所以要返回DishDto对象，在该对象中可以<strong>拓展一个属性 categoryName</strong>，来封装菜品分类名称。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishDto</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> String categoryName; <span class="comment">//菜品分类名称</span></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>具体逻辑为： </p>
<ol>
<li><p>构造分页条件对象</p>
</li>
<li><p>构建查询及排序条件</p>
</li>
<li><p>执行分页条件查询</p>
</li>
<li><p>遍历分页查询列表数据，根据分类ID查询分类信息，从而获取该菜品的分类名称</p>
</li>
<li><p>封装数据并返回</p>
</li>
</ol>
<h3 id="2-代码编写"><a href="#2-代码编写" class="headerlink" title="2.代码编写"></a>2.代码编写</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line">    <span class="comment">//构造分页构造器</span></span><br><span class="line">    Page&lt;Dish&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line"></span><br><span class="line">    Page&lt;DishDto&gt; dishDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加过滤条件</span></span><br><span class="line">    queryWrapper.like(!StringUtils.isEmpty(name), Dish::getName, name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    queryWrapper.orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行分页查询</span></span><br><span class="line">    dishService.page(pageInfo, queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象拷贝，records属性不拷贝，过会我们自己填</span></span><br><span class="line">    BeanUtils.copyProperties(pageInfo,dishDtoPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line">    <span class="comment">//拿到菜品集合</span></span><br><span class="line">    List&lt;Dish&gt; records = pageInfo.getRecords();</span><br><span class="line">    <span class="comment">//数据拷贝填入</span></span><br><span class="line">    List&lt;DishDto&gt; list=records.stream().map((item)-&gt;&#123;</span><br><span class="line">        DishDto dishDto=<span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">        <span class="comment">//对象拷贝</span></span><br><span class="line">        BeanUtils.copyProperties(item,dishDto);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="comment">//根据id查分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="comment">//如果当前分类为空就跳过不添加</span></span><br><span class="line">        <span class="keyword">if</span>(category!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            dishDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dishDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//存入DtoPage的集合中</span></span><br><span class="line">    dishDtoPage.setRecords(list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(dishDtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-3-功能测试"><a href="#3-3-功能测试" class="headerlink" title="3.3 功能测试"></a>3.3 功能测试</h2><p>菜品信息分类正常且菜品分类正常显示</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808092835511.png" alt="image-20220808092835511" loading="lazy"></p>
<h1 id="四、修改菜品基本信息"><a href="#四、修改菜品基本信息" class="headerlink" title="四、修改菜品基本信息"></a>四、修改菜品基本信息</h1><h2 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h2><p>在菜品管理列表页面点击修改按钮，跳转到修改菜品页面，在修改页面回显菜品相关信息并进行修改，最后点击确定按钮完成修改操作。</p>
<h2 id="4-2-前端页面分析"><a href="#4-2-前端页面分析" class="headerlink" title="4.2 前端页面分析"></a>4.2 前端页面分析</h2><p><strong>前端页面（add.html）和服务端的交互过程</strong>：</p>
<ol>
<li><p>点击菜品列表的中的修改按钮，携带菜品id跳转至add.html</p>
</li>
<li><p>进入add.html，页面发送ajax请求，请求服务端获取分类数据，用于菜品分类下拉框中数据展示(<strong>已实现</strong>)</p>
</li>
<li><p>add.html获取id, 发送ajax请求，请求服务端，根据id查询当前菜品信息，用于菜品信息回显</p>
</li>
<li><p>页面发送请求，请求服务端进行图片下载，用于页图片回显(<strong>已实现</strong>)</p>
</li>
<li><p>点击保存按钮，页面发送ajax请求，将修改后的菜品相关数据以json形式提交到服务端</p>
</li>
</ol>
<hr>
<p>经过上述的分析，我们发现，菜品分类下拉框的展示、图片的下载回显功能我们都已经实现了。我们只需要在这里实现两个功能即可，分别是： </p>
<p><strong>1. 根据ID查询菜品及菜品口味信息</strong></p>
<p>具体请求信息如下： </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;dish&#x2F;{id}</td>
</tr>
</tbody></table>
<p><strong>2. 修改菜品及菜品口味信息</strong></p>
<p>具体请求信息如下：</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>PUT</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;dish</td>
</tr>
<tr>
<td>请求参数</td>
<td>json格式数据</td>
</tr>
</tbody></table>
<p>具体的json格式数据，我们可以通过浏览器抓取： </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1422783914845487106&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;佛跳墙&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1397844357980663809&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">88800</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span><span class="string">&quot;da9e1c70-fc32-4781-9510-a1c4ccd2ff59.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;佛跳墙&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-08-04 12:58:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createUser&quot;</span><span class="punctuation">:</span><span class="string">&quot;1412578435737350122&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updateUser&quot;</span><span class="punctuation">:</span><span class="string">&quot;1412578435737350122&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;flavors&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1422783914883235842&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1422783914845487106&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;辣度&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;[\&quot;不辣\&quot;,\&quot;微辣\&quot;,\&quot;中辣\&quot;,\&quot;重辣\&quot;]&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-08-04 12:58:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-08-04 12:58:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;createUser&quot;</span><span class="punctuation">:</span><span class="string">&quot;1412578435737350122&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;updateUser&quot;</span><span class="punctuation">:</span><span class="string">&quot;1412578435737350122&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;isDeleted&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;showOption&quot;</span><span class="punctuation">:</span><span class="keyword">false</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1422783914895818754&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1422783914845487106&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;忌口&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;[\&quot;不要葱\&quot;,\&quot;不要蒜\&quot;,\&quot;不要香菜\&quot;,\&quot;不要辣\&quot;]&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-08-04 12:58:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-08-04 12:58:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;createUser&quot;</span><span class="punctuation">:</span><span class="string">&quot;1412578435737350122&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;updateUser&quot;</span><span class="punctuation">:</span><span class="string">&quot;1412578435737350122&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;isDeleted&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;showOption&quot;</span><span class="punctuation">:</span><span class="keyword">false</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-3-功能实现"><a href="#4-3-功能实现" class="headerlink" title="4.3 功能实现"></a>4.3 功能实现</h2><h3 id="1-根据ID查询菜品信息"><a href="#1-根据ID查询菜品信息" class="headerlink" title="1.根据ID查询菜品信息"></a>1.根据ID查询菜品信息</h3><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>页面发送ajax请求，请求服务端，根据id查询当前菜品信息和对应的口味信息，用于修改页面中菜品信息回显。</p>
<ol>
<li>在DishService接口中扩展getByIdWithFlavor方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询菜品信息和对应的口味信息</span></span><br><span class="line"><span class="keyword">public</span> DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>在DishService实现类中实现此方法<ol>
<li>根据ID查询菜品的基本信息 </li>
<li>根据菜品的ID查询菜品口味列表数据</li>
<li>组装数据并返回</li>
</ol>
</li>
</ol>
<p>代码实现: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询菜品信息和对应的口味信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//查询菜品基本信息，从dish表查询</span></span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line"></span><br><span class="line">    <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">    <span class="comment">//对象拷贝，将菜品基本信息拷贝到Dto对象中</span></span><br><span class="line">    BeanUtils.copyProperties(dish,dishDto);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询当前菜品对应的口味信息，从dish_flavor表查询</span></span><br><span class="line">    LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(DishFlavor::getDishId,dish.getId());</span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishFlavorService.list(queryWrapper);</span><br><span class="line">    dishDto.setFlavors(flavors);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dishDto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3). 在DishController中创建get方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据id查询菜品信息和对应的口味信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;DishDto&gt; <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> dishService.getByIdWithFlavor(id);</span><br><span class="line">    <span class="keyword">return</span> R.success(dishDto);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>@PathVariable : 该注解可以用来提取url路径中传递的请求参数。</p>
</blockquote>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>数据成功回显</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808101301876.png" alt="image-20220808101301876" loading="lazy"></p>
<h3 id="2-修改菜品信息"><a href="#2-修改菜品信息" class="headerlink" title="2.修改菜品信息"></a>2.修改菜品信息</h3><h4 id="1-代码实现"><a href="#1-代码实现" class="headerlink" title="1.代码实现"></a>1.代码实现</h4><p>点击保存按钮，页面发送ajax请求，将修改后的菜品相关数据以json形式提交到服务端。<strong>在修改菜品信息时需要注意，除了要更新dish菜品表，还需要更新dish_flavor菜品口味表。</strong></p>
<ol>
<li>在DishService接口中扩展方法updateWithFlavor</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新菜品信息，同时更新对应的口味信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishDto)</span>;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>在DishServiceImpl中实现方法updateWithFlavor</li>
</ol>
<p>在该方法中，既需要更新dish菜品基本信息表，还需要更新dish_flavor菜品口味表。</p>
<p>而页面再操作时，关于菜品的口味，有修改，有新增，也有可能删除，name应该如何更新菜品口味信息呢？</p>
<p>其实，无论菜品口味信息如何变化，我们只需要保持一个原则： <strong>先删除，后添加。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="meta">@Transactional</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">     <span class="comment">//更新dish表基本信息</span></span><br><span class="line">     <span class="built_in">this</span>.updateById(dishDto);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//将修改操作拆解为删除+重新添加两部分来完成</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//清理当前菜品对应口味数据---dish_flavor表的delete操作</span></span><br><span class="line">     LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line">     queryWrapper.eq(DishFlavor::getDishId,dishDto.getId());</span><br><span class="line"></span><br><span class="line">     <span class="comment">//1.删除</span></span><br><span class="line">     dishFlavorService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//2.添加</span></span><br><span class="line">     <span class="comment">//添加当前提交过来的口味数据---dish_flavor表的insert操作</span></span><br><span class="line">     List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line"></span><br><span class="line">     flavors = flavors.stream().map((item) -&gt; &#123;</span><br><span class="line">         item.setDishId(dishDto.getId());</span><br><span class="line">         <span class="keyword">return</span> item;</span><br><span class="line">     &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">     dishFlavorService.saveBatch(flavors);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<p>3). 在DishController中创建update方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 修改菜品</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span>&#123;</span><br><span class="line">    log.info(dishDto.toString());</span><br><span class="line">    dishService.updateWithFlavor(dishDto);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;修改菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="4-3-2-2-功能测试"><a href="#4-3-2-2-功能测试" class="headerlink" title="4.3.2.2 功能测试"></a>4.3.2.2 功能测试</h5><p>这是原来的菜品信息</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808102827337.png" alt="image-20220808102827337" loading="lazy"></p>
<p>修改为</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808103015255.png" alt="image-20220808103015255" loading="lazy"></p>
<p>页面修改操作成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808103045478.png" alt="image-20220808103045478" loading="lazy"></p>
<p>菜品表更新成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808103146956.png" alt="image-20220808103146956" loading="lazy"></p>
<p>口味表更新成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808103118506.png" alt="image-20220808103118506" loading="lazy"></p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>瑞吉外卖项目day03笔记</title>
    <url>/2022/08/07/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AEday03/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、公共字段自动填充"><a href="#一、公共字段自动填充" class="headerlink" title="一、公共字段自动填充"></a>一、公共字段自动填充</h1><h2 id="1-1-问题分析"><a href="#1-1-问题分析" class="headerlink" title="1.1 问题分析"></a>1.1 问题分析</h2><p>前面已经完成了后台系统的员工管理功能的开发，在新增员工时需要设置创建时间、创建人、修改时间、修改人等字段，在编辑员工时需要设置修改时间、修改人等字段。这些字段属于公共字段，也就是也就是在系统中很多表中都会有这些字段，如下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807092551094.png" alt="image-20220807092551094" loading="lazy"></p>
<p>而针对于这些字段，目前的赋值方式为： </p>
<p>A. 在新增数据时, 将createTime、updateTime 设置为当前时间, createUser、updateUser设置为当前登录用户ID。</p>
<p>B. 在更新数据时, 将updateTime 设置为当前时间, updateUser设置为当前登录用户ID。</p>
<p>如果都按照这种操作方式来处理这些公共字段, 需要在每一个业务方法中进行操作, 编码相对冗余、繁琐，所以可以<strong>使用Mybatis Plus提供的公共字段自动填充功能来简化开发。</strong></p>
<h2 id="1-2-思路分析"><a href="#1-2-思路分析" class="headerlink" title="1.2 思路分析"></a>1.2 思路分析</h2><p>Mybatis Plus公共字段自动填充，也就是在插入或者更新的时候为指定字段赋予指定的值，使用它的好处就是可以统一对这些字段进行处理，避免了重复代码。在上述的问题分析中，我们提到有四个公共字段，需要在新增&#x2F;更新中进行赋值操作, 具体情况如下: </p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>赋值时机</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>createTime</td>
<td>插入(INSERT)</td>
<td>当前时间</td>
</tr>
<tr>
<td>updateTime</td>
<td>插入(INSERT) , 更新(UPDATE)</td>
<td>当前时间</td>
</tr>
<tr>
<td>createUser</td>
<td>插入(INSERT)</td>
<td>当前登录用户ID</td>
</tr>
<tr>
<td>updateUser</td>
<td>插入(INSERT) , 更新(UPDATE)</td>
<td>当前登录用户ID</td>
</tr>
</tbody></table>
<p>实现步骤：</p>
<p>1、在实体类的属性上加入@TableField注解，指定自动填充的策略。</p>
<p>2、按照框架要求编写元数据对象处理器，在此类中统一为公共字段赋值，此类需要实现MetaObjectHandler接口。</p>
<h3 id="1-给实体类添加注解"><a href="#1-给实体类添加注解" class="headerlink" title="1.给实体类添加注解"></a>1.给实体类添加注解</h3><p>实体类的属性上加入**@TableField注解**，指定自动填充的策略。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807092951242.png" alt="image-20220807092951242" loading="lazy"></p>
<h3 id="2-编写元数据对象处理器"><a href="#2-编写元数据对象处理器" class="headerlink" title="2.编写元数据对象处理器"></a>2.编写元数据对象处理器</h3><p>按照框架要求编写元数据对象处理器，在此类中统一为公共字段赋值，此类需要实现MetaObjectHandler接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义元数据对象处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 9:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjecthandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充[insert]...&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        <span class="comment">//在对象处理器中没办法获取request对象，暂时写死，以后解决</span></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>, <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充[update]...&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        <span class="comment">//在对象处理器中没办法获取request对象，暂时写死，以后解决</span></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后将原来的添加和更新操作中的手动赋值操作注释掉</p>
<p>添加操作</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807093051314.png" alt="image-20220807093051314" loading="lazy"></p>
<p>更新操作</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807093106155.png" alt="image-20220807093106155" loading="lazy"></p>
<h3 id="3-功能测试"><a href="#3-功能测试" class="headerlink" title="3.功能测试"></a>3.功能测试</h3><p><strong>添加功能测试：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807092150153.png" alt="image-20220807092150153" loading="lazy"></p>
<p>添加操作公共字段添加没有问题</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807092234701.png" alt="image-20220807092234701" loading="lazy"></p>
<p><strong>更新功能测试：</strong></p>
<p>将飞飞性别改成女</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807092333062.png" alt="image-20220807092333062" loading="lazy"></p>
<p>公共字段自动也填充成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807092432170.png" alt="image-20220807092432170" loading="lazy"></p>
<h2 id="1-3-功能完善"><a href="#1-3-功能完善" class="headerlink" title="1.3 功能完善"></a>1.3 功能完善</h2><p>前面完成了公共字段自动填充功能的代码开发，但是还有一个问题没有解决，就是在自动填充createUser和updateUser时设置的用户id是固定值，因为在MyMetaObjectHandler类中是不能直接获得HttpSession对象的，所以需要通过其他方式来获取登录用户id。</p>
<h3 id="1-业务执行流程"><a href="#1-业务执行流程" class="headerlink" title="1.业务执行流程"></a>1.业务执行流程</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807104154156.png" alt="image-20220807104154156" loading="lazy"></p>
<p>客户端发送的每次http请求，对应的在服务端都会分配一个新的线程来处理，在处理过程中涉及到下面类中的方法都属于相同的一个线程：</p>
<p>1). LoginCheckFilter的doFilter方法</p>
<p>2). EmployeeController的update方法</p>
<p>3). MyMetaObjectHandler的updateFill方法</p>
<p><strong>在上述类的方法中加入如下代码(获取当前线程ID,并输出):</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">log.info(<span class="string">&quot;线程id为：&#123;&#125;&quot;</span>,id);</span><br></pre></td></tr></table></figure>

<p>执行编辑员工功能进行验证，通过观察控制台输出可以发现，一次请求<strong>对应的线程id是相同的</strong>：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807104441938.png" alt="image-20220807104441938" loading="lazy"></p>
<p>所以可以使用ThreadLocal来进行保存员工的id并填充</p>
<h3 id="2-ThreadLocal介绍"><a href="#2-ThreadLocal介绍" class="headerlink" title="2.ThreadLocal介绍"></a>2.ThreadLocal介绍</h3><p>ThreadLocal并不是一个Thread，而是Thread的局部变量。当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。</p>
<p>ThreadLocal为每个线程提供单独一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问当前线程对应的值。</p>
<p><strong>ThreadLocal常用方法：</strong></p>
<p>A. public void set(T value) : 设置当前线程的线程局部变量的值</p>
<p>B. public T get() : 返回当前线程所对应的线程局部变量的值</p>
<p>C. public void remove() : 删除当前线程所对应的线程局部变量的值 </p>
<p>所以我们可以在LoginCheckFilter的doFilter方法中获取当前登录用户id，并调用ThreadLocal的set方法来设置当前线程的线程局部变量的值（用户id），然后在MyMetaObjectHandler的updateFill方法中调用ThreadLocal的get方法来获得当前线程所对应的线程局部变量的值（用户id）。</p>
<p>如果在后续的操作中, 我们需要在Controller &#x2F; Service中要使用当前登录用户的ID, 可以直接从ThreadLocal直接获取。</p>
<h3 id="3-操作步骤"><a href="#3-操作步骤" class="headerlink" title="3. 操作步骤"></a>3. 操作步骤</h3><p>实现步骤：</p>
<ol>
<li><p>编写BaseContext工具类，基于ThreadLocal封装的工具类</p>
</li>
<li><p>在LoginCheckFilter的doFilter方法中调用BaseContext来设置当前登录用户的id</p>
</li>
<li><p>在MyMetaObjectHandler的方法中调用BaseContext获取登录用户的id</p>
</li>
</ol>
<h3 id="4-代码实现："><a href="#4-代码实现：" class="headerlink" title="4.代码实现："></a>4.代码实现：</h3><p><strong>1、在common包下创建BaseContext工具类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于ThreadLocal封装工具类，用户保存和获取当前登录用户id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 10:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、LoginCheckFilter中存放当前登录用户到ThreadLocal</strong></p>
<p>在doFilter方法中, 判定用户是否登录, 如果用户登录, 在放行之前, 获取HttpSession中的登录用户信息, 调用BaseContext的setCurrentId方法将当前登录用户ID存入ThreadLocal。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将用户id从Session中取出来，存入线程的ThreadLocal变量中</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">BaseContext.setCurrentId(empId);</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807105903926.png" alt="image-20220807105903199" loading="lazy"></p>
<p><strong>3、MyMetaObjectHandler中从ThreadLocal中获取</strong></p>
<p>将之前在代码中固定的当前登录用户1， 修改为动态调用BaseContext中的getCurrentId方法获取当前登录用户ID</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807110716910.png" alt="image-20220807110716910" loading="lazy"></p>
<h3 id="5-功能测试"><a href="#5-功能测试" class="headerlink" title="5. 功能测试"></a>5. 功能测试</h3><p>测试增加&#x2F;更新员工信息功能, 直接查询数据库数据变更，看看在新增&#x2F;修改数据时，这些公共字段数据是否能够完成自动填充, 并且看看填充的create_user 及 update_user字段值是不是本地登录用户的ID。</p>
<h1 id="二、新增分类"><a href="#二、新增分类" class="headerlink" title="二、新增分类"></a>二、新增分类</h1><h2 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h2><p>后台系统中可以管理分类信息，分类包括两种类型，分别是 <strong>菜品分类</strong> 和 <strong>套餐分类</strong> 。当我们在后台系统中添加菜品时需要选择一个菜品分类，当我们在后台系统中添加一个套餐时需要选择一个套餐分类，在移动端也会按照菜品分类和套餐分类来展示对应的菜品和套餐。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807112659881.png" alt="image-20220807112659881" loading="lazy"></p>
<p>在分类管理中,我们新增分类时, 可以选择新增菜品分类(川菜、湘菜、粤菜…), 也可以选择新增套餐分类(营养早餐、超值午餐…)。 在添加套餐的时候, 输入的排序字段, 控制的是移动端套餐列表的展示顺序。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807112709875.png" alt="image-20220807112709875" loading="lazy"></p>
<h2 id="2-2-前端页面分析"><a href="#2-2-前端页面分析" class="headerlink" title="2.2 前端页面分析"></a>2.2 前端页面分析</h2><p>在开发代码之前，需要梳理一下整个程序的执行过程：</p>
<p>1). 在页面(backend&#x2F;page&#x2F;category&#x2F;list.html)的新增分类表单中填写数据，点击 “确定” 发送ajax请求，将新增分类窗口输入的数据以json形式提交到服务端</p>
<p>2). 服务端Controller接收页面提交的数据并调用Service将数据进行保存</p>
<p>3). Service调用Mapper操作数据库，保存数据</p>
<p>可以看到新增菜品分类和新增套餐分类请求的服务端地址和提交的json数据结构相同，只是type不同，所以服务端只需要提供一个方法统一处理即可：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807112759265.png" alt="image-20220807112759265" loading="lazy"></p>
<p>具体请求信息整理如下: </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>POST</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;category</td>
</tr>
<tr>
<td>请求参数</td>
<td>json格式 - {“name”:”川菜”,”type”:”1”,”sort”:2}</td>
</tr>
</tbody></table>
<h2 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3 代码实现"></a>2.3 代码实现</h2><p>代码实现的具体步骤: </p>
<ul>
<li><p>实体类Category</p>
</li>
<li><p>Mapper接口CategoryMapper</p>
</li>
<li><p>业务层接口CategoryService</p>
</li>
<li><p>业务层实现类CategoryServiceImpl</p>
</li>
<li><p>控制层CategoryController</p>
</li>
</ul>
<h3 id="1-实体类Category"><a href="#1-实体类Category" class="headerlink" title="1.实体类Category"></a>1.实体类Category</h3><p>在entity包下新建实体类Category</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Category</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//类型 1 菜品分类 2 套餐分类</span></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//分类名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//顺序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-Mapper接口"><a href="#2-Mapper接口" class="headerlink" title="2.Mapper接口"></a>2.Mapper接口</h3><p>在mapper包下新建Mapper接口CategoryMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 11:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Category&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-业务层接口CategoryService"><a href="#3-业务层接口CategoryService" class="headerlink" title="3.业务层接口CategoryService"></a>3.业务层接口CategoryService</h3><p>在service包下新建业务层接口CategoryService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 11:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-业务层实现类CategoryServiceImpl"><a href="#4-业务层实现类CategoryServiceImpl" class="headerlink" title="4.业务层实现类CategoryServiceImpl"></a>4.业务层实现类CategoryServiceImpl</h3><p>在service包下的impl包下新建业务层接口CategoryService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 11:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper, Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-控制层CategoryController"><a href="#5-控制层CategoryController" class="headerlink" title="5. 控制层CategoryController"></a>5. 控制层CategoryController</h3><p>在controller包下新建CategoryController类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 11:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前category：&#123;&#125;&quot;</span>, category);</span><br><span class="line">        categoryService.save(category);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增分类成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-功能测试"><a href="#2-4-功能测试" class="headerlink" title="2.4 功能测试"></a>2.4 功能测试</h2><p>新增分类的代码编写完毕之后, 我们需要重新启动项目，进入管理系统访问分类管理, 然后进行新增分类测试，需要将所有情况都覆盖全，例如：</p>
<p>1). 输入的分类名称不存在</p>
<p>鲁菜添加成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807113920249.png" alt="image-20220807113920249" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807113953935.png" alt="image-20220807113953935" loading="lazy"></p>
<p>2). 输入已存在的分类名称</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807113854767.png" alt="image-20220807113854767" loading="lazy"></p>
<h1 id="三、分类信息分页查询"><a href="#三、分类信息分页查询" class="headerlink" title="三、分类信息分页查询"></a>三、分类信息分页查询</h1><h2 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h2><p>系统中的分类很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807141212238.png" alt="image-20220807141212238" loading="lazy"></p>
<h2 id="3-2-前端页面分析"><a href="#3-2-前端页面分析" class="headerlink" title="3.2 前端页面分析"></a>3.2 前端页面分析</h2><p>在开发代码之前，需要梳理一下整个程序的执行过程：</p>
<p>1). 页面发送ajax请求，将分页查询参数(page、pageSize)提交到服务端</p>
<p>2). 服务端Controller接收页面提交的数据并调用Service查询数据</p>
<p>3). Service调用Mapper操作数据库，查询分页数据</p>
<p>4). Controller将查询到的分页数据响应给页面</p>
<p>5). 页面接收到分页数据并通过ElementUI的Table组件展示到页面上</p>
<p>页面加载时,就会触发Vue声明周期的钩子方法,然后执行分页查询,发送异步请求到服务端,前端代码如下: </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807141220749.png" alt="image-20220807141220749" loading="lazy"></p>
<p>页面中使用的是ElementUI提供的分页组件进行分页条的展示:</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807141227018.png" alt="image-20220807141227018" loading="lazy"></p>
<p>我们通过浏览器,也可以抓取到分页查询的请求信息, 如下: </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807141240320.png" alt="image-20220807141240320" loading="lazy"></p>
<p>具体的请求信息整理如下: </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;category&#x2F;page</td>
</tr>
<tr>
<td>请求参数</td>
<td>?page&#x3D;1&amp;pageSize&#x3D;10</td>
</tr>
</tbody></table>
<h2 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h2><p>在CategoryController中增加分页查询的方法，在方法中传递分页条件进行查询，并且需要对查询到的结果，安排设置的套餐顺序字段sort进行排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line">    <span class="comment">//分页构造器</span></span><br><span class="line">    Page&lt;Category&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加排序条件，根据sort进行排序</span></span><br><span class="line">    queryWrapper.orderByAsc(Category::getSort);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    categoryService.page(pageInfo,queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-4-功能测试"><a href="#3-4-功能测试" class="headerlink" title="3.4 功能测试"></a>3.4 功能测试</h2><p>可以正常查询到数据并分页</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807141323634.png" alt="image-20220807141323634" loading="lazy"></p>
<h1 id="四、删除分类"><a href="#四、删除分类" class="headerlink" title="四、删除分类"></a>四、删除分类</h1><h2 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h2><p>在分类管理列表页面，可以对某个分类进行删除操作。需要注意的是当分类关联了菜品或者套餐时，此分类不允许删除。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807144955349.png" alt="image-20220807144955349" loading="lazy"></p>
<h2 id="4-2-前端页面分析"><a href="#4-2-前端页面分析" class="headerlink" title="4.2 前端页面分析"></a>4.2 前端页面分析</h2><p>在前端页面中，点击 “删除” 按钮，就会触发定义的方法，然后往服务端发送异步请求，并传递参数id，执行删除分类操作。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807145005124.png" alt="image-20220807145005124" loading="lazy"></p>
<p>删除操作的具体执行流程如下： </p>
<p>1). 点击删除，页面发送ajax请求，将参数(id)提交到服务端</p>
<p>2). 服务端Controller接收页面提交的数据并调用Service删除数据</p>
<p>3). Service调用Mapper操作数据库</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807145012793.png" alt="image-20220807145012793" loading="lazy"></p>
<p>从上述的分析中，可以得到请求的信息如下：</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>DELETE</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;category</td>
</tr>
<tr>
<td>请求参数</td>
<td>?id&#x3D;1395291114922618881</td>
</tr>
</tbody></table>
<h2 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h2><p>在CategoryController中增加根据ID删除的方法，在方法中接收页面传递参数id，然后执行删除操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id删除分类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long ids)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;删除分类，ids为：&#123;&#125;&quot;</span>,ids);</span><br><span class="line">    categoryService.removeById(ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;分类信息删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里前端传来的是ids，可以选择把前端的ids改为id，也可以在后端将id改为ids</p>
</blockquote>
<h2 id="3-5-功能完善"><a href="#3-5-功能完善" class="headerlink" title="3.5 功能完善"></a>3.5 功能完善</h2><p>在上述的测试中，可以看到分类数据是可以正常删除的。但是并没有检查删除的分类是否关联了菜品或者套餐，所以我们需要进行功能完善。</p>
<p><strong>完善后的逻辑为：</strong></p>
<ul>
<li>根据当前分类的ID，查询该分类下是否存在菜品，如果存在，则提示错误信息</li>
<li>根据当前分类的ID，查询该分类下是否存在套餐，如果存在，则提示错误信息</li>
<li>执行正常的删除分类操作</li>
</ul>
<h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p><strong>1. 准备菜品(Dish)及套餐(Setmeal)实体类(课程资料中直接拷贝)放在entity包下</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 菜品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dish</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品价格</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品码</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//0 停售 1 起售</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//顺序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Setmeal</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐价格</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态 0:停用 1:启用</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//编码</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.Mapper接口DishMapper和SetmealMapper</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Dish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Setmeal&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>3.Service接口DishService和SetmealService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Dish&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Setmeal&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>4.Service实现类DishServicelmpl和SetmealServicelmpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DishMapper, Dish&gt; <span class="keyword">implements</span> <span class="title class_">DishService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;SetmealMapper, Setmeal&gt; <span class="keyword">implements</span> <span class="title class_">SetmealService</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><p> <strong>1.在CategoryService中扩展remove方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line">	<span class="comment">//根据ID删除分类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.在CategoryServiceImpl中实现remove方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServicelmpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper, Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealService setmealService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; dishLambdaQueryWrapper=<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加查询条件，根据分类id进行查询</span></span><br><span class="line">        dishLambdaQueryWrapper.eq(Dish::getCategoryId,id);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> dishService.count(dishLambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询当前分类是否关联菜品,如果已经关联，抛出业务异常</span></span><br><span class="line">        <span class="keyword">if</span>(count1&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//已经关联菜品，抛出业务异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;已经关联菜品，不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询当前分类是否关联了套餐，如果已经关联，抛出业务异常</span></span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; setmealLambdaQueryWrapper=<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加查询条件，根据分类id进行查询</span></span><br><span class="line">        setmealLambdaQueryWrapper.eq(Setmeal::getCategoryId,id);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> setmealService.count(setmealLambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(count2&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//已经关联套餐，抛出业务异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;已经关联套餐，不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//正常删除分类</span></span><br><span class="line">        <span class="built_in">super</span>.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在上述的业务逻辑中，当分类下关联的有菜品或者套餐时，我们在业务代码中抛出了自定义异常，并且在异常中封装了错误提示信息，那这个错误提示信息如何提示给页面呢？</p>
<p>异常抛出之后，会被异常处理器捕获，我们只需要在异常处理器中捕获这一类的异常，然后给页面返回对应的提示信息即可。</p>
<p><strong>3.定义异常类CustomException</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>4.在全局异常处理器GlobalExceptionHandler添加异常处理</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进行异常处理方法</span></span><br><span class="line"><span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(CustomException ex)</span>&#123;</span><br><span class="line">    log.error(ex.getMessage());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.error(ex.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5.改造CategoryController的delete方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除分类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long ids)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;删除分类，id为&#123;&#125;&quot;</span>,ids);</span><br><span class="line"><span class="comment">//        categoryService.removeById(ids);</span></span><br><span class="line">        categoryService.remove(ids);</span><br><span class="line">        <span class="comment">//代码完善之后categoryService.remove(ids);</span></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;分类信息删除成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、修改分类"><a href="#五、修改分类" class="headerlink" title="五、修改分类"></a>五、修改分类</h1><h2 id="5-1-需求分析"><a href="#5-1-需求分析" class="headerlink" title="5.1 需求分析"></a>5.1 需求分析</h2><p>在分类管理列表页面点击修改按钮，弹出修改窗口，在修改窗口回显分类信息并进行修改，最后点击确定按钮完成修改操作</p>
<h2 id="5-2-代码实现"><a href="#5-2-代码实现" class="headerlink" title="5.2 代码实现"></a>5.2 代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改分类</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">    categoryService.updateById(category);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;分类修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-3-功能测试"><a href="#5-3-功能测试" class="headerlink" title="5.3 功能测试"></a>5.3 功能测试</h2><p>修改湘菜信息<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807150908759.png" alt="image-20220807150908759" loading="lazy"></p>
<p>页面展示正常</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807150923924.png" alt="image-20220807150923924" loading="lazy"></p>
<p>SQL语句成功执行</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807150943748.png" alt="image-20220807150943748" loading="lazy"></p>
<p>数据库中数据修改成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807151005586.png" alt="image-20220807151005586" loading="lazy"></p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>瑞吉外卖项目day02笔记</title>
    <url>/2022/08/05/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AEday02%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、完善登录功能"><a href="#一、完善登录功能" class="headerlink" title="一、完善登录功能"></a>一、完善登录功能</h1><h2 id="1-1-问题分析"><a href="#1-1-问题分析" class="headerlink" title="1.1 问题分析"></a>1.1 问题分析</h2><p><strong>问题：</strong>index页面不用登录直接输入url也可以访问</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805193614521.png" alt="image-20220805193614521" loading="lazy"></p>
<p><strong>理想效果：</strong>只有登录成功后才可以访问系统中的页面，如果没有登录, 访问系统中的任何界面都直接跳转到登录页面。</p>
<p><strong>实现方式：</strong>通过过滤器或拦截器来实现，在过滤器、拦截器中拦截前端发起的请求，判断用户是否已经完成登录，如果没有登录则返回提示信息，跳转到登录页面。</p>
<h2 id="1-2-思路分析"><a href="#1-2-思路分析" class="headerlink" title="1.2 思路分析"></a>1.2 思路分析</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805193817680.png" alt="image-20220805193817680" loading="lazy"></p>
<p><strong>过滤器具体的处理逻辑如下：</strong></p>
<ol>
<li>获取本次请求的URI</li>
<li>判断本次请求, 是否需要登录, 才可以访问</li>
<li>如果不需要，则直接放行</li>
<li>判断登录状态，如果已登录，则直接放行</li>
<li>如果未登录, 则返回未登录结果</li>
</ol>
<p>如果没登录，根据前端的处理来实现后端代码</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805193929843.png" alt="image-20220805193929843" loading="lazy"></p>
<h2 id="1-3-代码实现"><a href="#1-3-代码实现" class="headerlink" title="1.3 代码实现"></a>1.3 代码实现</h2><h3 id="创建过滤器"><a href="#创建过滤器" class="headerlink" title="创建过滤器"></a>创建过滤器</h3><p>创建filter包，并创建LoginCheckFilter过滤器</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查用户是否已经完成登陆</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-05 19:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        log.info(<span class="string">&quot;拦截到请求:&#123;&#125;&quot;</span>, request.getRequestURI());</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在启动类上加上Servlet组件扫描的注解, 来扫描过滤器配置的@WebFilter注解， 扫描上之后， 过滤器在运行时就生效了。</p>
<p><font color='red'><b>@ServletComponentScan 的作用: </b></font></p>
<p>​	在SpringBoot项目中, 在引导类&#x2F;配置类上加了该注解后, 会自动扫描项目中(当前包及其子包下)的@WebServlet , @WebFilter , @WebListener 注解, 自动注册Servlet的相关组件 ;</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805200436655.png" alt="image-20220805200436655" loading="lazy"></p>
<p>测试一下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805200544004.png" alt="image-20220805200544004" loading="lazy"></p>
<p>发现过滤器是可以生效的。</p>
<blockquote>
<p><font color='red'><b>AntPathMatcher 拓展:</b></font></p>
<p><strong>介绍:</strong> Spring中提供的路径匹配器 ;</p>
<p><strong>通配符规则:</strong> 		</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>?</td>
<td>匹配一个字符</td>
</tr>
<tr>
<td>*</td>
<td>匹配0个或多个字符</td>
</tr>
<tr>
<td>**</td>
<td>匹配0个或多个目录&#x2F;字符</td>
</tr>
</tbody></table>
</blockquote>
<h3 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查用户是否已经完成登陆</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-05 19:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="comment">//路径匹配器，支持通配符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        1. 获取本次请求的URI</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;拦截到请求:&#123;&#125;&quot;</span>, requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不需要进行处理的请求路径</span></span><br><span class="line">        String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/front/**&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2. 判断本次请求, 是否需要登录, 才可以访问</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> check(requestURI, urls);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        3. 如果不需要登录，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (check) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;本次请求&#123;&#125;不需要处理&quot;</span>, requestURI);</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        4. 判断登录状态，如果已登录，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户已登录，用户ID为:&#123;&#125;&quot;</span>, request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        5. 如果未登录, 则返回未登录结果</span></span><br><span class="line">        <span class="comment">//通过输出流的方式向客户端响应数据</span></span><br><span class="line">        response.getWriter().write(JSON.toJSONString(R.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br><span class="line">        log.info(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路径匹配，检查本期请求是否需要放行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestURI</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urls</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String requestURI, String[] urls)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> PATH_MATCHER.match(url, requestURI);</span><br><span class="line">            <span class="keyword">if</span> (match) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><p>成功实现</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805202637249.png" alt="image-20220805202637249" loading="lazy"></p>
<h1 id="二、新增员工"><a href="#二、新增员工" class="headerlink" title="二、新增员工"></a>二、新增员工</h1><h2 id="2-1-代码执行流程"><a href="#2-1-代码执行流程" class="headerlink" title="2.1 代码执行流程"></a>2.1 代码执行流程</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805203947008.png" alt="image-20220805203947008" loading="lazy"></p>
<ol>
<li>点击”保存”按钮, 页面发送ajax请求，将新增员工页面中输入的数据以json的形式提交到服务端, 请求方式POST, 请求路径 &#x2F;employee</li>
<li>服务端Controller接收页面提交的数据并调用Service将数据进行保存</li>
<li>Service调用Mapper操作数据库，保存数据</li>
</ol>
<h2 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2 代码实现"></a>2.2 代码实现</h2><p>在EmployeeController中增加save方法, 用于保存用户员工信息。</p>
<ol>
<li><p>在新增员工时， 按钮页面原型中的需求描述， 需要给员工设置初始默认密码 123456， 并对密码进行MD5加密。</p>
</li>
<li><p>在组装员工信息时, 还需要封装创建时间、修改时间，创建人、修改人信息(从session中获取当前登录用户)。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增员工功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;新增员工，员工信息：&#123;&#125;&quot;</span>, employee.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置初始密码123456，使用md5进行加密</span></span><br><span class="line">    employee.setPassword(DigestUtils.md5DigestAsHex(<span class="string">&quot;123456&quot;</span>.getBytes()));</span><br><span class="line">    <span class="comment">//设置创建时间</span></span><br><span class="line">    employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">    <span class="comment">//设置更新时间</span></span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得当前登录用户的id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"></span><br><span class="line">    employee.setCreateUser(empId);</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line"></span><br><span class="line">    employeeService.save(employee);</span><br><span class="line">    <span class="comment">//返回成功信息</span></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增员工成功!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试一下，插入成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805204803806.png" alt="image-20220805204803806" loading="lazy"></p>
<p>但是这里有一个问题，如果再次插入同账号的员工</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805205103631.png" alt="image-20220805205103631" loading="lazy"></p>
<p>发现这里出现系统接口500异常</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805205121147.png" alt="image-20220805205121147" loading="lazy"></p>
<p>控制台也报错了，因为在 employee 表结构中，我们针对于username字段，建立了唯一索引，添加重复的username数据时，违背该约束，就会报错。但是此时前端提示的信息并不具体，用户并不知道是因为什么原因造成的该异常，我们需要给用户提示详细的错误信息 。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805205221784.png" alt="image-20220805205221784" loading="lazy"></p>
<h1 id="三、全局异常处理器"><a href="#三、全局异常处理器" class="headerlink" title="三、全局异常处理器"></a>三、全局异常处理器</h1><h2 id="3-1-思路分析"><a href="#3-1-思路分析" class="headerlink" title="3.1 思路分析"></a>3.1 思路分析</h2><p>要想解决上述测试中存在的问题，我们需要对程序中可能出现的异常进行捕获，通常有两种处理方式：</p>
<p><strong>A. 在Controller方法中加入 try…catch 进行异常捕获</strong></p>
<p>形式如下： </p>
<p> <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805205457644.png" alt="image-20220805205457644" loading="lazy"></p>
<p>如果采用这种方式，虽然可以解决，但是存在弊端，需要我们在保存其他业务数据时，也需要在Controller方法中加上try…catch进行处理，代码冗余，不通用。</p>
<p><strong>B. 使用异常处理器进行全局异常捕获</strong></p>
<p>采用这种方式来实现，我们只需要在项目中定义一个通用的全局异常处理器，就可以解决本项目的所有异常。</p>
<h2 id="3-2-全局异常处理器"><a href="#3-2-全局异常处理器" class="headerlink" title="3.2 全局异常处理器"></a>3.2 全局异常处理器</h2><p>在项目中自定义一个全局异常处理器，在异常处理器上加上注解 @ControllerAdvice,可以通过属性annotations指定拦截哪一类的Controller方法。 并在异常处理器的方法上加上注解 @ExceptionHandler 来指定拦截的是那一类型的异常。</p>
<blockquote>
<p>异常处理方法逻辑: </p>
<ul>
<li>指定捕获的异常类型为 SQLIntegrityConstraintViolationException</li>
<li>解析异常的提示信息, 获取出是那个值违背了唯一约束 </li>
<li>组装错误信息并返回</li>
</ul>
</blockquote>
<h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-05 21:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice(annotations = &#123;RestController.class&#125;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span> &#123;</span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line">        <span class="comment">//将错误信息用空格分开Duplicate entry &#x27;duoduo&#x27; for key &#x27;idx_username&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> (ex.getMessage().contains(<span class="string">&quot;Duplicate entry&quot;</span>)) &#123;</span><br><span class="line">            String[] split = ex.getMessage().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">//获取用户名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> split[<span class="number">2</span>] + <span class="string">&quot;已存在&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> R.error(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><font color='red'><b>注解说明:</b></font></p>
<p>​	上述的全局异常处理器上使用了的两个注解 @ControllerAdvice , @ResponseBody , 他们的作用分别为: </p>
<p>​	@ControllerAdvice : 指定拦截那些类型的控制器;</p>
<p>​	@ResponseBody: 将方法的返回值 R 对象转换为json格式的数据, 响应给页面;</p>
<p>​	</p>
<p>上述使用的两个注解, 也可以合并成为一个注解 @RestControllerAdvice </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805210512152.png" alt="image-20220805210512152" loading="lazy"> </p>
</blockquote>
<h3 id="测试：-1"><a href="#测试：-1" class="headerlink" title="测试："></a>测试：</h3><p>成功检查出异常并返回错误信息</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805210403840.png" alt="image-20220805210403840" loading="lazy"></p>
<h1 id="四、员工分页查询"><a href="#四、员工分页查询" class="headerlink" title="四、员工分页查询"></a>四、员工分页查询</h1><h2 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h2><p>系统中的员工很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。而在我们的分页查询页面中, 除了分页条件以外，还有一个查询条件 “员工姓名”。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806075143599.png" alt="image-20220806075143599" loading="lazy"></p>
<ul>
<li><p>请求参数</p>
<ul>
<li><p>搜索条件： 员工姓名(模糊查询)</p>
</li>
<li><p>分页条件： 每页展示条数 ， 页码</p>
</li>
</ul>
</li>
<li><p>响应数据</p>
<ul>
<li><p>总记录数</p>
</li>
<li><p>结果列表</p>
</li>
</ul>
</li>
</ul>
<h2 id="4-2-程序执行流程分析"><a href="#4-2-程序执行流程分析" class="headerlink" title="4.2 程序执行流程分析"></a>4.2 程序执行流程分析</h2><p>在开发代码之前，需要梳理一下整个程序的执行过程。</p>
<p>A. 点击菜单，打开员工管理页面时，执行查询： </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806075823871.png" alt="image-20220806075823871" loading="lazy"></p>
<p>B. 搜索栏输入员工姓名,回车,执行查询:</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806075831325.png" alt="image-20220806075831325" loading="lazy"></p>
<ol>
<li><p>页面发送ajax请求，将分页查询参数(page、pageSize、name)提交到服务端</p>
</li>
<li><p>服务端Controller接收页面提交的数据, 并组装条件调用Service查询数据</p>
</li>
<li><p>Service调用Mapper操作数据库，查询分页数据</p>
</li>
<li><p>Controller将查询到的分页数据, 响应给前端页面</p>
</li>
<li><p>页面接收到分页数据, 并通过ElementUI的Table组件展示到页面上</p>
</li>
</ol>
<h2 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h2><p>要实现分页查询功能，就需要用到MybatisPlus中提供的分页插件，要使用分页插件，就要在配置类中声明分页插件的bean对象。</p>
<p>在config目录下新建MybatisPlusConfig类</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置MP的分页插件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-06 8:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="分页查询实现"><a href="#分页查询实现" class="headerlink" title="分页查询实现"></a>分页查询实现</h4><p>页面在进行分页查询时， 具体的请求信息如下:</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;employee&#x2F;page</td>
</tr>
<tr>
<td>请求参数</td>
<td>page , pageSize , name</td>
</tr>
</tbody></table>
<p>那么查询完毕后我们需要给前端返回什么样的结果呢? </p>
<p>查询返回的结果数据data中应该封装两项信息, 分别为: records 封装分页列表数据, total 中封装符合条件的总记录数。 </p>
<p>那么这个时候, 在定义controller方法的返回值类型R时, 我们可以直接将 MybatisPlus 分页查询的结果 Page 直接封装返回, 因为Page中的属性如下: </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806080524874.png" alt="image-20220806080524874" loading="lazy"> </p>
<p>那么接下来就依据于这些已知的需求和条件完成分页查询的代码实现。 具体的逻辑如下: </p>
<p>A. 构造分页条件</p>
<p>B. 构建搜索条件 - name进行模糊匹配</p>
<p>C. 构建排序条件 - 更新时间倒序排序</p>
<p>D. 执行查询</p>
<p>E. 组装结果并返回</p>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a><strong>代码如下：</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工信息分页查询功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;page = &#123;&#125;,pageSize=&#123;&#125;,name=&#123;&#125;&quot;</span>, page, pageSize, name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.构造分页构造器</span></span><br><span class="line">    <span class="type">Page</span> <span class="variable">pageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(page, pageSize);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.构造条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加过滤条件，模糊查询</span></span><br><span class="line">    queryWrapper.like(StringUtils.isNotEmpty(name), Employee::getName, name);</span><br><span class="line">    <span class="comment">//添加排序条件，按照更新时间进行排序</span></span><br><span class="line">    queryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.执行查询</span></span><br><span class="line">    employeeService.page(pageInfo, queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试：-2"><a href="#测试：-2" class="headerlink" title="测试："></a>测试：</h4><p>前端正常拿到数据</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806081831536.png" alt="image-20220806081831536" loading="lazy"></p>
<p>后端也执行了查询</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806081916191.png" alt="image-20220806081916191" loading="lazy"></p>
<h1 id="五、启动、禁用员工账号"><a href="#五、启动、禁用员工账号" class="headerlink" title="五、启动、禁用员工账号"></a>五、启动、禁用员工账号</h1><h2 id="5-1-需求分析"><a href="#5-1-需求分析" class="headerlink" title="5.1 需求分析"></a>5.1 需求分析</h2><p>在员工管理列表页面，可以对某个员工账号进行<font color='gree'>启用</font>或者<font color='red'>禁用</font>操作。账号禁用的员工不能登录系统，启用后的员工可以正常登录。如果某个员工账号状态为正常，则按钮显示为 “禁用”，如果员工账号状态为已禁用，则按钮显示为”启用”。</p>
<p>&#x3D;&#x3D;注意：只有管理员（admin用户）可以对其他普通用户进行启用、禁用操作，所以普通用户登录系统后启用、禁用按钮不显示。&#x3D;&#x3D;</p>
<h2 id="5-2-程序执行流程"><a href="#5-2-程序执行流程" class="headerlink" title="5.2 程序执行流程"></a>5.2 程序执行流程</h2><h3 id="1-页面按钮动态展示"><a href="#1-页面按钮动态展示" class="headerlink" title="1 页面按钮动态展示"></a>1 页面按钮动态展示</h3><p>1). 当管理员admin点击 “启用” 或 “禁用” 按钮时, 调用方法statusHandle</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806091557779.png" alt="image-20220806091557779" loading="lazy"></p>
<blockquote>
<p>scope.row : 获取到的是这一行的数据信息 ;</p>
</blockquote>
<p>2). statusHandle方法中进行二次确认, 然后发起ajax请求, 传递id、status参数</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806091613731.png" alt="image-20220806091613731" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806091620314.png" alt="image-20220806091620314" loading="lazy"></p>
<p>最终发起异步请求, 请求服务端, 请求信息如下： </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>PUT</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;employee</td>
</tr>
<tr>
<td>请求参数</td>
<td>{“id”:xxx,”status”:xxx}</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>{…params}</strong> : 三点是ES6中出现的扩展运算符。作用是遍历当前使用的对象能够访问到的所有属性，并将属性放入当前对象中。</p>
</blockquote>
<h2 id="5-3-代码实现"><a href="#5-3-代码实现" class="headerlink" title="5.3 代码实现"></a>5.3 代码实现</h2><p>程序的执行过程：</p>
<p>1). 页面发送ajax请求，将参数(id、status)提交到服务端</p>
<p>2). 服务端Controller接收页面提交的数据并调用Service更新数据</p>
<p>3). Service调用Mapper操作数据库</p>
<p>启用、禁用员工账号，本质上就是一个更新操作，也就是对status状态字段进行操作。在Controller中创建update方法，此方法是一个通用的修改员工信息的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id修改员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(HttpServletRequest request,<span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">    log.info(employee.toString());</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long)request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"></span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line">    employeeService.updateById(employee);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;员工信息修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-4-代码修复"><a href="#5-4-代码修复" class="headerlink" title="5.4 代码修复"></a>5.4 代码修复</h2><p>在前端JS中， js在对长度较长的长整型数据进行处理时， 会损失精度， 从而导致提交的id和数据库中的id不一致。</p>
<p>想解决这个问题，只需要让js处理的<strong>ID数据类型转为字符串类型</strong>即可, 这样就不会损失精度了。</p>
<p>由于在SpringMVC中, 将Controller方法返回值转换为json对象, 是通过jackson来实现的, 涉及到SpringMVC中的一个消息转换器MappingJackson2HttpMessageConverter, 所以我们要解决这个问题, 就需要对该消息转换器的功能进行拓展。</p>
<p><strong>具体实现步骤：</strong></p>
<p>1). 提供对象转换器JacksonObjectMapper，基于Jackson进行Java对象到json数据的转换（资料中已经提供，直接复制到项目中使用）</p>
<p>2). 在WebMvcConfig配置类中扩展Spring mvc的消息转换器，在此消息转换器中使用提供的对象转换器进行Java对象到json数据的转换</p>
<p><strong>1). 引入JacksonObjectMapper</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="keyword">module</span>.SimpleModule;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.std.ToStringSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span></span><br><span class="line"><span class="comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span></span><br><span class="line"><span class="comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title class_">ObjectMapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JacksonObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">//收到未知属性时不报异常</span></span><br><span class="line">        <span class="built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        <span class="built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>()</span><br><span class="line">                .addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))</span><br><span class="line"></span><br><span class="line">                .addSerializer(BigInteger.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(Long.class, ToStringSerializer.instance)</span><br><span class="line"></span><br><span class="line">                .addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line">        <span class="comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class="line">        <span class="built_in">this</span>.registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该自定义的对象转换器, 主要指定了, 在进行json数据序列化及反序列化时, LocalDateTime、LocalDate、LocalTime的处理方式, 以及BigInteger及Long类型数据，直接转换为字符串。</p>
<p><strong>2). 在WebMvcConfig中重写方法extendMessageConverters</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩展mvc框架的消息转换器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;扩展消息转换器...&quot;</span>);</span><br><span class="line">    <span class="comment">//创建消息转换器对象</span></span><br><span class="line">    <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">    <span class="comment">//设置对象转换器，底层使用Jackson将Java对象转为json</span></span><br><span class="line">    messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">    <span class="comment">//将上面的消息转换器对象追加到mvc框架的转换器集合中</span></span><br><span class="line">    converters.add(<span class="number">0</span>,messageConverter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="测试：-3"><a href="#测试：-3" class="headerlink" title="测试："></a>测试：</h3><p>状态更改成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806091817743.png" alt="image-20220806091817743" loading="lazy"></p>
<h1 id="六、编辑员工信息"><a href="#六、编辑员工信息" class="headerlink" title="六、编辑员工信息"></a>六、编辑员工信息</h1><h2 id="6-1-程序执行流程"><a href="#6-1-程序执行流程" class="headerlink" title="6.1 程序执行流程"></a>6.1 程序执行流程</h2><ol>
<li><p>点击编辑按钮时，页面跳转到add.html，并在url中携带参数[员工id]</p>
</li>
<li><p>在add.html页面获取url中的参数[员工id]</p>
</li>
<li><p>发送ajax请求，请求服务端，同时提交员工id参数</p>
</li>
<li><p>服务端接收请求，根据员工id查询员工信息，将员工信息以json形式响应给页面</p>
</li>
<li><p>页面接收服务端响应的json数据，通过VUE的数据绑定进行员工信息回显</p>
</li>
<li><p>点击保存按钮，发送ajax请求，将页面中的员工信息以json方式提交给服务端</p>
</li>
<li><p>服务端接收员工信息，并进行处理，完成后给页面响应</p>
</li>
<li><p>页面接收到服务端响应信息后进行相应处理</p>
</li>
</ol>
<blockquote>
<p><strong>注意：add.html页面为公共页面，新增员工和编辑员工都是在此页面操作</strong></p>
</blockquote>
<h2 id="6-2-代码实现"><a href="#6-2-代码实现" class="headerlink" title="6.2 代码实现"></a>6.2 代码实现</h2><h4 id="根据ID查询"><a href="#根据ID查询" class="headerlink" title="根据ID查询"></a>根据ID查询</h4><p>经过上述的分析,我们看到,在根据ID查询员工信息时,请求信息如下: </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;employee&#x2F;{id}</td>
</tr>
</tbody></table>
<p><strong>代码实现:</strong> </p>
<p>在EmployeeController中增加方法, 根据ID查询员工信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;根据id查询员工信息...&quot;</span>);</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">    <span class="keyword">if</span>(employee != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.success(employee);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;没有查询到对应员工信息&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="修改员工"><a href="#修改员工" class="headerlink" title="修改员工"></a>修改员工</h4><p>经过上述的分析,我们看到,在修改员工信息时,请求信息如下: </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>PUT</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;employee</td>
</tr>
<tr>
<td>请求参数</td>
<td>{…….} json格式数据</td>
</tr>
</tbody></table>
<p><strong>代码实现:</strong> </p>
<p>在EmployeeController中增加方法, 根据ID更新员工信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id修改员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(HttpServletRequest request,<span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">    log.info(employee.toString());</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long)request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"></span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line">    employeeService.updateById(employee);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;员工信息修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="6-4-功能测试"><a href="#6-4-功能测试" class="headerlink" title="6.4 功能测试"></a>6.4 功能测试</h2><p>数据可以正常修改</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806103824964.png" alt="image-20220806103824964" loading="lazy"></p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>瑞吉外卖项目day01笔记</title>
    <url>/2022/08/05/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AEday01%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、-软件开发整体介绍"><a href="#一、-软件开发整体介绍" class="headerlink" title="一、 软件开发整体介绍"></a>一、 软件开发整体介绍</h1><p>作为一名软件开发工程师,我们需要了解在软件开发过程中的开发流程， 以及软件开发过程中涉及到的岗位角色，角色的分工、职责， 并了解软件开发中涉及到的三种软件环境。那么这一小节，我们将从 软件开发流程、角色分工、软件环境 三个方面，来整体上介绍一下软件开发。</p>
<h2 id="1-1-软件开发流程"><a href="#1-1-软件开发流程" class="headerlink" title="1.1 软件开发流程"></a>1.1 软件开发流程</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805192836128.png" alt="image-20220805192836128" loading="lazy"></p>
<p><strong>1). 第1阶段: 需求分析</strong></p>
<p>完成产品原型、需求规格说明书的编写。  </p>
<p>产品原型，一般是通过网页(html)的形式展示当前的页面展示什么样的数据, 页面的布局是什么样子的，点击某个菜单，打开什么页面，点击某个按钮，出现什么效果，都可以通过产品原型看到。 </p>
<p>需求规格说明书， 一般来说就是使用 Word 文档来描述当前项目有哪些功能，每一项功能的需求及业务流程是什么样的，都会在文档中描述。</p>
<p><strong>2). 第2阶段: 设计</strong></p>
<p>设计的内容包含 产品设计、UI界面设计、概要设计、详细设计、数据库设计。</p>
<p>在设计阶段，会出具相关的UI界面、及相关的设计文档。比如数据库设计，需要设计当前项目中涉及到哪些数据库，每一个数据库里面包含哪些表，这些表结构之间的关系是什么样的，表结构中包含哪些字段，字段类型都会在文档中描述清楚。</p>
<p><strong>3). 第3阶段: 编码</strong></p>
<p>编写项目代码、并完成单元测试。</p>
<p>作为软件开发工程师，我们主要的工作就是在该阶段， 对分配给我们的模块功能，进行编码实现。编码实现完毕后，进行单元测试，单元测试通过后再进入到下一阶段。</p>
<p><strong>4). 第4阶段: 测试</strong></p>
<p>在该阶段中主要由测试人员, 对部署在测试环境的项目进行功能测试, 并出具测试报告。</p>
<p><strong>5). 第5阶段: 上线运维</strong></p>
<p>在项目上线之前， 会由运维人员准备服务器上的软件环境安装、配置， 配置完毕后， 再将我们开发好的项目，部署在服务器上运行。</p>
<p>我们作为软件开发工程师， 我们主要的任务是在编码阶段， 但是在一些小的项目组当中， 也会涉及到数据库的设计、测试等方面的工作。</p>
<h2 id="1-2-角色分工"><a href="#1-2-角色分工" class="headerlink" title="1.2 角色分工"></a>1.2 角色分工</h2><p>学习了软件开发的流程之后， 我们还有必要了解一下在整个软件开发过程中涉及到的岗位角色，以及各个角色的职责分工。 </p>
<table>
<thead>
<tr>
<th>岗位&#x2F;角色</th>
<th>职责&#x2F;分工</th>
</tr>
</thead>
<tbody><tr>
<td>项目经理</td>
<td>对整个项目负责，任务分配、把控进度</td>
</tr>
<tr>
<td>产品经理</td>
<td>进行需求调研，输出需求调研文档、产品原型等</td>
</tr>
<tr>
<td>UI设计师</td>
<td>根据产品原型输出界面效果图</td>
</tr>
<tr>
<td>架构师</td>
<td>项目整体架构设计、技术选型等</td>
</tr>
<tr>
<td><font color='red'>开发工程师</font></td>
<td><font color='red'>功能代码实现</font></td>
</tr>
<tr>
<td>测试工程师</td>
<td>编写测试用例，输出测试报告</td>
</tr>
<tr>
<td>运维工程师</td>
<td>软件环境搭建、项目上线</td>
</tr>
</tbody></table>
<p>上述我们讲解的角色分工, 是在一个项目组中比较标准的角色分工, 但是在实际的项目中, 有一些项目组由于人员配置紧张, 可能并没有专门的架构师或测试人员, 这个时候可能需要有项目经理或者程序员兼任。</p>
<h2 id="1-3-软件环境"><a href="#1-3-软件环境" class="headerlink" title="1.3 软件环境"></a>1.3 软件环境</h2><p>在我们日常的软件开发中，会涉及到软件开发中的三套环境， 那么这三套环境分别是: 开发环境、测试环境、生产环境。 接下来，我们分别介绍一下这三套环境的作用和特点。</p>
<p><strong>1). 开发环境(development)</strong></p>
<p>我们作为软件开发人员，在开发阶段使用的环境，就是开发环境，一般外部用户无法访问。</p>
<p>比如，我们在开发中使用的MySQL数据库和其他的一些常用软件，我们可以安装在本地， 也可以安装在一台专门的服务器中， 这些应用软件仅仅在软件开发过程中使用， 项目测试、上线时，我们不会使用这套环境了，这个环境就是开发环境。</p>
<p><strong>2). 测试环境(testing)</strong></p>
<p>当软件开发工程师，将项目的功能模块开发完毕，并且单元测试通过后，就需要将项目部署到测试服务器上，让测试人员对项目进行测试。那这台测试服务器就是专门给测试人员使用的环境， 也就是测试环境，用于项目测试，一般外部用户无法访问。</p>
<p><strong>3). 生产环境(production)</strong></p>
<p>当项目开发完毕，并且由测试人员测试通过之后，就可以上线项目，将项目部署到线上环境，并正式对外提供服务，这个线上环境也称之为生产环境。</p>
<blockquote>
<p><font color='gree'> <b>拓展知识:</b></font> </p>
<p>​	<strong>准生产环境:</strong> 对于有的公司来说，项目功能开发好, 并测试通过以后，并不是直接就上生产环境。为了保证我们开发的项目在上线之后能够完全满足要求，就需要把项目部署在真实的环境中, 测试一下是否完全符合要求啊，这时候就诞生了准生产环境，你可以把他当做生产环境的克隆体，准生产环境的服务器配置, 安装的应用软件(JDK、Tomcat、数据库、中间件 …) 的版本都一样，这种环境也称为 “仿真环境”。</p>
<p>​	ps.由于项目的性质和类型不同，有的项目可能不需要这个环境</p>
</blockquote>
<h1 id="二、-瑞吉外卖项目介绍"><a href="#二、-瑞吉外卖项目介绍" class="headerlink" title="二、 瑞吉外卖项目介绍"></a>二、 瑞吉外卖项目介绍</h1><p>在开发瑞吉外卖这个项目之前，我们需要全方位的来介绍一下当前我们学习的这个项目。接下来，我们将从以下的五个方面， 来介绍瑞吉外卖这个项目。</p>
<h2 id="2-1-项目介绍"><a href="#2-1-项目介绍" class="headerlink" title="2.1 项目介绍"></a>2.1 项目介绍</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805192901586.png" alt="image-20220805192901586" loading="lazy"></p>
<p>本项目（瑞吉外卖）是专门为餐饮企业（餐厅、饭店）定制的一款软件产品，包括 系统管理后台 和 移动端应用 两部分。其中系统管理后台主要提供给餐饮企业内部员工使用，可以对餐厅的分类、菜品、套餐、订单、员工等进行管理维护。移动端应用主要提供给消费者使用，可以在线浏览菜品、添加购物车、下单等。</p>
<p>本项目共分为3期进行开发：</p>
<table>
<thead>
<tr>
<th>阶段</th>
<th>功能实现</th>
</tr>
</thead>
<tbody><tr>
<td>第一期</td>
<td>主要实现基本需求，其中移动端应用通过H5实现，用户可以通过手机浏览器访问</td>
</tr>
<tr>
<td>第二期</td>
<td>主要针对移动端应用进行改进，使用微信小程序实现，用户使用起来更加方便</td>
</tr>
<tr>
<td>第三期</td>
<td>主要针对系统进行优化升级，提高系统的访问性能</td>
</tr>
</tbody></table>
<h2 id="2-2-产品原型"><a href="#2-2-产品原型" class="headerlink" title="2.2 产品原型"></a>2.2 产品原型</h2><p><strong>产品原型</strong>，就是一款产品成型之前，由产品经理绘制的一个简单的框架，就是将页面的排版布局展现出来，使产品的初步构思有一个可视化的展示。通过原型展示，可以更加直观的了解项目的需求和提供的功能。</p>
<blockquote>
<p><strong><font color='red'>注意事项：</font></strong> 产品原型主要用于展示项目的功能，并不是最终的页面效果。</p>
</blockquote>
<p>在课程资料的产品原型文件夹下,提供了两份产品原型。</p>
<p> <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805192931824.png" alt="image-20220805192931824" loading="lazy"> </p>
<p><strong>1). 管理端</strong></p>
<p>餐饮企业内部员工使用。 主要功能有: </p>
<table>
<thead>
<tr>
<th>模块</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>登录&#x2F;退出</td>
<td>内部员工必须登录后,才可以访问系统管理后台</td>
</tr>
<tr>
<td>员工管理</td>
<td>管理员可以在系统后台对员工信息进行管理，包含查询、新增、编辑、禁用等功能</td>
</tr>
<tr>
<td>分类管理</td>
<td>主要对当前餐厅经营的 菜品分类 或 套餐分类 进行管理维护， 包含查询、新增、修改、删除等功能</td>
</tr>
<tr>
<td>菜品管理</td>
<td>主要维护各个分类下的菜品信息，包含查询、新增、修改、删除、启售、停售等功能</td>
</tr>
<tr>
<td>套餐管理</td>
<td>主要维护当前餐厅中的套餐信息，包含查询、新增、修改、删除、启售、停售等功能</td>
</tr>
<tr>
<td>订单明细</td>
<td>主要维护用户在移动端下的订单信息，包含查询、取消、派送、完成，以及订单报表下载等功能</td>
</tr>
</tbody></table>
<p><strong>2). 用户端</strong></p>
<p>移动端应用主要提供给消费者使用。主要功能有:</p>
<table>
<thead>
<tr>
<th>模块</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>登录&#x2F;退出</td>
<td>在移动端, 用户也需要登录后使用APP进行点餐</td>
</tr>
<tr>
<td>点餐-菜单</td>
<td>在点餐界面需要展示出菜品分类&#x2F;套餐分类, 并根据当前选择的分类加载其中的菜品信息, 供用户查询选择</td>
</tr>
<tr>
<td>点餐-购物车</td>
<td>用户选中的菜品就会加入用户的购物车, 主要包含 查询购物车、加入购物车、删除购物车、清空购物车等功能</td>
</tr>
<tr>
<td>订单支付</td>
<td>用户选完菜品&#x2F;套餐后, 可以对购物车菜品进行结算支付, 这时就需要进行订单的支付</td>
</tr>
<tr>
<td>个人信息</td>
<td>在个人中心页面中会展示当前用户的基本信息, 用户可以管理收货地址, 也可以查询历史订单数据</td>
</tr>
</tbody></table>
<h2 id="2-3-技术选型"><a href="#2-3-技术选型" class="headerlink" title="2.3 技术选型"></a>2.3 技术选型</h2><p>关于本项目的技术选型, 我们将会从 用户层、网关层、应用层、数据层 这几个方面进行介绍，而对于我们服务端开发工程师来说，在项目开发过程中，我们主要关注应用层及数据层技术的应用。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805192941946.png" alt="image-20220805192941946" loading="lazy"> </p>
<p><strong>1). 用户层</strong></p>
<p>本项目中在构建系统管理后台的前端页面，我们会用到H5、Vue.js、ElementUI等技术。而在构建移动端应用时，我们会使用到微信小程序。</p>
<p><strong>2). 网关层</strong></p>
<p>Nginx是一个服务器，主要用来作为Http服务器，部署静态资源，访问性能高。在Nginx中还有两个比较重要的作用： 反向代理和负载均衡， 在进行项目部署时，要实现Tomcat的负载均衡，就可以通过Nginx来实现。</p>
<p><strong>3). 应用层</strong></p>
<p>SpringBoot： 快速构建Spring项目, 采用 “约定优于配置” 的思想, 简化Spring项目的配置开发。</p>
<p>Spring: 统一管理项目中的各种资源(bean), 在web开发的各层中都会用到。</p>
<p>SpringMVC：SpringMVC是spring框架的一个模块，springmvc和spring无需通过中间整合层进行整合，可以无缝集成。</p>
<p>SpringSession: 主要解决在集群环境下的Session共享问题。</p>
<p>lombok：能以简单的注解形式来简化java代码，提高开发人员的开发效率。例如开发中经常需要写的javabean，都需要花时间去添加相应的getter&#x2F;setter，也许还要去写构造器、equals等方法。</p>
<p>Swagger： 可以自动的帮助开发人员生成接口文档，并对接口进行测试。</p>
<p><strong>4). 数据层</strong></p>
<p>MySQL： 关系型数据库, 本项目的核心业务数据都会采用MySQL进行存储。</p>
<p>MybatisPlus： 本项目持久层将会使用MybatisPlus来简化开发, 基本的单表增删改查直接调用框架提供的方法即可。</p>
<p>Redis： 基于key-value格式存储的内存数据库, 访问速度快, 经常使用它做缓存(降低数据库访问压力, 提供访问效率), 在后面的性能优化中会使用。</p>
<p><strong>5). 工具</strong></p>
<p>git: 版本控制工具, 在团队协作中, 使用该工具对项目中的代码进行管理。</p>
<p>maven: 项目构建工具。</p>
<p>junit：单元测试工具，开发人员功能实现完毕后，需要通过junit对功能进行单元测试。</p>
<h2 id="2-4-功能架构"><a href="#2-4-功能架构" class="headerlink" title="2.4 功能架构"></a>2.4 功能架构</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805192951200.png" alt="image-20220805192951200" loading="lazy"> </p>
<p><strong>1). 移动端前台功能</strong></p>
<p>手机号登录 , 微信登录 , 收件人地址管理 , 用户历史订单查询 , 菜品规格查询 , 购物车功能 , 下单 , 分类及菜品浏览。</p>
<p><strong>2). 系统管理后台功能</strong></p>
<p>员工登录&#x2F;退出 , 员工信息管理 , 分类管理 , 菜品管理 , 套餐管理 , 菜品口味管理 , 订单管理 。</p>
<h2 id="2-5-角色"><a href="#2-5-角色" class="headerlink" title="2.5 角色"></a>2.5 角色</h2><p>在瑞吉外卖这个项目中，存在以下三种用户，这三种用户对应三个角色： 后台系统管理员、后台系统普通员工、C端(移动端)用户。</p>
<table>
<thead>
<tr>
<th>角色</th>
<th>权限操作</th>
</tr>
</thead>
<tbody><tr>
<td>后台系统管理员</td>
<td>登录后台管理系统，拥有后台系统中的所有操作权限</td>
</tr>
<tr>
<td>后台系统普通员工</td>
<td>登录后台管理系统，对菜品、套餐、订单等进行管理 (不包含员工管理)</td>
</tr>
<tr>
<td>C端用户</td>
<td>登录移动端应用，可以浏览菜品、添加购物车、设置地址、在线下单等</td>
</tr>
</tbody></table>
<h1 id="三、开发环境搭建"><a href="#三、开发环境搭建" class="headerlink" title="三、开发环境搭建"></a>三、开发环境搭建</h1><h2 id="3-1-数据库环境搭建"><a href="#3-1-数据库环境搭建" class="headerlink" title="3.1 数据库环境搭建"></a>3.1 数据库环境搭建</h2><p>打开Navicat，右键连接，新建数据库</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659684689289-934107c8-0e0e-4725-897f-f06004ad1eb5.png" alt="img" loading="lazy"></p>
<p>新建数据库</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659684757252-9921f145-5b42-47d9-a188-58d81bb4b815.png" alt="img" loading="lazy"></p>
<p>导入表结构和表信息，右键，运行SQL文件</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659684882309-a197a987-9962-406b-98d2-88fa8c46b867.png" alt="img" loading="lazy"></p>
<p>找到SQL文件，选中，运行</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659684955505-a7a3b622-9461-41d7-87c7-a4de1b9857a2.png" alt="img" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659684976072-4fafc762-59ba-406e-833d-a8b59eb0c134.png" alt="img" loading="lazy"></p>
<p>导入成功~</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659685010466-9c0ff67a-88f6-4991-88f7-16edee24fd17.png" alt="img" loading="lazy"></p>
<p>数据库表说明</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659685415640-e16539f6-17b8-4464-b070-6e75bdbf9e37.png" alt="img" loading="lazy"></p>
<h2 id="3-2-maven环境搭建"><a href="#3-2-maven环境搭建" class="headerlink" title="3.2 maven环境搭建"></a>3.2 maven环境搭建</h2><h3 id="1、-创建一个新的项目"><a href="#1、-创建一个新的项目" class="headerlink" title="1、 创建一个新的项目"></a>1、 创建一个新的项目</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659685531031-d3c30c89-9be3-404c-b551-9bbb763205d9.png" alt="img" loading="lazy"></p>
<p>选择创建Maven项目</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659685582738-090ff6c9-0094-404c-a206-8c92ef09f467.png" alt="img" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659685726432-7169ffed-cb7e-40d0-9370-08e9df95b523.png" alt="img" loading="lazy"></p>
<p>检查Maven</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659685816439-f80f0422-e62b-4cfd-bd0e-875ac75e5a01.png" alt="img" loading="lazy"></p>
<h3 id="2、-导入pom-xml文件"><a href="#2、-导入pom-xml文件" class="headerlink" title="2、 导入pom.xml文件"></a>2、 导入pom.xml文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reggie_take_out<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、创建配置文件application-yml"><a href="#3、创建配置文件application-yml" class="headerlink" title="3、创建配置文件application.yml"></a>3、创建配置文件application.yml</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805155657827.png" alt="image-20220805155657827" loading="lazy"></p>
<p>代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">reggie_take_out</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">ASSIGN_ID</span></span><br></pre></td></tr></table></figure>

<h3 id="4、编写启动类"><a href="#4、编写启动类" class="headerlink" title="4、编写启动类"></a>4、编写启动类</h3><p>创建启动类ReggieApplication</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805161747443.png" alt="image-20220805161747443" loading="lazy"></p>
<p>并写入以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-05 16:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReggieApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ReggieApplication.class,args);</span><br><span class="line">        <span class="comment">//输出日志</span></span><br><span class="line">        log.info(<span class="string">&quot;项目启动成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行测试，启动成功。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805161846988.png" alt="image-20220805161846988" loading="lazy"></p>
<h3 id="5、导入静态资源"><a href="#5、导入静态资源" class="headerlink" title="5、导入静态资源"></a>5、导入静态资源</h3><p>在resources目录下创建static目录，将前端资料复制到static</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805162722841.png" alt="image-20220805162722841" loading="lazy"></p>
<p>测试，可以访问到。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805162744591.png" alt="image-20220805162744591" loading="lazy"></p>
<h1 id="四、后台登录功能开发"><a href="#四、后台登录功能开发" class="headerlink" title="四、后台登录功能开发"></a>四、后台登录功能开发</h1><h2 id="4-1-创建实体类"><a href="#4-1-创建实体类" class="headerlink" title="4.1 创建实体类"></a>4.1 创建实体类</h2><p>在reggie目录下新建entity包，新建Employee类</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805164535814.png" alt="image-20220805164535814" loading="lazy"></p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">//员工实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String idNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-2-完善项目目录"><a href="#4-2-完善项目目录" class="headerlink" title="4.2 完善项目目录"></a>4.2 完善项目目录</h2><h3 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h3><p>创建mapper目录并创建EmployeeMapper接口继承BaseMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Employee&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><p>创建service目录并创建EmployeeService接口继承IService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Employee&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在service目录中创建impl并创建EmployeeServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;EmployeeMapper, Employee&gt; <span class="keyword">implements</span> <span class="title class_">EmployeeService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><p>创建controller目录并创建EmployeeController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/employee&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="common"><a href="#common" class="headerlink" title="common"></a>common</h3><p>创建common目录并创建R通用返回结果类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通用返回结果类</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">//编码：1成功，0和其它数字为失败</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">//动态数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">success</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        R&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;();</span><br><span class="line">        r.data = object;</span><br><span class="line">        r.code = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.msg = msg;</span><br><span class="line">        r.code = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R&lt;T&gt; <span class="title function_">add</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-3-处理逻辑"><a href="#4-3-处理逻辑" class="headerlink" title="4.3 处理逻辑"></a>4.3 处理逻辑</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805192611181.png" alt="image-20220805192611181" loading="lazy"></p>
<ol>
<li>将页面提交的代码password进行md5加密处理</li>
<li>根据页面提交的用户名username查询数据库</li>
<li>如果没有查询到则返回登录失败结果</li>
<li>查询到了进行密码比对，如果密码不一致返回登录失败结果</li>
<li>查看员工状态，如果为已禁用状态，则返回员工已禁用结果</li>
<li>登陆成功，将员工id存入Session并返回登录成功结果</li>
</ol>
<h2 id="4-4-Controller代码编写"><a href="#4-4-Controller代码编写" class="headerlink" title="4.4 Controller代码编写"></a>4.4 Controller代码编写</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1. 将页面提交的代码password进行md5加密处理</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();</span><br><span class="line">        password = DigestUtils.md5DigestAsHex(password.getBytes());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        2. 根据页面提交的用户名username查询数据库</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Employee::getUsername, employee.getUsername());</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        3. 如果没有查询到则返回登录失败结果</span></span><br><span class="line">        <span class="keyword">if</span> (emp == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;登陆失败!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        4. 查询到了进行密码比对，如果密码不一致返回登录失败结果</span></span><br><span class="line">        <span class="keyword">if</span> (!emp.getPassword().equals(password)) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        5. 查看员工状态，如果为已禁用状态，则返回员工已禁用结果</span></span><br><span class="line">        <span class="keyword">if</span> (emp.getStatus() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;账号已被禁用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        6. 登陆成功，将员工id存入Session并返回登录成功结果</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>, emp.getId());</span><br><span class="line">        <span class="keyword">return</span> R.success(emp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><p>用户名不存在，登陆失败</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805185327553.png" alt="image-20220805185327553" loading="lazy"></p>
<p>用户名存在，密码错误</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805185353385.png" alt="image-20220805185353385" loading="lazy"></p>
<p>用户禁用，首先在数据库中将用户状态改为0，然后进行测试。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805185502660.png" alt="image-20220805185502660" loading="lazy"></p>
<p>登陆成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805185256452.png" alt="image-20220805185256452" loading="lazy"></p>
<h1 id="五、后台用户退出功能开发"><a href="#五、后台用户退出功能开发" class="headerlink" title="五、后台用户退出功能开发"></a>五、后台用户退出功能开发</h1><h2 id="5-1-处理逻辑"><a href="#5-1-处理逻辑" class="headerlink" title="5.1 处理逻辑"></a>5.1 处理逻辑</h2><ol>
<li>清理Session中的用户id</li>
<li>返回结果</li>
</ol>
<h2 id="5-2-代码编写"><a href="#5-2-代码编写" class="headerlink" title="5.2 代码编写"></a>5.2 代码编写</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工退出功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">//清理Session中保存的当前登录的员工的id</span></span><br><span class="line">    request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>瑞吉外卖项目day06笔记</title>
    <url>/2022/08/09/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AEday06%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、用户地址簿功能"><a href="#一、用户地址簿功能" class="headerlink" title="一、用户地址簿功能"></a>一、用户地址簿功能</h1><h2 id="1-1-需求分析"><a href="#1-1-需求分析" class="headerlink" title="1.1 需求分析"></a>1.1 需求分析</h2><p>地址簿，指的是移动端消费者用户的地址信息，用户登录成功后可以维护自己的地址信息。同一个用户可以有多个地址信息，但是只能有一个<strong>默认地址</strong>。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809092710410.png" alt="image-20220809092710410" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809092720600.png" alt="image-20220809092720600" loading="lazy"></p>
<p>对于地址簿管理，需要实现以下几个功能： </p>
<ul>
<li>新增地址</li>
<li>地址列表查询</li>
<li>设置默认地址</li>
<li>编辑地址</li>
<li>删除地址</li>
</ul>
<h2 id="1-2-数据模型"><a href="#1-2-数据模型" class="headerlink" title="1.2 数据模型"></a>1.2 数据模型</h2><p>用户的地址信息会存储在address_book表，即地址簿表中。具体表结构如下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809092756949.png" alt="image-20220809092756949" loading="lazy"></p>
<p>这里面有一个字段is_default，实际上我们在设置默认地址时，只需要更新这个字段就可以了。</p>
<h2 id="1-3-功能实现"><a href="#1-3-功能实现" class="headerlink" title="1.3 功能实现"></a>1.3 功能实现</h2><p><strong>1). 实体类 AddressBook</strong></p>
<p>所属包: com.itheima.reggie.entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 地址簿</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressBook</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//收货人</span></span><br><span class="line">    <span class="keyword">private</span> String consignee;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//手机号</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//性别 0 女 1 男</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//省级区划编号</span></span><br><span class="line">    <span class="keyword">private</span> String provinceCode;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//省级名称</span></span><br><span class="line">    <span class="keyword">private</span> String provinceName;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//市级区划编号</span></span><br><span class="line">    <span class="keyword">private</span> String cityCode;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//市级名称</span></span><br><span class="line">    <span class="keyword">private</span> String cityName;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//区级区划编号</span></span><br><span class="line">    <span class="keyword">private</span> String districtCode;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//区级名称</span></span><br><span class="line">    <span class="keyword">private</span> String districtName;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//详细地址</span></span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//标签</span></span><br><span class="line">    <span class="keyword">private</span> String label;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//是否默认 0 否 1是</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDefault;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2). Mapper接口 AddressBookMapper（直接从课程资料中导入即可）</strong></p>
<p>所属包: com.itheima.reggie.mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.AddressBook;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AddressBookMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;AddressBook&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>3). 业务层接口 AddressBookService</strong></p>
<p>所属包: com.itheima.reggie.service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.AddressBook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AddressBookService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;AddressBook&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>**4). 业务层实现类 AddressBookServiceImpl</p>
<p>所属包: com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.AddressBook;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.AddressBookMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.AddressBookService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressBookServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;AddressBookMapper, AddressBook&gt; <span class="keyword">implements</span> <span class="title class_">AddressBookService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5). 控制层 AddressBookController</strong></p>
<p>所属包: com.itheima.reggie.controller</p>
<p><strong>controller主要开发的功能:</strong> </p>
<p>A. 新增地址逻辑说明： </p>
<ul>
<li>需要记录当前是哪个用户的地址(关联当前登录用户)</li>
</ul>
<p>B. 设置默认地址 </p>
<ul>
<li><p>每个用户可以有很多地址，但是默认地址只能有一个 ；</p>
</li>
<li><p>先将该用户所有地址的is_default更新为0 , 然后将当前的设置的默认地址的is_default设置为1</p>
</li>
</ul>
<p>C. 根据ID查询地址</p>
<p>D. 查询默认地址</p>
<ul>
<li>根据当前登录用户ID 以及 is_default进行查询，查询当前登录用户is_default为1的地址信息</li>
</ul>
<p>E. 查询指定用户的全部地址</p>
<ul>
<li>根据当前登录用户ID，查询所有的地址列表</li>
</ul>
<p><strong>代码实现如下：</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.common.BaseContext;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.common.R;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.AddressBook;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.AddressBookService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 地址簿管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/addressBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressBookController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AddressBookService addressBookService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">        addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line">        log.info(<span class="string">&quot;addressBook:&#123;&#125;&quot;</span>, addressBook);</span><br><span class="line">        addressBookService.save(addressBook);</span><br><span class="line">        <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置默认地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;default&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">setDefault</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;addressBook:&#123;&#125;&quot;</span>, addressBook);</span><br><span class="line">        LambdaUpdateWrapper&lt;AddressBook&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(AddressBook::getUserId, BaseContext.getCurrentId());</span><br><span class="line">        wrapper.set(AddressBook::getIsDefault, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//SQL:update address_book set is_default = 0 where user_id = ?</span></span><br><span class="line">        addressBookService.update(wrapper);</span><br><span class="line"></span><br><span class="line">        addressBook.setIsDefault(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//SQL:update address_book set is_default = 1 where id = ?</span></span><br><span class="line">        addressBookService.updateById(addressBook);</span><br><span class="line">        <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (addressBook != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;没有找到该对象&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询默认地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;default&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">getDefault</span><span class="params">()</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(AddressBook::getUserId, BaseContext.getCurrentId());</span><br><span class="line">        queryWrapper.eq(AddressBook::getIsDefault, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SQL:select * from address_book where user_id = ? and is_default = 1</span></span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == addressBook) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;没有找到该对象&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询指定用户的全部地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;AddressBook&gt;&gt; <span class="title function_">list</span><span class="params">(AddressBook addressBook)</span> &#123;</span><br><span class="line">        addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line">        log.info(<span class="string">&quot;addressBook:&#123;&#125;&quot;</span>, addressBook);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="literal">null</span> != addressBook.getUserId(), AddressBook::getUserId, addressBook.getUserId());</span><br><span class="line">        queryWrapper.orderByDesc(AddressBook::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SQL:select * from address_book where user_id = ? order by update_time desc</span></span><br><span class="line">        <span class="keyword">return</span> R.success(addressBookService.list(queryWrapper));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1-4-功能测试"><a href="#1-4-功能测试" class="headerlink" title="1.4 功能测试"></a>1.4 功能测试</h2><p>地址簿新增成功，且可以设为默认地址</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809092929068.png" alt="image-20220809092929068" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809092637429.png" alt="image-20220809092637429" loading="lazy"></p>
<h1 id="二、菜品展示"><a href="#二、菜品展示" class="headerlink" title="二、菜品展示"></a>二、菜品展示</h1><h2 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809102153193.png" alt="image-20220809102153193" loading="lazy"></p>
<h2 id="2-2-前端页面分析"><a href="#2-2-前端页面分析" class="headerlink" title="2.2 前端页面分析"></a>2.2 前端页面分析</h2><p>前端页面和服务端的交互过程：</p>
<p><strong>1). 页面(front&#x2F;index.html)发送ajax请求，获取分类数据（菜品分类和套餐分类）</strong></p>
<p><strong>2). 页面发送ajax请求，获取第一个分类下的菜品或者套餐</strong></p>
<p>开发菜品展示功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可。</p>
<p><strong>注意:首页加载完成后，还发送了一次ajax请求用于加载购物车数据，此处可以将这次请求的地址暂时修改一下，从静态json文件获取数据，等后续开发购物车功能时再修改回来，如下:</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809102344655.png" alt="image-20220809102344655" loading="lazy"></p>
<p><strong>cartData.json:</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="keyword">null</span><span class="punctuation">,</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;map&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>虚晃一枪，先给前端一个假数据。</p>
<h2 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3 代码实现"></a>2.3 代码实现</h2><h3 id="1-查询菜品方法修改"><a href="#1-查询菜品方法修改" class="headerlink" title="1. 查询菜品方法修改"></a>1. 查询菜品方法修改</h3><p>由于之前实现的根据分类查询菜品列表，仅仅查询了菜品的基本信息，未查询菜品口味信息，而移动端用户在点餐时，是需要选择口味信息的，所以需要对之前的代码实现进行完善.</p>
<p>我们需要修改DishController的list方法，原来此方法的返回值类型为：R&lt;List<Dish>&gt;。</p>
<p>为了满足移动端对数据的要求(菜品基本信息和菜品对应的口味信息)，现在需要将方法的返回值类型改为：R&lt;List<DishDto>&gt; ，因为在DishDto中封装了菜品对应的口味信息： </p>
<p>这是原来的list方法</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809102617478.png" alt="image-20220809102617478" loading="lazy"></p>
<p><strong>代码逻辑:</strong> </p>
<p>A. 根据分类ID查询，查询目前正在启售的菜品列表 (已实现)</p>
<p>B. 遍历菜品列表，并查询菜品的分类信息及菜品的口味列表</p>
<p>C. 组装数据DishDto，并返回</p>
<p><strong>修改后代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据条件查询对应菜品数据</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span> &#123;</span><br><span class="line">    <span class="comment">//构造查询条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span>, Dish::getCategoryId, dish.getCategoryId());</span><br><span class="line">    <span class="comment">//添加条件，查询状态为1（起售状态）的菜品</span></span><br><span class="line">    queryWrapper.eq(Dish::getStatus, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    List&lt;DishDto&gt; dishDtoList = list.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">        <span class="comment">//对象拷贝</span></span><br><span class="line">        BeanUtils.copyProperties(item, dishDto);</span><br><span class="line">        <span class="comment">//菜品分类id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="comment">//根据id查询分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            dishDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当前菜品的id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> item.getId();</span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        lambdaQueryWrapper.eq(DishFlavor::getDishId, dishId);</span><br><span class="line">        <span class="comment">//SQL:select * from dish_flavor where dish_id = ?</span></span><br><span class="line">        <span class="comment">//根据当前菜品的id查询口味表</span></span><br><span class="line">        List&lt;DishFlavor&gt; dishFlavorList = dishFlavorService.list(lambdaQueryWrapper);</span><br><span class="line">        dishDto.setFlavors(dishFlavorList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dishDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//返回带有口味表的结果集合</span></span><br><span class="line">    <span class="keyword">return</span> R.success(dishDtoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-根据分类ID查询套餐"><a href="#2-根据分类ID查询套餐" class="headerlink" title="2. 根据分类ID查询套餐"></a>2. 根据分类ID查询套餐</h3><p>之前的方法只能用来查询菜品，但是没有实现对套餐的方法。</p>
<p>在SetmealController中创建list方法，根据条件查询套餐数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据条件查询套餐数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmeal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Setmeal&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(setmeal.getCategoryId() != <span class="literal">null</span>,Setmeal::getCategoryId,setmeal.getCategoryId());</span><br><span class="line">    queryWrapper.eq(setmeal.getStatus() != <span class="literal">null</span>,Setmeal::getStatus,setmeal.getStatus());</span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; list = setmealService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-功能测试"><a href="#2-4-功能测试" class="headerlink" title="2.4 功能测试"></a>2.4 功能测试</h2><p><code>注意：这里测试的时候记得后端Maven执行一遍clean然后install，前端清理一下浏览器缓存，在这卡了半天。</code></p>
<p>菜品口味展示成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809103505669.png" alt="image-20220809103505669" loading="lazy"></p>
<p>套餐展示成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809103523279.png" alt="image-20220809103523279" loading="lazy"></p>
<h1 id="三、购物车"><a href="#三、购物车" class="headerlink" title="三、购物车"></a>三、购物车</h1><h2 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h2><p>移动端用户可以将菜品或者套餐添加到购物车。对于菜品来说，如果设置了口味信息，则需要选择规格后才能加入购物车;对于套餐来说，可以直接点击将当前套餐加入购物车。在购物车中可以修改菜品和套餐的数量，也可以清空购物车。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809144251150.png" alt="image-20220809144251150" loading="lazy"></p>
<h2 id="3-2-数据模型"><a href="#3-2-数据模型" class="headerlink" title="3.2 数据模型"></a>3.2 数据模型</h2><p>用户的购物车数据，也是需要保存在数据库中的，购物车对应的数据表为shopping_cart表，具体表结构如下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809144304689.png" alt="image-20220809144304689" loading="lazy"></p>
<p>说明： </p>
<ul>
<li>购物车数据是关联用户的，在表结构中，我们需要记录，每一个用户的购物车数据是哪些</li>
<li>菜品列表展示出来的既有套餐，又有菜品，如果APP端选择的是套餐，就保存套餐ID(setmeal_id)，如果APP端选择的是菜品，就保存菜品ID(dish_id)</li>
<li>对同一个菜品&#x2F;套餐，如果选择多份不需要添加多条记录，增加数量number即可</li>
</ul>
<h2 id="3-3-前端页面分析"><a href="#3-3-前端页面分析" class="headerlink" title="3.3 前端页面分析"></a>3.3 前端页面分析</h2><p><strong>前端页面和服务端的交互过程：</strong></p>
<p>1). 点击 “加入购物车” 或者 “+” 按钮，页面发送ajax请求，请求服务端，将菜品或者套餐添加到购物车</p>
<p>2). 点击购物车图标，页面发送ajax请求，请求服务端查询购物车中的菜品和套餐</p>
<blockquote>
<p>此时，要将查询购物车的代码放开，不用再加载静态的json数据了。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809144354227.png" alt="image-20220809144354227" loading="lazy"></p>
</blockquote>
<p>3). 点击清空购物车按钮，页面发送ajax请求，请求服务端来执行清空购物车操作</p>
<hr>
<p>对于购物车的功能，主要需要开发以下几个功能，具体的请求信息如下：</p>
<p><strong>1). 加入购物车</strong></p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>POST</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;shoppingCart&#x2F;add</td>
</tr>
<tr>
<td>请求参数</td>
<td>json格式</td>
</tr>
</tbody></table>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">菜品数据<span class="punctuation">:</span> </span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span><span class="number">118</span><span class="punctuation">,</span><span class="attr">&quot;dishFlavor&quot;</span><span class="punctuation">:</span><span class="string">&quot;不要蒜,微辣&quot;</span><span class="punctuation">,</span><span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1397851099502260226&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;全家福&quot;</span><span class="punctuation">,</span><span class="attr">&quot;image&quot;</span><span class="punctuation">:</span><span class="string">&quot;a53a4e6a-3b83-4044-87f9-9d49b30a8fdc.jpg&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">套餐数据<span class="punctuation">:</span> </span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span><span class="number">38</span><span class="punctuation">,</span><span class="attr">&quot;setmealId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1423329486060957698&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;营养超值工作餐&quot;</span><span class="punctuation">,</span><span class="attr">&quot;image&quot;</span><span class="punctuation">:</span><span class="string">&quot;9cd7a80a-da54-4f46-bf33-af3576514cec.jpg&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p><strong>2). 查询购物车列表</strong></p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;shoppingCart&#x2F;list</td>
</tr>
</tbody></table>
<p><strong>3). 清空购物车功能</strong></p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>DELETE</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;shoppingCart&#x2F;clean</td>
</tr>
</tbody></table>
<h2 id="3-4-准备工作"><a href="#3-4-准备工作" class="headerlink" title="3.4 准备工作"></a>3.4 准备工作</h2><p><strong>1). 实体类 ShoppingCart（直接从课程资料中导入即可）</strong></p>
<p>所属包: com.itheima.reggie.entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCart</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="keyword">private</span> Long setmealId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味</span></span><br><span class="line">    <span class="keyword">private</span> String dishFlavor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//金额</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2). Mapper接口 ShoppingCartMapper</strong></p>
<p>所属包: com.itheima.reggie.mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.ShoppingCart;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShoppingCartMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;ShoppingCart&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3). 业务层接口 ShoppingCartService</strong></p>
<p>所属包: com.itheima.reggie.service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.ShoppingCart;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShoppingCartService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;ShoppingCart&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4). 业务层实现类 ShoppingCartServiceImpl</strong></p>
<p>所属包: com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.ShoppingCart;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.ShoppingCartMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.ShoppingCartService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ShoppingCartMapper, ShoppingCart&gt; <span class="keyword">implements</span> <span class="title class_">ShoppingCartService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5). 控制层 ShoppingCartController</strong></p>
<p>所属包: com.itheima.reggie.controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.ShoppingCartService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/shoppingCart&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingCartService shoppingCartService;</span><br><span class="line"> </span><br><span class="line"> &#125;   </span><br></pre></td></tr></table></figure>



<h2 id="3-5-代码实现"><a href="#3-5-代码实现" class="headerlink" title="3.5 代码实现"></a>3.5 代码实现</h2><h4 id="1-添加购物车"><a href="#1-添加购物车" class="headerlink" title="1. 添加购物车"></a>1. 添加购物车</h4><p>在ShoppingCartController中创建add方法，来完成添加购物车的逻辑实现，具体的逻辑如下： </p>
<ol>
<li><p>获取当前登录用户，为购物车对象赋值</p>
</li>
<li><p>根据当前登录用户ID 及 本次添加的菜品ID&#x2F;套餐ID，查询购物车数据是否存在</p>
</li>
<li><p>如果已经存在，就在原来数量基础上加1</p>
</li>
<li><p>如果不存在，则添加到购物车，数量默认就是1</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加购物车</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> shoppingCart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;ShoppingCart&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;购物车数据:&#123;&#125;&quot;</span>,shoppingCart);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置用户id，指定当前是哪个用户的购物车数据</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    shoppingCart.setUserId(currentId);</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCart.getDishId();</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(ShoppingCart::getUserId,currentId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(dishId != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//添加到购物车的是菜品</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getDishId,dishId);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//添加到购物车的是套餐</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getSetmealId,shoppingCart.getSetmealId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询当前菜品或者套餐是否在购物车中</span></span><br><span class="line">    <span class="comment">//SQL:select * from shopping_cart where user_id = ? and dish_id/setmeal_id = ?</span></span><br><span class="line">    <span class="type">ShoppingCart</span> <span class="variable">cartServiceOne</span> <span class="operator">=</span> shoppingCartService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(cartServiceOne != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//如果已经存在，就在原来数量基础上加一</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> cartServiceOne.getNumber();</span><br><span class="line">        cartServiceOne.setNumber(number + <span class="number">1</span>);</span><br><span class="line">        shoppingCartService.updateById(cartServiceOne);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//如果不存在，则添加到购物车，数量默认就是一</span></span><br><span class="line">        shoppingCart.setNumber(<span class="number">1</span>);</span><br><span class="line">        shoppingCart.setCreateTime(LocalDateTime.now());</span><br><span class="line">        shoppingCartService.save(shoppingCart);</span><br><span class="line">        cartServiceOne = shoppingCart;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(cartServiceOne);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-查询购物车"><a href="#2-查询购物车" class="headerlink" title="2. 查询购物车"></a>2. 查询购物车</h4><p>在ShoppingCartController中创建list方法，根据当前登录用户ID查询购物车列表，并对查询的结果进行创建时间的倒序排序。</p>
<p>代码实现如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查看购物车</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;ShoppingCart&gt;&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;查看购物车...&quot;</span>);</span><br><span class="line">	</span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(ShoppingCart::getUserId,BaseContext.getCurrentId());</span><br><span class="line">    queryWrapper.orderByAsc(ShoppingCart::getCreateTime);</span><br><span class="line">	</span><br><span class="line">    List&lt;ShoppingCart&gt; list = shoppingCartService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="3-清空购物车"><a href="#3-清空购物车" class="headerlink" title="3. 清空购物车"></a>3. 清空购物车</h4><p>在ShoppingCartController中创建clean方法，在方法中获取当前登录用户，根据登录用户ID，删除购物车数据。</p>
<p>代码实现如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 清空购物车</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/clean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">clean</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//SQL:delete from shopping_cart where user_id = ?</span></span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(ShoppingCart::getUserId,BaseContext.getCurrentId());</span><br><span class="line"></span><br><span class="line">    shoppingCartService.remove(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;清空购物车成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-6-功能测试"><a href="#3-6-功能测试" class="headerlink" title="3.6 功能测试"></a>3.6 功能测试</h2><p>添加购物车</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809145109288.png" alt="image-20220809145109288" loading="lazy"></p>
<p>添加成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809145023218.png" alt="image-20220809145023218" loading="lazy"></p>
<p>查看购物车</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809144938442.png" alt="image-20220809144938442" loading="lazy"></p>
<p>清空购物车</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809145210727.png" alt="image-20220809145210727" loading="lazy"></p>
<p>清楚成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809145228225.png" alt="image-20220809145228225" loading="lazy"></p>
<h1 id="四、外卖下单"><a href="#四、外卖下单" class="headerlink" title="四、外卖下单"></a>四、外卖下单</h1><h2 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h2><p>移动端用户将菜品或者套餐加入购物车后，可以点击购物车中的 “去结算” 按钮，页面跳转到订单确认页面，点击 “去支付” 按钮则完成下单操作。</p>
<h2 id="4-2-数据模型"><a href="#4-2-数据模型" class="headerlink" title="4.2 数据模型"></a>4.2 数据模型</h2><p>用户下单业务对应的数据表为orders表和order_detail表(一对多关系,一个订单关联多个订单明细)：</p>
<table>
<thead>
<tr>
<th>表名</th>
<th>含义</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>orders</td>
<td>订单表</td>
<td>主要存储订单的基本信息(如: 订单号、状态、金额、支付方式、下单用户、收件地址等)</td>
</tr>
<tr>
<td>order_detail</td>
<td>订单明细表</td>
<td>主要存储订单详情信息(如: 该订单关联的套餐及菜品的信息)</td>
</tr>
</tbody></table>
<p>具体的表结构如下: </p>
<p>A. orders 订单表</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809192926829.png" alt="image-20220809192926829" loading="lazy"></p>
<p>B. order_detail</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809192942986.png" alt="image-20220809192942986" loading="lazy"></p>
<h2 id="4-3-前端页面分析"><a href="#4-3-前端页面分析" class="headerlink" title="4.3 前端页面分析"></a>4.3 前端页面分析</h2><p>前端页面和服务端的交互过程：</p>
<p><strong>1). 在购物车中点击去结算按钮，页面跳转到订单确认页面</strong></p>
<p><strong>2). 在订单确认页面，发送ajax请求，请求服务端获取当前登录用户的默认地址</strong></p>
<p><strong>3). 在订单确认页面，发送ajax请求，请求服务端获取当前登录用户的购物车数据</strong></p>
<p><strong>4). 在订单确认页面点击去支付按钮，发送ajax请求，请求服务端完成下单操作</strong></p>
<h2 id="4-4-准备工作"><a href="#4-4-准备工作" class="headerlink" title="4.4 准备工作"></a>4.4 准备工作</h2><p><strong>1). 实体类 Orders、OrderDetail</strong></p>
<p>所属包: com.itheima.reggie.entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//订单号</span></span><br><span class="line">    <span class="keyword">private</span> String number;</span><br><span class="line">    <span class="comment">//订单状态 1待付款，2待派送，3已派送，4已完成，5已取消</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下单用户id</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址id</span></span><br><span class="line">    <span class="keyword">private</span> Long addressBookId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下单时间</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime orderTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结账时间</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime checkoutTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//支付方式 1微信，2支付宝</span></span><br><span class="line">    <span class="keyword">private</span> Integer payMethod;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实收金额</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//备注</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手机号</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//收货人</span></span><br><span class="line">    <span class="keyword">private</span> String consignee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单明细</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDetail</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单id</span></span><br><span class="line">    <span class="keyword">private</span> Long orderId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="keyword">private</span> Long setmealId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味</span></span><br><span class="line">    <span class="keyword">private</span> String dishFlavor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//金额</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2). Mapper接口 OrderMapper、OrderDetailMapper</strong></p>
<p>所属包: com.itheima.reggie.mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Orders;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Orders&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.OrderDetail;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderDetailMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;OrderDetail&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>3). 业务层接口 OrderService、OrderDetailService</strong></p>
<p>所属包: com.itheima.reggie.service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Orders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Orders&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.OrderDetail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderDetailService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;OrderDetail&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>4). 业务层实现类 OrderServiceImpl、OrderDetailServiceImpl</strong></p>
<p>所属包: com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.*;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.OrderMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;OrderMapper, Orders&gt; <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.OrderDetail;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.OrderDetailMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.OrderDetailService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDetailServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;OrderDetailMapper, OrderDetail&gt; <span class="keyword">implements</span> <span class="title class_">OrderDetailService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5). 控制层 OrderController、OrderDetailController</strong></p>
<p>所属包: com.itheima.reggie.controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.OrderDetailService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单明细</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/orderDetail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDetailController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderDetailService orderDetailService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-5-代码实现"><a href="#4-5-代码实现" class="headerlink" title="4.5 代码实现"></a>4.5 代码实现</h2><h3 id="1-Controller"><a href="#1-Controller" class="headerlink" title="1.Controller"></a>1.Controller</h3><p>在OrderController中创建submit方法，处理用户下单的逻辑 ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户下单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/submit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">submit</span><span class="params">(<span class="meta">@RequestBody</span> Orders orders)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;订单数据：&#123;&#125;&quot;</span>,orders);</span><br><span class="line">    orderService.submit(orders);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;下单成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-Service"><a href="#2-Service" class="headerlink" title="2.Service"></a>2.Service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用户下单</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">submit</span><span class="params">(Orders orders)</span>;</span><br></pre></td></tr></table></figure>



<h3 id="3-OrderServiceImpl"><a href="#3-OrderServiceImpl" class="headerlink" title="3.OrderServiceImpl"></a>3.OrderServiceImpl</h3><p>具体逻辑如下： </p>
<ol>
<li><p>获得当前用户id, 查询当前用户的购物车数据</p>
</li>
<li><p>根据当前登录用户id, 查询用户数据</p>
</li>
<li><p>根据地址ID, 查询地址数据</p>
</li>
<li><p>组装订单明细数据, 批量保存订单明细 </p>
</li>
<li><p>组装订单数据, 批量保存订单数据</p>
</li>
<li><p>删除当前用户的购物车列表数据</p>
</li>
</ol>
<p><strong>代码实现:</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ShoppingCartService shoppingCartService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AddressBookService addressBookService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> OrderDetailService orderDetailService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用户下单</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">submit</span><span class="params">(Orders orders)</span> &#123;</span><br><span class="line">    <span class="comment">//获得当前用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询当前用户的购物车数据</span></span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(ShoppingCart::getUserId,userId);</span><br><span class="line">    List&lt;ShoppingCart&gt; shoppingCarts = shoppingCartService.list(wrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(shoppingCarts == <span class="literal">null</span> || shoppingCarts.size() == <span class="number">0</span>)&#123;</span><br><span class="line">    	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;购物车为空，不能下单&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询用户数据</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询地址数据</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">addressBookId</span> <span class="operator">=</span> orders.getAddressBookId();</span><br><span class="line">    <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(addressBookId);</span><br><span class="line">    <span class="keyword">if</span>(addressBook == <span class="literal">null</span>)&#123;</span><br><span class="line">    	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;用户地址信息有误，不能下单&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> IdWorker.getId();<span class="comment">//订单号</span></span><br><span class="line"></span><br><span class="line">    <span class="type">AtomicInteger</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组装订单明细信息</span></span><br><span class="line">    List&lt;OrderDetail&gt; orderDetails = shoppingCarts.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">OrderDetail</span> <span class="variable">orderDetail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDetail</span>();</span><br><span class="line">        orderDetail.setOrderId(orderId);</span><br><span class="line">        orderDetail.setNumber(item.getNumber());</span><br><span class="line">        orderDetail.setDishFlavor(item.getDishFlavor());</span><br><span class="line">        orderDetail.setDishId(item.getDishId());</span><br><span class="line">        orderDetail.setSetmealId(item.getSetmealId());</span><br><span class="line">        orderDetail.setName(item.getName());</span><br><span class="line">        orderDetail.setImage(item.getImage());</span><br><span class="line">        orderDetail.setAmount(item.getAmount());</span><br><span class="line">        amount.addAndGet(item.getAmount().multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(item.getNumber())).intValue());</span><br><span class="line">        <span class="keyword">return</span> orderDetail;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组装订单数据</span></span><br><span class="line">    orders.setId(orderId);</span><br><span class="line">    orders.setOrderTime(LocalDateTime.now());</span><br><span class="line">    orders.setCheckoutTime(LocalDateTime.now());</span><br><span class="line">    orders.setStatus(<span class="number">2</span>);</span><br><span class="line">    orders.setAmount(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(amount.get()));<span class="comment">//总金额</span></span><br><span class="line">    orders.setUserId(userId);</span><br><span class="line">    orders.setNumber(String.valueOf(orderId));</span><br><span class="line">    orders.setUserName(user.getName());</span><br><span class="line">    orders.setConsignee(addressBook.getConsignee());</span><br><span class="line">    orders.setPhone(addressBook.getPhone());</span><br><span class="line">    orders.setAddress((addressBook.getProvinceName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getProvinceName())</span><br><span class="line">        + (addressBook.getCityName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getCityName())</span><br><span class="line">        + (addressBook.getDistrictName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getDistrictName())</span><br><span class="line">        + (addressBook.getDetail() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getDetail()));</span><br><span class="line">    <span class="comment">//向订单表插入数据，一条数据</span></span><br><span class="line">    <span class="built_in">this</span>.save(orders);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向订单明细表插入数据，多条数据</span></span><br><span class="line">    orderDetailService.saveBatch(orderDetails);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空购物车数据</span></span><br><span class="line">    shoppingCartService.remove(wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>备注: </p>
<p>​	上述逻辑处理中，计算购物车商品的总金额时，为保证我们每一次执行的累加计算是一个原子操作，我们这里用到了JDK中提供的一个原子类 AtomicInteger</p>
</blockquote>
<h2 id="4-6-功能测试"><a href="#4-6-功能测试" class="headerlink" title="4.6 功能测试"></a>4.6 功能测试</h2><p>下单</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809193430207.png" alt="image-20220809193430207" loading="lazy"></p>
<p>下单成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809192833842.png" alt="image-20220809192833842" loading="lazy"></p>
<p>查看数据库</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809193452878.png" alt="image-20220809193452878" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809193500794.png" alt="image-20220809193500794" loading="lazy"></p>
<p>数据插入完成</p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>瑞吉外卖项目day05笔记</title>
    <url>/2022/08/08/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AEday05%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、新增套餐"><a href="#一、新增套餐" class="headerlink" title="一、新增套餐"></a>一、新增套餐</h1><h2 id="1-1-需求分析"><a href="#1-1-需求分析" class="headerlink" title="1.1 需求分析"></a>1.1 需求分析</h2><p>套餐就是菜品的集合。</p>
<p>后台系统中可以管理套餐信息，通过新增套餐功能来添加一个新的套餐，在添加套餐时需要选择当前套餐所属的套餐分类和包含的菜品，并且需要上传套餐对应的图片，在移动端会按照套餐分类来展示对应的套餐。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808110904164.png" alt="image-20220808110904164" loading="lazy"></p>
<h2 id="1-2-数据模型"><a href="#1-2-数据模型" class="headerlink" title="1.2 数据模型"></a>1.2 数据模型</h2><p>新增套餐，其实就是将新增页面录入的套餐信息插入到setmeal表，还需要向setmeal_dish表插入套餐和菜品关联数据。所以在新增套餐时，涉及到两个表：</p>
<table>
<thead>
<tr>
<th>表</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>setmeal</td>
<td>套餐表</td>
<td>存储套餐的基本信息</td>
</tr>
<tr>
<td>setmeal_dish</td>
<td>套餐菜品关系表</td>
<td>存储套餐关联的菜品的信息(一个套餐可以关联多个菜品)</td>
</tr>
</tbody></table>
<p>两张表具体的表结构如下: </p>
<p><strong>1). 套餐表setmeal</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808110925552.png" alt="image-20220808110925552" loading="lazy"></p>
<p>在该表中，套餐名称name字段是不允许重复的，在建表时，已经创建了唯一索引。</p>
<p><strong>2). 套餐菜品关系表setmeal_dish</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808110952117.png" alt="image-20220808110952117" loading="lazy"></p>
<p>在该表中，菜品的名称name，菜品的原价price 实际上都是冗余字段，因为我们在这张表中存储了菜品的ID(dish_id)，根据该ID我们就可以查询出name，price的数据信息，而这里我们又存储了name，price，这样的话，我们在后续的查询展示操作中，就不需要再去查询数据库获取菜品名称和原价了，这样可以简化我们的操作。</p>
<h2 id="1-3-准备工作"><a href="#1-3-准备工作" class="headerlink" title="1.3 准备工作"></a>1.3 准备工作</h2><p><strong>1). 实体类 SetmealDish</strong></p>
<p>所属包： com.itheima.reggie.entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐菜品关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDish</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="keyword">private</span> Long setmealId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品名称 （冗余字段）</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//菜品原价</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//份数</span></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2). DTO SetmealDto</strong></p>
<p>该数据传输对象DTO,主要用于封装页面在新增套餐时传递过来的json格式的数据,其中包含套餐的基本信息,还包含套餐关联的菜品集合。</p>
<p>所属包： com.itheima.reggie.dto</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Setmeal;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.SetmealDish;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDto</span> <span class="keyword">extends</span> <span class="title class_">Setmeal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;SetmealDish&gt; setmealDishes;<span class="comment">//套餐关联的菜品集合</span></span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> String categoryName;<span class="comment">//分类名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3). Mapper接口 SetmealDishMapper</strong></p>
<p>所属包: com.itheima.reggie.mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-08 10:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealDishMapper</span>  <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;SetmealDish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4). 业务层接口 SetmealDishService</strong></p>
<p>所属包： com.itheima.reggie.service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-08 11:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealDishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;SetmealDish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5). 业务层实现类 SetmealDishServiceImpl</strong></p>
<p>所属包： com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-08 11:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;SetmealDishMapper, SetmealDish&gt; <span class="keyword">implements</span> <span class="title class_">SetmealDishService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>6). 控制层 SetmealController</strong></p>
<p>套餐管理的相关业务，我们都统一在 SetmealController 中进行统一处理操作。</p>
<p>所属包: com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-08 11:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/setmeal&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealService setmealService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealDishService setmealDishService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-4-前端页面分析"><a href="#1-4-前端页面分析" class="headerlink" title="1.4 前端页面分析"></a>1.4 前端页面分析</h2><p><strong>前端页面和服务端的交互过程：</strong></p>
<ol>
<li><p>点击新建套餐按钮，访问页面(backend&#x2F;page&#x2F;combo&#x2F;add.html)，页面加载发送ajax请求，请求服务端获取<strong>套餐分类</strong>数据并展示到下拉框中(&#x3D;&#x3D;已实现&#x3D;&#x3D;)</p>
</li>
<li><p>访问页面(backend&#x2F;page&#x2F;combo&#x2F;add.html)，页面加载时发送ajax请求，请求服务端获取<strong>菜品分类</strong>数据并展示到添加菜品窗口中(&#x3D;&#x3D;已实现&#x3D;&#x3D;)</p>
</li>
<li><p>当点击添加菜品窗口左侧菜单的某一个分类, 页面发送ajax请求，请求服务端，根据菜品分类查询对应的<strong>菜品</strong>数据并展示到添加菜品窗口中</p>
</li>
<li><p>页面发送请求进行<strong>图片上传</strong>，请求服务端将图片保存到服务器(&#x3D;&#x3D;已实现&#x3D;&#x3D;)</p>
</li>
<li><p>页面发送请求进行<strong>图片下载</strong>，将上传的图片进行回显(&#x3D;&#x3D;已实现&#x3D;&#x3D;)</p>
</li>
<li><p>点击保存按钮，发送ajax请求，将<strong>套餐</strong>相关数据以json形式提交到服务端</p>
</li>
</ol>
<p>经过上述的页面解析及流程分析，我们发送这里需要发送的<strong>请求有5个</strong>，分别是 ：</p>
<p>A. 根据传递的参数,查询套餐分类列表</p>
<p>B. 根据传递的参数,查询菜品分类列表</p>
<p>C. 图片上传</p>
<p>D. 图片下载展示</p>
<p>E. 根据菜品分类ID,查询菜品列表</p>
<p>F. 保存套餐信息</p>
<p>而对于以上的前4个功能我们都已经实现, 所以我们接下来需要开发的功能主要是最后两项, 具体的请求信息如下:</p>
<p><strong>1). 根据分类ID查询菜品列表</strong></p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;dish&#x2F;list</td>
</tr>
<tr>
<td>请求参数</td>
<td>?categoryId&#x3D;1397844263642378242</td>
</tr>
</tbody></table>
<p><strong>2). 保存套餐信息</strong></p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>POST</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;setmeal</td>
</tr>
<tr>
<td>请求参数</td>
<td>json格式数据</td>
</tr>
</tbody></table>
<p>传递的json格式数据如下: </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;营养超值工作餐&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1399923597874081794&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">3800</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span><span class="string">&quot;9cd7a80a-da54-4f46-bf33-af3576514cec.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;营养超值工作餐&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dishList&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;idType&quot;</span><span class="punctuation">:</span><span class="string">&quot;1399923597874081794&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;setmealDishes&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    	<span class="punctuation">&#123;</span><span class="attr">&quot;copies&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span><span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1423329009705463809&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;米饭&quot;</span><span class="punctuation">,</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    	<span class="punctuation">&#123;</span><span class="attr">&quot;copies&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1423328152549109762&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;可乐&quot;</span><span class="punctuation">,</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">500</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    	<span class="punctuation">&#123;</span><span class="attr">&quot;copies&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1397853890262118402&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;鱼香肉丝&quot;</span><span class="punctuation">,</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">3800</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-5-代码实现"><a href="#1-5-代码实现" class="headerlink" title="1.5 代码实现"></a>1.5 代码实现</h2><h3 id="1-根据分类查询菜品"><a href="#1-根据分类查询菜品" class="headerlink" title="1.根据分类查询菜品"></a>1.根据分类查询菜品</h3><p>在当前的需求中，我们只需要根据页面传递的菜品分类的ID(categoryId)来查询菜品列表即可，我们可以直接定义一个DishController的方法，声明一个Long类型的categoryId，这样做是没问题的。</p>
<p><strong>但是考虑到该方法的拓展性，我们在这里定义方法时，通过Dish这个实体来接收参数。</strong></p>
<p>在DishController中定义方法list，接收Dish类型的参数：</p>
<p>在查询时，需要根据菜品分类categoryId进行查询，并且还要限定菜品的状态为起售状态(status为1)，然后对查询的结果进行排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据条件查询对应菜品数据</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Dish&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造查询条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; lambdaQueryWrapper=<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加条件，查询状态为起售状态的菜品</span></span><br><span class="line">    lambdaQueryWrapper.eq(Dish::getStatus,<span class="number">1</span>);</span><br><span class="line">    lambdaQueryWrapper.eq(dish.getCategoryId()!=<span class="literal">null</span>,Dish::getCategoryId,dish.getCategoryId());</span><br><span class="line">    <span class="comment">//条件排序条件</span></span><br><span class="line">    lambdaQueryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Dish&gt; list=dishService.list(lambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试：</strong></p>
<p>成功查询到数据</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808112204822.png" alt="image-20220808112204822" loading="lazy"></p>
<h3 id="2-保存套餐"><a href="#2-保存套餐" class="headerlink" title="2.保存套餐"></a>2.保存套餐</h3><p>在进行套餐信息保存时，前端提交的数据，不仅包含套餐的基本信息，还包含套餐关联的菜品列表数据 setmealDishes。</p>
<p>所以这个时候我们使用Setmeal就不能完成参数的封装了，我们需要在Setmeal的基本属性的基础上，再扩充一个属性 setmealDishes 来接收页面传递的套餐关联的菜品列表，所以要<strong>使用SetmealDto来完成这个需求。</strong></p>
<p><strong>1). SetmealController中定义方法save，新增套餐</strong></p>
<p>在该Controller的方法中,我们不仅需要保存套餐的基本信息，还需要保存套餐关联的菜品数据，所以我们需要再该方法中调用业务层方法,完成两块数据的保存。</p>
<p>页面传递的数据是json格式，需要在方法形参前面加上@RequestBody注解, 完成参数封装。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;套餐信息：&#123;&#125;&quot;</span>,setmealDto);</span><br><span class="line"></span><br><span class="line">    setmealService.saveWithDish(setmealDto);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增套餐成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2). SetmealService中定义方法saveWithDish</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增套餐，同时需要保存套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDto setmealDto)</span>;</span><br></pre></td></tr></table></figure>



<p><strong>3). SetmealServiceImpl实现方法saveWithDish</strong></p>
<p>具体逻辑: </p>
<p>A. 保存套餐基本信息</p>
<p>B. 获取套餐关联的菜品集合，并为集合中的每一个元素赋值套餐ID(setmealId)</p>
<p>C. 批量保存套餐关联的菜品集合</p>
<p><strong>代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SetmealDishService setmealDishService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增套餐，同时需要保存套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line">    <span class="comment">//保存套餐的基本信息，操作setmeal，执行insert操作</span></span><br><span class="line">    <span class="built_in">this</span>.save(setmealDto);</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">    setmealDishes.stream().map((item) -&gt; &#123;</span><br><span class="line">        item.setSetmealId(setmealDto.getId());</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存套餐和菜品的关联信息，操作setmeal_dish,执行insert操作</span></span><br><span class="line">    setmealDishService.saveBatch(setmealDishes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4).测试</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808140713987.png" alt="image-20220808140713987" loading="lazy"></p>
<p>套餐添加成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808141006844.png" alt="image-20220808141006844" loading="lazy"></p>
<p>套餐和菜品关联表添加成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808141029459.png" alt="image-20220808141029459" loading="lazy"></p>
<h1 id="二、套餐分页查询"><a href="#二、套餐分页查询" class="headerlink" title="二、套餐分页查询"></a>二、套餐分页查询</h1><h2 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h2><p>系统中的套餐数据很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808142716349.png" alt="image-20220808142716349" loading="lazy"></p>
<p>在进行套餐数据的分页查询时，除了传递分页参数以外，还可以传递一个可选的条件(套餐名称)。</p>
<p>查询返回的字段中，包含套餐的基本信息之外，<strong>还有一个套餐的分类名称</strong>，在查询时，需要<strong>关联查询</strong>这个字段。</p>
<h2 id="2-2-前端页面分析"><a href="#2-2-前端页面分析" class="headerlink" title="2.2 前端页面分析"></a>2.2 前端页面分析</h2><p><strong>前端页面和服务端的交互过程：</strong></p>
<p>1). 访问页面(backend&#x2F;page&#x2F;combo&#x2F;list.html)，页面加载时，会自动发送ajax请求，将分页查询参数(page、pageSize、name)提交到服务端，获取分页数据</p>
<p>2). 在列表渲染展示时，页面发送请求，请求服务端进行图片下载，用于页面图片展示(<strong>已实现</strong>)</p>
<p>具体的请求信息如下:</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;setmeal&#x2F;page</td>
</tr>
<tr>
<td>请求参数</td>
<td>?page&#x3D;1&amp;pageSize&#x3D;10&amp;name&#x3D;xxx</td>
</tr>
</tbody></table>
<h2 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3 代码实现"></a>2.3 代码实现</h2><h3 id="1-基本信息查询"><a href="#1-基本信息查询" class="headerlink" title="1. 基本信息查询"></a>1. 基本信息查询</h3><p>在SetmealController中创建套餐分页查询方法。</p>
<p><strong>逻辑如下：</strong> </p>
<ol>
<li><p>构建分页条件对象</p>
</li>
<li><p>构建查询条件对象，如果传递了套餐名称，根据套餐名称模糊查询， 并对结果按修改时间降序排序</p>
</li>
<li><p>执行分页查询</p>
</li>
<li><p>组装数据并返回</p>
</li>
</ol>
<p><strong>代码实现 :</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line">    <span class="comment">//构造分页构造器</span></span><br><span class="line">    Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line"></span><br><span class="line">    Page&lt;SetmealDto&gt; pageDtoInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//构造条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//根据name进行模糊查询</span></span><br><span class="line">    queryWrapper.like(!StringUtils.isEmpty(name), Setmeal::getName, name);</span><br><span class="line">    <span class="comment">//添加排序条件，根据sort进行排序</span></span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line">    <span class="comment">//进行分页查询</span></span><br><span class="line">    setmealService.page(pageInfo, queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象拷贝</span></span><br><span class="line">    BeanUtils.copyProperties(pageInfo, pageDtoInfo, <span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; records = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDto&gt; list = records.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line"></span><br><span class="line">        BeanUtils.copyProperties(item, setmealDto);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="comment">//根据id查分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="comment">//分类不为空时，取出分类名称填入Dto</span></span><br><span class="line">        <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            setmealDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setmealDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    pageDtoInfo.setRecords(list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(pageDtoInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-功能测试"><a href="#2-4-功能测试" class="headerlink" title="2.4 功能测试"></a>2.4 功能测试</h2><p>可以获取到套餐分类名称categoryName并可以在列表页面展示出来 。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808143354511.png" alt="image-20220808143354511" loading="lazy"></p>
<h1 id="三、删除套餐"><a href="#三、删除套餐" class="headerlink" title="三、删除套餐"></a>三、删除套餐</h1><h2 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h2><p>在套餐管理列表页面,点击删除按钮，可以删除对应的套餐信息。也可以通过复选框选择多个套餐，点击批量删除按钮一次删除多个套餐。</p>
<p><strong>注意，对于状态为售卖中的套餐不能删除，需要先停售，然后才能删除。</strong></p>
<h2 id="3-2-前端页面分析"><a href="#3-2-前端页面分析" class="headerlink" title="3.2 前端页面分析"></a>3.2 前端页面分析</h2><p><strong>前端页面和服务端的交互过程：</strong></p>
<p>1). 点击删除, 删除单个套餐时，页面发送ajax请求，根据套餐id删除对应套餐</p>
<p>2). 删除多个套餐时，页面发送ajax请求，根据提交的多个套餐id删除对应套餐</p>
<p>开发删除套餐功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可，一次请求为根据ID删除，一次请求为根据ID批量删除。</p>
<p>观察删除单个套餐和批量删除套餐的请求信息可以发现，两种请求的<strong>地址</strong>和<strong>请求方式</strong>都是相同的，不同的则是传递的id个数，所以在<strong>服务端可以提供一个方法来统一处理。</strong></p>
<p>具体的请求信息如下： </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>DELETE</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;setmeal</td>
</tr>
<tr>
<td>请求参数</td>
<td>?ids&#x3D;1423640210125656065,1423338765002256385</td>
</tr>
</tbody></table>
<h2 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h2><p>删除套餐的流程及请求信息，我们分析完毕之后，就来完成服务端的逻辑开发。在服务端的逻辑中, 删除套餐时, 我们不仅要删除套餐, 还要删除套餐与菜品的关联关系。</p>
<p><strong>1). 在SetmealService接口中定义方法removeWithDish</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除套餐，同时需要删除套餐和菜品的关联数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeWithDish</span><span class="params">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>2). 在SetmealServiceImpl中实现方法removeWithDish</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除套餐，同时需要删除套餐和菜品的关联数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeWithDish</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SQL模拟：select count(*) from setmeal where id in (1,2,3) and status = 1</span></span><br><span class="line">    <span class="comment">//首先查询套餐状态，确定是否能够删除</span></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line"></span><br><span class="line">    queryWrapper.in(Setmeal::getId, ids);</span><br><span class="line">    queryWrapper.eq(Setmeal::getStatus, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//根据所查询到的数据来判断</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.count(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果不能删除，抛出一个业务异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;套餐正在售卖中，不能删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果可以删除，先删除套餐表中的数据---setmeal</span></span><br><span class="line">    <span class="built_in">this</span>.removeByIds(ids);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SQL模拟：delete from setmeal_dish where setmeal_id in (1,2,3)</span></span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    lambdaQueryWrapper.in(SetmealDish::getSetmealId, ids);</span><br><span class="line">    <span class="comment">//删除关系表中的数据----setmeal_dish</span></span><br><span class="line">    setmealDishService.remove(lambdaQueryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3).在SetmealController中创建delete方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除套餐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;ids:&#123;&#125;&quot;</span>,ids);</span><br><span class="line">    setmealService.removeWithDish(ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;套餐数据删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-4-功能测试"><a href="#3-4-功能测试" class="headerlink" title="3.4 功能测试"></a>3.4 功能测试</h2><p>首先删除一个起售的套餐</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808151904295.png" alt="image-20220808151904295" loading="lazy"></p>
<p>测试：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808151336650.png" alt="image-20220808151336650" loading="lazy"></p>
<p>然后将状态再改为0</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808151917298.png" alt="image-20220808151917298" loading="lazy"></p>
<p>然后删除</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808151935701.png" alt="image-20220808151935701" loading="lazy"></p>
<h1 id="四、短信发送"><a href="#四、短信发送" class="headerlink" title="四、短信发送"></a>四、短信发送</h1><h2 id="4-1-短信服务介绍"><a href="#4-1-短信服务介绍" class="headerlink" title="4.1 短信服务介绍"></a>4.1 短信服务介绍</h2><p>在项目中，如果我们要实现短信发送功能，我们无需自己实现，也无需和运营商直接对接，只需要调用第三方提供的短信服务即可。</p>
<p>目前市面上有很多第三方提供的短信服务，这些第三方短信服务会和各个运营商（移动、联通、电信）对接，我们只需要注册成为会员，并且按照提供的开发文档进行调用就可以发送短信。需要说明的是，这些短信服务一般都是收费服务。</p>
<p>常用短信服务：</p>
<ul>
<li><p>阿里云</p>
</li>
<li><p>华为云</p>
</li>
<li><p>腾讯云</p>
</li>
<li><p>京东</p>
</li>
<li><p>梦网</p>
</li>
<li><p>乐信</p>
</li>
</ul>
<p>本项目在选择短信服务的第三方服务提供商时，选择的是阿里云短信服务。</p>
<h2 id="4-2-阿里云短信服务介绍"><a href="#4-2-阿里云短信服务介绍" class="headerlink" title="4.2 阿里云短信服务介绍"></a>4.2 阿里云短信服务介绍</h2><p>阿里云短信服务（Short Message Service）是广大企业客户快速触达手机用户所优选使用的通信能力。调用API或用群发助手，即可发送验证码、通知类和营销类短信；国内验证短信秒级触达，到达率最高可达99%；国际&#x2F;港澳台短信覆盖200多个国家和地区，安全稳定，广受出海企业选用。</p>
<p>应用场景： </p>
<table>
<thead>
<tr>
<th>场景</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>验证码</td>
<td>APP、网站注册账号，向手机下发验证码； 登录账户、异地登录时的安全提醒； 找回密码时的安全验证； 支付认证、身份校验、手机绑定等。</td>
</tr>
<tr>
<td>短信通知</td>
<td>向注册用户下发系统相关信息，包括： 升级或维护、服务开通、价格调整、 订单确认、物流动态、消费确认、 支付通知等普通通知短信。</td>
</tr>
<tr>
<td>推广短信</td>
<td>向注册用户和潜在客户发送通知和推广信息，包括促销活动通知、业务推广等商品与活动的推广信息。增加企业产品曝光率、提高产品的知名度。</td>
</tr>
</tbody></table>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808160529181.png" alt="image-20220808160529181" loading="lazy"></p>
<p>阿里云短信服务官方网站： <a href="https://www.aliyun.com/product/sms?spm=5176.19720258.J_8058803260.52.5c432c4a11Dcwf">https://www.aliyun.com/product/sms?spm=5176.19720258.J_8058803260.52.5c432c4a11Dcwf</a></p>
<h2 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h2><p><strong>具体实现：</strong></p>
<p>1). pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-dysmsapi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2). 将官方提供的main方法封装为一个工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aliyuncs.DefaultAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.IAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.DefaultProfile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信发送工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SMSUtils</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 发送短信</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> signName 签名</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> templateCode 模板</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> phoneNumbers 手机号</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> param 参数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String signName, String templateCode,String phoneNumbers,String param)</span>&#123;</span><br><span class="line">      <span class="type">DefaultProfile</span> <span class="variable">profile</span> <span class="operator">=</span> DefaultProfile.getProfile(<span class="string">&quot;cn-hangzhou&quot;</span>, <span class="string">&quot;xxxxxxxxxxxxxxxx&quot;</span>, <span class="string">&quot;xxxxxxxxxxxxxx&quot;</span>);</span><br><span class="line">      <span class="type">IAcsClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAcsClient</span>(profile);</span><br><span class="line"></span><br><span class="line">      <span class="type">SendSmsRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendSmsRequest</span>();</span><br><span class="line">      request.setSysRegionId(<span class="string">&quot;cn-hangzhou&quot;</span>);</span><br><span class="line">      request.setPhoneNumbers(phoneNumbers);</span><br><span class="line">      request.setSignName(signName);</span><br><span class="line">      request.setTemplateCode(templateCode);</span><br><span class="line">      request.setTemplateParam(<span class="string">&quot;&#123;\&quot;code\&quot;:\&quot;&quot;</span>+param+<span class="string">&quot;\&quot;&#125;&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">SendSmsResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.getAcsResponse(request);</span><br><span class="line">         System.out.println(<span class="string">&quot;短信发送成功&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、验证码登录"><a href="#五、验证码登录" class="headerlink" title="五、验证码登录"></a>五、验证码登录</h1><h2 id="5-1-需求分析"><a href="#5-1-需求分析" class="headerlink" title="5.1 需求分析"></a>5.1 需求分析</h2><p>为了方便用户登录，移动端通常都会提供通过手机验证码登录的功能。手机验证码登录有如下优点：</p>
<ol>
<li><p>方便快捷，无需注册，直接登录</p>
</li>
<li><p>使用短信验证码作为登录凭证，无需记忆密码</p>
</li>
<li><p>安全</p>
</li>
</ol>
<p><strong>登录流程：</strong></p>
<p>输入手机号 &gt; 获取验证码 &gt; 输入验证码 &gt; 点击登录 &gt; 登录成功</p>
<blockquote>
<p>注意：通过手机验证码登录，手机号是区分不同用户的标识。</p>
</blockquote>
<h2 id="5-2-数据模型"><a href="#5-2-数据模型" class="headerlink" title="5.2 数据模型"></a>5.2 数据模型</h2><p>通过手机验证码登录时，涉及的表为user表，即用户表。结构如下:</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808160742214.png" alt="image-20220808160742214" loading="lazy"></p>
<h2 id="5-3-前端页面分析"><a href="#5-3-前端页面分析" class="headerlink" title="5.3 前端页面分析"></a>5.3 前端页面分析</h2><p>在开发代码之前，需要梳理一下登录时前端页面和服务端的交互过程：</p>
<ol>
<li><p>在登录页面(front&#x2F;page&#x2F;login.html)输入手机号，点击【获取验证码】按钮，页面发送ajax请求，在服务端调用短信服务API给指定手机号发送验证码短信。</p>
</li>
<li><p>在登录页面输入验证码，点击【登录】按钮，发送ajax请求，在服务端处理登录请求。</p>
</li>
</ol>
<p>如果服务端返回的登录成功，页面将会把当前登录用户的手机号存储在sessionStorage中，并跳转到移动的首页页面。</p>
<p>开发手机验证码登录功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可，分别是获取短信验证码 和 登录请求，具体的请求信息如下： </p>
<p><strong>1). 获取短信验证码</strong></p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>POST</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;user&#x2F;sendMsg</td>
</tr>
<tr>
<td>请求参数</td>
<td>{“phone”:”13100001111”}</td>
</tr>
</tbody></table>
<p><strong>2). 登录</strong></p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>POST</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;user&#x2F;login</td>
</tr>
<tr>
<td>请求参数</td>
<td>{“phone”:”13100001111”, “code”:”1111”}</td>
</tr>
</tbody></table>
<h2 id="5-4-代码开发"><a href="#5-4-代码开发" class="headerlink" title="5.4 代码开发"></a>5.4 代码开发</h2><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p><strong>1). 实体类 User（直接从课程资料中导入即可）</strong></p>
<p>所属包: com.itheima.reggie.entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手机号</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//性别 0 女 1 男</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//身份证号</span></span><br><span class="line">    <span class="keyword">private</span> String idNumber;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//头像</span></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态 0:禁用，1:正常</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2). Mapper接口 UserMapper</strong></p>
<p>所属包: com.itheima.reggie.mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt;&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>3). 业务层接口 UserService</strong></p>
<p>所属包: com.itheima.reggie.service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>4). 业务层实现类 UserServiceImpl</strong></p>
<p>所属包: com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper,User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5). 控制层 UserController</strong></p>
<p>所属包: com.itheima.reggie.controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.UserService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>6). 工具类SMSUtils、ValidateCodeUtils（直接从课程资料中导入即可）</strong></p>
<p>所属包: com.itheima.reggie.utils</p>
<p> <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808161055013.png" alt="image-20220808161055013" loading="lazy"></p>
<ul>
<li><p>SMSUtils : 是我们上面改造的阿里云短信发送的工具类 ;</p>
</li>
<li><p>ValidateCodeUtils : 是验证码生成的工具类 ;</p>
</li>
</ul>
<h3 id="2-功能实现"><a href="#2-功能实现" class="headerlink" title="2.功能实现"></a>2.功能实现</h3><h5 id="修改LoginCheckFilter"><a href="#修改LoginCheckFilter" class="headerlink" title="修改LoginCheckFilter"></a>修改LoginCheckFilter</h5><p>前面我们已经完成了LoginCheckFilter过滤器的开发，此过滤器用于检查用户的登录状态。我们在进行手机验证码登录时，发送的两个请求(获取验证码和登录)需要在此过滤器处理时直接放行。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808163847435.png" alt="image-20220808163847435" loading="lazy"> </p>
<p>对于移动的端的页面，也是用户登录之后，才可以访问的，那么这个时候就需要在 LoginCheckFilter 中进行判定，如果移动端用户已登录，我们获取到用户登录信息，存入ThreadLocal中(在后续的业务处理中，如果需要获取当前登录用户ID，直接从ThreadLocal中获取)，然后放行。</p>
<p>增加如下逻辑: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4-2、判断登录状态，如果已登录，则直接放行</span></span><br><span class="line"><span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">    log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    BaseContext.setCurrentId(userId);</span><br><span class="line"></span><br><span class="line">    filterChain.doFilter(request,response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="发送短信验证码"><a href="#发送短信验证码" class="headerlink" title="发送短信验证码"></a>发送短信验证码</h5><p>在UserController中创建方法，处理登录页面的请求，为指定手机号发送短信验证码，同时需要将手机号对应的验证码保存到Session，方便后续登录时进行比对。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送手机短信验证码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">//获取手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isNotEmpty(phone))&#123;</span><br><span class="line">        <span class="comment">//生成随机的4位验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> ValidateCodeUtils.generateValidateCode(<span class="number">4</span>).toString();</span><br><span class="line">        log.info(<span class="string">&quot;code=&#123;&#125;&quot;</span>,code);</span><br><span class="line">			</span><br><span class="line">        <span class="comment">//调用阿里云提供的短信服务API完成发送短信</span></span><br><span class="line">        <span class="comment">//SMSUtils.sendMessage(&quot;瑞吉外卖&quot;,&quot;&quot;,phone,code);</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment">//需要将生成的验证码保存到Session</span></span><br><span class="line">        session.setAttribute(phone,code);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;手机验证码短信发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;短信发送失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-验证码登录"><a href="#3-验证码登录" class="headerlink" title="3. 验证码登录"></a>3. 验证码登录</h3><p>在UserController中增加登录的方法 login，该方法的具体逻辑为： </p>
<ol>
<li><p>获取前端传递的手机号和验证码</p>
</li>
<li><p>从Session中获取到手机号对应的正确的验证码</p>
</li>
<li><p>进行验证码的比对 , 如果比对失败, 直接返回错误信息</p>
</li>
<li><p>如果比对成功, 需要根据手机号查询当前用户, 如果用户不存在, 则自动注册一个新用户</p>
</li>
<li><p>将登录用户的ID存储Session中</p>
</li>
</ol>
<p>具体代码实现: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移动端用户登录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;User&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map map, HttpSession session)</span>&#123;</span><br><span class="line">    log.info(map.toString());</span><br><span class="line">    <span class="comment">//获取手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> map.get(<span class="string">&quot;phone&quot;</span>).toString();</span><br><span class="line">    <span class="comment">//获取验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> map.get(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line">    <span class="comment">//从Session中获取保存的验证码</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> session.getAttribute(phone);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行验证码的比对（页面提交的验证码和Session中保存的验证码比对）</span></span><br><span class="line">    <span class="keyword">if</span>(codeInSession != <span class="literal">null</span> &amp;&amp; codeInSession.equals(code))&#123;</span><br><span class="line">        <span class="comment">//如果能够比对成功，说明登录成功</span></span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getPhone,phone);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//判断当前手机号对应的用户是否为新用户，如果是新用户就自动完成注册</span></span><br><span class="line">            user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setPhone(phone);</span><br><span class="line">            user.setStatus(<span class="number">1</span>);</span><br><span class="line">            userService.save(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>,user.getId());</span><br><span class="line">        <span class="keyword">return</span> R.success(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-5-功能测试"><a href="#5-5-功能测试" class="headerlink" title="5.5 功能测试"></a>5.5 功能测试</h2><p>点击获取验证码</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808164633394.png" alt="image-20220808164633394" loading="lazy"></p>
<p>后端接收到</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808164647464.png" alt="image-20220808164647464" loading="lazy"></p>
<p>登陆成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808164702196.png" alt="image-20220808164702196" loading="lazy"></p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>用户中心项目前端笔记</title>
    <url>/2022/04/09/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83%E9%A1%B9%E7%9B%AE%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-初始化前端项目"><a href="#1-初始化前端项目" class="headerlink" title="1.初始化前端项目"></a>1.初始化前端项目</h1><h2 id="1-1-安装Node-js"><a href="#1-1-安装Node-js" class="headerlink" title="1.1 安装Node.js"></a>1.1 安装Node.js</h2><p>Node.js中文网域名：<a href="http://nodejs.cn/">http://nodejs.cn/</a></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657852435623-798e2277-e1e7-42d6-8170-1875cb8a2005.png" alt="img" loading="lazy"></p>
<p>安装这个长期支持版本即可。</p>
<h2 id="1-2-开始使用Ant-Design-Pro"><a href="#1-2-开始使用Ant-Design-Pro" class="headerlink" title="1.2 开始使用Ant Design Pro"></a>1.2 开始使用Ant Design Pro</h2><p>官网：<a href="https://pro.ant.design/zh-CN/">https://pro.ant.design/zh-CN/</a></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657852570758-1d271922-8f44-4a77-895c-6aa6fb9a82f9.png" alt="img" loading="lazy"></p>
<p>Ant Design Pro可以看做是一个开箱即用的管理系统。</p>
<h3 id="1-点击开始使用"><a href="#1-点击开始使用" class="headerlink" title="1.点击开始使用"></a>1.点击开始使用</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657852910425-69a7a925-2542-4948-9782-3553a7c72b60.png" alt="img" loading="lazy"></p>
<p>好像官网更新了，也可以使用yarn来初始化脚手架，命令如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn create umi myapp</span><br></pre></td></tr></table></figure>

<p>yarn是一个包管理器，可以极大地减少 install 的时间和失败的概率，并且完全兼容 npm。</p>
<h3 id="2-初始化项目"><a href="#2-初始化项目" class="headerlink" title="2. 初始化项目"></a>2. 初始化项目</h3><ol>
<li>win+R 输入cmd打开命令提示符并定位到自己项目想要放置的位置（根据个人喜好来）</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657853183599-161336da-b894-4914-a514-7e6cef09c947.png" alt="img" loading="lazy"></p>
<ol>
<li>按照官网的指示一步步来</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657866838855-d67fd295-055d-4ffa-a391-6c3597bbc0ad.png" alt="img" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657866818851-68bc93be-852e-42cd-80b0-3285d2c28956.png" alt="img" loading="lazy"></p>
<ol>
<li>在终端输入yarn，就可以自动安装依赖</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657866903049-5d0ed75e-8281-4544-981e-fb1d1216dbbf.png" alt="img" loading="lazy"></p>
<ol>
<li>先把项目跑起来，点击package.json中的start</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657867030708-a296535e-1d46-434f-9dd8-a6668a3406b4.png" alt="img" loading="lazy"></p>
<ol>
<li>当当当当，效果展示！</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657867080648-01d6a90d-a969-4c10-8515-77f447c38a76.png" alt="img" loading="lazy"></p>
<h3 id="3-项目瘦身"><a href="#3-项目瘦身" class="headerlink" title="3.项目瘦身"></a>3.项目瘦身</h3><ol>
<li>找到src下的locals，这个文件夹是针对国际化不同国家访问该页面对应的不同国家的语言。</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657867878888-0b4c15a9-fd3f-43d7-be10-b93b7354b6fd.png" alt="img" loading="lazy">2. 找到package.json中的这行代码，点击运行，移除国际化，这样我们的项目就只支持中文了。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657868015047-c7900aac-ea8f-4741-9bb8-9febda315e97.png" alt="img" loading="lazy"></p>
<ol>
<li>然后把locals目录也删了，删了之后重新运行。（删东西一定删一个运行一次，这样可以知道哪个东西不能删，赶紧恢复。）</li>
<li>然后把下图这些没用的也删了</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657868613086-5bec8ce2-f123-4a73-aecc-2cd3a3ca6899.png" alt="img" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657868866311-2b9b160b-942b-40f5-88c2-48f915b72450.png" alt="img" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657869096251-f02b4080-830a-445f-856c-2dfe6c758517.png" alt="img" loading="lazy"></p>
<h3 id="4-项目目录介绍"><a href="#4-项目目录介绍" class="headerlink" title="4.项目目录介绍"></a>4.项目目录介绍</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657869077687-c2ef8b76-26ef-46c4-9ecc-8e1055aebf3d.png" alt="img" loading="lazy"></p>
<h1 id="2-项目美化"><a href="#2-项目美化" class="headerlink" title="2.项目美化"></a>2.项目美化</h1><h2 id="2-1-修改首页信息"><a href="#2-1-修改首页信息" class="headerlink" title="2.1 修改首页信息"></a>2.1 修改首页信息</h2><p>这是现在的首页</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657869943181-5b79afa4-e28d-45e6-9d07-2b7471c5f3e4.png" alt="img" loading="lazy"></p>
<h3 id="1-改首页信息"><a href="#1-改首页信息" class="headerlink" title="1.改首页信息"></a>1.改首页信息</h3><p>为了方便我们的改造，首先在src目录下创建一个常量包constants，然后新建一个index.ts文件存放常量，如图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657870314796-de38f6fa-5f51-45a7-a8c5-46e8a9d633a6.png" alt="img" loading="lazy"></p>
<p>然后将我们所需要的常量写入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*//首页logo地址</span><br><span class="line">*export const SYSTEM_LOGO = &quot;https://www.kdy.icu/images/touxiang.jpg&quot;*//知识星球文档地址</span><br><span class="line">*export const PLANET_LINK = &quot;https://docs.qq.com/doc/DUG93dVNHbVZjZXpo&quot;</span><br></pre></td></tr></table></figure>



<p>然后找到以下目录，将信息改成我们自己的，修改前</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657869916385-17d5b75e-ef95-4495-90f0-77a1c989f470.png" alt="img" loading="lazy"></p>
<p>修改后：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657870436516-cc61f71f-61ae-41bc-9bdb-07afb6846d45.png" alt="img" loading="lazy"></p>
<p>然后首页的Footer部分就已经改变啦！</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657870486240-dec14a5b-65e9-4983-ab69-171d5de3b4ac.png" alt="img" loading="lazy"></p>
<p>然后找到pages目录下的user目录下的Login目录下的index.tsx，将以下信息就行修改为自己的</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657870762615-ca4de97c-c438-4263-ba12-653ee898e6b5.png" alt="img" loading="lazy"></p>
<p>改为以下这样，同样，上方需要引入常量包</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657870893470-c18cbfba-3ed6-4aa9-86c8-0aaf910db894.png" alt="img" loading="lazy"></p>
<p>效果展示：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657870932503-b19278fc-3b5d-4191-9eac-27e667fa94b8.png" alt="img" loading="lazy"></p>
<h2 id="2-2-删除多余代码"><a href="#2-2-删除多余代码" class="headerlink" title="2.2 删除多余代码"></a>2.2 删除多余代码</h2><p>依然是Login下的index.tsx目录</p>
<ol>
<li>删掉其他登录方式，选中，删除</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657871034517-800c5777-c783-4893-b2f2-72091792a732.png" alt="img" loading="lazy"></p>
<ol>
<li>图中标记的都删了</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657871134020-480979ac-063a-4202-8a3f-587cbb878af2.png" alt="img" loading="lazy"></p>
<ol>
<li>把账号密码的占位符换了</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657871263249-c63d5d89-c4bd-49db-918f-ba2aa00c4fc5.png" alt="img" loading="lazy"></p>
<p>改成这个熊样子：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657871299395-02e5cd2a-e60f-4b22-9ff8-bf6e53fcf406.png" alt="img" loading="lazy"></p>
<p>因为我们以后是使用账号密码进行登录，所以全局替换，使用ctrl+shift+R进行全局替换，将用户名改为账号，点击全部替换。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657871432079-ee44f2c2-103b-4e5e-ad5b-0e978c9d7cf6.png" alt="img" loading="lazy"></p>
<p>然后把手机号验证码这里进行折叠，然后删除。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657871577569-5630ae4a-09f1-47f1-b007-8cb03bbb3cbe.png" alt="img" loading="lazy"></p>
<p>然后对忘记密码进行更改，改为联系管理员，并添加对应的超链接，这里我们改为联系鱼皮</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657871687959-981c7dcb-810c-4217-a0b0-cb00287fdc3a.png" alt="img" loading="lazy"></p>
<p>这时候你会发现上方导包的地方有好多报错，可以把报错的地方直接删了，如果不放心的话，也可以注释掉，像下面这样。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657872148470-0c942062-b5a3-4d68-90e9-3061452b82df.png" alt="img" loading="lazy"></p>
<p>然后就是激动人心的页面展示环节。</p>
<p>当当当当！</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657871732867-46297b73-d0b0-4233-8976-7e328c8307b5.png" alt="img" loading="lazy"></p>
<p><strong>注：****一定记得改一点东西就去页面刷新一下看看，这样方便排错，不然改了半天发现页面崩了都不知道错在了哪里。</strong></p>
<h2 id="2-3-对接后台"><a href="#2-3-对接后台" class="headerlink" title="2.3 对接后台"></a>2.3 对接后台</h2><p>首先，还是再Login下的index.tsx文件中，ctrl+F打开搜索框，搜索handleSubmit</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657872329082-22ce8d9a-e81c-456b-9249-a3588e7a021a.png" alt="img" loading="lazy">按住Ctrl加鼠标点击进入</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657872397215-87de1c6c-87ce-4d9d-825a-28e2f085ff31.png" alt="img" loading="lazy"></p>
<p>找到LoginParams，点击进入</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657872445905-00ce088f-8e08-496c-804b-490344d9fbd2.png" alt="img" loading="lazy"></p>
<p>将这里的username和password重构为userAccount和userPassword（重构快捷键Shift + F6）</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657872534815-f56ca687-7816-4fac-825a-464a6a06ead7.png" alt="img" loading="lazy"><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657872626732-afadbe9d-e4ec-40c4-882f-b9a40ac9b93e.png" alt="img" loading="lazy"></p>
<p>继续回到handleSubmit，进入login</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657872733101-98ac1a4f-8eea-4b49-a30d-1ee026433023.png" alt="img" loading="lazy"></p>
<p>在这里，我们发现了关于登录功能的一些路由</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657872781801-7d8581d1-0140-448b-8101-8b4098870fc4.png" alt="img" loading="lazy"></p>
<p>接下来我们的工作就是把这些路由和我们的后端进行对接。</p>
<p>但是前端的端口是8000，而后端的端口是8080，端口不一样就会产生跨域问题。</p>
<p>跨域问题的解决方案有很多种，添加一个代理或者让后端支持跨域，但是后端支持跨域不安全，正好Ant Design Pro给我们也提供了一个代理，我们就是用它这个试一试。</p>
<p>打开config目录下的proxy.ts文件</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657873017672-7bcc5516-ae8f-4db3-8c8f-8ff326aaa1e2.png" alt="img" loading="lazy"></p>
<p>将图中的target改为我们的后端地址</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657873089165-ac083b6a-ba9a-4320-aa00-efa1d6a09dc3.png" alt="img" loading="lazy"></p>
<p>然后返回login，将路由改成我们后端的登录地址，因为代理前加了&#x2F;api，所以这里我们前面也要加上&#x2F;api<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657873324697-83846bd1-3988-4bfe-a07d-bc9c6fa7b752.png" alt="img" loading="lazy"></p>
<p>然后把后台也加上&#x2F;api，保证统一，在application.yml中添加一下代码，就不复制出来了，打个context-path，有提示。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657873967680-f74123cf-3ab7-4444-b2d7-6cd378320f77.png" alt="img" loading="lazy"></p>
<p>设置超时时间，在src目录下的app.tsx中添加以下代码，超时时间为十秒</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657873793128-164f21b0-8f6c-4a0f-b94e-7f57f908c896.png" alt="img" loading="lazy"></p>
<p>然后我们输入账号密码，点击登录</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657874168369-7fad124d-180d-41c2-b0e1-c4a2b74a54ab.png" alt="img" loading="lazy"></p>
<p>你以为这样就对接完成了？</p>
<p>想多了，后台debug发现，拿到的值是空值，这是为啥呢？</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657874259081-d7c28ff7-35c6-40ed-8c31-cc6619ee07e2.png" alt="img" loading="lazy"></p>
<p>我们通过抓包发现，表单提交的参数仍然是username和password，所以拿不到数据很正常。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657874771856-48c592b1-70da-4a5a-bd71-6227b786138f.png" alt="img" loading="lazy"></p>
<p>刚才我们改的loginParams是ts文件里的，只是定义了一种规范，都是些假数据，而真数据在我们表单中。</p>
<p>那么我们就需要把表单提交的参数和后台对应上，然后参数需要在login下的index.tsx文件中改。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657874692617-a4500d8b-f225-4994-b842-707faf982db6.png" alt="img" loading="lazy"></p>
<p>然后把username和password进行全局替换。</p>
<p>这里使用Ctrl+R，进行替换。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657875014809-fd3edf2d-6984-49f2-8bfe-c1a0c132eb97.png" alt="img" loading="lazy"></p>
<p><strong>这里记得区分大小写替换，把这个Cc点亮就可以了</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657875185039-737d1b6a-c6c6-41c6-b9d9-7fef413f26fb.png" alt="img" loading="lazy"></p>
<p>这样我们再去测试，就发现我们终于拿到数据了，太特么不容易了。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657875311765-195aa93d-9a48-4226-980c-95a78a20838a.png" alt="img" loading="lazy"></p>
<p><strong>收尾工作：</strong></p>
<p>给密码加一个长度校验</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657875483907-e4a3181d-d08e-4c3c-b26a-c32b72d45eaf.png" alt="img" loading="lazy"></p>
<p>然后把登录信息这里进行一下修改</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657875677895-918f5b40-1ccb-4465-a19e-60313cbe73e8.png" alt="img" loading="lazy"></p>
<p>修改为：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657875722277-4e0c3bf2-1df0-46c5-a357-a80a5f3f07c0.png" alt="img" loading="lazy"></p>
<p>测试一下新改的代码：</p>
<p>长度校验功能正常：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657875756296-2893c5d0-f14c-4589-8b6d-c76c2c0f6a4e.png" alt="img" loading="lazy"></p>
<p>登录测试正常:</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657875944196-ad162bd8-5d7d-4580-88da-b1e960afcefd.png" alt="img" loading="lazy"></p>
<p>完美~</p>
<p>因为在搞前端的时候不知道那个步骤把前端搞崩了，改了好久也改不回来，所以重新做了一遍，顺手记录一下，兄弟们跟着皮总做的时候，一定要记得按时进行运行检查，随时改代码随时观察，及时发现问题，这样才不会像我一样，只图快，结果最后全崩了还不知道自己错在哪，还得重新弄。</p>
<p>不过也算长记性了，以后就不会出现这种情况了，兄弟们加油。</p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>用户中心项目末笔记</title>
    <url>/2022/04/25/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83%E9%A1%B9%E7%9B%AE%E6%9C%AB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="0-目标"><a href="#0-目标" class="headerlink" title="0.目标"></a>0.目标</h1><ol>
<li><p>开发用户注销前端&#x2F;后端</p>
</li>
<li><p>补充用户注册校验逻辑前端&#x2F;后端</p>
</li>
<li><p>后端代码优化</p>
</li>
<li><p>前端代码优化</p>
</li>
<li><p>项目部署上线<strong>（鸽）</strong></p>
</li>
<li><ol>
<li>买服务器</li>
<li>原生部署(web服务器)</li>
<li>容器部署</li>
<li>绑定域名</li>
<li><strong>排查问题</strong></li>
</ol>
</li>
</ol>
<h1 id="1-开发用户注销"><a href="#1-开发用户注销" class="headerlink" title="1.开发用户注销"></a>1.开发用户注销</h1><h2 id="1-1-后端注销代码编写："><a href="#1-1-后端注销代码编写：" class="headerlink" title="1.1 后端注销代码编写："></a>1.1 后端注销代码编写：</h2><p><strong>分析：</strong>用户登陆时就是给用户一个登录态，用户注销就是将登录态进行移除</p>
<p>首先在Service接口中编写方法</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658733603507-05f751e4-61cb-45fb-a9d0-687f0d9897c5.png" alt="img" loading="lazy"></p>
<p>在ServiceImpl中对方法进行实现</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658733617386-0f5e34ec-68b5-4da7-bb11-c6270ee9c3af.png" alt="img" loading="lazy"></p>
<p>然后在Controller中编写注销接口</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658733644845-6b18497a-c682-4f7d-9d64-aac04e9af047.png" alt="img" loading="lazy"></p>
<p>Debug模式先将后端跑起来，去前端进行测试</p>
<h2 id="1-2-前端注销代码编写："><a href="#1-2-前端注销代码编写：" class="headerlink" title="1.2 前端注销代码编写："></a>1.2 前端注销代码编写：</h2><p>首先需要找到前端的注销方法，方法在components组建中的头像下拉菜单中，即AvatarDropdown.tsx文件中</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658734189624-de86ce08-7e58-4ef1-aa07-8c1d70b21b12.png" alt="img" loading="lazy"></p>
<p>点击进入logOut()方法<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658734274863-53a7bec4-9936-4fe3-9b97-20960e6448ff.png" alt="img" loading="lazy"></p>
<p>点击进入outLogin进行更改路由</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658734300511-2e219df1-e97c-4537-9c0a-939331e6d98b.png" alt="img" loading="lazy"></p>
<p>将其改成我们的路由地址，如下图</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658734341447-2b3a5909-cb13-44ae-904c-40bd9fd77a64.png" alt="img" loading="lazy"></p>
<p>进行测试</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658734397383-488043f5-a160-4d3c-a0f8-4aea77fcf243.png" alt="img" loading="lazy"></p>
<p>通过查看返回值，发现返回值为1，注销成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658734411012-0f7fe479-0bc1-4917-b5b9-c892fc7cd07f.png" alt="img" loading="lazy"></p>
<p>页面也重定向回到了登录页</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658734450776-091d46e2-5afd-4bc2-8ced-b75eadefdae8.png" alt="img" loading="lazy"></p>
<p>出乎意料的顺利</p>
<h1 id="2-补充用户注册校验逻辑"><a href="#2-补充用户注册校验逻辑" class="headerlink" title="2.补充用户注册校验逻辑"></a>2.补充用户注册校验逻辑</h1><p><strong>分析：</strong></p>
<ol>
<li>先让用户自己填：星球编号，2 - 5位</li>
<li>后台补充对编号的校验：长度校验、唯一性校验</li>
<li>前段补充输入框，适配后端</li>
<li>后期拉取星球数据，定期清理违规用户</li>
</ol>
<h2 id="2-1-后端代码开发"><a href="#2-1-后端代码开发" class="headerlink" title="2.1 后端代码开发"></a>2.1 后端代码开发</h2><h3 id="1-数据库中添加星球编号字段"><a href="#1-数据库中添加星球编号字段" class="headerlink" title="1.数据库中添加星球编号字段"></a>1.数据库中添加星球编号字段</h3><p>右键user表，选择Modify Table</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658736597265-b60e0f10-5926-4f3f-8de0-8f281ce40834.png" alt="img" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658736848293-45ad4eab-e6ec-460a-9e49-9172f0764d4e.png" alt="img" loading="lazy"></p>
<p>刷新一下表，发现字段添加成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658736915282-b1b8a454-8f5b-4bff-b965-9424300d7b49.png" alt="img" loading="lazy"></p>
<h3 id="2-重新生成对象"><a href="#2-重新生成对象" class="headerlink" title="2.重新生成对象"></a>2.重新生成对象</h3><p>因为数据表中的字段都变了，类中的属性也要和字段一一对应，所以要重新生成对象，使用MyBatisX插件来生成</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658737011424-53197363-acb4-4653-818f-61a95aee1f68.png" alt="img" loading="lazy"></p>
<p>点击进入，不用修改，直接下一步</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658737042524-979f0f8e-5b53-45cd-8080-c4e1d1412816.png" alt="img" loading="lazy"></p>
<p>直接Finish</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658737069747-c27c5515-f021-4844-9287-50a673525017.png" alt="img" loading="lazy"></p>
<p>然后左边就有了我们生成的代码</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658737145192-84e21647-bc0a-4f21-a85f-ee37520d0788.png" alt="img" loading="lazy"></p>
<p>然后将我们有需要的地方进行选择性的复制</p>
<ol>
<li>实体类</li>
</ol>
<p>将生成的星球编号属性复制到我们的User中</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658737231164-59a9056b-b585-4af4-93c5-10ceab814607.png" alt="img" loading="lazy"></p>
<ol>
<li>Mapper文件</li>
</ol>
<p>将Mapper文件中的映射地址改为我们的UserMapper和User所在的地方（这个很重要，之前就出过这个问题）</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658737430740-172e547b-42f4-4c1b-8ef2-892370356253.png" alt="img" loading="lazy"></p>
<p>可以通过右键-&gt;Copy Reference来快速复制类的全类名</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658737467661-113cca13-dc01-4f9e-bc6d-fbd0ac1385cd.png" alt="img" loading="lazy"></p>
<p>修改为这样（改成自己的）</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658737530817-ab95106b-d516-442e-ae03-8e455e80b5f2.png" alt="img" loading="lazy"></p>
<ol>
<li>把generator包删掉就可以了</li>
</ol>
<h3 id="3-补充星球编号"><a href="#3-补充星球编号" class="headerlink" title="3. 补充星球编号"></a>3. 补充星球编号</h3><p>因为原来后端代码中好多使用到了User对象，现在我们添加了新字段，需要对User进行补充上</p>
<ol>
<li>用户脱敏</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658737747552-636489af-3e4d-48ff-bb71-6e2bdf2cf48f.png" alt="img" loading="lazy"></p>
<ol>
<li>注册请求体</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658737801648-07eac282-c82f-4652-b415-17e709abab42.png" alt="img" loading="lazy"></p>
<ol>
<li>Controller中的注册接口</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658737979689-a3909d45-2052-4d54-b50a-0ec1d59c2c03.png" alt="img" loading="lazy"></p>
<ol>
<li>Service中的注册接口</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658738072783-bd78d07f-2695-4a7f-922d-fd27f2ae39a6.png" alt="img" loading="lazy"></p>
<ol>
<li>服务层实现类中也要对应着添加上</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658738208964-a812a461-328a-4a73-b43e-ae6e2e3208bb.png" alt="img" loading="lazy"></p>
<h3 id="4-添加校验逻辑"><a href="#4-添加校验逻辑" class="headerlink" title="4.添加校验逻辑"></a>4.添加校验逻辑</h3><p>在服务层实现类中添加校验逻辑，</p>
<ol>
<li>非空校验和长度校验</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658738419174-52302148-09c5-4730-b4ef-e3f07903ce04.png" alt="img" loading="lazy"></p>
<ol>
<li>编号重复校验</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658738654133-549f25c5-82c6-4529-a202-15e578a7a766.png" alt="img" loading="lazy"></p>
<ol>
<li>星球编号别忘了插入，不然忙活半天数据库中没添加星球编号</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658738775310-99c5f544-c1fa-41c0-b1ee-783e2171f331.png" alt="img" loading="lazy"></p>
<h3 id="5-单元测试"><a href="#5-单元测试" class="headerlink" title="5. 单元测试"></a>5. 单元测试</h3><p>进入UserServiceTest，将方法参数补充完整（星球编号）</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658739005605-0e4f3299-b9e3-44dc-8310-83e51fde1187.png" alt="img" loading="lazy"></p>
<p>然后打上断点开始Debug</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658739308716-dda520f0-9d06-4bc1-92f0-e7cbb8ed0784.png" alt="img" loading="lazy"></p>
<p>接下来就是一路的F8</p>
<p>跑到最后也全都是-1，因为账户也是重复的，所以测试不出来</p>
<p>这里先手动给我们的管理员用户加上星球编号</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658739394928-c549156b-3079-4448-94a8-c973edfbb3a6.png" alt="img" loading="lazy"></p>
<h2 id="2-2-前端代码开发"><a href="#2-2-前端代码开发" class="headerlink" title="2.2 前端代码开发"></a>2.2 前端代码开发</h2><p>前端就比较简单了</p>
<h3 id="1-添加星球编号输入框"><a href="#1-添加星球编号输入框" class="headerlink" title="1.添加星球编号输入框"></a>1.添加星球编号输入框</h3><p>首先进入注册页面，复制一份用户账号的表单输入框，修改为星球编号的</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658739703502-638164ca-a566-4a31-992b-619f332fa57e.png" alt="img" loading="lazy"></p>
<p>添加星球编号输入框代码如下</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658739805723-2e8a1e06-fc8d-4fea-ad12-b547c04e04d3.png" alt="img" loading="lazy"></p>
<p>运行看看效果，已经出来了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658739852894-4375a251-167b-4b62-8d6e-81a0b198d752.png" alt="img" loading="lazy"></p>
<h3 id="2-修改注册参数"><a href="#2-修改注册参数" class="headerlink" title="2.修改注册参数"></a>2.修改注册参数</h3><p>输入框中添加了星球编号，那参数中也需要进行对应的添加</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658740073032-fe8879e3-73f1-44ef-af9c-90924955f1e2.png" alt="img" loading="lazy"></p>
<p>添加星球编号参数</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658740116830-0699239b-7435-41c4-871c-579115532c15.png" alt="img" loading="lazy"></p>
<h3 id="3-在CurrentUser的属性中添加上星球编号"><a href="#3-在CurrentUser的属性中添加上星球编号" class="headerlink" title="3.在CurrentUser的属性中添加上星球编号"></a>3.在CurrentUser的属性中添加上星球编号</h3><p>CurrentUser直接对应了后端的User和数据库，所以也要添加上星球编号字段来保持对应</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658740301300-7cae1b19-8e86-499f-bd3a-76158aa0e3fe.png" alt="img" loading="lazy"></p>
<h3 id="4-管理员表格查询中添加星球编号"><a href="#4-管理员表格查询中添加星球编号" class="headerlink" title="4.管理员表格查询中添加星球编号"></a>4.管理员表格查询中添加星球编号</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658740611348-9cc0d809-7405-48b3-b20c-dcfa15dca909.png" alt="img" loading="lazy"></p>
<h3 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h3><h4 id="1-注册测试"><a href="#1-注册测试" class="headerlink" title="1.注册测试"></a>1.注册测试</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658740930172-2455d299-7bda-49c1-9dfc-ab414ba755c4.png" alt="img" loading="lazy"></p>
<p>点击注册，注册成功（没来得及截图），查看数据库，注册成功！</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658741718635-55fc590a-64a5-437d-b99b-71f3b7932fa1.png" alt="img" loading="lazy"></p>
<h4 id="2-查询测试"><a href="#2-查询测试" class="headerlink" title="2.查询测试"></a>2.查询测试</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658740759060-68804556-d14f-4fbf-8df0-ad04f5ebc7c2.png" alt="img" loading="lazy"></p>
<p>非常滴完美~</p>
<h1 id="3-后端代码优化"><a href="#3-后端代码优化" class="headerlink" title="3. 后端代码优化"></a>3. 后端代码优化</h1><p><strong>平时写代码尽量把功能写的完整一点，但是没必要直接就追求完美，先完成一个小demo实现功能，然后再一步步优化。</strong></p>
<p><strong>优化目标：</strong></p>
<ol>
<li><p>封装一个通用返回对象</p>
</li>
<li><ol>
<li>目的：给对象补充一些信息，告诉前端在业务逻辑上操作成功还是失败</li>
</ol>
</li>
<li><p>封装全局异常处理</p>
</li>
<li><p>全局请求日志和登录校验</p>
</li>
</ol>
<h2 id="3-1-封装通用返回对象"><a href="#3-1-封装通用返回对象" class="headerlink" title="3.1 封装通用返回对象"></a>3.1 封装通用返回对象</h2><h3 id="1-封装对象"><a href="#1-封装对象" class="headerlink" title="1. 封装对象"></a>1. 封装对象</h3><p>在usercenter下新建一个common包，然后新建一个BaseResponse通用返回类，并定义属性</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658748517612-e4dbe31f-186f-4a02-851f-412947b349c7.png" alt="img" loading="lazy"></p>
<p>Alt + Insert添加构造方法</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658748742713-7fbbab9b-4c67-47bb-a523-40a01b46ac8c.png" alt="img" loading="lazy"></p>
<p>代码如下：</p>
<p>&#96;<em>&#x2F;</em>*<br>* ** 通用返回类<br>* **<br>* *** <em><strong>@auther</strong></em> <em>xiaochen<br>* *** <em><strong>@create</strong></em> <em>2022-07-25 19:23<br>* <em>*&#x2F;<br>*@Data**public class</em>* BaseResponse*</em></em>&lt;<em><strong>T</strong><em>&gt;</em>*</em> <strong>implements</strong> Serializable ***{<br>***    <strong>private int</strong> <strong>code</strong>;    <em>&#x2F;&#x2F;因为做的是一个通用的返回类，所以不管接口返回的是什么类型都能使用，所以加一个泛型<br>*    <em>&#x2F;&#x2F;提高了可重用性<br>*    <strong>private</strong> T <strong>data</strong>;    <strong>private</strong> String <strong>message</strong>;    <strong>public</strong> BaseResponse</em></em>*(<em><strong><strong>int</strong> code, T data, String message</strong></em>) {<br>***        <strong>this</strong>.<strong>code</strong> &#x3D; code;        <strong>this</strong>.<strong>data</strong> &#x3D; data;        <strong>this</strong>.<strong>message</strong> &#x3D; message;    ***}</p>
<p>***    <strong>public</strong> BaseResponse***(<em><strong><strong>int</strong> code, T data</strong></em>) {<br>***        <strong>this</strong><em><strong>(<em><strong>code, data, <strong>“”</strong></strong></em>)</strong></em>;    ***}<br>******}<br>***&#96;</p>
<hr>
<p>在utils包下新建一个ResultUtils返回结果工具类（在common包下也中，我发现我原来写了个utils包，就放在这里面了），并写入下列代码</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658749602292-eb1bb8f0-d840-448c-b09d-e216d5582ad5.png" alt="img" loading="lazy"></p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*<span class="comment">/**</span></span><br><span class="line"><span class="comment">\* ** 返回通用结果工具类</span></span><br><span class="line"><span class="comment">\* **</span></span><br><span class="line"><span class="comment">\* *** ***<span class="doctag">@auther</span>*** *xiaochen</span></span><br><span class="line"><span class="comment">\* *** ***<span class="doctag">@create</span>*** *2022-07-25 19:43</span></span><br><span class="line"><span class="comment">\* **/</span></span><br><span class="line">***<span class="keyword">public</span> class** ResultUtils ***&#123;</span><br><span class="line">***    **<span class="keyword">public</span> <span class="keyword">static</span>** ***&lt;***T***&gt;*** BaseResponse***&lt;***T***&gt;*** success***(***T data***) &#123;</span><br><span class="line">***        **<span class="keyword">return</span> <span class="keyword">new</span>** BaseResponse***&lt;&gt;(***<span class="number">0</span>, data, **<span class="string">&quot;ok&quot;</span>*****)***;    ***&#125;</span><br><span class="line">******&#125;***</span><br></pre></td></tr></table></figure>

<h3 id="2-定制生成通用对象的快捷键"><a href="#2-定制生成通用对象的快捷键" class="headerlink" title="2.定制生成通用对象的快捷键"></a>2.定制生成通用对象的快捷键</h3><ol>
<li>按照下图指示进入定制快捷键页面，（main 、sout这些快捷键都是在这里定制的）</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658749843766-95e53fb9-1b0f-4784-afe6-473765aa2c84.png" alt="img" loading="lazy"></p>
<ol>
<li>新建分组</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658749998214-5c56e436-f6b4-4176-aaef-82e8e19b1aac.png" alt="img" loading="lazy"></p>
<ol>
<li>名称为customJava，点击ok</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658750053126-745cf3f5-f585-46b0-bb8a-c4fb23931f2c.png" alt="img" loading="lazy"></p>
<ol>
<li>在该分组中新建一个快捷键模板</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658750109551-c3303fab-239b-4c63-ae41-14a5c48f5bcc.png" alt="img" loading="lazy"></p>
<ol>
<li>新建快捷键</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658750256943-bf367e10-6b2f-4233-b4ae-f230cf53583d.png" alt="img" loading="lazy"></p>
<p>点击Define，选择Java，该选项代表我们使用什么编程语言时该快捷键生效</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658750305595-2b2b39ec-6c83-44a2-983c-141d14c79dd5.png" alt="img" loading="lazy"></p>
<ol>
<li>然后点击apply，ok，完成快捷键的创建<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658750396467-40d1bc62-8b1a-4914-a1ae-b36ee9650107.png" alt="img" loading="lazy"></li>
<li>测试，打上快捷键，发现确实可以生成我们需要的代码</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658750473129-5db8963c-f884-4405-aab1-86ae2d676680.png" alt="img" loading="lazy"></p>
<h3 id="3-使用通用返回对象"><a href="#3-使用通用返回对象" class="headerlink" title="3.使用通用返回对象"></a>3.使用通用返回对象</h3><p>通用对象封装好了，然后把我们原来请求接口中的返回对象都改成通用的返回对象</p>
<p>拿注册接口举例子，将返回值修改为通用返回对象</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658750718520-5cc9ae34-03cd-49b2-b0cf-03de7baa16e7.png" alt="img" loading="lazy"></p>
<p>其他的以此类推</p>
<p>当前对象</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658751017297-905af0d5-bc6e-4926-aa01-a4b104465a37.png" alt="img" loading="lazy"></p>
<p>登录</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658750888658-fef44b20-666f-46b2-9e77-d761f6bdafd2.png" alt="img" loading="lazy"></p>
<p>注销</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658750937469-f23d15f7-88db-495c-b870-0d24dcf0a6d3.png" alt="img" loading="lazy"></p>
<p>查询</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658751142369-61031bcd-5d28-48d2-a94b-29d7ced03338.png" alt="img" loading="lazy"></p>
<p>删除（基本数据类型装箱，变为包装类）</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658751281758-8e04404d-9a50-47ce-bdb7-a6af9ca7f84f.png" alt="img" loading="lazy"></p>
<h3 id="4-自定义错误码"><a href="#4-自定义错误码" class="headerlink" title="4.自定义错误码"></a>4.自定义错误码</h3><p>在common包下新建一个枚举值ErrorCode</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658751608151-788f0144-9271-4ca7-95ac-d70b343916c1.png" alt="img" loading="lazy"></p>
<p>并写入以下代码</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658753561018-990a3283-f4f2-44c7-a0fd-68d73b3957e8.png" alt="img" loading="lazy"></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">``*<span class="comment">/**</span></span><br><span class="line"><span class="comment">\* ** 错误码</span></span><br><span class="line"><span class="comment">\* **</span></span><br><span class="line"><span class="comment">\* *** ***<span class="doctag">@auther</span>*** *xiaochen</span></span><br><span class="line"><span class="comment">\* *** ***<span class="doctag">@create</span>*** *2022-07-25 20:19`</span></span><br><span class="line"><span class="comment">`\* **/</span></span><br><span class="line">***<span class="keyword">public</span> <span class="keyword">enum</span>** ErrorCode ***&#123;`</span><br><span class="line"></span><br><span class="line">`***    ***SUCCESS(***<span class="number">0</span>,**<span class="string">&quot;ok&quot;</span>**,**<span class="string">&quot;&quot;</span>*****)***,    ***PARAMS_ERROR(***<span class="number">40000</span>, **<span class="string">&quot;请求参数错误&quot;</span>**, **<span class="string">&quot;&quot;</span>*****)***,    ***NULL_ERROR(***<span class="number">40001</span>, **<span class="string">&quot;请求数据为空&quot;</span>**, **<span class="string">&quot;&quot;</span>*****)***,    ***NOT_LOGIN(***<span class="number">40100</span>, **<span class="string">&quot;未登录&quot;</span>**, **<span class="string">&quot;&quot;</span>*****)***,    ***NO_AUTH(***<span class="number">40101</span>, **<span class="string">&quot;无权限&quot;</span>**, **<span class="string">&quot;&quot;</span>*****)***;    *<span class="comment">/**`</span></span><br><span class="line"><span class="comment">`\*     ** 状态码`</span></span><br><span class="line"><span class="comment">`\*     **/</span></span><br><span class="line">\*    **<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>** **code**;    *<span class="comment">/**`</span></span><br><span class="line"><span class="comment">`\*     ** 状态码信息`</span></span><br><span class="line"><span class="comment">`\*     **/</span></span><br><span class="line">\*    **<span class="keyword">private</span> <span class="keyword">final</span>** String **message**;    *<span class="comment">/**</span></span><br><span class="line"><span class="comment">\*     ** 状态码描述</span></span><br><span class="line"><span class="comment">\*     **/</span></span><br><span class="line">\*    **<span class="keyword">private</span> <span class="keyword">final</span>** String **description**;    ErrorCode***(*****<span class="type">int</span>** code, String message, String description***) &#123;`</span><br><span class="line">`***        **<span class="built_in">this</span>**.**code** = code;        **<span class="built_in">this</span>**.**message** = message;        **<span class="built_in">this</span>**.**description** = description;    ***&#125;***``</span><br><span class="line"></span><br><span class="line">`*<span class="comment">//枚举值不支持用set方法</span></span><br><span class="line">***<span class="keyword">public</span> <span class="type">int</span>** getCode***() &#123;</span><br><span class="line">***    **<span class="keyword">return</span>** **code**;***&#125;</span><br><span class="line">*****<span class="keyword">public</span>** String getMessage***() &#123;</span><br><span class="line">***    **<span class="keyword">return</span>** **message**;***&#125;</span><br><span class="line">*****<span class="keyword">public</span>** String getDescription***() &#123;</span><br><span class="line">***    **<span class="keyword">return</span>** **description**;***&#125;***``***</span><br><span class="line">******&#125;******</span><br><span class="line">***` </span><br></pre></td></tr></table></figure>



<h3 id="5-完善通用结果返回类BaseResponse"><a href="#5-完善通用结果返回类BaseResponse" class="headerlink" title="5.完善通用结果返回类BaseResponse"></a>5.完善通用结果返回类BaseResponse</h3><p>错误码已经定义完了，我们就可以从ErrorCode中取状态码在BaseResponse中直接使用</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658754299928-80e56ea8-cb3a-4c06-9747-db589c49e78f.png" alt="img" loading="lazy"></p>
<h3 id="6-完善返回通用结果对象工具类ResultUtils"><a href="#6-完善返回通用结果对象工具类ResultUtils" class="headerlink" title="6.完善返回通用结果对象工具类ResultUtils"></a>6.完善返回通用结果对象工具类ResultUtils</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658754524977-bb8056e4-a685-4a5d-97f2-6d7ade580f6a.png" alt="img" loading="lazy"></p>
<p>代码：</p>
<p>&#96;<em>&#x2F;</em>*<br>* ** 返回通用结果工具类<br>* **<br>* *** <em><strong>@auther</strong></em> *xiaochen<br>* *** <em><strong>@create</strong></em> *2022-07-25 19:43<br>* **&#x2F;<br><strong><em>public class</em>* ResultUtils ***{<br>***    <em>&#x2F;</em>*<br>*     ** 成功<br>*     *** <em><strong>@param</strong></em> <strong><em>data<br>***     *** <em><strong>@param</strong></em> <strong><em><T><br>***     *** <strong><em>@return<br>***     <strong>&#x2F;<br>*    <strong>public static</strong> <em><strong>&lt;***T***&gt;</strong></em> BaseResponse</strong></em>&lt;***T***&gt;</strong></em> success</strong></em>(<em><strong>T data</strong></em>) {<br>***        <strong>return new</strong> BaseResponse</strong>*&lt;&gt;(<em><strong>0, data, <strong>“ok”</strong></strong></em>)</strong>*;    ***}</p>
<p>***    <em>&#x2F;</em>*<br>*     ** 失败<br>*     *** <em><strong>@param</strong></em> <strong><em>errorCode<br>***     *** <strong><em>@return<br>***     <strong>&#x2F;<br>*    <strong>public static</strong> BaseResponse error</strong></em>(<em><strong>ErrorCode errorCode</strong></em>) {<br>***        <strong>return new</strong> BaseResponse</strong></em>&lt;&gt;(<em><strong>errorCode</strong></em>)</strong>*;    ***}<br>******}<br>***&#96;</p>
<h2 id="3-2-封装全局异常处理"><a href="#3-2-封装全局异常处理" class="headerlink" title="3.2 封装全局异常处理"></a>3.2 封装全局异常处理</h2><h3 id="1-定义全局业务异常类"><a href="#1-定义全局业务异常类" class="headerlink" title="1.定义全局业务异常类"></a>1.定义全局业务异常类</h3><ol>
<li>在usercenter包下新建一个exception包，然后新建我们的全局业务异常类继承RuntimeException并扩充了两个属性，多写几个构造函数，方便我们之后使用到它时可以灵活的进行传参（后期不够，用到了随时加）</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658797991326-5b88ecc8-60ef-4730-b0b5-5ccb54f0566e.png" alt="img" loading="lazy"></p>
<ol>
<li>添加getter方法</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658798126177-779312a0-e9c8-4fe0-bb43-38d4110dc488.png" alt="img" loading="lazy"></p>
<ol>
<li>代码如下</li>
</ol>
<p>&#96;<em>&#x2F;</em>*<br>* ** 自定义业务异常类<br>* **<br>* *** <em><strong>@auther</strong></em> <em>xiaochen<br>* *** <em><strong>@create</strong></em> <em>2022-07-26 9:03<br>* <em><em>&#x2F;<br><em><strong>public class</strong> BusinessException <strong>extends</strong> RuntimeException <em><strong>{<br>***    <strong>private final int</strong> <strong>code</strong>;    <strong>private final</strong> String <strong>description</strong>;    <em>&#x2F;&#x2F;多写几个构造函数，方便我们灵活的传参<br>*    <strong>public</strong> BusinessException</em></strong>(<em><strong>String message, <strong>int</strong> code, String description</strong></em>) {<br>***        <strong>super</strong></em></em></em>(<em><strong>message</strong></em>)</em></em></em>;        <strong>this</strong>.<strong>code</strong> &#x3D; code;        <strong>this</strong>.<strong>description</strong> &#x3D; description;    ***}</p>
<p>***    <strong>public</strong> BusinessException***(<em><strong>ErrorCode errorCode</strong></em>) {<br>***        <strong>super</strong><em><strong>(<em><strong>errorCode.getMessage</strong></em>())</strong></em>;        <strong>this</strong>.<strong>code</strong> &#x3D; errorCode.getCode***()<em><strong>;        <strong>this</strong>.<strong>description</strong> &#x3D; errorCode.getDescription</strong></em>()***;    ***}</p>
<p>***    <strong>public</strong> BusinessException***(<em><strong>ErrorCode errorCode, String description</strong></em>) {<br>***        <strong>super</strong><em><strong>(<em><strong>errorCode.getMessage</strong></em>())</strong></em>;        <strong>this</strong>.<strong>code</strong> &#x3D; errorCode.getCode***()***;        <strong>this</strong>.<strong>description</strong> &#x3D; description;    ***}</p>
<p>***    <strong>public int</strong> getCode***() {<br>***        <strong>return</strong> <strong>code</strong>;    ***}</p>
<p>***    <strong>public</strong> String getDescription***() {<br>***        <strong>return</strong> <strong>description</strong>;    ***}<br>******}***&#96;</p>
<h3 id="2-将全局异常类应用到接口中"><a href="#2-将全局异常类应用到接口中" class="headerlink" title="2.将全局异常类应用到接口中"></a>2.将全局异常类应用到接口中</h3><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><p>首先来到Controller，将原来没有完善的错误返回代码都使用全局异常类进行代替，像这样将错误信息进行抛出</p>
<p>current</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658817133475-c51fd5df-f6c6-4e70-8d59-3f4d61a17969.png" alt="img" loading="lazy"></p>
<p>register</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658799106693-dc4d84fd-a18c-4a2d-b7b8-30b4449836c8.png" alt="img" loading="lazy"></p>
<p>login</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658799260773-616a764b-066d-4db4-964e-ce8830a72b09.png" alt="img" loading="lazy"></p>
<p>logout</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658799306516-21deb93c-1efa-4626-b645-87de725f4510.png" alt="img" loading="lazy"></p>
<p>search</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658799337376-79a567f8-7743-4ffb-ba21-b8ce19880e4e.png" alt="img" loading="lazy"></p>
<p>delete</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658799393263-54d12f0d-792a-47ac-a06e-81282112b785.png" alt="img" loading="lazy"></p>
<h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><p>然后来到ServiceImpl中，这里要改的也不少</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658798500729-8e161a63-1019-4c5e-adeb-635ff4e35d9c.png" alt="img" loading="lazy"></p>
<p>将其一一按照业务逻辑进行改写，并给出描述</p>
<p>register</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658799834766-c70d8761-8366-4bd9-9960-5ee13f79c8d6.png" alt="img" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658799566903-f186c4c9-313c-4ea0-a2d1-57ea1ae1e7f2.png" alt="img" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658799720252-6d2164c8-a49e-4324-8e17-bde572b3cc27.png" alt="img" loading="lazy"></p>
<p>login</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658799908079-70b5d40a-4330-4450-a73a-9696c74a2e63.png" alt="img" loading="lazy"></p>
<p><strong>以上这些都是我按照自己的想法改的，如果有错误希望大家可以帮我指出，我好改正。</strong></p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>将星球编号输多一点，，点击注册</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658801251589-0879cb95-4de8-4fbc-bf83-aa8b50b733f1.png" alt="img" loading="lazy"></p>
<p>发现状态码为500</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658801315859-674ce129-ad0f-4577-bccb-8541e6ca7edd.png" alt="img" loading="lazy"></p>
<p>后端也抛出了异常</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658801336893-23f3bea3-f6ea-40a8-85e1-595e4e397ecd.png" alt="img" loading="lazy"></p>
<p>我们想要的是返回的是我们自己的错误码，很明显，这并不是我们想要的效果，我们只封装了全局业务异常类，但是没有对异常进行任何的处理，所以下面就要编写全局异常处理类对这些异常进行处理。</p>
<h3 id="3-定义全局异常处理器"><a href="#3-定义全局异常处理器" class="headerlink" title="3.定义全局异常处理器"></a>3.定义全局异常处理器</h3><p>首先在错误码中添加一个系统内部异常的错误码</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658802058741-b1820950-914f-456d-9fdf-7a9e0ab163f1.png" alt="img" loading="lazy"></p>
<p>然后在exception包下新建一个全局异常处理器类GlobalExceptionHandler，并写入以下代码</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658802252190-d87bbc9f-78a7-4914-8bcf-421bbc4dad60.png" alt="img" loading="lazy"></p>
<p>报错的原因是返回结果工具类中的error方法参数不匹配，进入到工具类，添加几个重载的方法</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658803455972-028035ea-ad86-40c2-aa2d-1e718e8fc069.png" alt="img" loading="lazy"></p>
<p>这样就不报错了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658802656629-cad269bb-e06d-40c6-9250-ce59cd1b9f0d.png" alt="img" loading="lazy"></p>
<p>重启服务器，准备测试~</p>
<h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658803428866-fb84e901-b1d6-4e67-b24c-306b05818dfa.png" alt="img" loading="lazy"></p>
<p>奶思~</p>
<h1 id="4-前后端适配（优化前端）"><a href="#4-前后端适配（优化前端）" class="headerlink" title="4.前后端适配（优化前端）"></a>4.前后端适配（优化前端）</h1><h3 id="4-1-定义通用返回类"><a href="#4-1-定义通用返回类" class="headerlink" title="4.1. 定义通用返回类"></a>4.1. 定义通用返回类</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658805129998-0c8b8df4-32f7-4afa-b321-e3baf0fd96fb.png" alt="img" loading="lazy"></p>
<h3 id="4-2-将API中的返回值使用通用返回类进行封装"><a href="#4-2-将API中的返回值使用通用返回类进行封装" class="headerlink" title="4.2. 将API中的返回值使用通用返回类进行封装"></a>4.2. 将API中的返回值使用通用返回类进行封装</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658805466766-33977d93-f8cb-4ac7-8e85-19b252dea690.png" alt="img" loading="lazy"></p>
<h3 id="4-3-将注册页面的校验逻辑进行更改"><a href="#4-3-将注册页面的校验逻辑进行更改" class="headerlink" title="4.3.将注册页面的校验逻辑进行更改"></a>4.3.将注册页面的校验逻辑进行更改</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658805783927-e706d2ae-6845-4bc3-9d25-eca7ba1f9a77.png" alt="img" loading="lazy"></p>
<h3 id="4-4-测试"><a href="#4-4-测试" class="headerlink" title="4.4.测试"></a>4.4.测试</h3><p>成功出现错误描述提示。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658805719786-019ee9d0-d174-4303-8d02-0ac98291892f.png" alt="img" loading="lazy"></p>
<h3 id="4-5-将所有API的返回值都使用通用返回类进行替换"><a href="#4-5-将所有API的返回值都使用通用返回类进行替换" class="headerlink" title="4.5.将所有API的返回值都使用通用返回类进行替换"></a>4.5.将所有API的返回值都使用通用返回类进行替换</h3><p>获取当前用户</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658807621302-f324ff78-1f6d-4097-a53d-337333a72804.png" alt="img" loading="lazy"></p>
<p>登录</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658807705418-4be21683-66e0-4b8c-977a-b4841dd27563.png" alt="img" loading="lazy"></p>
<p>注销</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658807681756-dc507735-f646-4848-93c4-2ab13f1db1f2.png" alt="img" loading="lazy"></p>
<p>查询</p>
<h3 id="4-6-编写全局拦截器"><a href="#4-6-编写全局拦截器" class="headerlink" title="4.6.编写全局拦截器"></a><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658807734244-6f4cc404-8809-447b-9d34-56e7d180417f.png" alt="img" loading="lazy">4.6.编写全局拦截器</h3><p><strong>接下来就是激动人心的踩坑环节，我跟着视频踩，给我踩麻了，下面就直接整理不踩坑的步骤了。</strong></p>
<p>编写一个全局拦截器来集中取出来前端接收到的data</p>
<p>在src目录下新建一个plugins文件夹，然后新建一个名为globalRequest.ts的全局拦截器</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658817981146-405d93b0-0775-43c0-ac5b-f23127768d84.png" alt="img" loading="lazy"></p>
<p>然后输入以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*/**</span><br><span class="line">\* ** request 网络请求工具</span><br><span class="line">\* ** 更详细的 api 文档: https://github.com/umijs/umi-request</span><br><span class="line">\* **/</span><br><span class="line">*import &#123;extend&#125; from &#x27;umi-request&#x27;;import &#123;*stringify*&#125; from &quot;querystring&quot;;import &#123;history&#125; from &quot;@@/core/history&quot;;import &#123;message&#125; from &quot;antd&quot;;*/**</span><br><span class="line">\* ** 配置request请求时的默认参数</span><br><span class="line">\* **/</span><br><span class="line">*const request = extend(&#123;  credentials: &#x27;include&#x27;, *// 默认请求是否带上cookie</span><br><span class="line">\*  *// requestType: &#x27;form&#x27;,</span><br><span class="line">*&#125;);*/**</span><br><span class="line">\* ** 所有请求拦截器</span><br><span class="line">\* **/</span><br><span class="line">*request.interceptors.request.use((url, options): any =&gt; &#123;  console.log(&#x27;do request url = $&#123;url&#125;&#x27;)  return &#123;    url,    options: &#123;      ...options,      headers: &#123;      &#125;,    &#125;,  &#125;;&#125;);*/**</span><br><span class="line">\* ** 所有响应拦截器</span><br><span class="line">\* **/</span><br><span class="line">*request.interceptors.response.use(async (response): Promise&lt;any&gt; =&gt; &#123;  const res = await response.clone().json();  *//如果响应码是0，则直接将数据进行返回</span><br><span class="line">\*  if (res.code === 0)&#123;    return res.data;  &#125;  *//如果用户没有登陆跳转到登录页面</span><br><span class="line">\*  if (res.code === 40100)&#123;    message.error(&#x27;请先登录&#x27;);    history.replace(&#123;      pathname:&#x27;/user/login&#x27;,      search:*stringify*(&#123;        redirect:location.pathname,      &#125;),    &#125;);  &#125;else &#123;    message.error(res.description);  &#125;  return res.data;&#125;);export default request;</span><br></pre></td></tr></table></figure>



<p>效果如下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658819610765-bbdd1ae2-283f-4e85-9c3d-c75c491967c7.png" alt="img" loading="lazy"></p>
<p>在api.ts中引入我们自己写的全局拦截器</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658818599792-41b33264-1193-4ea4-a515-30059b7c49f5.png" alt="img" loading="lazy"></p>
<h3 id="4-7-测试"><a href="#4-7-测试" class="headerlink" title="4.7.测试"></a>4.7.测试</h3><p>注册功能，可以正常的接收参数和抛出错误提示</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658819324488-3c53bb62-7d26-4f15-a74b-8dcbffde2f8d.png" alt="img" loading="lazy"></p>
<p>如果用户是未登录状态会跳转到登录页</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658819426477-e791f742-0af6-4333-b0b2-fa7f101fa79e.png" alt="img" loading="lazy"></p>
<p>跳转成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658819444695-0c89e4c4-2df5-4cb4-bcc9-0f3e1c449e54.png" alt="img" loading="lazy"></p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>用户中心项目终笔记</title>
    <url>/2022/04/18/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83%E9%A1%B9%E7%9B%AE%E7%BB%88%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-完成注册功能的前端开发"><a href="#1-完成注册功能的前端开发" class="headerlink" title="1.完成注册功能的前端开发"></a>1.完成注册功能的前端开发</h1><p>我发现我的user目录下已经有一个register文件夹了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657889912918-ff4c5ad0-c9d2-4447-ab31-2fca2a1d72c3.png" alt="img" loading="lazy"></p>
<p>运行效果是酱婶的</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657889874523-e08d0c36-e0ee-4447-8f2f-59cb8f3b0357.png" alt="img" loading="lazy"></p>
<p>改起来忒麻烦，直接删掉，按照鱼皮的来。</p>
<hr>
<p>首先将登录部分代码复制一份名称改为Register也放在user目录下，然后打开Register中的index.tsx文件进行改造，将以下两处的Login替换为Register。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657890681042-bbab1d0e-f49e-4799-96df-560a20e9d2ce.png" alt="img" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657890729270-68af2349-2ec4-4376-90ee-12ca17972efc.png" alt="img" loading="lazy"></p>
<p>然后打开config目录下的routes.ts文件进行路由的添加</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657886603994-a58bdfd2-8e5d-4bad-b9c6-7c486e542161.png" alt="img" loading="lazy"></p>
<p>添加注册路由</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657886630202-18447bf5-1cdc-4a7e-902d-5ce1c339199c.png" alt="img" loading="lazy"></p>
<p>app.tsx 是这个前端项目的全局文件，它里面定义了刚进入页面时要执行的逻辑。</p>
<p>然后这个框架更类似于一个后台管理系统，所以每个页面都会进行校验，如果用户没登录或者没有登陆信息，就会被重定向到登录页面。</p>
<p>首先，将这行代码注释掉</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657889722720-6b75a992-fc77-4ebb-b28b-7abfe49053d7.png" alt="img" loading="lazy"></p>
<p>然后编写业务逻辑，将注册页面添加至白名单</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657889762246-892af0e4-e4aa-4d2b-8555-2b79e578bea0.png" alt="img" loading="lazy"></p>
<p>代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*//将注册页面设置到白名单</span><br><span class="line">*const whiteList = [&#x27;/user/register&#x27;,loginPath];if (whiteList.includes(location.pathname))&#123;  return;&#125;</span><br></pre></td></tr></table></figure>



<p>然后就可以正常访问啦</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657891058842-e7c327f3-9f63-4fcf-a153-a98f16e2a416.png" alt="img" loading="lazy"></p>
<h2 id="1-1-更改注册页面"><a href="#1-1-更改注册页面" class="headerlink" title="1.1 更改注册页面"></a>1.1 更改注册页面</h2><p>首先，这里改为账号密码注册</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657929006411-f2d6353c-32c5-46b8-8dbd-f0484a200e41.png" alt="img" loading="lazy"></p>
<p>然后复制一下密码表单项，用于改写密码确认表单项</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657929097952-5c1e1094-391d-4bd0-abfb-8ae5ba9a42a4.png" alt="img" loading="lazy"></p>
<p>添加确认密码表单项（每一个表单项都有一个唯一的name，框架会提取这个name和我们输入的值，将其转化为一个对象，然后我们就可以从这个对象中取出我们需要的值，我的理解是框架是根据name的值来进行取值的，类似于一个类的类名）</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657929256859-303f9c33-c18d-45f1-b0c7-f21770bbbe50.png" alt="img" loading="lazy"></p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ProFormText.Password  name=&quot;checkPassword&quot;  fieldProps=&#123;&#123;    size: &#x27;large&#x27;,    prefix: &lt;LockOutlined className=&#123;styles.prefixIcon&#125; /&gt;,  &#125;&#125;  placeholder=&#123;&#x27;请确认密码&#x27;&#125;  rules=&#123;[    &#123;      required: true,      message: &#x27;确认密码是必填项！&#x27;,    &#125;,    &#123;      min :8,      type :&#x27;string&#x27;,      message: &#x27;密码长度不能低于8位！&#x27;,    &#125;,  ]&#125;/&gt;</span><br></pre></td></tr></table></figure>

<p>自动登录和忘记密码删了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657929486713-9b5ae9ef-7d4d-4fc9-bf38-14947d33bd64.png" alt="img" loading="lazy"></p>
<p>然后全局替换，把登录改为注册</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657929853874-aa94116e-c7d7-4486-bfcd-b00f9a6fae44.png" alt="img" loading="lazy"></p>
<p>运行看一下，这样页面就精简多了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657929884818-7809af12-a405-4a23-9e54-0383180fffcb.png" alt="img" loading="lazy"></p>
<p>但是可以看到，这里仍然是登录而不是注册，因为当前页面已经全局替换过了，所以应该是进行了封装，追踪源码</p>
<p>那么如何追踪源码捏，下面是具体的步骤：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657930251178-71d82e55-fe01-4d4f-a6cc-dbd0296ff933.png" alt="img" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657930575638-3c4f8fa0-d81a-4afc-a378-7a8d24f8715b.png" alt="img" loading="lazy"></p>
<p>进入源码文件，诶嘿，看我们发现了什么</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657930768149-178e9770-4346-4891-a7e9-029c3b3443a1.png" alt="img" loading="lazy"></p>
<p>照葫芦画瓢，我们在注册页面添加如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">submitter=&#123;&#123;    searchConfig: &#123;      submitText: &quot;注册&quot;    &#125;  &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657930951224-e4067efa-5b52-4354-99fb-03011a636e66.png" alt="img" loading="lazy"></p>
<p>在运行看一下。（还是那句话，一定随时改随时查，可以知道自己错在了哪一步）</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657931058002-a99d87e6-5e03-4174-843b-bc3bcbcdca8d.png" alt="img" loading="lazy"></p>
<p>芜湖~ 成功了~</p>
<h2 id="1-2-写提交逻辑"><a href="#1-2-写提交逻辑" class="headerlink" title="1.2 写提交逻辑"></a>1.2 写提交逻辑</h2><p>首先，修改注册所需的参数，找到图中所示位置，点击进入</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657933347356-9479626c-df34-4eee-b003-3e034627ddb5.png" alt="img" loading="lazy"></p>
<p>然后就到了我最喜欢的CV环节，复制登录的参数，修改一下</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657933456731-6b53881b-1a22-44f3-9184-9429f216920b.png" alt="img" loading="lazy"></p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type RegisterParams = &#123;  userAccount?: string;  userPassword?: string;  checkPassword?: string;  type?: string;&#125;;</span><br></pre></td></tr></table></figure>



<p>回到index.tsx，将登录参数全部改为注册参数。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657933619411-0c6fde57-fd85-4016-953c-a5c9296efdcf.png" alt="img" loading="lazy"></p>
<p>添加校验逻辑</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657933850640-705afb35-bb0b-4e03-a738-52a3d28eb478.png" alt="img" loading="lazy"></p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const &#123;userPassword,checkPassword&#125; = values;*//校验</span><br><span class="line">*if (userPassword !== checkPassword)&#123;  message.error(&#x27;两次输入的密码不一致&#x27;);  return;&#125;</span><br></pre></td></tr></table></figure>

<p>然后点击进入登录接口逻辑<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657933971492-4cfa9844-b359-41be-a5ce-68dd06f06f2a.png" alt="img" loading="lazy"></p>
<p>然后开始CV，把代码修改一下</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657934241825-0e4093f9-3170-42f1-9c95-c6feeaa8a79b.png" alt="img" loading="lazy"></p>
<p>发现这里有个登陆接口的返回值，点进去CV，首先看一下后端返回的是什么类型的数据</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657934451859-e338a271-f53b-4717-a8b2-cb8fda1a7b81.png" alt="img" loading="lazy"></p>
<p>发现后端返回的是long类型，那我们前段就用number来接收</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657934501593-4fefc3d4-a3f8-4bd4-98d9-5d22f3dd851c.png" alt="img" loading="lazy"></p>
<p>然后回到接口页面，将返回值改成RegisterResult</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657934567130-989ef4e8-3a80-4363-b232-7a0262bd951d.png" alt="img" loading="lazy"></p>
<p>然后再回到index.tsx页面编写注册逻辑</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657935046287-c1750885-e277-4f93-ae95-ef6a46bef8ff.png" alt="img" loading="lazy"></p>
<p>代码如下：</p>
<p>&#96;try {  <em>&#x2F;&#x2F; 注册<br>*  const id &#x3D; await <em>register</em>(values);  if (id &gt; 0) {    const defaultLoginSuccessMessage &#x3D; ‘注册成功！’;    message.success(defaultLoginSuccessMessage);    <em>&#x2F;</em></em> 此方法会跳转到 redirect 参数所在的位置 *&#x2F;</p>
<p>*    if (!history) return;    const {query} &#x3D; history.location;    const {redirect} &#x3D; query as {      redirect: string;    };    history.push(‘&#x2F;user&#x2F;login?redirect&#x3D;’+redirect);    return;  }else {    *&#x2F;&#x2F;记录下id的值，方便以后排错<br>*    throw new Error(‘register error id &#x3D; ${id}’)  }} catch (error) {  const defaultLoginFailureMessage &#x3D; ‘注册失败，请重试！’;  message.error(defaultLoginFailureMessage);}&#96;</p>
<p>然后爆红的位置全部删了就行，或者使用Ctrl+Alt+O清除。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657935134377-89b7a49b-814b-4201-8377-f1d96bf04d8c.png" alt="img" loading="lazy"></p>
<p>然后就是删删删环节，哪里红了删哪里，记得边删边运行，不能删的赶紧恢复回来。</p>
<p>运行一下，发现没毛病。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657935540467-94a513cd-24f6-45ff-b1b8-5238169f64f9.png" alt="img" loading="lazy"></p>
<p>然后我们来到激动人心的测试环节</p>
<h2 id="1-3-测试"><a href="#1-3-测试" class="headerlink" title="1.3 测试"></a>1.3 测试</h2><ol>
<li>后端打上断点，debug模式启动</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657935640340-199c5991-a979-405e-865c-1d4e00c1df99.png" alt="img" loading="lazy"></p>
<p>前端也打开开发者模式进行调试</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657935690773-60e193f1-95b1-47cf-9bd2-c127ef763c32.png" alt="img" loading="lazy"></p>
<p>然后发现后端接收到了参数</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657935724306-73def634-64a9-4ea4-913d-5312cb0c8d1f.png" alt="img" loading="lazy"></p>
<p>但是因为Debug超时，所以我们把超时时间调长一点，尽量长一点，比如100000</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657935882619-03653bdb-1ee7-4d16-b0f9-cfdd0a41d81e.png" alt="img" loading="lazy"></p>
<p>重新测试，然后发现返回值-1</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657935956380-586c0e60-4637-4d4f-a054-de8a1aca5591.png" alt="img" loading="lazy"></p>
<p>这是因为我们数据库里已经有bubble账户了，那我们重新建一个</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657936056309-ac2061ff-9a27-47cb-ad6e-597a45623021.png" alt="img" loading="lazy"></p>
<p>然后发现新建成功，数据库中也有数据了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657936101044-e3d228b1-13e1-4e11-853b-4141f6ef993f.png" alt="img" loading="lazy"></p>
<p>但是注册成功也没有一个比较友好的提示，后期要优化一下</p>
<p>并且可以发现url哪里重定向有点小bug，进行修复一下</p>
<p>在index.tsx页面修改一下以下代码</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657936278820-48beea7e-034e-4ce6-8a15-5c20bbd22fe4.png" alt="img" loading="lazy"></p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (!history) return;const &#123;query&#125; = history.location;history.push(&#123;  pathname:&#x27;user/login&#x27;,  query&#125;);return;</span><br></pre></td></tr></table></figure>

<p>然后运行，效果好多了。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657937026330-3043d74e-9539-416a-910f-047dd2a201ba.png" alt="img" loading="lazy"></p>
<p>然后又发现登录页面没有注册的链接，去Login的index.tsx添加如下代码：（很明显，皮总有强迫症，这里纠结了一年(<em>^▽^</em>)）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Space split=&#123;&lt;Divider type=&quot;vertical&quot;/&gt;&#125;&gt;  &lt;ProFormCheckbox noStyle name=&quot;autoLogin&quot;&gt;    自动登录  &lt;/ProFormCheckbox&gt;  &lt;Link to=&quot;/user/register&quot;&gt;新用户注册&lt;/Link&gt;  &lt;a    style=&#123;&#123;      float: &#x27;right&#x27;,    &#125;&#125;    href=&#123;PLANET_LINK&#125;    target=&quot;_blank&quot; rel=&quot;noreferrer&quot;  &gt;    忘记密码  &lt;/a&gt;&lt;/Space&gt;</span><br></pre></td></tr></table></figure>



<p>效果如图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657936752623-31c12494-f262-4a2d-a7a7-41f0b6da269b.png" alt="img" loading="lazy"></p>
<p>运行效果（看着还行）：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657936806426-9304ee27-a66c-4b3b-9d37-8e7dcb6770b8.png" alt="img" loading="lazy"></p>
<h1 id="2-完成用户管理后台的前端开发"><a href="#2-完成用户管理后台的前端开发" class="headerlink" title="2. 完成用户管理后台的前端开发"></a>2. 完成用户管理后台的前端开发</h1><h2 id="2-1-后端编写获取当前登录用户信息的接口"><a href="#2-1-后端编写获取当前登录用户信息的接口" class="headerlink" title="2.1 后端编写获取当前登录用户信息的接口"></a>2.1 后端编写获取当前登录用户信息的接口</h2><p>在后端Controller中编写以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@GetMapping***(*****&quot;/current&quot;*****)</span><br><span class="line">*****public** User getCurrentUser***(***HttpServletRequest request***) &#123;***</span><br></pre></td></tr></table></figure>

<p><em>&#x2F;&#x2F;获取用户登录态</em>&#96;***<br>***    Object userObj &#x3D; request.getSession***()<em><strong>.getAttribute</strong></em>(USER_LOGIN_STATE)***;    User currentUser &#x3D; <em><strong>(<em><strong>User</strong></em>)</strong></em> userObj;    *&#x2F;&#x2F;如果当前用户为空，直接返回null<br>*    <strong>if</strong> ***(<em><strong>currentUser &#x3D;&#x3D; <strong>null</strong></strong></em>) {<br>***        <strong>return null</strong>;    <em><strong>}<br>***    <em>&#x2F;&#x2F;获取当前用户ID<br>*    Long currentUserId &#x3D; currentUser.getId</em></strong>()</em>**;    *&#x2F;&#x2F;****TODO 校验用户是否合法</p>
<p>***    User user &#x3D; <strong>userService</strong>.getById***(<em><strong>currentUserId</strong></em>)<em><strong>;    <em>&#x2F;&#x2F;脱敏<br>*    <strong>return</strong> <strong>userService</strong>.getSafetyUser</em></strong>(<em><strong>user</strong></em>)</em><strong>;</strong><em>}</em>**&#96;</p>
<p>效果如图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657940599623-67a23b98-5c61-4855-94dc-e5b7fa1c7ab5.png" alt="img" loading="lazy"></p>
<p>然后发现ServiceImpl中的脱敏操作中没有判空操作</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657940560990-6aec8bd7-13b0-4540-8cd9-4d9cda2a4a85.png" alt="img" loading="lazy"></p>
<p>进行添加：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657940737884-3a21f74f-0ed8-4237-8326-6ef1f3522a83.png" alt="img" loading="lazy"></p>
<h2 id="2-1-前端编写获取当前登录用户信息的接口"><a href="#2-1-前端编写获取当前登录用户信息的接口" class="headerlink" title="2.1 前端编写获取当前登录用户信息的接口"></a>2.1 前端编写获取当前登录用户信息的接口</h2><p>首先在app.tsx中找到queryCurrentUser，点击进入当前用户的接口</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657941126110-998b9e7e-b2df-406a-80df-ddfd19ebfae0.png" alt="img" loading="lazy"></p>
<p>然后将下面这段代码进行修改</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657941195656-f908bdbe-4993-4547-b42d-7b99517f73e5.png" alt="img" loading="lazy"></p>
<p>改成下面这个样子（我也不懂前端，这里皮总踩坑的步骤就直接给省略了）</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657941328796-ac025b6f-4af4-4523-ae00-a051e8d740b3.png" alt="img" loading="lazy"></p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*/** 获取当前的用户 GET /api/user/current \*/</span><br><span class="line">*export async function *currentUser*(options?: &#123; [key: string]: any &#125;) &#123;  return *request*&lt;API.CurrentUser&gt;(&#x27;/api/user/current&#x27;, &#123;    method: &#x27;GET&#x27;,    ...(options || &#123;&#125;),  &#125;);&#125;</span><br></pre></td></tr></table></figure>

<p>然后回到app.tsx，点击进入到CurrentUser中都有些什么参数</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657941454484-8dd5fe1a-8ded-4cdc-b9eb-85d141d76a0c.png" alt="img" loading="lazy"></p>
<p>然后发现给提供了这么多的参数，把这些参数进行注释，更换为我们数据库中的字段参数</p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*//这里的？代表能不能为空，加了代表是不是必填</span><br><span class="line">*id: number;username: string;userAccount: string;avatarUrl?: string;gender: number;phone: string;email: string;userStatus: number;createTime: Date;userRole: number;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657957540828-5b9335fe-4942-41cd-ac4a-d0684588dd5b.png" alt="img" loading="lazy"></p>
<p>然后回到app.tsx中，修改获取用户信息的方法</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657942006481-7f7bae16-53d1-4114-98c9-d39dd89b33af.png" alt="img" loading="lazy"></p>
<p>修改为：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657942106821-a030e95b-2557-4d2a-8103-ec5a93046190.png" alt="img" loading="lazy"></p>
<p>然后将白名单提到上面，然后<strong>Shift+F6进行重构</strong>为NO_NEND_LOGIN_WHITE_LIST（免登录白名单）<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657954970730-966238c6-43c1-4038-a3ee-d306a50c0883.png" alt="img" loading="lazy"></p>
<p>即改为下面这样</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657955151666-e0db2a4c-9879-472e-8c6e-8ebe33a3e8c0.png" alt="img" loading="lazy"></p>
<p>然后改这里的路径拦截：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657955242734-d14f3065-8180-45a1-bce9-a1760bd67dfb.png" alt="img" loading="lazy"></p>
<p>将其改为：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657955639052-71058bd1-0c4b-4497-8c49-d4d7765a6c23.png" alt="img" loading="lazy"></p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (NO_NEND_LOGIN_WHITE_LIST.includes(history.location.pathname)) &#123;  return &#123;    *// @ts-ignore</span><br><span class="line">\*    fetchUserInfo,    settings: defaultSettings,  &#125;;&#125;*// eslint-disable-next-line @typescript-eslint/no-shadow</span><br><span class="line">*const currentUser = await fetchUserInfo();return &#123;  *// @ts-ignore</span><br><span class="line">\*  fetchUserInfo,  currentUser,  settings: defaultSettings,&#125;;</span><br></pre></td></tr></table></figure>



<p>然后发现还有一个错，水印，这里的name改为username</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657955744429-ad40417d-64eb-403b-9e26-0842455b85cb.png" alt="img" loading="lazy"></p>
<p>然后运行，输入账号密码点击登录，登陆成功！</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657955903243-bb8a5006-edc9-4ddc-aec8-9bfe51a38e70.png" alt="img" loading="lazy"></p>
<p>但是发现，我们既没有用户名的水印，也没有头像，这是为啥呢</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657955939321-e59aa4e2-822b-4726-96fb-e4ef4e96fc2e.png" alt="img" loading="lazy"></p>
<p>emmm，因为我们就没加，去数据库里进行数据添加。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657956061895-a76ee92b-727a-4a7e-aaef-1b6cb1102bae.png" alt="img" loading="lazy"></p>
<p>然后刷新页面，发现返回了数据，但是头像和水印仍然没有显示</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657963795823-0d4b15fa-dd25-4f31-b69f-41d3e86c874a.png" alt="img" loading="lazy"></p>
<p>可能是我们的字段名和前端对应不上的问题</p>
<p>全局搜索avatardropdown</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657957032340-19e5376d-26c2-4f7a-9889-f907abbc9567.png" alt="img" loading="lazy"></p>
<p>打开AvatarDropdown.tsx文件</p>
<p>将avatar重构为avatarUrl，name换为username<strong>（根据自己实际数据库中的字段名来，我的是userName，因为这个字段名的一个大小写，我废了两三个小时。。。。。一定要严谨啊）</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657965751565-928964d0-e704-4f74-bd50-8253956b94cb.png" alt="img" loading="lazy"></p>
<p>然后刷新页面，看一下，头像已经可以出来了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657966904068-aa3e5394-b0f2-4670-b6f9-624f0b19670a.png" alt="img" loading="lazy"></p>
<p>但是水印还是没有出来，改了好久也不知道是哪里的问题，先留着吧，以后用到了再说。</p>
<h2 id="2-3-用户管理后台"><a href="#2-3-用户管理后台" class="headerlink" title="2.3 用户管理后台"></a>2.3 用户管理后台</h2><p>搞了半天我发现我没有装umi-ui</p>
<p>在终端输入如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add @umijs/preset-ui -D</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657939846578-920696bc-e428-4080-abb6-14844855c99f.png" alt="img" loading="lazy"></p>
<p>然后等待安装完成，刷新页面，这碗小米饭就出来了。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657939876039-0c55740d-4afb-411f-b9f9-c7b4759a7c0b.png" alt="img" loading="lazy"></p>
<p>首先，在pages文件夹下新建一个文件夹名为admin</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658628959263-fb501b27-9e30-494c-951a-f638d60601cb.png" alt="img" loading="lazy"></p>
<p>然后将user文件夹下的Register文件夹复制到admin文件夹中并改名为UserManage</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658628979877-2a1c70de-40bf-4fc0-a27a-f47e0c461988.png" alt="img" loading="lazy"></p>
<p>在routes.ts下添加路由</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658665523712-67ba763c-2a85-4c82-a4fc-7f5a2d291b52.png" alt="img" loading="lazy"></p>
<p>访问一下，发现无权访问</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658665446221-53fe3558-920b-472b-9e89-09222f1bba6a.png" alt="img" loading="lazy"></p>
<p>这是因为ant desgin中包含了权限控制，如下图，admin的路由只能管理员进行访问</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658665585568-ac9238e1-e992-490e-950a-6e1758fdc39a.png" alt="img" loading="lazy"></p>
<p>按住Ctrl点击进入CanAdmin，发现我们进入了access.ts文件</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658665654542-a805369b-37cc-4ecc-9552-bdfe9c6f6a4f.png" alt="img" loading="lazy"></p>
<p>access.ts文件中定义了对用户的访问权限，我们将它改为我们的管理员鉴权操作，即userRole，如下图</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658665744490-bbbefa98-da95-4f79-943c-90b1b25d118d.png" alt="img" loading="lazy"></p>
<p>重新访问 ，发现可以了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658707621000-8e4516a6-9794-46e7-b774-01238c961382.png" alt="img" loading="lazy"></p>
<p>但是这并不是我们放在UserManage中的注册页面，这是怎么回事呢？</p>
<p>这是因为Admin.ts已经把页面写死了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658707718536-d588143a-7eac-42e1-9684-485d29776e41.png" alt="img" loading="lazy"></p>
<p>我们需要对他进行改写，首先将图中内容删除</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658707800433-d67a29b2-0bfd-47e2-be51-e89b44d15104.png" alt="img" loading="lazy"></p>
<p>然后进行改写，在下图中的位置通过引入children属性来添加子页面</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658707925609-c76bb4b1-6801-4145-8f78-f20291716028.png" alt="img" loading="lazy"></p>
<p>也可以这么写</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658708123401-6604d3ff-75ce-4f93-931f-5429c3cb024f.png" alt="img" loading="lazy"></p>
<p>效果都是从当前页面读取页面的子路由从而得到当前页面的子页面。</p>
<p>刷新页面，发现子页面出来了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658707974817-6866d1f1-63b1-4189-96d7-565138edc5cf.png" alt="img" loading="lazy"></p>
<p>美观一下，把这里删了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658708217085-ce56ac8c-16c3-4e0e-b0b0-128ffea5e446.png" alt="img" loading="lazy"></p>
<p>然后开始改造我们的用户管理页面，将图中标记的代码全部删掉</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658708544351-d765bdb4-a935-4ab2-b3ed-103811fc5c3c.png" alt="img" loading="lazy"></p>
<p>然后将其改造为下图这样，给div一个唯一标识，这样方便以后通过css来更好的修改样式</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658708625232-e21cb917-f8a7-4148-bacf-9915f0db7fa7.png" alt="img" loading="lazy"></p>
<p>然后对Register进行全局替换，替换为UserManage</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658708672498-259ba88e-6881-4e8c-9b2f-fdf2e00e5bc8.png" alt="img" loading="lazy"></p>
<p>然后我们开始添加组件，组件地址：<a href="https://procomponents.ant.design/">组件库</a></p>
<p>选择高级表格</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658708995623-219d28b7-2eed-48e2-8f24-74e618d5a8f1.png" alt="img" loading="lazy"></p>
<p>然后找到我们想要的组件，第一个就不错，直接<strong>CV</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658709090448-1795d32c-61e5-48a0-921f-8bd36a6f6a77.png" alt="img" loading="lazy"></p>
<p>直接覆盖掉原来用户管理的页面</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658709215764-f0c8a38e-77d7-408c-9750-8f468c7c77e0.png" alt="img" loading="lazy"></p>
<p>然后开始改造页面</p>
<p>这个菜单用不到，删掉。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658709272752-566006c9-97d1-486a-bc6f-3c0978bf2470.png" alt="img" loading="lazy"></p>
<p>工具栏用不到，删掉。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658709326860-c0aa2b3b-e558-45ef-8e79-b70364574d29.png" alt="img" loading="lazy"></p>
<p>然后刷新页面，发现效果就出来了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658709693029-5b2f2673-fd45-4851-b282-a3e293d9699c.png" alt="img" loading="lazy"></p>
<p>然后继续改造，第一个红框部分删除</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658710014944-536c792e-ae12-4109-af54-9eb86a2f339d.png" alt="img" loading="lazy"></p>
<hr>
<h4 id="ProComponents高级表单介绍"><a href="#ProComponents高级表单介绍" class="headerlink" title="ProComponents高级表单介绍"></a>ProComponents高级表单介绍</h4><ol>
<li><p>columns定义表格的列</p>
</li>
<li><p>columns属性</p>
</li>
<li><ol>
<li>dataIndex：对应返回数据对象的属性</li>
<li>title：表格所展示的列名</li>
<li>copyable：是否可复制</li>
<li>ellipsis：是否允许缩略</li>
<li>valueType：用于声明这一列的类型</li>
</ol>
</li>
</ol>
<hr>
<p>然后开始改造表格的列，将表格改为我们数据库中的所需要的字段名，代码如下：（记得要改的是自己数据库中的字段名，我的userName，你们的可能是username，要和自己的对应，不然出错不好找）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;  dataIndex: &#x27;id&#x27;,  valueType: &#x27;indexBorder&#x27;,  width: 48,&#125;,&#123;  title: &#x27;用户名&#x27;,  dataIndex: &#x27;userName&#x27;,  copyable: true,&#125;,&#123;  title: &#x27;用户账户&#x27;,  dataIndex: &#x27;userAccount&#x27;,  copyable: true,&#125;,&#123;  title: &#x27;头像&#x27;,  dataIndex: &#x27;avatarUrl&#x27;,  copyable: true,&#125;,&#123;  title: &#x27;性别&#x27;,  dataIndex: &#x27;gender&#x27;,&#125;,&#123;  title: &#x27;电话&#x27;,  dataIndex: &#x27;phone&#x27;,  copyable: true,&#125;,&#123;  title: &#x27;邮件&#x27;,  dataIndex: &#x27;email&#x27;,  copyable: true,&#125;,&#123;  title: &#x27;状态&#x27;,  dataIndex: &#x27;userStatus&#x27;,&#125;,&#123;  title: &#x27;角色&#x27;,  dataIndex: &#x27;userRole&#x27;,&#125;,&#123;  title: &#x27;创建时间&#x27;,  dataIndex: &#x27;createTime&#x27;,</span><br><span class="line">valueType: &#x27;dateTime&#x27;,``&#125;,</span><br></pre></td></tr></table></figure>

<p>效果如图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658711087069-e4bde53b-67c7-4781-b6ff-4e523496c09a.png" alt="img" loading="lazy"></p>
<p>然后将一下代码注释掉：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658711249503-19918b27-3ae4-46c6-8f22-58a622023a32.png" alt="img" loading="lazy"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658711264271-60bc5167-02ab-4840-ade4-566353b5c08f.png" alt="img" loading="lazy"></p>
<p>然后列写完了，开始改写组件，首先我们需要写一个查询用户的接口，在api.ts文件中添加，将以下代码进行改写</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658712012599-99022c58-afee-4e13-8b7f-9ec6388fe5c3.png" alt="img" loading="lazy"></p>
<p>改写为</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658712110016-5ce8c804-8311-4dbb-9537-219dfdfbc092.png" alt="img" loading="lazy"></p>
<p>代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*/** 用户查询 GET /api/user/search \*/</span><br><span class="line">*export async function *searchUsers*(options?: &#123; [key: string]: any &#125;) &#123;  return *request*&lt;API.NoticeIconList&gt;(&#x27;/api/user/search&#x27;, &#123;    method: &#x27;GET&#x27;,    ...(options || &#123;&#125;),  &#125;);&#125;</span><br></pre></td></tr></table></figure>

<p>然后回到index.tsx改写以下代码</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658712212418-d44046a4-fd77-45d5-913c-928b0801ac85.png" alt="img" loading="lazy"></p>
<p>改写为</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658712400893-bc5e06c5-f374-4952-a0c7-dc39ea28e7f9.png" alt="img" loading="lazy"></p>
<p>然后刷新页面试试（记得使用管理员身份登录才可以查询得到）</p>
<p>当当当当！</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658712474929-3b6ce22b-a3c4-4045-bb75-91e3f5e56c27.png" alt="img" loading="lazy"></p>
<p>但是我的头像这一栏怎么这么长，把可缩略添加上</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658712560382-5ae4d756-6095-4ac8-99fb-744f00c58a1c.png" alt="img" loading="lazy"></p>
<p>再次刷新页面</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658712577840-0a67abae-4c2f-4b2f-abe1-0b0ff1c9a406.png" alt="img" loading="lazy"></p>
<p>但是我们发现头像显示的是链接，不是图片，这里可以修改一下头像的渲染逻辑。</p>
<p>改为如下代码，因为已经是显示图片了，就不用缩略了，注释就好了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658713175840-9f506d1f-b120-41ed-8bba-3a36a4459525.png" alt="img" loading="lazy"></p>
<p>代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;  title: &#x27;头像&#x27;,  dataIndex: &#x27;avatarUrl&#x27;,  *// ellipsis: true,</span><br><span class="line">\*  render: (_, record) =&gt; (    &lt;div&gt;      &lt;Image src=&#123;record.avatarUrl&#125; width=&#123;100&#125;/&gt;    &lt;/div&gt;  ),  copyable: true,&#125;,</span><br></pre></td></tr></table></figure>



<p>刷新页面</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658713261975-b749ba2a-dcff-4e87-9227-a095bb5de902.png" alt="img" loading="lazy"></p>
<p>头像成功显示，但是用户角色一栏显示0和1感觉不太友好，优化一下</p>
<p>在角色部分添加以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">valueEnum: &#123;  0:&#123;text:&#x27;普通用户&#x27;,    status:&#x27;Default&#x27;,  &#125;,  1:&#123;    text:&#x27;管理员&#x27;,    status:&#x27;Success&#x27;,  &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>效果如图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658713597379-08b9d49a-92fa-40e2-a623-3ccb35738b6c.png" alt="img" loading="lazy"></p>
<p>刷新页面，显示成功，完美！</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1658713642989-28df4599-5749-46d3-b601-826beab36429.png" alt="img" loading="lazy"></p>
<h1 id="3-前端代码瘦身-amp-优化"><a href="#3-前端代码瘦身-amp-优化" class="headerlink" title="3. 前端代码瘦身 &amp; 优化"></a>3. 前端代码瘦身 &amp; 优化</h1><p><strong>鸽</strong></p>
<h1 id="4-后端代码优化"><a href="#4-后端代码优化" class="headerlink" title="4. 后端代码优化"></a>4. 后端代码优化</h1><p><strong>鸽</strong></p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>移除元素</title>
    <url>/2022/03/24/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Leecode27-移除元素"><a href="#Leecode27-移除元素" class="headerlink" title="Leecode27. 移除元素"></a>Leecode27. 移除元素</h2><p>给你一个数组 nums 和一个值 val，你需要 <strong>原地</strong> 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 <strong>原地</strong> 修改输入数组。</p>
<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>
<p>示例 1：</p>
<blockquote>
<p>输入：nums &#x3D; [3,2,2,3], val &#x3D; 3<br>输出：2, nums &#x3D; [2,2]</p>
<p>解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为2 ，而 nums &#x3D; [2,2,3,3] 或 nums &#x3D; [2,2,0,0]，也会被视作正确答案。</p>
</blockquote>
<p> 示例 2：</p>
<blockquote>
<p>输入：nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2<br>输出：5, nums &#x3D; [0,1,4,0,3]<br>解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p>
</blockquote>
<p>提示：</p>
<ul>
<li>0 &lt;&#x3D; nums.length &lt;&#x3D; 100 </li>
<li>0 &lt;&#x3D; nums[i] &lt;&#x3D; 50 </li>
<li>0 &lt;&#x3D; val &lt;&#x3D; 100</li>
</ul>
<h2 id="习题解析："><a href="#习题解析：" class="headerlink" title="习题解析："></a>习题解析：</h2><p>因为数组元素在内存中是连续存储的，所以不能单独删除其中某个元素，只能选择覆盖方式，双重循环暴力解法可以解决此问题，但时间复杂度较高，为O(N^2)，所以可以采用双指针中的快慢指针来节省时间，快指针指向当前第一个不为目标元素的值（即如果执行覆盖操作第一个用于覆盖的值），慢指针指向需要第一个需要被覆盖的元素，然后快指针的值覆盖慢指针的值，然后一直向后遍历至快指针到达数组尾部，此时慢指针所指向的位置即为所有有效元素的长度。</p>
<h2 id="习题代码："><a href="#习题代码：" class="headerlink" title="习题代码："></a>习题代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>,fast = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fast &lt; nums.length)&#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[fast] != val)&#123;</span><br><span class="line">          nums[slow] = nums[fast];</span><br><span class="line">          slow++;</span><br><span class="line">      &#125;</span><br><span class="line">      fast++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>时间复杂度:O(N)</strong></li>
<li><strong>空间复杂度:O(1)</strong></li>
</ul>
<h2 id="习题链接"><a href="#习题链接" class="headerlink" title="习题链接"></a>习题链接</h2><p><a href="https://leetcode-cn.com/problems/remove-element/">点我跳转习题</a></p>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>编码集小课糖</title>
    <url>/2022/04/07/%E7%BC%96%E7%A0%81%E9%9B%86%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-ASCII码"><a href="#1-ASCII码" class="headerlink" title="1. ASCII码"></a>1. ASCII码</h1><ol>
<li>上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为<code>ASCII码</code>，一直沿用至今。 </li>
<li>ASCII码一共规定了128个字符的编码，只占用了一个字节的后七位，最前面的1为统一规定为0。（提示：一个字节可以表示256个字符，ASCII码只用128个字符）。</li>
<li><strong>缺点：</strong>不能表示所有字符。</li>
</ol>
<h1 id="2-Unicode编码"><a href="#2-Unicode编码" class="headerlink" title="2. Unicode编码"></a>2. Unicode编码</h1><ol>
<li><strong>优点：</strong>Unicode将世界上所有的符号都纳入其中，每一个符号都给予了独一无二的编码，使用Unicode不会有乱码的问题。</li>
<li><strong>缺点：</strong>一个英文字母和汉字都占用<code>两个字节</code>，比较浪费存储空间。</li>
<li>编码0 - 127的字符和ASCII的编码一样。比如字符<code>a</code>在ASCII码中是<code>0x61</code>，在Unicode编码中是<code>0x0061</code>，都对应97，所以<code>Unicode编码兼容ASCII编码</code>。</li>
</ol>
<h1 id="3-UTF-8编码"><a href="#3-UTF-8编码" class="headerlink" title="3. UTF-8编码"></a>3. UTF-8编码</h1><p>互联网的普及，强烈要求出现一种统一的编码方式。<code>UTF-8就是在互联网上使用最广的一种unicode的实现方式</code>。</p>
<ol>
<li>UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~6个字节表示一个符号，根据不同的符号而变化字节长度。 </li>
<li>使用<code>大小可变的编码</code>，字母占1个字节，汉字占3个字节。</li>
</ol>
]]></content>
      <categories>
        <category>Java知识点</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络面试题整理</title>
    <url>/2022/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="HTTP协议中浏览器和服务器进行交互的四种方法？"><a href="#HTTP协议中浏览器和服务器进行交互的四种方法？" class="headerlink" title="HTTP协议中浏览器和服务器进行交互的四种方法？"></a>HTTP协议中浏览器和服务器进行交互的四种方法？</h2><p>基本方法有四种，分别是Get，Post，Put，Delete，这四种方法可以理解为对服务器资源的增删改查。</p>
<ul>
<li><strong>Get：</strong>从服务器上获取数据，也就是所谓的查，仅仅是获取服务器资源，不进行修改。</li>
<li><strong>Post：</strong>向服务器提交数据，这涉及到了数据的更改，也就是更改服务器的数据。</li>
<li><strong>Put：</strong>向服务器新添加数据</li>
<li><strong>Delete：</strong>删除服务器的数据</li>
</ul>
<hr>
<h2 id="Forword和Redirect的区别？"><a href="#Forword和Redirect的区别？" class="headerlink" title="Forword和Redirect的区别？"></a>Forword和Redirect的区别？</h2><ul>
<li><p>浏览器URL地址：</p>
</li>
<li><ul>
<li>Forward是浏览器内部的重定向，服务器内部请求某个Servlet，然后获取响应的内容，浏览器的URL地址是不会变化的。</li>
<li>Redirect是客户端请求服务器，然后服务器给客户端返回了一个302和一个新的location，客户端重新发起HTTP请求，服务器给客户端响应location对应的URL地址，浏览器的URL地址发生了变化。</li>
</ul>
</li>
<li><p>数据的共享：</p>
</li>
<li><ul>
<li>Forward是服务器内部的重定向，request请求在整个重定向的过程中是不变的，request中的信息在Servlet间是共享的。</li>
<li>Redirect发起了两次的HTTP请求分别是使用的不同的request。</li>
</ul>
</li>
<li><p>请求的次数：</p>
</li>
<li><ul>
<li>Forward只有一次请求</li>
<li>Redirect有两次请求。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="Get请求和Post请求的区别？"><a href="#Get请求和Post请求的区别？" class="headerlink" title="Get请求和Post请求的区别？"></a>Get请求和Post请求的区别？</h2><ul>
<li><p><strong>用途：</strong></p>
</li>
<li><ul>
<li>get请求用来从服务器获取资源</li>
<li>post请求用来想服务器提交数据</li>
</ul>
</li>
<li><p><strong>请求参数：</strong></p>
</li>
<li><ul>
<li>Get请求方式是不安全的，因为它会把参数<strong>明文放在url中</strong>；</li>
<li>而Post请求方式是通过<strong>请求体</strong>来传递参数的。</li>
</ul>
</li>
<li><p><strong>数据的大小：</strong></p>
</li>
<li><ul>
<li>Get请求提交的url中数据最多<strong>只能是2048字节</strong>，这个限制是浏览器或者服务器添加的；</li>
<li>Post请求传输的数据理论上没有大小限制。</li>
</ul>
</li>
<li><p><strong>编码方式：</strong></p>
</li>
<li><ul>
<li>GET 编码格式只<strong>能用ASCII码</strong></li>
<li>POST没有限制</li>
</ul>
</li>
<li><p><strong>缓存：</strong></p>
</li>
<li><ul>
<li>get请求可以被浏览器缓存并可以被收藏为标签</li>
<li>post请求不会被浏览器缓存也不能被收藏为标签</li>
</ul>
</li>
</ul>
<hr>
<h2 id="TCP-协议如何保证可靠传输"><a href="#TCP-协议如何保证可靠传输" class="headerlink" title="TCP 协议如何保证可靠传输"></a>TCP 协议如何保证可靠传输</h2><ol>
<li>应用数据被分割成 TCP 认为最适合发送的数据块。</li>
<li>TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。</li>
<li><strong>校验和：</strong> TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</li>
<li>TCP 的接收端会丢弃重复的数据。</li>
<li><strong>流量控制：</strong> TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）</li>
<li><strong>拥塞控制：</strong> 当网络拥塞时，减少数据的发送。</li>
<li><strong>ARQ协议：</strong> 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。</li>
<li><strong>超时重传：</strong> 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。</li>
</ol>
<hr>
<h2 id="TCP和UDP的区别，以及各自的优缺点？"><a href="#TCP和UDP的区别，以及各自的优缺点？" class="headerlink" title="TCP和UDP的区别，以及各自的优缺点？"></a>TCP和UDP的区别，以及各自的优缺点？</h2><ol>
<li>TCP是面向连接的（比如打电话之前需要先拨号建立连接）；UDP是无连接的，即发送数据之前不需要建立连接；</li>
<li>TCP提供可靠的传输，通过TCP传输的数据是无差错、不丢失、不重复且按序到达；UDP是尽最大努力交付，即不保证可靠交付。</li>
<li>UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高要求的通信。</li>
<li>每一条TCP连接都只能是点对点的；而UDP支持一对一、一对多、多对一、多对多的交互通信</li>
<li>TCP对系统资源要求较多，UDP对系统资源要求较少。</li>
</ol>
<hr>
<h2 id="滑动窗口和流量控制"><a href="#滑动窗口和流量控制" class="headerlink" title="滑动窗口和流量控制"></a>滑动窗口和流量控制</h2><p><strong>TCP 利用滑动窗口实现流量控制。流量控制是为了控制发送方发送速率，保证接收方来得及接收。</strong> 接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</p>
<hr>
<h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><p>在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种情况就叫拥塞。拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机，所有的路由器，以及与降低网络传输性能有关的所有因素。相反，流量控制往往是点对点通信量的控制，是个端到端的问题。流量控制所要做到的就是抑制发送端发送数据的速率，以便使接收端来得及接收。</p>
<p>为了进行拥塞控制，TCP 发送方要维持一个 <strong>拥塞窗口(cwnd)</strong> 的状态变量。拥塞控制窗口的大小取决于网络的拥塞程度，并且动态变化。发送方让自己的发送窗口取为拥塞窗口和接收方的接受窗口中较小的一个。</p>
<p>TCP的拥塞控制采用了四种算法，即 <strong>慢开始</strong> 、 <strong>拥塞避免</strong> 、<strong>快重传</strong> 和 <strong>快恢复</strong>。在网络层也可以使路由器采用适当的分组丢弃策略（如主动队列管理 AQM），以减少网络拥塞的发生。</p>
<ul>
<li><strong>慢开始：</strong> 慢开始算法的思路是当主机开始发送数据时，如果立即把大量数据字节注入到网络，那么可能会引起网络阻塞，因为现在还不知道网络的符合情况。经验表明，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。cwnd初始值为1，每经过一个传播轮次，cwnd加倍。</li>
<li><strong>拥塞避免：</strong> 拥塞避免算法的思路是让拥塞窗口cwnd缓慢增大，即每经过一个往返时间RTT就把发送放的cwnd加1.</li>
<li><strong>快重传与快恢复：</strong> 在 TCP&#x2F;IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。 　当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。</li>
</ul>
<hr>
<h2 id="说一下-HTTP-和-HTTPS-的区别"><a href="#说一下-HTTP-和-HTTPS-的区别" class="headerlink" title="说一下 HTTP 和 HTTPS 的区别"></a>说一下 HTTP 和 HTTPS 的区别</h2><ul>
<li><strong>端口不同：</strong>HTTP和 HTTPS 的连接方式不同，的端口也不一样，HTTP是80， HTTPS 用的是443 </li>
<li><strong>消耗资源：</strong>和HTTP相比，HTTPS通信会因为加解密的处理消耗更多的CPU和内存资源。 </li>
<li><strong>开销：</strong> HTTPS 通信需要证书，这类证书通常需要向认证机构申请或者付费购买。</li>
</ul>
<hr>
<h2 id="说一下HTTP的长连接与短连接的区别"><a href="#说一下HTTP的长连接与短连接的区别" class="headerlink" title="说一下HTTP的长连接与短连接的区别"></a>说一下HTTP的长连接与短连接的区别</h2><p>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。 </p>
<p><strong>短连接</strong> </p>
<p>在HTTP&#x2F;1.0中默认使用短链接,也就是说，浏览器和服务器每进行一次HTTP操作，就建立一次连接，但任务结束就中断连接。如果客户端访问的某个HTML或其他类型的Web资源，如 JavaScript 文件、图像文件、 CSS 文件等。当浏览器每遇到这样一个Web资源，就会建立一个HTTP会话. </p>
<p><strong>长连接</strong> </p>
<p>从HTTP&#x2F;1.1起，默认使用长连接，用以保持连接特性。在使用长连接的情况下，当一个网页打开完 成后，客户端和服务器之间用于传输HTTP数据的 TCP连接不会关闭。如果客户端再次访问这个服务 器上的网页，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。</p>
<hr>
<h2 id="Cookie的作用是什么-和Session有什么区别？"><a href="#Cookie的作用是什么-和Session有什么区别？" class="headerlink" title="Cookie的作用是什么?和Session有什么区别？"></a>Cookie的作用是什么?和Session有什么区别？</h2><p>Cookie 和 Session都是用来跟踪浏览器用户身份的会话方式，但是两者的应用场景不太一样。</p>
<p><strong>Cookie 一般用来保存用户信息</strong> 比如①我们在 Cookie 中保存已经登录过得用户信息，下次访问网站的时候页面可以自动帮你登录的一些基本信息给填了；②一般的网站都会有保持登录也就是说下次你再访问网站的时候就不需要重新登录了，这是因为用户登录的时候我们可以存放了一个 Token 在 Cookie 中，下次登录的时候只需要根据 Token 值来查找用户即可(为了安全考虑，重新登录一般要将 Token 重写)；③登录一次网站后访问网站其他页面不需要重新登录。<strong>Session 的主要作用就是通过服务端记录用户的状态。</strong> 典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了。</p>
<p>Cookie 数据保存在客户端(浏览器端)，Session 数据保存在服务器端。</p>
<p>Cookie 存储在客户端中，而Session存储在服务器上，相对来说 Session 安全性更高。如果要在 Cookie 中存储一些敏感信息，不要直接写入 Cookie 中，最好能将 Cookie 信息加密然后使用到的时候再去服务器端解密。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>集合类面试题整理</title>
    <url>/2022/07/11/%E9%9B%86%E5%90%88%E7%B1%BB%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-ArrayList-x2F-LinkedList-x2F-Vector的异同？"><a href="#1-ArrayList-x2F-LinkedList-x2F-Vector的异同？" class="headerlink" title="1.ArrayList&#x2F;LinkedList&#x2F;Vector的异同？"></a>1.ArrayList&#x2F;LinkedList&#x2F;Vector的异同？</h2><ul>
<li><p><strong>ArrayList和LinkedList的异同</strong></p>
</li>
<li><ul>
<li>二者都是线程不安全的，Vector相对安全，执行效率高。</li>
<li>ArrayList是基于动态数组的，LinkedList是基于链表数据结构。</li>
<li>对于随机访问get和set，ArrayList优于LinkedList，因为LinkedList要移动指针。</li>
<li>对于插入和删除操作，LinkedList比较占优势，因为ArrayList要移动数据。</li>
<li>ArrayList的空间浪费主要体现在<strong>在list列表的结尾预留一定的容量空间</strong>，而LinkedList的空间花费则体现在它的<strong>每一个元素都需要消耗相当的空间</strong></li>
</ul>
</li>
<li><p><strong>ArrayList和Vector的区别</strong></p>
</li>
<li><ul>
<li>Vector和ArrayList几乎是完全相同，唯一的区别是Vector是同步类，是线程安全的，因此开销大，访问慢，效率低。</li>
<li>Vector每次扩容时扩容现有大小的2倍空间。</li>
<li>ArrayList每次扩容1.5倍空间。</li>
</ul>
</li>
</ul>
<h2 id="2-HashMap的底层实现原理？"><a href="#2-HashMap的底层实现原理？" class="headerlink" title="2.HashMap的底层实现原理？"></a>2.HashMap的底层实现原理？</h2><ul>
<li><p>JDK7 底层实现是数组 + <a href="">链表</a>，</p>
</li>
<li><p>JDK8 改为数组 + <a href="">链表</a>+<a href="">红黑树</a>，节点类型从Entry 变更为 Node。</p>
</li>
<li><p>主要成员变量包括存储数据的 table 数组、元素数量 size、加载因子 loadFactor。</p>
</li>
<li><p>table 数组记录 HashMap 的数据，每个下标对应一条<a href="">链表</a>，所有哈希冲突的数据都会被存放到同一条<a href="">链表</a>。</p>
</li>
<li><p>Node&#x2F;Entry 节点包含四个成员变量：key、value、next 指针和 hash 值。</p>
</li>
<li><p>HashMap 中数据以键值对的形式存在，键对应的 hash 值用来计算数组下标，如果两个元素 key 的 hash 值一样，就会发生哈希冲突，被放到同一个<a href="">链表</a>上，当底层数组的某一个索引位置上的元素以链表形式存在的<strong>数据个数大于8</strong> ，且当前<strong>数组的长度大于64时</strong>，此时这个索引位置上的数据改为使用红黑树存储。为使查询效率尽可能高，键的 hash 值要尽可能分散。</p>
</li>
<li><p>当添加数据超出临界值(且数据要存放的位置非空)时，需要对数组扩容。默认的扩容方式：扩容为原来容量的2倍，并将原来的数据复制过来。</p>
</li>
</ul>
<h2 id="3-负载因子值的大小对HashMap有什么影响？"><a href="#3-负载因子值的大小对HashMap有什么影响？" class="headerlink" title="3.负载因子值的大小对HashMap有什么影响？"></a>3.负载因子值的大小对HashMap有什么影响？</h2><ul>
<li><p>负载因子也叫扩容因子或加载因子，用来判断什么时候进行扩容的，假如加载因子是 0.5，HashMap 的初始化容量是 16，那么当 HashMap 中有 16*0.5&#x3D;8 个元素时，HashMap 就会进行扩容。</p>
</li>
<li><p>负载因子的大小决定了HashMap的<strong>数据密度</strong>。</p>
</li>
<li><p>负载因子越大数据密度越大，发生碰撞的几率越高，数组中的链表越容易长，造成查询或者插入的次数会增多，性能会下降。</p>
</li>
<li><p>负载因子越小数据密度越小，发生碰撞的几率越低，数组中的链表也就越短，造成查询或者插入的次数也就越少，性能会更高。数据密度小就会容易<strong>触发扩容</strong>，会浪费一定的内存空间，并且经常扩容也会影响性能。</p>
</li>
</ul>
<h2 id="4-HashMap和Hashtable的区别-？"><a href="#4-HashMap和Hashtable的区别-？" class="headerlink" title="4.HashMap和Hashtable的区别 ？"></a>4.HashMap和Hashtable的区别 ？</h2><ul>
<li><p><strong>相同点：</strong></p>
</li>
<li><ul>
<li>两者都实现了Map接口</li>
</ul>
</li>
<li><p><strong>不同点：</strong></p>
</li>
<li><ul>
<li><strong>同步性：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>Hashtable的方法是Synchronized，线程安全；</li>
<li>HashMap的方法没有加synchronized的，是线程不安全的</li>
<li>所以只有一个线程的时候使用HashMap效率要高</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>值：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>HashMap对象的key、value均可以为null</li>
<li>HashTable对象的key、value均不可以为null</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>容量：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>HashMap的初始容量为16</li>
<li>HashTable的初始容量为11</li>
<li>两者的填充因子默认都是0.75</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>扩容：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>HashMap扩容时是当前容量翻倍</li>
<li>HashTable扩容时是当前容量翻倍加一</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="5-HashSet-和-HashMap-区别？"><a href="#5-HashSet-和-HashMap-区别？" class="headerlink" title="5.HashSet 和 HashMap 区别？"></a>5.<strong>HashSet 和 HashMap 区别？</strong></h2><ol>
<li>HashSet底层就是基于HashMap实现的，只不过HashSet里面的所有的<strong>value都是同一个Object</strong>而已，所以HashSet也是<strong>非线程安全</strong>的。</li>
<li>HashMap使用键来计算Hashcode，HashSet使用成员对象来计算hashcode的值，对于两个对象来说，hashcode可能相同，所以使用equals方法来判断对象的相等性。</li>
</ol>
<h2 id="6-HashSet如何检查重复？"><a href="#6-HashSet如何检查重复？" class="headerlink" title="6.HashSet如何检查重复？"></a>6.HashSet如何检查重复？</h2><ul>
<li>当把对象加入HashSet的时候，HashSet会先计算对象的hashcode值来判断对象加入的位置，同时也会把该对象的hashCode值和其他已经在集合中的对象的hashCode值进行比较，如果没有相符的hashCode，HashSet会默认对象没有重复出现。</li>
<li>但是如果发现有相同hashCode值的对象，这时会调用equals方法来检查hashCode相等的对象是否真的相同。</li>
<li>如果两者相同，HashSet就不会让该对象加入成功的。</li>
</ul>
<h2 id="7-ConcurrentHashMap和Hashtable的区别"><a href="#7-ConcurrentHashMap和Hashtable的区别" class="headerlink" title="7.ConcurrentHashMap和Hashtable的区别"></a>7.ConcurrentHashMap和Hashtable的区别</h2><p>两者的主要区别是在<strong>实现线程安全的方式上</strong>不同。</p>
<ul>
<li><p><strong>底层数据结构：</strong></p>
</li>
<li><ul>
<li>JDK1.7的ConcurrentHashMap底层采用的是分段的数组+链表实现的</li>
<li>JDK1.8采用的数据结构是数组+链表&#x2F;红黑树。</li>
<li>数组是HashMap的主体，链表主要是为了解决哈希冲突而存在的。</li>
</ul>
</li>
<li><p><strong>实现线程安全的方式（<strong><strong>重要</strong></strong>）</strong></p>
</li>
<li><ul>
<li>在JDK1.7的时候，ConcurrentHashMap对整个数组进行了分割分段，分成了若干Segment，每一把锁只锁段中的内容，多线程访问容器里的数据段的数据，就不会存在锁竞争，提高了并发访问率。</li>
<li>JDK1.8的时候摒弃了Segment的概念，而是直接采用Node数组+ 链表+红黑树的数据结构来实现，并发控制使用synchronized和CAS来操作。</li>
<li>而HashTable中只有一把锁，使用synchronized来保证线程安全，效率非常低下。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>黑马SSM学习</title>
    <url>/2022/04/29/%E9%BB%91%E9%A9%ACSSM%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一-、Spring"><a href="#一-、Spring" class="headerlink" title="一 、Spring"></a>一 、Spring</h1><h2 id="1-1-Spring简介"><a href="#1-1-Spring简介" class="headerlink" title="1.1 Spring简介"></a>1.1 Spring简介</h2><blockquote>
<p>Spring是一个<code>轻量级的控制反转和面向切面的容器</code>框架，用来解决企业项目开发的复杂度问题—解耦</p>
</blockquote>
<ul>
<li>轻量级：体积小，对代码没有侵入性</li>
<li>控制反转：IoC（Inverse of Control）,把创建对象的工作交由Spring完成，Spring在创建对象的时候同时可以完成对象属性赋值（DI）</li>
<li>面向切面：AOP（Aspect Oriented Programming）面向切面编程，可以在不改变原有业务逻辑的情况下实现对业务的增强</li>
<li>容器：实例的容器，管理创建的对象</li>
</ul>
<h2 id="1-2-Spring架构"><a href="#1-2-Spring架构" class="headerlink" title="1.2 Spring架构"></a>1.2 Spring架构</h2><ul>
<li><p>官网 <a href="https://spring.io/">https://spring.io/</a></p>

</li>
<li><p>Spring架构图</p>
<ul>
<li>Spring Framework是Spring生态圈最基础的项目，是其他项目的基础</li>
</ul>
</li>
</ul>
<h6 id="1-Core-Container"><a href="#1-Core-Container" class="headerlink" title="1. Core Container"></a>1. Core Container</h6><blockquote>
<p>Spring核心容器组件，用于完成实例的创建和管理</p>
<ul>
<li>core</li>
<li>beans   实例管理</li>
<li>context 容器上下文</li>
</ul>
</blockquote>
<h6 id="2-AOP、Aspects"><a href="#2-AOP、Aspects" class="headerlink" title="2. AOP、Aspects"></a>2. AOP、Aspects</h6><blockquote>
<p>Spring AOP组件，实现面向切面编程</p>
<ul>
<li>aop</li>
<li>aspects</li>
</ul>
</blockquote>
<h6 id="3-web"><a href="#3-web" class="headerlink" title="3. web"></a>3. web</h6><blockquote>
<p>Spring web组件实际指的是SpringMVC框架，实现web项目的MVC控制</p>
<ul>
<li>web (Spring对web项目的支持)</li>
<li>webmvc (SpringMVC组件)</li>
</ul>
</blockquote>
<h6 id="4-Data-Access"><a href="#4-Data-Access" class="headerlink" title="4. Data Access"></a>4. Data Access</h6><blockquote>
<p>Spring数据访问组件，也是一个基于JDBC封装的持久层框架（即使没有mybatis，Spring也可以完成持久化操作）</p>
<ul>
<li>Data Access：数据访问</li>
<li>Data Integeration：数据集成</li>
</ul>
</blockquote>
<h6 id="5-Test"><a href="#5-Test" class="headerlink" title="5. Test"></a>5. Test</h6><blockquote>
<p>Spring的单元测试组件，提供了Spring环境下的单元测试支持</p>
<ul>
<li>test</li>
</ul>
</blockquote>
<h2 id="1-3-Spring-Framework学习路线"><a href="#1-3-Spring-Framework学习路线" class="headerlink" title="1.3 Spring Framework学习路线"></a>1.3 Spring Framework学习路线</h2><ol>
<li>核心容器<ol>
<li>核心概念（IOC、DI）</li>
<li>容器基本操作</li>
</ol>
</li>
<li>整合<ol>
<li>整合MyBatis</li>
</ol>
</li>
<li>AOP<ol>
<li>核心概念</li>
<li>AOP基础操作</li>
<li>AOP使用开发</li>
</ol>
</li>
<li>事务<ol>
<li>事务实用开发</li>
</ol>
</li>
<li>家族<ol>
<li>SpringMVC</li>
<li>SpringBoot</li>
<li>SpringCloud</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
</search>
