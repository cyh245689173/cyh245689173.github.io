<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CentOS的下载与安装</title>
    <url>/posts/2662237018.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="1-CentOS的下载"><a href="#1-CentOS的下载" class="headerlink" title="1.CentOS的下载"></a>1.CentOS的下载</h2><p>首先进入CentOS官网：<a href="https://www.centos.org/%EF%BC%8C%E7%82%B9%E5%87%BB%E4%B8%8B%E8%BD%BD">https://www.centos.org/，点击下载</a></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659231220596-df7f1634-e7ad-4a7d-be2a-ba3c2717934c.png" alt="img"></p>
<p>根据自己的机型选择合适的安装包</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659231265442-875e031b-b419-412c-8d6a-fb8e5f81a93c.png" alt="img"></p>
<p>进入之后找到镜像包isos，点击进入</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659231296469-e6ce2f49-0164-4dcc-b597-a064dde52fc8.png" alt="img"></p>
<p>继续点击</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659231327649-020afdb7-43cd-4c19-9daa-5d2acf94b736.png" alt="img"></p>
<p>这题提供了好多镜像站点地址，可以随便选一个，我选的阿里云的</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659231379189-79526c75-ffab-4787-a77a-8ef38d53e139.png" alt="img"></p>
<p>点击进入，下载7-2009最新版</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659231401646-b7c3de38-bf0b-42ac-86a9-3644cdde5db7.png" alt="img"></p>
<p>然后等待下载完成即可</p>
<h2 id="2-VMware安装"><a href="#2-VMware安装" class="headerlink" title="2.VMware安装"></a>2.VMware安装</h2><p>因为我已经装过了就懒得重新装了，可以参考一下这个博文：<a href="https://blog.csdn.net/weixin_45912291/article/details/108894737">https://blog.csdn.net/weixin_45912291/article/details/108894737</a></p>
<h2 id="3-创建虚拟机"><a href="#3-创建虚拟机" class="headerlink" title="3.创建虚拟机"></a>3.创建虚拟机</h2><p>打开VMware，创建一个新的虚拟机</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659232500822-2f3934ca-97a1-4638-9127-ec4c130679ca.png" alt="img"></p>
<p>选择自定义高级模式，这样我们可以了解到该虚拟机的更多细节</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659232549890-42aa7d3a-516a-4230-898c-0e5cc06bbfba.png" alt="img"></p>
<p>然后，下一步</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659232622614-0e23342b-f17b-4b0b-be2e-4969006ec95e.png" alt="img"></p>
<p>这里选择稍后安装操作系统，继续下一步</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659232641021-b714d36e-184d-466e-a9ba-ef257666f6a3.png" alt="img"></p>
<p>这里版本选择CentOS 7 64位</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659232714694-26ecb1cd-27c0-4f30-b500-64e4557aef30.png" alt="img"></p>
<p>然后这里名称随便起，位置根据自己的需求，最好不要放在C盘</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659232858399-bb4d2e35-a70f-46ee-a5d5-9612577a5d47.png" alt="img"></p>
<p>然后这里的处理器数量不超过自己的主机即可，继续下一步</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659233115074-45341843-65dd-44b9-af5b-00aaf07df2e1.png" alt="img"></p>
<p>然后这里选择4GB，下一步</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659233165012-96c45947-fc03-404b-ab88-fa75a17191a7.png" alt="img"></p>
<p>这里选择NAT，下一步</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659233191274-37301360-57fb-4431-afc9-4cb055cca466.png" alt="img"></p>
<p>然后这里直接按照推荐的来，继续下一步</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659233262472-733f0cf5-b334-4d51-9fca-512658fe442b.png" alt="img"></p>
<p>继续按照推荐的来，下一步</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659233287179-fee900dc-1593-4ab7-982a-6e0a4bd3e67d.png" alt="img"></p>
<p>这里选择创建新的虚拟磁盘</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659233311100-eb9df757-10aa-425b-a22a-fb47d96d5a7d.png" alt="img"></p>
<p>这里的磁盘大小根据自己的需求来，大数据的朋友最好选的大一点，然后下一步</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659233372623-00f4eea1-92d3-46c2-9155-a24d9e827752.png" alt="img"></p>
<p>然后这里不用管，直接下一步</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659233467702-92ce0ab4-f7d5-42a5-8828-d6ab90da03e3.png" alt="img"></p>
<p>然后最后一步，看一眼没什么问题，就点击完成。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659233499894-81ca332f-7357-4932-9f41-cbdfe85b10ee.png" alt="img"></p>
<p>然后虚拟机的创建就已经完成了~</p>
<h2 id="4-CentOS安装"><a href="#4-CentOS安装" class="headerlink" title="4.CentOS安装"></a>4.CentOS安装</h2><p>虚拟机已经创建完成了，接下来就是安装操作系统了</p>
<p>需要在光驱里进行安装，点击CD&#x2F;DVD</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659233683338-1f820e37-567f-44eb-8ea9-9a42e98eaa98.png" alt="img"></p>
<p>然后选择使用ISO映像文件，找到我们刚才在下载的CentOS镜像</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659235094018-3563eedc-1c9a-49a5-9889-c1360252a10a.png" alt="img"></p>
<p>然后点击确定就可以了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659235153870-b2fd05b9-d123-464e-98d4-3168d353db9c.png" alt="img"></p>
<p>然后开启虚拟机</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659235245994-32db4bed-f267-47ae-b884-b9d218d43a73.png" alt="img"></p>
<p>然后键盘操作，上下键选择Install CentOS 7，点击回车</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659235321405-bdcc2377-3f03-4cbb-8317-0b2680850609.png" alt="img"></p>
<p>然后这里选择简体中文（方便学习使用），不过还是建议安装成英文，避免产生一些不兼容问题</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659235464221-5f5a1b42-1f57-4863-ae30-f2688b29cb8d.png" alt="img"></p>
<p>然后这里，选择软件选择</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659235513113-51afa97c-3f9f-4ea4-9bb9-9ab92713e34f.png" alt="img"></p>
<p>软件的基本环境中选择GNOME桌面，后面的附加选项根据需求进行选择</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659235763041-6c2b43b9-5988-4276-b653-1086ce6fd8e9.png" alt="img"></p>
<p>然后点击完成继续回到安装信息，选择安装位置</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236122427-c1cc8877-3f25-458c-bba1-f0ed9950f12a.png" alt="img"></p>
<p>将自动配置分区改为我要配置分区，点击完成</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236163540-647c29f8-a3bc-4a84-b0ad-2a2f3a22f4a3.png" alt="img"></p>
<p>进入到手动分区模块，分区方案选择标准分区</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236244161-5b607f28-8995-4499-a8ec-7ee51a925855.png" alt="img"></p>
<p>点击加号新增挂载点</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236284915-f3970ee9-67bb-4380-88ef-ad802048fb6f.png" alt="img"></p>
<p>填入参数，然后添加boot挂载点（引导分区，系统启动时需要靠它进行启动）</p>
<p>这里的挂载点就像当我们Windows里的 分盘</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236323413-629ceca6-0bfb-4b2b-ac65-753ee6620b92.png" alt="img"></p>
<p>再添加一个交换挂载点，相当于虚拟内存</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236458317-48c26481-600a-48c4-8011-d786b1f64777.png" alt="img"></p>
<p>然后添加根挂载点</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236530449-5539b319-7f57-4617-9cca-a93b5c893e2f.png" alt="img"></p>
<p>效果如下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236591652-e7ada09a-cff8-45cc-8199-b8c658cef2ce.png" alt="img"></p>
<p>然后点击完成，接受更改</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236740919-a667e4f8-0695-4d7e-aee6-6c9d6b70e1f3.png" alt="img"></p>
<p>然后点击KDUMP</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236783117-c05b6cc4-db4d-41f1-b3fe-66cf905720f8.png" alt="img">这是一个在系统崩溃时转储加捕获信息的工具，会耗费系统资源，我们用不大着，崩溃了就重启呗，将这里的启动关闭。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236854028-3a50addd-6156-4498-bec1-927c58b3d362.png" alt="img"></p>
<p>然后来到网络和主机名</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236921375-0e9cee5f-a8be-4eed-93e8-50693445d88c.png" alt="img"></p>
<p>把以太网连接上，起一个好记一点的主机名，点击应用，完成。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659236985781-88b0b3e2-16c1-4ece-b54b-5383e2fc587d.png" alt="img"></p>
<p>然后点击开始安装</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237042139-64b7ff5a-14fa-44ef-9eb4-5470b0810138.png" alt="img"></p>
<p>然后点击这里设置root密码</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237082173-04f47e0e-9ec6-4651-af57-3edc0829cebc.png" alt="img"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237092620-e9c594ba-e977-49f0-b72f-9f9fd98dbac9.png" alt="img"></p>
<p>然后创建一个用户</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237127031-f7781776-8452-49b2-8f03-5dcb079f7ebb.png" alt="img"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237164660-9ff74995-fbc3-4ff9-bf63-5e6a73b96178.png" alt="img"></p>
<p>然后等待安装完成，点击重启</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237522099-13789eb2-0067-4629-94b6-0784eb21ba5d.png" alt="img"></p>
<p>点击这里的未接受许可证</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237563080-b4bed926-4592-42ef-b381-f2752dde3351.png" alt="img"></p>
<p>点击我同意，然后完成</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237590984-9c43a186-7b34-480f-beac-1b80540db7a2.png" alt="img"></p>
<p>然后完成配置</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237628218-e8d47a8a-32b3-4aed-a748-268248dd3ba9.png" alt="img"></p>
<p>然后来到登陆页面，输入自己的密码，点击登录</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237678455-b5104bd7-bdbc-454b-a3e3-79f5cb9cc801.png" alt="img"></p>
<p>然后进来有一个欢迎页面，选择汉语，前进</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237724695-5af6da86-5e9f-4e69-8640-eccdb63dd7be.png" alt="img"></p>
<p>输入，选择汉语，继续前进</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237759307-c9cec92b-ead5-4f19-9e40-f8025d25be8e.png" alt="img"></p>
<p>隐私关掉，前进</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237789204-310805a8-9d6d-4167-a0e2-7800d684c8f7.png" alt="img"></p>
<p>剩下的就可以跳过了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237807545-dd0b24ea-ca02-40cf-97ea-76abf97b60fd.png" alt="img"></p>
<p>然后就安装完成了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659237816836-12f1995f-84ce-4081-9f4e-845d5e655463.png" alt="img"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Freemarker学习笔记</title>
    <url>/posts/203421960.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="1-页面静态化"><a href="#1-页面静态化" class="headerlink" title="1.页面静态化"></a>1.页面静态化</h1><p>​		首先思考一个问题，对于一个页面来说，每次用户访问该页面时都需要查询数据库来获取动态数据进行展示，而且这个页面的访问量是比较大的，这就对数据库造成了很大的访问压力，并且数据库中的数据变化频率并不高。那我们需要通过什么方法为数据库减压并提高系统运行性能呢？答案就是页面静态化。</p>
<p>页面静态化其实就是<strong>将原来的动态网页(例如通过ajax请求动态获取数据库中的数据并展示的网页)改为通过静态化技术生成的静态网页，这样用户在访问网页时，服务器直接给用户响应静态html页面，没有了动态查询数据库的过程。</strong></p>
<p>那么这些静态HTML页面还需要我们自己去编写吗？其实并不需要，我们可以通过专门的页面静态化技术帮我们生成所需的静态HTML页面，例如：Freemarker、thymeleaf等。</p>
<h1 id="2-Freemarker介绍"><a href="#2-Freemarker介绍" class="headerlink" title="2.Freemarker介绍"></a>2.Freemarker介绍</h1><p>FreeMarker 是一款 <em>模板引擎</em>： 即<strong>一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。</strong> 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。</p>
<p>模板编写为FreeMarker Template Language (FTL)。它是简单的，专用的语言， <em>不是</em> 像PHP那样成熟的编程语言。 那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。<strong>在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/overview.png" alt="Figure"></p>
<p>这种方式通常被称为 <a href="http://freemarker.foofun.cn/gloss.html#gloss.MVC">MVC (模型 视图 控制器) 模式</a>，对于动态网页来说，是一种特别流行的模式。 它帮助从开发人员(Java 程序员)中分离出网页设计师(HTML设计师)。设计师无需面对模板中的复杂逻辑， 在没有程序员来修改或重新编译代码时，也可以修改页面的样式。</p>
<p>而FreeMarker最初的设计，是被用来在MVC模式的Web开发框架中生成HTML页面的，它没有被绑定到 Servlet或HTML或任意Web相关的东西上。它也可以用于非Web应用环境中。</p>
<h1 id="3-入门案例"><a href="#3-入门案例" class="headerlink" title="3.入门案例"></a>3.入门案例</h1><h2 id="3-1-环境搭建"><a href="#3-1-环境搭建" class="headerlink" title="3.1 环境搭建"></a>3.1 环境搭建</h2><p>创建maven工程并导入Freemarker的maven坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-2-创建模板文件"><a href="#3-2-创建模板文件" class="headerlink" title="3.2 创建模板文件"></a>3.2 创建模板文件</h2><p>模板文件中有四种元素：</p>
<p>  1、文本，直接输出的部分<br>  2、注释，即&lt;#–…–&gt;格式不会输出<br>  3、插值（Interpolation）：即${..}部分,将使用数据模型中的部分替代输出<br>  4、FTL指令：FreeMarker指令，和HTML标记类似，名字前加#予以区分，不会输出</p>
<p>Freemarker的模板文件后缀可以任意，一般建议为ftl。</p>
<p>在D盘创建ftl目录，在ftl目录中创建名称为test.ftl的模板文件，内容如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Freemarker入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &lt;#--我只是一个注释，我不会有任何输出  --&gt;</span><br><span class="line">    $&#123;name&#125;你好，$&#123;message&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-生成文件"><a href="#3-3-生成文件" class="headerlink" title="3.3 生成文件"></a>3.3 生成文件</h2><p>使用步骤：</p>
<p>第一步：创建一个 Configuration 对象，直接 new 一个对象。构造方法的参数就是 freemarker的版本号。</p>
<p>第二步：设置模板文件所在的路径。</p>
<p>第三步：设置模板文件使用的字符集。一般就是 utf-8。</p>
<p>第四步：加载一个模板，创建一个模板对象。</p>
<p>第五步：创建一个模板使用的数据集，可以是 pojo 也可以是 map。一般是 Map。</p>
<p>第六步：创建一个 Writer 对象，一般创建 FileWriter 对象，指定生成的文件名。</p>
<p>第七步：调用模板对象的 process 方法输出文件。</p>
<p>第八步：关闭流。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">	<span class="comment">//1.创建配置类</span></span><br><span class="line">	Configuration configuration=<span class="keyword">new</span> <span class="title class_">Configuration</span>(Configuration.getVersion());</span><br><span class="line">	<span class="comment">//2.设置模板所在的目录 </span></span><br><span class="line">	configuration.setDirectoryForTemplateLoading(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\ftl&quot;</span>));</span><br><span class="line">	<span class="comment">//3.设置字符集</span></span><br><span class="line">	configuration.setDefaultEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">	<span class="comment">//4.加载模板</span></span><br><span class="line">	<span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> configuration.getTemplate(<span class="string">&quot;test.ftl&quot;</span>);</span><br><span class="line">	<span class="comment">//5.创建数据模型</span></span><br><span class="line">	Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">	map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;王也&quot;</span>);</span><br><span class="line">	map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;欢迎来到龙虎山！&quot;</span>);</span><br><span class="line">	<span class="comment">//6.创建Writer对象</span></span><br><span class="line">	<span class="type">Writer</span> <span class="variable">out</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\test.html&quot;</span>));</span><br><span class="line">	<span class="comment">//7.输出</span></span><br><span class="line">	template.process(map, out);</span><br><span class="line">	<span class="comment">//8.关闭Writer对象</span></span><br><span class="line">	out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的入门案例中Configuration配置对象是自己创建的，字符集和模板文件所在目录也是在Java代码中指定的。</p>
<p>在项目中应用时可以将Configuration对象的创建交由Spring框架来完成，并通过依赖注入方式将字符集和模板所在目录注入进去。</p>
<h1 id="4-Freemarker指令"><a href="#4-Freemarker指令" class="headerlink" title="4. Freemarker指令"></a>4. Freemarker指令</h1><h2 id="4-1-assign指令"><a href="#4-1-assign指令" class="headerlink" title="4.1 assign指令"></a>4.1 assign指令</h2><p>assign指令用于在页面上定义一个变量</p>
<p>（1）定义简单类型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;#assign linkman=&quot;张灵玉&quot;&gt;</span><br><span class="line">联系人：$&#123;linkman&#125;</span><br></pre></td></tr></table></figure>

<p>（2）定义对象类型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;#assign info=&#123;&quot;mobile&quot;:&quot;10086&quot;,&#x27;address&#x27;:&#x27;龙虎山正一天师府&#x27;&#125; &gt;</span><br><span class="line">电话：$&#123;info.mobile&#125;  地址：$&#123;info.address&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-2-include指令"><a href="#4-2-include指令" class="headerlink" title="4.2 include指令"></a>4.2 include指令</h2><p>include指令用于模板文件的嵌套</p>
<p>（1）创建模板文件head.ftl</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>凡夫俗子张之维<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）修改入门案例中的test.ftl，在test.ftl模板文件中使用include指令引入上面的模板文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;#include &quot;head.ftl&quot;/&gt;</span><br></pre></td></tr></table></figure>

<h2 id="4-3-if指令"><a href="#4-3-if指令" class="headerlink" title="4.3 if指令"></a>4.3 if指令</h2><p>if指令用于判断</p>
<p>（1）在模板文件中使用if指令进行判断</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;#if success=true&gt;</span><br><span class="line">  你已获得罗天大醮天师继承权</span><br><span class="line">&lt;#else&gt;  </span><br><span class="line">  你失败了</span><br><span class="line">&lt;/#if&gt;</span><br></pre></td></tr></table></figure>

<p>（2）在java代码中为success变量赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.put(<span class="string">&quot;success&quot;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>在freemarker的判断中，可以使用&#x3D; 也可以使用&#x3D;&#x3D;</p>
<p>运行效果：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220708082115215.png" alt="image-20220708082115215"></p>
<p>如果Java代码中和模板文件中都对‘’success’’进行赋值，则会以模板文件中的值为主，但是更多的是在Java代码中对变量进行赋值，因为比较灵活。</p>
<p>Java代码：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220708082251768.png" alt="image-20220708082251768"></p>
<p>模板文件：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220708082330120.png" alt="image-20220708082330120"></p>
<p>运行结果：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220708082407019.png" alt="image-20220708082407019"></p>
<h2 id="4-4-list指令"><a href="#4-4-list指令" class="headerlink" title="4.4 list指令"></a>4.4 list指令</h2><p>list指令用于遍历</p>
<p>（1）在模板文件中使用list指令进行遍历</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;#list goodsList as goods&gt;</span><br><span class="line">  商品名称： $&#123;goods.name&#125; 价格：$&#123;goods.price&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&lt;/#list&gt;</span><br></pre></td></tr></table></figure>

<p>（2）在java代码中为goodsList赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List goodsList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">Map goods1=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">goods1.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">goods1.put(<span class="string">&quot;price&quot;</span>, <span class="number">5.8</span>);</span><br><span class="line"></span><br><span class="line">Map goods2=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">goods2.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line">goods2.put(<span class="string">&quot;price&quot;</span>, <span class="number">2.5</span>);</span><br><span class="line"></span><br><span class="line">Map goods3=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">goods3.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;橘子&quot;</span>);</span><br><span class="line">goods3.put(<span class="string">&quot;price&quot;</span>, <span class="number">3.2</span>);</span><br><span class="line"></span><br><span class="line">goodsList.add(goods1);</span><br><span class="line">goodsList.add(goods2);</span><br><span class="line">goodsList.add(goods3);</span><br><span class="line"></span><br><span class="line">map.put(<span class="string">&quot;goodsList&quot;</span>, goodsList);</span><br></pre></td></tr></table></figure>

<h1 id="5-FreeMarker小结"><a href="#5-FreeMarker小结" class="headerlink" title="5.FreeMarker小结"></a>5.FreeMarker小结</h1><h2 id="5-1-什么是网页静态化技术"><a href="#5-1-什么是网页静态化技术" class="headerlink" title="5.1.什么是网页静态化技术"></a>5.1.什么是网页静态化技术</h2><p>随着用户访问量以及数据量的增大，网页静态化技术方案如今越来越流行。什么是网页静态化技术呢?简单来说就是将网页以纯静态方式的形式展现</p>
<h2 id="5-2-网页静态化技术与缓存技术的比较"><a href="#5-2-网页静态化技术与缓存技术的比较" class="headerlink" title="5.2.网页静态化技术与缓存技术的比较"></a>5.2.网页静态化技术与缓存技术的比较</h2><ul>
<li>共同点:都可以减小数据库的访问压力。</li>
<li>区别:<ol>
<li>缓存技术适用于小规模的数据。以及一些经常变动的数据。</li>
<li>网页静态化技术适用于大规模但是变化不太频繁的数据。</li>
</ol>
</li>
</ul>
<h2 id="5-3-网页静态化技术的应用场景"><a href="#5-3-网页静态化技术的应用场景" class="headerlink" title="5.3.网页静态化技术的应用场景"></a>5.3.网页静态化技术的应用场景</h2><ol>
<li>新闻门户网站的文章类型频道一般都用到了网页静态化技术。点击新闻直接会跳到静态化的页面。</li>
<li>电商网站的商品详情页也十分常用，我们在存储商品的时候会生成静态化页面，点击商品详情，会直接跳到生成的商品详情的静态化页面。</li>
<li>网页静态化技术可以<strong>结合Nginx这种高性能web服务器</strong>来提高并发访问量。</li>
</ol>
<h2 id="5-4-什么是FreeMarker"><a href="#5-4-什么是FreeMarker" class="headerlink" title="5.4.什么是FreeMarker"></a>5.4.什么是FreeMarker</h2><p>FreeMarker是一款用lava语言编写的模板引擎，用它可以通过模板和要改变的数据来生成输出文本(例如HTML网页，配置文件，源代码等)，作为用来实现网页静态化技术的一种手段。FreeMarker的使用率大大超过其他一些技术。对于系统中频繁使用数据库进行查询但是内容更新很小的应用，都可以用FreeMarker将网页静态化，这样就避免了大量的数据库访问请求，从而提高网站的性能。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Communications link failure</title>
    <url>/posts/406633708.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220622101217780.png" alt="image-20220622101217780">今天运行项目发现出现了这个异常，结果发现是数据库服务没开。。。。</p>
<p>为啥这服务我明明设置了手动还是自动关</p>
]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo博客文章中文编码字符问题</title>
    <url>/posts/2712275173.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>今天学习之余没事干就想着继续优化一下博客，看到了博客文章是一大堆字符编码这个问题。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220814194348612.png" alt="image-20220814194348612"></p>
<p>这是因为在Hexo的默认设定中文章链接是按照年：月：日：文章标题的格式来生成链接的并且如果博客文章标题中还有中文的话，就会产生一堆的编码字符，就像上面那样。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br></pre></td></tr></table></figure>

<h3 id="问题解决："><a href="#问题解决：" class="headerlink" title="问题解决："></a>问题解决：</h3><p>可以通过安装hexo-abbrlink插件的方式来解决</p>
<h4 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1.安装插件"></a>1.安装插件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<h4 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h4><p>在博客配置文件_config.yml中修改permalink</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span></span><br></pre></td></tr></table></figure>

<p>继续在_config.yml添加以下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#abbrlink配置</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure>

<p>如图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220814195202269.png" alt="image-20220814195202269"></p>
<h4 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成~"></a>大功告成~</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220814195248364.png" alt="image-20220814195248364"></p>
]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA添加GitHub报错解决</title>
    <url>/posts/1446531300.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="一、错误描述"><a href="#一、错误描述" class="headerlink" title="一、错误描述"></a>一、错误描述</h3><p>使用IDEA添加github账号时出现以下错误：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802172653852.png" alt="image-20220802172653852"></p>
<h3 id="二、错误解决，使用token登录"><a href="#二、错误解决，使用token登录" class="headerlink" title="二、错误解决，使用token登录"></a>二、错误解决，使用token登录</h3><p>首先登录自己的GitHub</p>
<p>点击头像，打开Setting</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802172836853.png" alt="image-20220802172836853"></p>
<p>在Setting中下滑，找到Developer settings，点击进入</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802172922708.png" alt="image-20220802172922708"></p>
<p>依次点击Personal access tokens和Generate new token</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802173041513.png" alt="image-20220802173041513"></p>
<p>然后note这里随便写一个</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802173208552.png" alt="image-20220802173208552"></p>
<p>这里的权限全部选中</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802173232846.png" alt="image-20220802173232846"></p>
<p>点击生成token</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802182415487.png" alt="image-20220802182415487"></p>
<p>然后点击复制生成的token</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802182815347.png" alt="image-20220802182815347"></p>
<p>然后点击Use Token</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802183024594.png" alt="image-20220802183024594"></p>
<p>复制到Token里粘贴，点击登录</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802182901791.png" alt="image-20220802182901791"></p>
<p>然后就登陆成功了<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802183117696.png" alt="image-20220802183117696"></p>
]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA上传项目到GitHub</title>
    <url>/posts/2773103577.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="一、在github上创建仓库"><a href="#一、在github上创建仓库" class="headerlink" title="一、在github上创建仓库"></a>一、在github上创建仓库</h3><p>点击头像左边的加号，创建新仓库</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802170420022.png" alt="image-20220802170420022"></p>
<p>开始创建仓库</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802170717898.png" alt="image-20220802170717898"></p>
<p>点击创建仓库</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802170834944.png" alt="image-20220802170834944"></p>
<p>仓库创建完成：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802171026370.png" alt="image-20220802171026370"></p>
<h3 id="二、在IDEA中上传项目代码到Github"><a href="#二、在IDEA中上传项目代码到Github" class="headerlink" title="二、在IDEA中上传项目代码到Github"></a>二、在IDEA中上传项目代码到Github</h3><h4 id="1-首先测试自己的git是否安装成功"><a href="#1-首先测试自己的git是否安装成功" class="headerlink" title="1.首先测试自己的git是否安装成功"></a>1.首先测试自己的git是否安装成功</h4><p>打开idea，File -&gt; Setting-&gt;Version Control -&gt; Git，或者直接搜索框搜索git</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802171359062.png" alt="image-20220802171359062"></p>
<p>点击Test，测试git是否安装成功，弹出版本号即证明安装成功了。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802171429800.png" alt="image-20220802171429800"></p>
<h4 id="2-在IDEA中添加GitHub"><a href="#2-在IDEA中添加GitHub" class="headerlink" title="2.在IDEA中添加GitHub"></a>2.在IDEA中添加GitHub</h4><p>在Version Control中选择Github 点击右上方的加号，在弹出的界面中添加自己的github账号和密码</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802171706673.png" alt="image-20220802171706673"></p>
<p>这里就添加成功了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802172418995.png" alt="image-20220802172418995"></p>
<p>如果产生了下图这个问题，可以参考这个博文：<a href="https://www.kdy.icu/2022/08/02/IDEA%E6%B7%BB%E5%8A%A0GitHub%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/">idea添加GitHub报错</a></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802172502137.png" alt="image-20220802172502137"></p>
<h4 id="3-上传项目到本地仓库"><a href="#3-上传项目到本地仓库" class="headerlink" title="3.上传项目到本地仓库"></a>3.上传项目到本地仓库</h4><p>然后在idea上方依次点击 VCS  -&gt; Import into Version Control -&gt; Create Git Repository </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802183415155.png" alt="image-20220802183415155"></p>
<p>在弹出的界面中选择要提交的项目 </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802183506458.png" alt="image-20220802183506458"></p>
<p> 然后右击项目选择 Git —&gt; Add</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802183903334.png" alt="image-20220802183903334"></p>
<p>这里可以看到正在添加</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802183834583.png" alt="image-20220802183834583"></p>
<p>然后右击项目选择 Git -&gt; Commit Directory，将项目提交到本地仓库</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802183942855.png" alt="image-20220802183942855"></p>
<p>然后在弹出的信息输入自己的提交描述</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802184138623.png" alt="image-20220802184138623"></p>
<p>然后点击commit进行提交，这样代码就提交到了本地仓库。</p>
<h4 id="4-上传项目到远程仓库"><a href="#4-上传项目到远程仓库" class="headerlink" title="4.上传项目到远程仓库"></a>4.上传项目到远程仓库</h4><p>然后就是将本地仓库的项目提交到远程仓库，Git -&gt; Repository -&gt;Push</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802184945225.png" alt="image-20220802184945225"></p>
<p>在弹出的页面里点击Define remote</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802185642286.png" alt="image-20220802185642286"></p>
<p>将我们的仓库地址粘贴进去</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802185801302.png" alt="image-20220802185801302"></p>
<p>点击ok，开始push</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802185838193.png" alt="image-20220802185838193"></p>
<p>下方会有push的进度条</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802185910354.png" alt="image-20220802185910354"></p>
<p>等待push完成，在GitHub中就可以看到我们上传的项目啦。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220802190344166.png" alt="image-20220802190344166"></p>
]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
  </entry>
  <entry>
    <title>JavaWeb视频推荐</title>
    <url>/posts/271415832.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script>]]></content>
      <categories>
        <category>学习视频推荐</category>
      </categories>
  </entry>
  <entry>
    <title>JDBC学习笔记</title>
    <url>/posts/2710596653.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="一、JDBC概述"><a href="#一、JDBC概述" class="headerlink" title="一、JDBC概述"></a>一、JDBC概述</h2><h3 id="1-1-JDBC概念"><a href="#1-1-JDBC概念" class="headerlink" title="1.1  JDBC概念"></a>1.1  JDBC概念</h3><blockquote>
<p>JDBC   就是使用Java语言操作关系型数据库的一套API</p>
<p>全称：( Java DataBase Connectivity ) Java 数据库连接</p>
</blockquote>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725130537815.png" alt="image-20210725130537815" style="zoom:80%;" />

<p>我们开发的同一套Java代码是无法操作不同的关系型数据库，因为每一个关系型数据库的底层实现细节都不一样。如果这样，问题就很大了，在公司中可以在开发阶段使用的是MySQL数据库，而上线时公司最终选用oracle数据库，我们就需要对代码进行大批量修改，这显然并不是我们想看到的。我们要做到的是同一套Java代码操作不同的关系型数据库，而此时sun公司就指定了一套标准接口（JDBC），JDBC中定义了所有操作关系型数据库的规则。众所周知接口是无法直接使用的，我们需要使用接口的实现类，而这套实现类（称之为：驱动）就由各自的数据库厂商给出。</p>
<h3 id="1-2-JDBC本质"><a href="#1-2-JDBC本质" class="headerlink" title="1.2  JDBC本质"></a>1.2  JDBC本质</h3><ul>
<li>官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口</li>
<li>各个数据库厂商去实现这套接口，提供数据库驱动jar包</li>
<li>我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类</li>
</ul>
<h3 id="1-3-JDBC好处"><a href="#1-3-JDBC好处" class="headerlink" title="1.3  JDBC好处"></a>1.3  JDBC好处</h3><ul>
<li>各数据库厂商使用相同的接口，Java代码不需要针对不同数据库分别开发</li>
<li>可随时替换底层数据库，访问数据库的Java代码基本不变</li>
</ul>
<p>以后编写操作数据库的代码只需要面向JDBC（接口），操作哪儿个关系型数据库就需要导入该数据库的驱动包，如需要操作MySQL数据库，就需要再项目中导入MySQL数据库的驱动包。如下图就是MySQL驱动包</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725133015535.png" alt="image-20210725133015535" style="zoom:90%;" />

<h2 id="二、JDBC快速入门"><a href="#二、JDBC快速入门" class="headerlink" title="二、JDBC快速入门"></a>二、JDBC快速入门</h2><p>先来看看通过Java操作数据库的流程</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725163745153.png" alt="image-20210725163745153" style="zoom:80%;" />

<p>第一步：编写Java代码</p>
<p>第二步：Java代码将SQL发送到MySQL服务端</p>
<p>第三步：MySQL服务端接收到SQL语句并执行该SQL语句</p>
<p>第四步：将SQL语句执行的结果返回给Java代码</p>
<h3 id="2-1-编写代码步骤"><a href="#2-1-编写代码步骤" class="headerlink" title="2.1  编写代码步骤"></a>2.1  编写代码步骤</h3><ul>
<li><p>创建工程，导入驱动jar包</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725133015535.png" alt="image-20210725133015535" style="zoom:90%;" />
</li>
<li><p>注册驱动</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Connection conn <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></table></figure>

<p>Java代码需要发送SQL给MySQL服务端，就需要先建立连接</p>
</li>
<li><p>定义SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">String <span class="keyword">sql</span> <span class="operator">=</span>  “<span class="keyword">update</span>…” ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取执行SQL对象</p>
<p>执行SQL语句需要SQL执行对象，而这个执行对象就是Statement对象</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Statement stmt <span class="operator">=</span> conn.createStatement();</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行SQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">stmt.executeUpdate(<span class="keyword">sql</span>);  </span><br></pre></td></tr></table></figure>
</li>
<li><p>处理返回结果</p>
</li>
<li><p>释放资源</p>
</li>
</ul>
<h3 id="2-2-具体操作"><a href="#2-2-具体操作" class="headerlink" title="2.2  具体操作"></a>2.2  具体操作</h3><ul>
<li>创建新的空的项目</li>
</ul>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725165156501.png" alt="image-20210725165156501" style="zoom:70%;" />

<ul>
<li>定义项目的名称，并指定位置</li>
</ul>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725165220829.png" alt="image-20210725165220829" style="zoom:70%;" />

<ul>
<li>对项目进行设置，JDK版本、编译版本</li>
</ul>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725165349564.png" alt="image-20210725165349564" style="zoom:70%;" />

<ul>
<li>创建模块，指定模块的名称及位置</li>
</ul>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725165536898.png" alt="image-20210725165536898" style="zoom:70%;" />

<ul>
<li><p>导入驱动包</p>
<p>将mysql的驱动包放在模块下的lib目录（随意命名）下，并将该jar包添加为库文件</p>
</li>
</ul>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725165657556.png" alt="image-20210725165657556" style="zoom:80%;" />

<ul>
<li>在添加为库文件的时候，有如下三个选项<ul>
<li>Global Library  ： 全局有效</li>
<li>Project Library :   项目有效</li>
<li>Module Library ： 模块有效</li>
</ul>
</li>
</ul>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725165751273.png" alt="image-20210725165751273" style="zoom:80%;" />

<ul>
<li>在src下创建类</li>
</ul>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725170004319.png" alt="image-20210725170004319" style="zoom:70%;" />

<ul>
<li>编写代码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC快速入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        <span class="comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line">        <span class="comment">//2. 获取连接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/db1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="comment">//3. 定义sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set money = 2000 where id = 1&quot;</span>;</span><br><span class="line">        <span class="comment">//4. 获取执行sql的对象 Statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="comment">//5. 执行sql</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);<span class="comment">//受影响的行数</span></span><br><span class="line">        <span class="comment">//6. 处理结果</span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="comment">//7. 释放资源</span></span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、JDBC-API详解"><a href="#三、JDBC-API详解" class="headerlink" title="三、JDBC API详解"></a>三、JDBC API详解</h2><h3 id="3-1-DriverManager"><a href="#3-1-DriverManager" class="headerlink" title="3.1  DriverManager"></a>3.1  DriverManager</h3><p>DriverManager（驱动管理类）作用：</p>
<ul>
<li><p>注册驱动</p>
<p><img src="/../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725171339346.png" alt="image-20210725171339346"></p>
<p>registerDriver方法是用于注册驱动的，但是我们之前做的入门案例并不是这样写的。而是如下实现</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br></pre></td></tr></table></figure>

<p>我们查询MySQL提供的Driver类，看它是如何实现的，源码如下：</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725171635432.png" alt="image-20210725171635432" style="zoom:70%;" />

<p>在该类中的静态代码块中已经执行了 <code>DriverManager</code> 对象的 <code>registerDriver()</code> 方法进行驱动的注册了，那么我们只需要加载 <code>Driver</code> 类，该静态代码块就会执行。而 <code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code> 就可以加载 <code>Driver</code> 类。</p>
<blockquote>
<p>&#x3D;&#x3D;提示：&#x3D;&#x3D;</p>
<ul>
<li>MySQL 5之后的驱动包，可以省略注册驱动的步骤</li>
<li>自动加载jar包中META-INF&#x2F;services&#x2F;java.sql.Driver文件中的驱动类</li>
</ul>
</blockquote>
</li>
<li><p>获取数据库连接</p>
<p><img src="/../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725171355278.png" alt="image-20210725171355278"></p>
<p>参数说明：</p>
<ul>
<li><p>url ： 连接路径</p>
<blockquote>
<p>语法：jdbc:mysql:&#x2F;&#x2F;ip地址(域名):端口号&#x2F;数据库名称?参数键值对1&amp;参数键值对2…</p>
<p>示例：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;db1</p>
<p>&#x3D;&#x3D;细节：&#x3D;&#x3D;</p>
<ul>
<li><p>如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:&#x2F;&#x2F;&#x2F;数据库名称?参数键值对</p>
</li>
<li><p>配置 useSSL&#x3D;false 参数，禁用安全连接方式，解决警告提示</p>
</li>
</ul>
</blockquote>
</li>
<li><p>user ：用户名</p>
</li>
<li><p>poassword ：密码</p>
</li>
</ul>
</li>
</ul>
<h3 id="3-2-Connection"><a href="#3-2-Connection" class="headerlink" title="3.2  Connection"></a>3.2  Connection</h3><p>Connection（数据库连接对象）作用：</p>
<ul>
<li>获取执行 SQL 的对象</li>
<li>管理事务</li>
</ul>
<h4 id="3-2-1-获取执行对象"><a href="#3-2-1-获取执行对象" class="headerlink" title="3.2.1  获取执行对象"></a>3.2.1  获取执行对象</h4><ul>
<li><p>普通执行SQL对象</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Statement createStatement()</span><br></pre></td></tr></table></figure>

<p>入门案例中就是通过该方法获取的执行对象。</p>
</li>
<li><p>预编译SQL的执行SQL对象：防止SQL注入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">PreparedStatement  prepareStatement(<span class="keyword">sql</span>)</span><br></pre></td></tr></table></figure>

<p>通过这种方式获取的 <code>PreparedStatement</code> SQL语句执行对象是我们一会重点要进行讲解的，它可以防止SQL注入。</p>
</li>
<li><p>执行存储过程的对象</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CallableStatement prepareCall(<span class="keyword">sql</span>)</span><br></pre></td></tr></table></figure>

<p>通过这种方式获取的 <code>CallableStatement</code> 执行对象是用来执行存储过程的，而存储过程在MySQL中不常用，所以这个我们将不进行讲解。</p>
</li>
</ul>
<h4 id="3-2-2-事务管理"><a href="#3-2-2-事务管理" class="headerlink" title="3.2.2  事务管理"></a>3.2.2  事务管理</h4><p>先回顾一下MySQL事务管理的操作：</p>
<ul>
<li>开启事务 ： BEGIN; 或者 START TRANSACTION;</li>
<li>提交事务 ： COMMIT;</li>
<li>回滚事务 ： ROLLBACK;</li>
</ul>
<blockquote>
<p>MySQL默认是自动提交事务</p>
</blockquote>
<p>接下来学习JDBC事务管理的方法。</p>
<p>Connection几口中定义了3个对应的方法：</p>
<ul>
<li><p>开启事务</p>
<p><img src="/../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725173444628.png" alt="image-20210725173444628"></p>
<p>参与autoCommit 表示是否自动提交事务，true表示自动提交事务，false表示手动提交事务。而开启事务需要将该参数设为为false。</p>
</li>
<li><p>提交事务</p>
<p><img src="/../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725173618636.png" alt="image-20210725173618636"></p>
</li>
<li><p>回滚事务</p>
<p><img src="/../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725173648674.png" alt="image-20210725173648674"></p>
</li>
</ul>
<p>具体代码实现如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC API 详解：Connection</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public class JDBCDemo3_Connection &#123;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> void main(String[] args) throws Exception &#123;</span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span><span class="number">1.</span> 注册驱动</span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span><span class="number">2.</span> 获取连接：如果连接的是本机mysql并且端口是默认的 <span class="number">3306</span> 可以简化书写</span><br><span class="line">        String url <span class="operator">=</span> &quot;jdbc:mysql:///db1?useSSL=false&quot;;</span><br><span class="line">        String username <span class="operator">=</span> &quot;root&quot;;</span><br><span class="line">        String password <span class="operator">=</span> &quot;1234&quot;;</span><br><span class="line">        Connection conn <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span><span class="number">3.</span> 定义<span class="keyword">sql</span></span><br><span class="line">        String sql1 <span class="operator">=</span> &quot;update account set money = 3000 where id = 1&quot;;</span><br><span class="line">        String sql2 <span class="operator">=</span> &quot;update account set money = 3000 where id = 2&quot;;</span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span><span class="number">4.</span> 获取执行<span class="keyword">sql</span>的对象 Statement</span><br><span class="line">        Statement stmt <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>开启事务<span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span><span class="number">5.</span> 执行<span class="keyword">sql</span></span><br><span class="line">            <span class="type">int</span> count1 <span class="operator">=</span> stmt.executeUpdate(sql1);<span class="operator">/</span><span class="operator">/</span>受影响的行数</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span><span class="number">6.</span> 处理结果</span><br><span class="line">            System.out.println(count1);</span><br><span class="line">            <span class="type">int</span> i <span class="operator">=</span> <span class="number">3</span><span class="operator">/</span><span class="number">0</span>;</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span><span class="number">5.</span> 执行<span class="keyword">sql</span></span><br><span class="line">            <span class="type">int</span> count2 <span class="operator">=</span> stmt.executeUpdate(sql2);<span class="operator">/</span><span class="operator">/</span>受影响的行数</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span><span class="number">6.</span> 处理结果</span><br><span class="line">            System.out.println(count2);</span><br><span class="line"></span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>提交事务<span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span>程序运行到此处，说明没有出现任何问题，则需求提交事务</span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>回滚事务<span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span>程序在出现异常时会执行到这个地方，此时就需要回滚事务</span><br><span class="line">            conn.rollback();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span><span class="number">7.</span> 释放资源</span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-Statement"><a href="#3-3-Statement" class="headerlink" title="3.3  Statement"></a>3.3  Statement</h3><h4 id="3-3-1-概述"><a href="#3-3-1-概述" class="headerlink" title="3.3.1  概述"></a>3.3.1  概述</h4><p>Statement对象的作用就是用来执行SQL语句。而针对不同类型的SQL语句使用的方法也不一样。</p>
<ul>
<li><p>执行DDL、DML语句</p>
<p><img src="/../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725175151272.png" alt="image-20210725175151272"></p>
</li>
<li><p>执行DQL语句</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725175131533.png" alt="image-20210725175131533" style="zoom:80%;" />

<p>该方法涉及到了 <code>ResultSet</code> 对象，而这个对象我们还没有学习，一会再重点讲解。</p>
</li>
</ul>
<h4 id="3-3-2-代码实现"><a href="#3-3-2-代码实现" class="headerlink" title="3.3.2  代码实现"></a>3.3.2  代码实现</h4><ul>
<li><p>执行DML语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 执行DML语句</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDML</span><span class="params">()</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">    <span class="comment">//1. 注册驱动</span></span><br><span class="line">    <span class="comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line">    <span class="comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">    <span class="comment">//3. 定义sql</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set money = 3000 where id = 1&quot;</span>;</span><br><span class="line">    <span class="comment">//4. 获取执行sql的对象 Statement</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">    <span class="comment">//5. 执行sql</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);<span class="comment">//执行完DML语句，受影响的行数</span></span><br><span class="line">    <span class="comment">//6. 处理结果</span></span><br><span class="line">    <span class="comment">//System.out.println(count);</span></span><br><span class="line">    <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改成功~&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改失败~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//7. 释放资源</span></span><br><span class="line">    stmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行DDL语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 执行DDL语句</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDDL</span><span class="params">()</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">    <span class="comment">//1. 注册驱动</span></span><br><span class="line">    <span class="comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line">    <span class="comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">    <span class="comment">//3. 定义sql</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;drop database db2&quot;</span>;</span><br><span class="line">    <span class="comment">//4. 获取执行sql的对象 Statement</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">    <span class="comment">//5. 执行sql</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);<span class="comment">//执行完DDL语句，可能是0</span></span><br><span class="line">    <span class="comment">//6. 处理结果</span></span><br><span class="line">    System.out.println(count);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. 释放资源</span></span><br><span class="line">    stmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ul>
<li>以后开发很少使用java代码操作DDL语句</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="3-4-ResultSet"><a href="#3-4-ResultSet" class="headerlink" title="3.4  ResultSet"></a>3.4  ResultSet</h3><h4 id="3-4-1-概述"><a href="#3-4-1-概述" class="headerlink" title="3.4.1  概述"></a>3.4.1  概述</h4><p>ResultSet（结果集对象）作用：</p>
<ul>
<li>&#x3D;&#x3D;封装了SQL查询语句的结果。&#x3D;&#x3D;</li>
</ul>
<p>而执行了DQL语句后就会返回该对象，对应执行DQL语句的方法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ResultSet  executeQuery(<span class="keyword">sql</span>)：执行DQL 语句，返回 ResultSet 对象</span><br></pre></td></tr></table></figure>

<p>那么我们就需要从 <code>ResultSet</code> 对象中获取我们想要的数据。<code>ResultSet</code> 对象提供了操作查询结果数据的方法，如下：</p>
<blockquote>
<p>boolean  next()</p>
<ul>
<li>将光标从当前位置向前移动一行 </li>
<li>判断当前行是否为有效行</li>
</ul>
<p>方法返回值说明：</p>
<ul>
<li>true  ： 有效航，当前行有数据</li>
<li>false ： 无效行，当前行没有数据</li>
</ul>
</blockquote>
<blockquote>
<p>xxx  getXxx(参数)：获取数据</p>
<ul>
<li>xxx : 数据类型；如： int getInt(参数) ；String getString(参数)</li>
<li>参数<ul>
<li>int类型的参数：列的编号，从1开始</li>
<li>String类型的参数： 列的名称</li>
</ul>
</li>
</ul>
</blockquote>
<p>如下图为执行SQL语句后的结果</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725181320813.png" alt="image-20210725181320813" style="zoom:80%;" />

<p>一开始光标指定于第一行前，如图所示红色箭头指向于表头行。当我们调用了 <code>next()</code> 方法后，光标就下移到第一行数据，并且方法返回true，此时就可以通过 <code>getInt(&quot;id&quot;)</code> 获取当前行id字段的值，也可以通过 <code>getString(&quot;name&quot;)</code> 获取当前行name字段的值。如果想获取下一行的数据，继续调用 <code>next()</code>  方法，以此类推。</p>
<h4 id="3-4-2-代码实现"><a href="#3-4-2-代码实现" class="headerlink" title="3.4.2  代码实现"></a>3.4.2  代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 执行DQL</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testResultSet</span><span class="params">()</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">    <span class="comment">//1. 注册驱动</span></span><br><span class="line">    <span class="comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line">    <span class="comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">    <span class="comment">//3. 定义sql</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line">    <span class="comment">//4. 获取statement对象</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">    <span class="comment">//5. 执行sql</span></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line">    <span class="comment">//6. 处理结果， 遍历rs中的所有数据</span></span><br><span class="line">    <span class="comment">/* // 6.1 光标向下移动一行，并且判断当前行是否有数据</span></span><br><span class="line"><span class="comment">        while (rs.next())&#123;</span></span><br><span class="line"><span class="comment">            //6.2 获取数据  getXxx()</span></span><br><span class="line"><span class="comment">            int id = rs.getInt(1);</span></span><br><span class="line"><span class="comment">            String name = rs.getString(2);</span></span><br><span class="line"><span class="comment">            double money = rs.getDouble(3);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            System.out.println(id);</span></span><br><span class="line"><span class="comment">            System.out.println(name);</span></span><br><span class="line"><span class="comment">            System.out.println(money);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            System.out.println(&quot;--------------&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    <span class="comment">// 6.1 光标向下移动一行，并且判断当前行是否有数据</span></span><br><span class="line">    <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">        <span class="comment">//6.2 获取数据  getXxx()</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> rs.getDouble(<span class="string">&quot;money&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(id);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(money);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. 释放资源</span></span><br><span class="line">    rs.close();</span><br><span class="line">    stmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-5-案例"><a href="#3-5-案例" class="headerlink" title="3.5  案例"></a>3.5  案例</h3><ul>
<li><p>需求：查询account账户表数据，封装为Account对象中，并且存储到ArrayList集合中</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725182352433.png" alt="image-20210725182352433" style="zoom:80%;" />
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 查询account账户表数据，封装为Account对象中，并且存储到ArrayList集合中</span></span><br><span class="line"><span class="comment">  * 1. 定义实体类Account</span></span><br><span class="line"><span class="comment">  * 2. 查询数据，封装到Account对象中</span></span><br><span class="line"><span class="comment">  * 3. 将Account对象存入ArrayList集合中</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testResultSet2</span><span class="params">()</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">    <span class="comment">//1. 注册驱动</span></span><br><span class="line">    <span class="comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line">    <span class="comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 定义sql</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 获取statement对象</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 执行sql</span></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建集合</span></span><br><span class="line">    List&lt;Account&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 6.1 光标向下移动一行，并且判断当前行是否有数据</span></span><br><span class="line">    <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.2 获取数据  getXxx()</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> rs.getDouble(<span class="string">&quot;money&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//赋值</span></span><br><span class="line">        account.setId(id);</span><br><span class="line">        account.setName(name);</span><br><span class="line">        account.setMoney(money);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存入集合</span></span><br><span class="line">        list.add(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. 释放资源</span></span><br><span class="line">    rs.close();</span><br><span class="line">    stmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-6-PreparedStatement"><a href="#3-6-PreparedStatement" class="headerlink" title="3.6  PreparedStatement"></a>3.6  PreparedStatement</h3><blockquote>
<p>PreparedStatement作用：</p>
<ul>
<li>预编译SQL语句并执行：预防SQL注入问题</li>
</ul>
</blockquote>
<p>对上面的作用中SQL注入问题大家肯定不理解。那我们先对SQL注入进行说明.</p>
<h4 id="3-6-1-SQL注入"><a href="#3-6-1-SQL注入" class="headerlink" title="3.6.1  SQL注入"></a>3.6.1  SQL注入</h4><blockquote>
<p>SQL注入是通过操作输入来修改事先定义好的SQL语句，用以达到执行代码对服务器进行攻击的方法。</p>
</blockquote>
<p>在今天资料下的 <code>day03-JDBC\资料\2. sql注入演示</code> 中修改 <code>application.properties</code> 文件中的用户名和密码，文件内容如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure>

<p>在MySQL中创建名为 <code>test</code> 的数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database test;</span><br></pre></td></tr></table></figure>

<p>在命令提示符中运行今天资料下的 <code>day03-JDBC\资料\2. sql注入演示\sql.jar</code> 这个jar包。</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725184701026.png" alt="image-20210725184701026" style="zoom:80%;" /> 

<p>此时我们就能在数据库中看到user表</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725184817731.png" alt="image-20210725184817731" style="zoom:80%;" />

<p>接下来在浏览器的地址栏输入 <code>localhost:8080/login.html</code> 就能看到如下页面</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725185024731.png" alt="image-20210725185024731" style="zoom:80%;" />

<p>我们就可以在如上图中输入用户名和密码进行登陆。用户名和密码输入正确就登陆成功，跳转到首页。用户名和密码输入错误则给出错误提示，如下图</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725185320875.png" alt="image-20210725185320875" style="zoom:80%;" />

<p>但是我可以通过输入一些特殊的字符登陆到首页。</p>
<p>用户名随意写，密码写成 <code>&#39; or &#39;1&#39; =&#39;1</code></p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725185603112.png" alt="image-20210725185603112" style="zoom:80%;" />

<p>这就是SQL注入漏洞，也是很危险的。当然现在市面上的系统都不会存在这种问题了，所以大家也不要尝试用这种方式去试其他的系统。</p>
<p>那么该如何解决呢？这里就可以将SQL执行对象 <code>Statement</code> 换成 <code>PreparedStatement</code> 对象。</p>
<h4 id="3-6-2-代码模拟SQL注入问题"><a href="#3-6-2-代码模拟SQL注入问题" class="headerlink" title="3.6.2  代码模拟SQL注入问题"></a>3.6.2  代码模拟SQL注入问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLogin</span><span class="params">()</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">    <span class="comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收用户输入 用户名和密码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;sjdljfld&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;&#x27; or &#x27;1&#x27; = &#x27;1&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from tb_user where username = &#x27;&quot;</span>+name+<span class="string">&quot;&#x27; and password = &#x27;&quot;</span>+pwd+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取stmt对象</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">    <span class="comment">// 执行sql</span></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line">    <span class="comment">// 判断登录是否成功</span></span><br><span class="line">    <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录成功~&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录失败~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. 释放资源</span></span><br><span class="line">    rs.close();</span><br><span class="line">    stmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码是将用户名和密码拼接到sql语句中，拼接后的sql语句如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;sjdljfld&#x27;</span> <span class="keyword">and</span> password <span class="operator">=</span> <span class="string">&#x27;&#x27;</span><span class="keyword">or</span> <span class="string">&#x27;1&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure>

<p>从上面语句可以看出条件 <code>username = &#39;sjdljfld&#39; and password = &#39;&#39;</code> 不管是否满足，而 <code>or</code> 后面的 <code>&#39;1&#39; = &#39;1&#39;</code> 是始终满足的，最终条件是成立的，就可以正常的进行登陆了。</p>
<p>接下来我们来学习PreparedStatement对象.</p>
<h4 id="3-6-3-PreparedStatement概述"><a href="#3-6-3-PreparedStatement概述" class="headerlink" title="3.6.3  PreparedStatement概述"></a>3.6.3  PreparedStatement概述</h4><blockquote>
<p>PreparedStatement作用：</p>
<ul>
<li>预编译SQL语句并执行：预防SQL注入问题</li>
</ul>
</blockquote>
<ul>
<li><p>获取 PreparedStatement 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SQL语句中的参数值，使用？占位符替代</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where username = ? and password = ?&quot;</span>;</span><br><span class="line"><span class="comment">// 通过Connection对象获取，并传入对应的sql语句</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置参数值</p>
<p>上面的sql语句中参数使用 ? 进行占位，在之前之前肯定要设置这些 ?  的值。</p>
<blockquote>
<p>PreparedStatement对象：setXxx(参数1，参数2)：给 ? 赋值</p>
<ul>
<li><p>Xxx：数据类型 ； 如 setInt (参数1，参数2)</p>
</li>
<li><p>参数：</p>
<ul>
<li><p>参数1： ？的位置编号，从1 开始</p>
</li>
<li><p>参数2： ？的值</p>
</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>执行SQL语句</p>
<blockquote>
<p>executeUpdate();  执行DDL语句和DML语句</p>
<p>executeQuery();  执行DQL语句</p>
<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p>
<ul>
<li>调用这两个方法时不需要传递SQL语句，因为获取SQL语句执行对象时已经对SQL语句进行预编译了。</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="3-6-4-使用PreparedStatement改进"><a href="#3-6-4-使用PreparedStatement改进" class="headerlink" title="3.6.4  使用PreparedStatement改进"></a>3.6.4  使用PreparedStatement改进</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPreparedStatement</span><span class="params">()</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">    <span class="comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收用户输入 用户名和密码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;&#x27; or &#x27;1&#x27; = &#x27;1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义sql</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from tb_user where username = ? and password = ?&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取pstmt对象</span></span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">    <span class="comment">// 设置？的值</span></span><br><span class="line">    pstmt.setString(<span class="number">1</span>,name);</span><br><span class="line">    pstmt.setString(<span class="number">2</span>,pwd);</span><br><span class="line">    <span class="comment">// 执行sql</span></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery();</span><br><span class="line">    <span class="comment">// 判断登录是否成功</span></span><br><span class="line">    <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录成功~&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录失败~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//7. 释放资源</span></span><br><span class="line">    rs.close();</span><br><span class="line">    pstmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行上面语句就可以发现不会出现SQL注入漏洞问题了。那么PreparedStatement又是如何解决的呢？它是将特殊字符进行了转义，转义的SQL如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;sjdljfld&#x27;</span> <span class="keyword">and</span> password <span class="operator">=</span> <span class="string">&#x27;\&#x27;</span><span class="keyword">or</span> \<span class="string">&#x27;1\&#x27;</span> <span class="operator">=</span> \<span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure>



<h4 id="3-6-5-PreparedStatement原理"><a href="#3-6-5-PreparedStatement原理" class="headerlink" title="3.6.5  PreparedStatement原理"></a>3.6.5  PreparedStatement原理</h4><blockquote>
<p>PreparedStatement 好处：</p>
<ul>
<li>预编译SQL，性能更高</li>
<li>防止SQL注入：&#x3D;&#x3D;将敏感字符进行转义&#x3D;&#x3D;</li>
</ul>
</blockquote>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725195756848.png" alt="image-20210725195756848" style="zoom:80%;" />

<p>Java代码操作数据库流程如图所示：</p>
<ul>
<li><p>将sql语句发送到MySQL服务器端</p>
</li>
<li><p>MySQL服务端会对sql语句进行如下操作</p>
<ul>
<li><p>检查SQL语句</p>
<p>检查SQL语句的语法是否正确。</p>
</li>
<li><p>编译SQL语句。将SQL语句编译成可执行的函数。</p>
<p>检查SQL和编译SQL花费的时间比执行SQL的时间还要长。如果我们只是重新设置参数，那么检查SQL语句和编译SQL语句将不需要重复执行。这样就提高了性能。</p>
</li>
<li><p>执行SQL语句</p>
</li>
</ul>
</li>
</ul>
<p>接下来我们通过查询日志来看一下原理。</p>
<ul>
<li><p>开启预编译功能</p>
<p>在代码中编写url时需要加上以下参数。而我们之前根本就没有开启预编译功能，只是解决了SQL注入漏洞。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">useServerPrepStmts<span class="operator">=</span><span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置MySQL执行日志（重启mysql服务后生效）</p>
<p>在mysql配置文件（my.ini）中添加如下配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">log-output=FILE</span><br><span class="line">general-log=1</span><br><span class="line">general_log_file=&quot;D:\mysql.log&quot;</span><br><span class="line">slow-query-log=1</span><br><span class="line">slow_query_log_file=&quot;D:\mysql_slow.log&quot;</span><br><span class="line">long_query_time=2</span><br></pre></td></tr></table></figure>
</li>
<li><p>java测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * PreparedStatement原理</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPreparedStatement2</span><span class="params">()</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span></span><br><span class="line">    <span class="comment">// useServerPrepStmts=true 参数开启预编译功能</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///db1?useSSL=false&amp;useServerPrepStmts=true&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收用户输入 用户名和密码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;&#x27; or &#x27;1&#x27; = &#x27;1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义sql</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from tb_user where username = ? and password = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取pstmt对象</span></span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">    Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">    <span class="comment">// 设置？的值</span></span><br><span class="line">    pstmt.setString(<span class="number">1</span>,name);</span><br><span class="line">    pstmt.setString(<span class="number">2</span>,pwd);</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 执行sql</span></span><br><span class="line">    rs = pstmt.executeQuery();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置？的值</span></span><br><span class="line">    pstmt.setString(<span class="number">1</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    pstmt.setString(<span class="number">2</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">    <span class="comment">// 执行sql</span></span><br><span class="line">    rs = pstmt.executeQuery();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断登录是否成功</span></span><br><span class="line">    <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录成功~&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录失败~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. 释放资源</span></span><br><span class="line">    rs.close();</span><br><span class="line">    pstmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>执行SQL语句，查看 <code>D:\mysql.log</code> 日志如下:</p>
<p><img src="/../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725202829738.png" alt="image-20210725202829738"></p>
<p>上图中第三行中的 <code>Prepare</code> 是对SQL语句进行预编译。第四行和第五行是执行了两次SQL语句，而第二次执行前并没有对SQL进行预编译。</p>
</li>
</ul>
<blockquote>
<p>&#x3D;&#x3D;小结：&#x3D;&#x3D;</p>
<ul>
<li>在获取PreparedStatement对象时，将sql语句发送给mysql服务器进行检查，编译（这些步骤很耗时）</li>
<li>执行时就不用再进行这些步骤了，速度更快</li>
<li>如果sql模板一样，则只需要进行一次检查、编译</li>
</ul>
</blockquote>
<h2 id="四、数据库连接池"><a href="#四、数据库连接池" class="headerlink" title="四、数据库连接池"></a>四、数据库连接池</h2><h3 id="4-1-数据库连接池简介"><a href="#4-1-数据库连接池简介" class="headerlink" title="4.1  数据库连接池简介"></a>4.1  数据库连接池简介</h3><blockquote>
<ul>
<li><p>数据库连接池是个容器，负责分配、管理数据库连接(Connection)</p>
</li>
<li><p>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；</p>
</li>
<li><p>释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏</p>
</li>
<li><p>好处</p>
<ul>
<li>资源重用</li>
<li>提升系统响应速度</li>
<li>避免数据库连接遗漏</li>
</ul>
</li>
</ul>
</blockquote>
<p>之前我们代码中使用连接是没有使用都创建一个Connection对象，使用完毕就会将其销毁。这样重复创建销毁的过程是特别耗费计算机的性能的及消耗时间的。</p>
<p>而数据库使用了数据库连接池后，就能达到Connection对象的复用，如下图</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725210432985.png" alt="image-20210725210432985" style="zoom:80%;" />

<p>连接池是在一开始就创建好了一些连接（Connection）对象存储起来。用户需要连接数据库时，不需要自己创建连接，而只需要从连接池中获取一个连接进行使用，使用完毕后再将连接对象归还给连接池；这样就可以起到资源重用，也节省了频繁创建连接销毁连接所花费的时间，从而提升了系统响应的速度。</p>
<h3 id="4-2-数据库连接池实现"><a href="#4-2-数据库连接池实现" class="headerlink" title="4.2  数据库连接池实现"></a>4.2  数据库连接池实现</h3><ul>
<li><p>标准接口：&#x3D;&#x3D;DataSource&#x3D;&#x3D;</p>
<p>官方(SUN) 提供的数据库连接池标准接口，由第三方组织实现此接口。该接口提供了获取连接的功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection <span class="title function_">getConnection</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<p>那么以后就不需要通过 <code>DriverManager</code> 对象获取 <code>Connection</code> 对象，而是通过连接池（DataSource）获取 <code>Connection</code> 对象。</p>
</li>
<li><p>常见的数据库连接池</p>
<ul>
<li>DBCP</li>
<li>C3P0</li>
<li>Druid</li>
</ul>
<p>我们现在使用更多的是Druid，它的性能比其他两个会好一些。</p>
</li>
<li><p>Druid（德鲁伊）</p>
<ul>
<li><p>Druid连接池是阿里巴巴开源的数据库连接池项目 </p>
</li>
<li><p>功能强大，性能优秀，是Java语言最好的数据库连接池之一</p>
</li>
</ul>
</li>
</ul>
<h3 id="4-3-Driud使用"><a href="#4-3-Driud使用" class="headerlink" title="4.3  Driud使用"></a>4.3  Driud使用</h3><blockquote>
<ul>
<li>导入jar包 druid-1.1.12.jar</li>
<li>定义配置文件</li>
<li>加载配置文件</li>
<li>获取数据库连接池对象</li>
<li>获取连接</li>
</ul>
</blockquote>
<p>现在通过代码实现，首先需要先将druid的jar包放到项目下的lib下并添加为库文件</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725212911980.png" alt="image-20210725212911980" style="zoom:80%;" />

<p>项目结构如下：</p>
<img src="../../../BaiduNetdiskDownload/JavaWeb%25E2%2580%2594%25E8%25B5%2584%25E6%2596%2599/day03-JDBC/assets/image-20210725213210091.png" alt="image-20210725213210091" style="zoom:80%;" />

<p>编写配置文件如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///db1?useSSL=false&amp;useServerPrepStmts=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">1234</span></span><br><span class="line"><span class="comment"># 初始化连接数量</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 最大等待时间</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure>

<p>使用druid的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid数据库连接池演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.导入jar包</span></span><br><span class="line">        <span class="comment">//2.定义配置文件</span></span><br><span class="line">        <span class="comment">//3. 加载配置文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc-demo/src/druid.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//4. 获取连接池对象</span></span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(prop);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 获取数据库连接 Connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">        System.out.println(connection); <span class="comment">//获取到了连接后就可以继续做其他操作了</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(System.getProperty(&quot;user.dir&quot;));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础面试题整理</title>
    <url>/posts/2009548799.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="面向对象和面向过程的区别？"><a href="#面向对象和面向过程的区别？" class="headerlink" title="面向对象和面向过程的区别？"></a>面向对象和面向过程的区别？</h2><ul>
<li><strong>面向过程：</strong>是指分析出解决问题的步骤，然后用函数将这些步骤一步步实现，然后在使用的时候一一调用即可。性能较高，所以单片机嵌入式等开发一般使用面向过程开发。</li>
<li><strong>面向对象：</strong>是指把构成问题的事务分解成各种对象，建立对象的目的不是为了完成一个个步骤，而是为了描述该对象在解决整个问题的过程中所发生的行为。面向对象有封装继承多态的特性，所以易维护、易复用、易扩展。可以设计出低耦合的系统。但是性能比面向过程低。</li>
</ul>
<hr>
<h2 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h2><ol>
<li><p>重载就是在一个类中同名的方法具有不同的参数列表（<strong>参数类型、参数个数以及参数顺序不同</strong>）都被视为重载，但是重载对返回类型没有要求，可以相同也可以不同。</p>
</li>
<li><p>重写就是指子类继承了父类中原有的方法，但是有时候子类不想原封不动的继承父类中的某个方法，所以对方法体进行修改或者重写。</p>
</li>
<li><ol>
<li>重写，<strong>方法名、参数列表和返回值必须相同</strong>，抛出的异常范围要小于等于父类，访问权限要大于等于父类。</li>
<li>如果父类中的方法访问修饰符为<strong>private&#x2F;final&#x2F;static</strong>，则子类就不能重写该方法。</li>
</ol>
</li>
</ol>
<hr>
<h2 id="String、StringBuffer和StringBuilder的区别是什么？String为什么是不可变的？"><a href="#String、StringBuffer和StringBuilder的区别是什么？String为什么是不可变的？" class="headerlink" title="String、StringBuffer和StringBuilder的区别是什么？String为什么是不可变的？"></a>String、StringBuffer和StringBuilder的区别是什么？String为什么是不可变的？</h2><h4 id="可变性："><a href="#可变性：" class="headerlink" title="可变性："></a>可变性：</h4><ol>
<li>String类中使用final关键字修饰字符数组来保存字符串，所以String对象是不可变的。</li>
<li>StringBuilder和StringBuffer都继承了AbstractStringBuilder类，在AbstractStringBuilder类中也是使用了字符数组进行保存字符串，但是没有使用final关键字修饰，所以这两种对象是可变的。</li>
</ol>
<h3 id="线程安全及性能"><a href="#线程安全及性能" class="headerlink" title="线程安全及性能"></a>线程安全及性能</h3><ol>
<li><p>String中对象是不可变的，可以理解为常量，线程安全。</p>
</li>
<li><p>StringBuilder和StringBuffer都继承了AbstractStringBuilder类，而AbstractStringBuilder类中定义了一些字符串的基本操作方法。</p>
</li>
<li><ol>
<li>而StringBuffer对这些方法或者对调用的方法加了同步锁，所以是线程安全的，效率相对较低。一般在多线程中使用。</li>
<li>StringBuilder没有对这些方法加同步锁，所以是非线程安全的，效率相对较高。一般在单线程中使用。</li>
</ol>
</li>
</ol>
<hr>
<h2 id="自动装箱和拆箱"><a href="#自动装箱和拆箱" class="headerlink" title="自动装箱和拆箱"></a>自动装箱和拆箱</h2><p><strong>每个基本数据类型都对应了一个包装类。</strong></p>
<ol>
<li><strong>自动装箱：</strong>是指将基本数据类型包装为一个包装类对象，例如像一个泛型为Integer的集合中添加int类型的变量。</li>
<li><strong>自动拆箱：</strong>将一个包装类对象转换为一个基本数据类型，例如将一个包装类对象赋值给一个基本数据类型的变量。</li>
</ol>
<hr>
<h2 id="接口和抽象类的区别是什么？"><a href="#接口和抽象类的区别是什么？" class="headerlink" title="接口和抽象类的区别是什么？"></a>接口和抽象类的区别是什么？</h2><ol>
<li>接口的方法默认是public，且只能包含<strong>抽象方法和静态方法</strong>，所有方法在接口中不能有实现(Java8之后接口方法可以有默认实现)，而抽象类中可以包含<strong>普通方法。</strong></li>
<li>接口中除了<strong>static、final变量</strong>，不能有其他的变量，而抽象类中的成员变量可以是<strong>各种类型</strong>的。</li>
<li><strong>一个类可以实现多个接口，但是只能继承一个抽象类</strong>。接口自身也可以通过extends关键字来扩展多个接口。</li>
<li>（<strong>是否有构造器</strong>）接口不能包含构造器，抽象类可以包含<strong>构造器</strong>，抽象类里的构造器并不是用于创建对象，而是<strong>让其子类调用这些构造器</strong>来<strong>完成</strong>属于<strong>抽象类的初始化操作</strong>。</li>
<li>从设计层面来说，抽象是对类的抽象，是一种模板设计；而接口是对行为的抽象，是一种行为的规范。</li>
</ol>
<hr>
<h2 id="创建一个对象用什么运算符？-对象实体和对象引用有何不同"><a href="#创建一个对象用什么运算符？-对象实体和对象引用有何不同" class="headerlink" title="创建一个对象用什么运算符？ 对象实体和对象引用有何不同?"></a>创建一个对象用什么运算符？ 对象实体和对象引用有何不同?</h2><p>使用new运算符，new用来创建对象实例，对象实例存在于堆内存中，对象引用存在于栈内存中，对象引用指向对象实例。</p>
<hr>
<h2 id="一个类的构造方法的作用是什么？如果一个类没有声明构造方法，该程序能正确执行吗？为什么？"><a href="#一个类的构造方法的作用是什么？如果一个类没有声明构造方法，该程序能正确执行吗？为什么？" class="headerlink" title="一个类的构造方法的作用是什么？如果一个类没有声明构造方法，该程序能正确执行吗？为什么？"></a>一个类的构造方法的作用是什么？如果一个类没有声明构造方法，该程序能正确执行吗？为什么？</h2><p>类的构造方法的主要作用是完成对类对象的初始化工作；可以执行；因为一个类即使没有声明构造方法也会有默认不带参数的构造方法。</p>
<hr>
<h2 id="静态方法和实例方法"><a href="#静态方法和实例方法" class="headerlink" title="静态方法和实例方法"></a>静态方法和实例方法</h2><ol>
<li>在外部调用静态方法时，可以使用类名.方法名的方式也可以使用对象名.方法名的方式；而调用实例方法只能使用对象名.方法名的方式。</li>
<li>静态方法在访问本类内部的成员时，只能访问静态成员（即静态变量和静态方法），而不允许访问实例成员变量和实例成员方法；实例方法没有这个限制。</li>
</ol>
<hr>
<h2 id="x3D-x3D-和equals"><a href="#x3D-x3D-和equals" class="headerlink" title="&#x3D;&#x3D;和equals"></a>&#x3D;&#x3D;和equals</h2><ul>
<li><p>&#x3D;&#x3D; 的作用：</p>
</li>
<li><ul>
<li>基本类型：比较值是否相等</li>
<li>引用类型：比较的是对象的内存地址值是否相等</li>
</ul>
</li>
<li><p>equals 的作用:	</p>
</li>
<li><ul>
<li>基本类型：<strong>不能</strong>用于判断基本数据类型的变量</li>
<li>引用类型：用于比较两个对象的内容是否相等，<strong>默认况下，因为所有的类都继承了Object类，Object类中的equals方法使用的是&#x3D;&#x3D;，所以是比较内存地址值是否相等。</strong>也可以按照需求逻辑，重写覆盖掉对象的equals方法。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="HashCode的作用"><a href="#HashCode的作用" class="headerlink" title="HashCode的作用"></a>HashCode的作用</h2><ul>
<li><p>Java中的集合有两类，一类是List，一类是Set。前者有序可重复，后者无序不可重复。当在Set集合汇总插入元素时怎么判断元素是否存在呢？可以通过equals方法。但是如果元素太多，就要使用很多次equals方法，就会比较慢。</p>
</li>
<li><p><strong>HashCode就是根据对象的内存地址换算出来的一个值。</strong>这样当集合添加新元素时，先调用这个元素的hashCode方法，就能定位到他应该放置的物理位置上。</p>
</li>
<li><ul>
<li>如果该位置上没有元素，就不用进行任何比较，直接在这个位置上进行存储。</li>
<li><strong>如果该位置上有元素，才调用equals方法与该元素进行比较，相同的话就不进行存储，不相同就散列到其他地址。</strong></li>
</ul>
</li>
<li><p>这样调用equals方法次数就大大降低了，提升了效率。</p>
</li>
</ul>
<hr>
<h2 id="有没有可能两个不相等的对象有相同的HashCode"><a href="#有没有可能两个不相等的对象有相同的HashCode" class="headerlink" title="有没有可能两个不相等的对象有相同的HashCode"></a>有没有可能两个不相等的对象有相同的HashCode</h2><p>有可能</p>
<p>两个对象具有相同的hashCode时代表发生了哈希冲突，一般有以下三种解决方式：</p>
<ul>
<li><strong>拉链法：</strong>每个哈希表节点都有一个next指针，多个哈希表节点可以通过next指针相连构成一条单链表，这样，发生哈希冲突的对象就可以使用这条单链表进行存储。</li>
<li><strong>开发定址法：</strong>一旦发生了哈希冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入。</li>
<li><strong>双哈希法：</strong>有多个哈希函数，当发生哈希冲突时，使用第二个、第三个哈希函数进行继续计算地址，直到没有冲突</li>
</ul>
<hr>
<h2 id="为什么重写equals时必须重写hashcode方法？"><a href="#为什么重写equals时必须重写hashcode方法？" class="headerlink" title="为什么重写equals时必须重写hashcode方法？"></a>为什么重写equals时必须重写hashcode方法？</h2><ul>
<li>因为如果两个对象相等，则HashCode也一定是相同的。</li>
<li>但是两个对象有相同的hashcode值，他们不一定是相同的。</li>
<li>因此重写equals方法时必须重写hashcode方法。</li>
</ul>
<hr>
<h2 id="Java中是值传递还是引用传递"><a href="#Java中是值传递还是引用传递" class="headerlink" title="Java中是值传递还是引用传递"></a>Java中是值传递还是引用传递</h2><ol>
<li>按值调用时值方法接收的是调用者提供的值；按引用调用是指方法接收的是调用者提供的变量地址。</li>
<li>Java总是按值调用的，方法得到的是所有<strong>参数值的副本</strong>，传递对象时实际上方法接收到的是<strong>对象引用的副本。</strong></li>
</ol>
<hr>
<h2 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h2><ul>
<li>浅拷贝：只复制当前对象的基本数据类型和引用变量，但是引用变量指向的那些对象不进行复制，<strong>引用变量指向的仍然是原对象中引用变量所指向的值。</strong>修改克隆对象可能回影响原对象，不安全。</li>
<li>深拷贝：完全拷贝了基本数据类型和引用数据类型以及引用数据类型指向的对象，也进行了复制。<strong>也就是说深拷贝把要复制的对象所引用的对象也全部进行了复制。</strong></li>
</ul>
<hr>
<h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><p>final关键字主要用在三个地方：变量、方法、类</p>
<ol>
<li>对于一个final变量，如果是基本数据类型的变量，则其数值一旦初始化之后就<strong>不能改变</strong>；如果是引用类型的变量，则在对其进行初始化之后就<strong>不能再让其指向另一个对象。</strong></li>
<li>final修饰的<strong>方法不能被重写</strong>，但是子类可以使用父类中final修饰的方法；</li>
<li>当用final秀是一个类时，表明这个类<strong>不能被继承</strong>，final类中的所有成员方法都会被隐式的指定为final方法。</li>
</ol>
<hr>
<h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><ul>
<li><p>可以修饰变量和方法，被static关键字修饰的变量和方法被称为静态变量和静态方法，</p>
</li>
<li><ul>
<li>都属于类的静态资源</li>
<li>是被类的实例所共享的</li>
<li>可以通过类名.对象或者方法名的方式直接调用</li>
</ul>
</li>
<li><p>static还可以用于静态代码块，一般用于一些初始化操作</p>
</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>JVM学习笔记</title>
    <url>/posts/683593723.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="1-JVM的位置"><a href="#1-JVM的位置" class="headerlink" title="1. JVM的位置"></a>1. JVM的位置</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220804212543691.png" alt="image-20220804212543691"></p>
<p>JRE里面包含了JVM。</p>
<h3 id="2-JVM的体系结构"><a href="#2-JVM的体系结构" class="headerlink" title="2.JVM的体系结构"></a>2.JVM的体系结构</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220804213427186.png" alt="image-20220804213427186"></p>
<p>体系结构图</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220804213148863.png" alt="image-20220804213148863"></p>
<p>垃圾回收不会在栈里面存在，因为如果栈里面有垃圾，出栈就会被堵住，就会产生问题。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220804213404133.png" alt="image-20220804213404133"></p>
<p>所谓的JVM调优其实百分之九十九都是在调堆和方法区，主要是堆。</p>
<h3 id="3-类加载器"><a href="#3-类加载器" class="headerlink" title="3. 类加载器"></a>3. 类加载器</h3><p>作用：加载Class文件 </p>
<p>类是模板，用来创建实例。</p>
<h3 id="4-双亲委派机制"><a href="#4-双亲委派机制" class="headerlink" title="4.双亲委派机制"></a>4.双亲委派机制</h3><h3 id="5-沙箱安全机制"><a href="#5-沙箱安全机制" class="headerlink" title="5.沙箱安全机制"></a>5.沙箱安全机制</h3><h3 id="6-Native"><a href="#6-Native" class="headerlink" title="6.Native"></a>6.Native</h3><h3 id="7-PC寄存器"><a href="#7-PC寄存器" class="headerlink" title="7.PC寄存器"></a>7.PC寄存器</h3><h3 id="8-方法区"><a href="#8-方法区" class="headerlink" title="8.方法区"></a>8.方法区</h3><h3 id="9-栈"><a href="#9-栈" class="headerlink" title="9.栈"></a>9.栈</h3><h3 id="10-三种JVM"><a href="#10-三种JVM" class="headerlink" title="10.三种JVM"></a>10.三种JVM</h3><h3 id="11-堆"><a href="#11-堆" class="headerlink" title="11.堆"></a>11.堆</h3><h3 id="12-新生区、老年区"><a href="#12-新生区、老年区" class="headerlink" title="12.新生区、老年区"></a>12.新生区、老年区</h3><h3 id="13-永久区"><a href="#13-永久区" class="headerlink" title="13.永久区"></a>13.永久区</h3><h3 id="14-堆内存调优"><a href="#14-堆内存调优" class="headerlink" title="14.堆内存调优"></a>14.堆内存调优</h3><h3 id="15-GC"><a href="#15-GC" class="headerlink" title="15.GC"></a>15.GC</h3>]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>IO流&amp;反射面试题整理</title>
    <url>/posts/2124298461.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="说说Java中的IO流"><a href="#说说Java中的IO流" class="headerlink" title="说说Java中的IO流"></a>说说Java中的IO流</h2><h3 id="Java中IO流的种类"><a href="#Java中IO流的种类" class="headerlink" title="Java中IO流的种类"></a>Java中IO流的种类</h3><ul>
<li>按照流的流向分，可以分为输入流和输出流</li>
<li>按照操作单元分，可以划分为字节流和字符流</li>
<li>按照流的角色分，可以分为节点流和处理流</li>
</ul>
<p>JavaIO流共涉及40多个类，这40多个类都是从4个抽象基类中派生出来的</p>
<ul>
<li>InputStream&#x2F;Reader：所有输入流的基类，前者是字节输入流，后者是字符输入流</li>
<li>OutputStream&#x2F;Writer：所有输出流的基类，前者是字节输出流，后者是字符输出流。</li>
</ul>
<h2 id="说说Java中的反射"><a href="#说说Java中的反射" class="headerlink" title="说说Java中的反射"></a>说说Java中的反射</h2><ul>
<li><p><strong>定义：</strong></p>
</li>
<li><ul>
<li>反射机制是指在运行时，对于任意用一个类都能够知道该类的所有属性和方法；对于任意对象都能调用他的任意一个方法。</li>
<li>在Java中，只要给定类的名字，就可以通过反射机制来获取类的所有信息，这种动态获取信息以及动态调用对象的方法的功能被称为Java语言的反射机制。</li>
<li>反射是框架的灵魂，</li>
</ul>
</li>
<li><p><strong>框架中使用到反射的例子：</strong></p>
</li>
<li><ul>
<li>在使用JDBC连接数据库时需要通过反射来加载数据库的驱动程序</li>
<li>Spring框架在使用XML配置模式装载Bean的过程也使用到了反射机制</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>Spring框架在使用XML配置模式装载Bean的过程</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><ul>
<li>将程序内所有的XML或者properties配置文件加载进内存</li>
<li>Java类解析配置文件中的内容，得到对应实体类的字节码字符串以及相关的属性信息</li>
<li>通过反射机制，根据这个字符串来获取某个类的Class实例</li>
<li>动态配置实例的属性</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>实现方式：</strong></p>
</li>
<li><ul>
<li>Class.forName(“类路径”)</li>
<li>类名.class</li>
<li>对象名.getClass()</li>
<li>对于基本数据类型的包装类，也可以通过调用包装类的Type属性来获取该包装类的Class对象</li>
</ul>
</li>
<li><p><strong>优点：</strong></p>
</li>
<li><ul>
<li>在运行时可以动态获取类的实例，灵活性较高</li>
</ul>
</li>
<li><p><strong>缺点：</strong></p>
</li>
<li><ul>
<li>需要将内存中的字节码进行解析，相当于一系列揭示操作，性能较低。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>Java实现向QQ邮箱发送验证码</title>
    <url>/posts/2250783273.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>首先来到自己的邮箱，点击设置</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808182157154.png" alt="image-20220808182157154"></p>
<p>点击账户</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808182222909.png" alt="image-20220808182222909"></p>
<p>下滑，这里点击开启</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808182252594.png" alt="image-20220808182252594"></p>
<p>发送短信验证</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808182307112.png" alt="image-20220808182307112"></p>
<p>然后就会得到授权码，将其保存起来</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808182446619.png" alt="image-20220808182446619"></p>
<p>然后导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.mail-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后是Java代码</p>
<pre><code class="java">import javax.mail.Authenticator;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import java.util.Properties;

public class sendEmail &#123;
    public static void send_QQ(String code) throws Exception &#123;
        Properties props = new Properties();
        props.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);
        props.put(&quot;mail.smtp.host&quot;, &quot;smtp.qq.com&quot;);
        props.put(&quot;mail.smtp.port&quot;, &quot;587&quot;);
        // 此处填写，写信人的账号
        props.put(&quot;mail.user&quot;, &quot;xxx@qq.com&quot;);
        // 此处填写16位STMP口令,刚刚复制的字符串
        props.put(&quot;mail.password&quot;, &quot;xxx&quot;);

        Authenticator authenticator = new Authenticator() &#123;
            protected PasswordAuthentication getPasswordAuthentication() &#123;
                String userName = props.getProperty(&quot;mail.user&quot;);
                String password = props.getProperty(&quot;mail.password&quot;);
                return new PasswordAuthentication(userName, password);
            &#125;
        &#125;;
        Session mailSession = Session.getInstance(props, authenticator);
        MimeMessage message = new MimeMessage(mailSession);
        InternetAddress form = new InternetAddress(props.getProperty(&quot;mail.user&quot;));
        message.setFrom(form);

        // 设置收件人的邮箱
        InternetAddress to = new InternetAddress(&quot;xxxx@qq.com&quot;);
        message.setRecipient(MimeMessage.RecipientType.TO, to);

        // 设置邮件标题
        message.setSubject(&quot;验证号码测试&quot;);

        // 设置邮件的内容体
        message.setContent(code, &quot;text/html;charset=UTF-8&quot;);

        // 发送
        Transport.send(message);

    &#125;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
  </entry>
  <entry>
    <title>Java比较器小结</title>
    <url>/posts/262389204.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>Java中基本数据类型可以使用 <code>==</code> 、<code>!=</code>、<code>&gt;</code>、<code>&lt;</code>来比较，但是对象之间的比较只能用<code>==</code> 或者<code> !=</code>。不能使用<code>&lt;</code>、<code>&gt;</code>比较。</p>
<p>那么如何比较对象的大小的，如何对多个对象进行排序呢？</p>
<p>这就引出了我们今天的主角，两个接口:</p>
<ul>
<li><p><code>自然排序：java.lang.Comparable</code>  </p>
</li>
<li><p><code>定制排序：java.lang.Comparator</code></p>
</li>
</ul>
<h2 id="二、自然排序：Comparable接口"><a href="#二、自然排序：Comparable接口" class="headerlink" title="二、自然排序：Comparable接口"></a>二、自然排序：Comparable接口</h2><h5 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h5><ul>
<li>Comparable接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序。</li>
<li>实现 Comparable 的类必须重写该接口的 compareTo(Object obj) 方法，两个对象通过 compareTo(Object obj) 方法的返回值来比较大小。<ul>
<li>如果当前对象this大于形参对象obj，则返回正整数。</li>
<li>如果当前对象this小于形参对象obj，则返回负整数。</li>
<li>如果当前对象this等于形参对象obj，则返回零。</li>
</ul>
</li>
<li>实现Comparable接口的对象列表（和数组）可以通过 Collections.sort 或者Arrays.sort进行自动排序。实现此接口的对象可以用作有序映射中的键或有序集合中的元素，无需指定比较器。</li>
</ul>
<h5 id="典型实现：（默认都是从小到大排列）"><a href="#典型实现：（默认都是从小到大排列）" class="headerlink" title="典型实现：（默认都是从小到大排列）"></a>典型实现：（默认都是从小到大排列）</h5><ul>
<li><p>String：按照字符串中字符的Unicode值进行比较</p>
</li>
<li><p>Character：按照字符的Unicode值来进行比较</p>
</li>
<li><p>数值类型对应的包装类以及BigInteger、BigDecimal：按照它们对应的数值大小进行比较</p>
</li>
<li><p>Boolean：true 对应的包装类实例大于 false 对应的包装类实例</p>
</li>
<li><p>Date、Time等：后面的日期时间比前面的日期时间大</p>
<p><strong>代码演示：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//商品类，实现Comparable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Goods</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Goods&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Goods</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品比较大小的方式：按照价格从低到高排序,再按照商品名称从高到低排序</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Goods) &#123;</span><br><span class="line">            <span class="type">Goods</span> <span class="variable">goods</span> <span class="operator">=</span> (Goods) o;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.price &gt; goods.price) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.price &lt; goods.price) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="built_in">this</span>.name.compareTo(goods.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;传入的数据类型不一致！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        Goods[] arr = <span class="keyword">new</span> <span class="title class_">Goods</span>[<span class="number">5</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;罗技&quot;</span>,<span class="number">299</span>);</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;雷蛇&quot;</span>,<span class="number">399</span>);</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;小米&quot;</span>,<span class="number">99</span>);</span><br><span class="line">        arr[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;戴尔&quot;</span>,<span class="number">169</span>);</span><br><span class="line">        arr[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;联想&quot;</span>,<span class="number">99</span>);</span><br><span class="line"></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-定制排序：java-util-Comparator"><a href="#3-定制排序：java-util-Comparator" class="headerlink" title="3.定制排序：java.util.Comparator"></a>3.定制排序：java.util.Comparator</h2><ul>
<li><strong>当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码，或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑使用Comparator的对象来排序</strong>，强行对多个对象进行整体排序的比较。</li>
<li>重写compare(Object o1,Object o2)方法，比较o1和o2的大小：<ul>
<li>如果方法返回正整数，则表示o1大于o2</li>
<li>如果方法返回0，则表示o1等于o2</li>
<li>如果方法返回负整数，则表示o1小于o2</li>
</ul>
</li>
<li>可以将 Comparator 传递给 sort 方法（如 Collections.sort 或 Arrays.sort），从而允许在排序顺序上实现精确控制。</li>
</ul>
<p><strong>代码演示：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">    Goods[] arr = <span class="keyword">new</span> <span class="title class_">Goods</span>[<span class="number">6</span>];</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;l罗技&quot;</span>,<span class="number">299</span>);</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;l雷蛇&quot;</span>,<span class="number">399</span>);</span><br><span class="line">    arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;x小米&quot;</span>,<span class="number">99</span>);</span><br><span class="line">    arr[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;d戴尔&quot;</span>,<span class="number">169</span>);</span><br><span class="line">    arr[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;l联想&quot;</span>,<span class="number">99</span>);</span><br><span class="line">    arr[<span class="number">5</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;l雷蛇&quot;</span>,<span class="number">199</span>);</span><br><span class="line"></span><br><span class="line">    Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Goods&gt;() &#123;</span><br><span class="line">        <span class="comment">//商品比较大小的方式：按照商品名称从低到高,再按照商品价格从高到低排序</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Goods o1, Goods o2)</span> &#123;</span><br><span class="line">            <span class="comment">//名字一样，比较价格</span></span><br><span class="line">            <span class="keyword">if</span> (o1.getName().equals(o2.getName()))&#123;</span><br><span class="line">                <span class="keyword">return</span> -Double.compare(o1.getPrice(),o2.getPrice());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不得不说，<strong>康师傅yyds！</strong></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Lambda学习小结</title>
    <url>/posts/791937771.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Lambda表达式的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.举例: (o1,o2) -&gt; Integer.compare(o1,o2);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2. 格式：</span></span><br><span class="line"><span class="comment"> *       -&gt;: lambda操作符 或者箭头操作符</span></span><br><span class="line"><span class="comment"> *       -&gt;左边: lambda形参列表（其实就是接口中抽象方法的形参列表）</span></span><br><span class="line"><span class="comment"> *       -&gt;右边: lambda体（其实就是重写的抽象方法的方法体）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3.Lambda表达式的使用：（6种情况）</span></span><br><span class="line"><span class="comment"> *      -&gt; (1) 无参无返回值</span></span><br><span class="line"><span class="comment"> *      -&gt; (2) 需要一个参数无返回值</span></span><br><span class="line"><span class="comment"> *      -&gt; (3) 类型推断，数据类型可以由编译器推断而出，可以省略</span></span><br><span class="line"><span class="comment"> *      -&gt; (4) Lambda如果只需要一个参数，参数的小括号可以省略</span></span><br><span class="line"><span class="comment"> *      -&gt; (5) Lambda需要两个或两个以上个参数，多条执行语句，并且可以有返回值</span></span><br><span class="line"><span class="comment"> *      -&gt; (6) Lambda体只有一条语句时，如果有return和大括号，则都可以省略</span></span><br><span class="line"><span class="comment"> *      总结：</span></span><br><span class="line"><span class="comment"> *          -&gt;左边：Lambda形参列表的参数类型可以省略（类型推断）；如果Lambda形参列表只有一个参数，则小括号也可以省略</span></span><br><span class="line"><span class="comment"> *          -&gt;右边：Lambda体应该使用一对&#123;&#125;包括；如果Lambda体只有一条执行语句（可能是return语句），可以省略return和&#123;&#125;</span></span><br><span class="line"><span class="comment"> * 4.Lambda表达式的本质：作为函数式接口的实例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 5.如果一个接口中只声明了抽象方法，则称改接口为函数式接口。</span></span><br><span class="line"><span class="comment"> *   可以在一个接口上使用@FunctionalInterface注解来检查它是否是一个函数式接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 6.以前用匿名实现类表示的现在都可以用Lambda表达式来写</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//=================================================================//</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//无参无返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我爱北京天安门&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        r1.run();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r2</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;我爱北京故宫&quot;</span>);</span><br><span class="line"></span><br><span class="line">        r2.run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//=================================================================//</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//需要一个参数无返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        Consumer&lt;String&gt; con = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        con.accept(<span class="string">&quot;谎言和誓言的区别是什么？&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Consumer&lt;String&gt; con2 = (String s) -&gt;&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        con2.accept(<span class="string">&quot;一个是听的人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//=================================================================//</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//类型推断，数据类型可以由编译器推断而出，可以省略</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Consumer&lt;String&gt; con2 = (s) -&gt;&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        con2.accept(<span class="string">&quot;一个是听的人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//=================================================================//</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//Lambda如果只需要一个参数，参数的小括号可以省略</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Consumer&lt;String&gt; con2 = s -&gt;&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        con2.accept(<span class="string">&quot;一个是听的人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//=================================================================//</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//Lambda需要两个或两个以上个参数，多条执行语句，并且可以有返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line">        Comparator&lt;Integer&gt; com1 = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                System.out.println(o1);</span><br><span class="line">                System.out.println(o2);</span><br><span class="line">                <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(com1.compare(<span class="number">12</span>,<span class="number">21</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">       Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; &#123;</span><br><span class="line">           System.out.println(o1);</span><br><span class="line">           System.out.println(o2);</span><br><span class="line">           <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(com2.compare(<span class="number">66</span>,<span class="number">55</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//=================================================================//</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//Lambda体只有一条语句时，如果有return和大括号，则都可以省略</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> &#123;</span><br><span class="line">        Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; o1.compareTo(o2);</span><br><span class="line">        System.out.println(com2.compare(<span class="number">66</span>,<span class="number">55</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r2</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;我爱北京故宫&quot;</span>);</span><br><span class="line"></span><br><span class="line">        r2.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 1 两数之和</title>
    <url>/posts/1487101888.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和</a></h4><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
<p>你可以按任意顺序返回答案。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 104</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>
<li><code>-109 &lt;= target &lt;= 109</code></li>
<li><strong>只会存在一个有效答案</strong></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="comment">//使用哈希表进行存储，元素值为键，索引作为值</span></span><br><span class="line">    Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">        <span class="comment">//判断当前哈希表中是否存在满足条件的两个值，若存在，则返回</span></span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(target - nums[i]))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;map.get(target - nums[i]),i&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不存在，将当前元素存入，进行下次判断</span></span><br><span class="line">        map.put(nums[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没找到符合条件的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 102 二叉树的层序遍历</title>
    <url>/posts/1567462543.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></h4><p>给你二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>层序遍历</strong> 。 （即逐层地，从左到右访问所有节点）。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [3,9,20,null,null,15,7]</span><br><span class="line">输出：[[3],[9,20],[15,7]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1]</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点数目在范围 <code>[0, 2000]</code> 内</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结果数组</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用队列来辅助遍历</span></span><br><span class="line">    Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根节点不为空，入队</span></span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        que.offer(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列不为空时开始循环</span></span><br><span class="line">    <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//level用于存储每层节点的值</span></span><br><span class="line">        ArrayList&lt;Integer&gt; level = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> que.size();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//当前层的元素全部出队并存入当前层的集合中</span></span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">            level.add(node.val);</span><br><span class="line">            <span class="comment">//当前节点的左孩子入队</span></span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                que.offer(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当前节点的右孩子入队</span></span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                que.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            len--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历完一层就存入一层</span></span><br><span class="line">        result.add(level);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回结果数组</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：每个点进队出队各一次，故渐进时间复杂度为 O(n)。</li>
<li>空间复杂度：队列中元素的个数不超过 n 个，故渐进空间复杂度为 O(n)。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 1035 不相交的线</title>
    <url>/posts/2902979800.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="1035-不相交的线"><a href="#1035-不相交的线" class="headerlink" title="1035. 不相交的线"></a><a href="https://leetcode-cn.com/problems/uncrossed-lines/">1035. 不相交的线</a></h4><p>在两条独立的水平线上按给定的顺序写下 <code>nums1</code> 和 <code>nums2</code> 中的整数。</p>
<p>现在，可以绘制一些连接两个数字 <code>nums1[i]</code> 和 <code>nums2[j]</code> 的直线，这些直线需要同时满足满足：</p>
<ul>
<li><code>nums1[i] == nums2[j]</code></li>
<li>且绘制的直线不与任何其他连线（非水平线）相交。</li>
</ul>
<p>请注意，连线即使在端点也不能相交：每个数字只能属于一条连线。</p>
<p>以这种方法绘制线条，并返回可以绘制的最大连线数。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/04/26/142.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,4,2], nums2 = [1,2,4]</span><br><span class="line">输出：2</span><br><span class="line">解释：可以画出两条不交叉的线，如上图所示。 </span><br><span class="line">但无法画出第三条不相交的直线，因为从 nums1[1]=4 到 nums2[2]=4 的直线将与从 nums1[2]=2 到 nums2[1]=2 的直线相交。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums1.length, nums2.length &lt;= 500</code></li>
<li><code>1 &lt;= nums1[i], nums2[j] &lt;= 2000</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p><strong>动态规划：</strong></p>
<p>最长公共子序列变形题</p>
<p>定义<code>dp[i][j]</code>表示nums1的前i个元素和nums2的前j个元素所能绘制的最大连接数。</p>
<p>从后往前看，首先判断nums1[i]和nums2[j]是否相等：</p>
<ul>
<li>如果相等，则证明当前两元素能够连成一条线，则nums1和nums2的前i-1个元素所能绘制的最大连接数加1就是所有元素的最大连接数，即<code>dp[i][j] = dp[i-1][j-1] + 1</code>。</li>
<li>如果不相等，则证明当前两元素不能够连成一条线，则最大连接数为nums1去掉一个元素或者nums2去掉一个一个元素和另一个数组所能绘制的最大连接数，即<code>dp[i][j] = max(dp[i-1][j],dp[i][j-1])</code> 。</li>
</ul>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxUncrossedLines</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums2.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span> || nums1 == <span class="literal">null</span> || n == <span class="number">0</span> || nums2 == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n + <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums1[i - <span class="number">1</span>] == nums2[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(MN)，需要遍历两个字符串。</li>
<li>空间复杂度：O(MN)，需要使用到一个二维数组。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 101 对称二叉树</title>
    <url>/posts/2288794063.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101. 对称二叉树"></a><a href="https://leetcode-cn.com/problems/symmetric-tree/">101. 对称二叉树</a></h4><p>给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对称。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2,2,3,4,4,3]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2,2,null,3,null,3]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点数目在范围 <code>[1, 1000]</code> 内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p><strong>进阶：</strong>你可以运用递归和迭代两种方法解决这个问题吗？</p>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="递归写法："><a href="#递归写法：" class="headerlink" title="递归写法："></a>递归写法：</h3><ol>
<li><p>确定参数和返回值</p>
<ol>
<li>因为比较的是两颗子树是否是相互翻转的，进而判断这两颗子树是不是对称的，所以要比较的是两颗子树，参数为左子树节点和右子树节点</li>
<li>返回值为boolean类型</li>
</ol>
</li>
<li><p>确定递归出口</p>
<p>比较两个节点值的情况，分为节点为空和节点不为空两种情况。</p>
<p>首先是节点为空：</p>
<ol>
<li>左节点为空，右节点不为空，返回false</li>
<li>左节点不为空，右节点为空，返回false</li>
<li>左右节点均为空，两节点对称，返回true</li>
</ol>
<p>然后是两节点都不为空：</p>
<ol>
<li>左右节点值不相等，返回false</li>
<li>左右节点值相等，递归比较内外侧左右节点。<ol>
<li>比较内侧，传入左节点的右孩子和右节点的左孩子</li>
<li>比较外侧，传入左节点的左孩子和右节点的右孩子</li>
<li>左右都对称返回true，有一侧不对称返回false</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="递归代码如下："><a href="#递归代码如下：" class="headerlink" title="递归代码如下："></a>递归代码如下：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> compare(root.left, root.right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(TreeNode left, TreeNode right)</span> &#123;</span><br><span class="line">    <span class="comment">//左右节点都为空时</span></span><br><span class="line">    <span class="keyword">if</span> (left == <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//左右节点有一个为空时</span></span><br><span class="line">    <span class="keyword">if</span> (left == <span class="literal">null</span> &amp;&amp; right != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left != <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//左右节点均不为空，但是值不相等时</span></span><br><span class="line">    <span class="keyword">if</span> (left.val != right.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//比较内侧树,即左节点的右子树和右节点的左子树</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">compareOutside</span> <span class="operator">=</span> compare(left.right, right.left);</span><br><span class="line">    <span class="comment">//比较外侧树，即左节点的左子树和右节点的右子树</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">compareInside</span> <span class="operator">=</span> compare(left.left, right.right);</span><br><span class="line">    <span class="comment">//返回两颗子树的对称结果</span></span><br><span class="line">    <span class="keyword">return</span> compareInside &amp;&amp; compareOutside;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="迭代写法："><a href="#迭代写法：" class="headerlink" title="迭代写法："></a>迭代写法：</h3><p>使用双端队列，将相应对称的节点存入双端队列的两边，然后取出进行比较，看值是否相同，然后依次比较内外子树。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//双端队列</span></span><br><span class="line">    Deque&lt;TreeNode&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//存入左右节点</span></span><br><span class="line">    deque.offerFirst(root.left);</span><br><span class="line">    deque.offerFirst(root.right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!deque.isEmpty())&#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">leftNode</span> <span class="operator">=</span> deque.pollFirst();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">rightNode</span> <span class="operator">=</span> deque.pollLast();</span><br><span class="line">        <span class="comment">//左右节点都为空时</span></span><br><span class="line">        <span class="keyword">if</span> (leftNode == <span class="literal">null</span> &amp;&amp; rightNode == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左右节点一颗为空一颗不为空时</span></span><br><span class="line">        <span class="keyword">if</span> (leftNode == <span class="literal">null</span> || rightNode == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//左右节点都不为空但是值不相同时</span></span><br><span class="line">        <span class="keyword">if</span> (leftNode.val != rightNode.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存入外侧节点</span></span><br><span class="line">        deque.offerFirst(leftNode.left);</span><br><span class="line">        deque.offerLast(rightNode.right);</span><br><span class="line">        <span class="comment">//存入内侧节点</span></span><br><span class="line">        deque.offerFirst(leftNode.right);</span><br><span class="line">        deque.offerLast(rightNode.left);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 104 二叉树的最大深度</title>
    <url>/posts/742241812.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104. 二叉树的最大深度"></a><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a></h4><p>难度简单1180收藏分享切换为英文接收动态反馈</p>
<p>给定一个二叉树，找出其最大深度。</p>
<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>
<p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p>
<p><strong>示例：</strong><br>给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>

<p>返回它的最大深度 3 。</p>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h4 id="简单递归"><a href="#简单递归" class="headerlink" title="简单递归"></a>简单递归</h4><ul>
<li>深度优先遍历，DFS</li>
<li>递归出口：当前节点为空</li>
<li>递归条件：当前节点不为空时，返回其左子树和右子树中深度的最大值加1。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//树的最大深度等于左子树或者右子树深度的最大值加一，即加上当前根节点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + Math.max(maxDepth(root.left),maxDepth(root.right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 110 平衡二叉树</title>
    <url>/posts/385542773.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110. 平衡二叉树"></a><a href="https://leetcode-cn.com/problems/balanced-binary-tree/">110. 平衡二叉树</a></h4><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p>
<p>本题中，一棵高度平衡二叉树定义为：</p>
<blockquote>
<p>一个二叉树<em>每个节点</em> 的左右两个子树的高度差的绝对值不超过 1 。</p>
</blockquote>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [3,9,20,null,null,15,7]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2,2,3,3,null,null,4,4]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中的节点数在范围 <code>[0, 5000]</code> 内</li>
<li><code>-104 &lt;= Node.val &lt;= 104</code></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p><code>求深度适合用前序遍历，而求高度适合用后序遍历。</code></p>
<p>此题求高度，使用后序遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getHeight(root) != -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-1表示已经不是平衡二叉树了，否则返回值是以该节点为根节点的树的高度</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//左</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">leftHeight</span> <span class="operator">=</span> getHeight(root.left);</span><br><span class="line">    <span class="keyword">if</span> (leftHeight == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//右</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">rightHeight</span> <span class="operator">=</span> getHeight(root.right);</span><br><span class="line">    <span class="keyword">if</span> (rightHeight == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中</span></span><br><span class="line">    <span class="type">int</span> result;</span><br><span class="line">    <span class="comment">//左右子树高度差大于1，则不是平衡二叉树</span></span><br><span class="line">    <span class="keyword">if</span> (Math.abs(leftHeight - rightHeight) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        result = -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = Math.max(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)。N为二叉树的节点个数。自底向上递归，每个节点的计算高度和判断是否平衡都只需要处理一次，最坏情况下需要遍历二叉树中的所有节点。</li>
<li>空间复杂度：O(N)。空间复杂度主要取决于递归调用的层数，递归调用的层数不会超过n。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 111 二叉树的最小深度</title>
    <url>/posts/2342245686.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111. 二叉树的最小深度"></a><a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/">111. 二叉树的最小深度</a></h4><p>给定一个二叉树，找出其最小深度。</p>
<p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p>
<p><strong>说明：</strong>叶子节点是指没有子节点的节点。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [3,9,20,null,null,15,7]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [2,null,3,null,4,null,5,null,6]</span><br><span class="line">输出：5</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点数的范围在 <code>[0, 105]</code> 内</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h4 id="递归："><a href="#递归：" class="headerlink" title="递归："></a>递归：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//递归出口</span></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//左右子树有为空的情况，返回非空子树的最小深度+1</span></span><br><span class="line">    <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + minDepth(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(root.left != <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + minDepth(root.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//左右子树都不为空时</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + Math.min(minDepth(root.left),minDepth(root.right));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="迭代："><a href="#迭代：" class="headerlink" title="迭代："></a>迭代：</h4><p>使用层序遍历找到第一个叶子结点，就得到了最小深度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="comment">//记录深度，初始为0</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        depth++;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> queue.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            <span class="comment">//找到了第一个叶子结点，即最小深度，直接返回depth</span></span><br><span class="line">            <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> depth;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.offer(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> depth;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 112 路径总和</title>
    <url>/posts/2153299017.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112. 路径总和"></a><a href="https://leetcode-cn.com/problems/path-sum/">112. 路径总和</a></h4><p>给你二叉树的根节点 <code>root</code> 和一个表示目标和的整数 <code>targetSum</code> 。判断该树中是否存在 <strong>根节点到叶子节点</strong> 的路径，这条路径上所有节点值相加等于目标和 <code>targetSum</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p><strong>叶子节点</strong> 是指没有子节点的节点。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22</span><br><span class="line">输出：true</span><br><span class="line">解释：等于目标和的根节点到叶节点路径如上图所示。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2,3], targetSum = 5</span><br><span class="line">输出：false</span><br><span class="line">解释：树中存在两条根节点到叶子节点的路径：</span><br><span class="line">(1 --&gt; 2): 和为 3</span><br><span class="line">(1 --&gt; 3): 和为 4</span><br><span class="line">不存在 sum = 5 的根节点到叶子节点的路径。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [], targetSum = 0</span><br><span class="line">输出：false</span><br><span class="line">解释：由于树是空的，所以不存在根节点到叶子节点的路径。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点的数目在范围 <code>[0, 5000]</code> 内</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
<li><code>-1000 &lt;= targetSum &lt;= 1000</code></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p><strong>简单递归</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">    <span class="comment">//要注意根节点就是叶子结点的情况</span></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归出口</span></span><br><span class="line">    <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> root.val == targetSum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从根节点找和目标值相等的数值，等同于从子树中找和目标值减去根节点数值</span></span><br><span class="line">    <span class="keyword">return</span> hasPathSum(root.left,targetSum - root.val) || hasPathSum(root.right,targetSum - root.val);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 1143 最长公共子序列和</title>
    <url>/posts/2237334469.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="1143-最长公共子序列"><a href="#1143-最长公共子序列" class="headerlink" title="1143. 最长公共子序列"></a><a href="https://leetcode-cn.com/problems/longest-common-subsequence/">1143. 最长公共子序列</a></h4><p>难度中等958收藏分享切换为英文接收动态反馈</p>
<p>给定两个字符串 <code>text1</code> 和 <code>text2</code>，返回这两个字符串的最长 <strong>公共子序列</strong> 的长度。如果不存在 <strong>公共子序列</strong> ，返回 <code>0</code> 。</p>
<p>一个字符串的 <strong>子序列</strong> 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p>
<ul>
<li>例如，<code>&quot;ace&quot;</code> 是 <code>&quot;abcde&quot;</code> 的子序列，但 <code>&quot;aec&quot;</code> 不是 <code>&quot;abcde&quot;</code> 的子序列。</li>
</ul>
<p>两个字符串的 <strong>公共子序列</strong> 是这两个字符串所共同拥有的子序列。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text1 = &quot;abcde&quot;, text2 = &quot;ace&quot; </span><br><span class="line">输出：3  </span><br><span class="line">解释：最长公共子序列是 &quot;ace&quot; ，它的长度为 3 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text1 = &quot;abc&quot;, text2 = &quot;abc&quot;</span><br><span class="line">输出：3</span><br><span class="line">解释：最长公共子序列是 &quot;abc&quot; ，它的长度为 3 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text1 = &quot;abc&quot;, text2 = &quot;def&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：两个字符串没有公共子序列，返回 0 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= text1.length, text2.length &lt;= 1000</code></li>
<li><code>text1</code> 和 <code>text2</code> 仅由小写英文字符组成。</li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><h5 id="动态规划："><a href="#动态规划：" class="headerlink" title="动态规划："></a>动态规划：</h5><ul>
<li><p>状态定义：</p>
<ul>
<li><code>dp[i][j]</code>表示字符串<code>text1</code>的<code>[1,i]</code>区间 和<code>text2</code>的<code>[1,j]</code>区间的最长公共子序列长度。</li>
</ul>
</li>
<li><p>状态转移方程：</p>
<ul>
<li><p><code>text1[i] == text2[j]</code>表示两字符串最后一个字符相等，所以公共子序列长度为两字符串的前<code>i-1</code>个字符和前<code>j-1</code>的最长序列和加 1，即<code>dp[i][j] = dp[i-1][j-1] + 1</code></p>
</li>
<li><p><code>text1[i] != text2[j]</code>表示两个字符串最后一个字符不相同，则此时的公共子序列长度要继承字符串<code>text1</code>的前<code>i-1</code>个字符与字符串<code>text2</code>的最长序列和   和   字符串<code>text1</code>与字符串<code>text2</code>前j-1的最长序列和中的最大值，即<code>dp[i][j] = max(dp[i-1][j] , dp[i][j-1])</code></p>
</li>
</ul>
</li>
<li><p>状态初始化：</p>
<ul>
<li><pre><code>  即当`i= 0 `或者`j = 0`时，表示两字符串中有一个为空字符串，有空字符串则最长公共子序列和一定为0，则`dp[i][j] = 0`
</code></pre>
</li>
</ul>
</li>
<li><p>遍历方向：</p>
<ul>
<li><pre><code>  由于由于` dp[i][j]`的值是依赖于 `dp[i - 1][j - 1]` , `dp[i - 1][j], dp[i][j - 1]`这三个值的，所以i和j的遍历顺序是需要从小到大的。
</code></pre>
</li>
</ul>
</li>
<li><p>最终遍历结果：</p>
<ul>
<li><pre><code>  因为`dp[i][j]`表示字符串`text1`的`[1,i]`区间 和`text2的[1,j]`区间的最长公共子序列长度。
</code></pre>
</li>
<li><pre><code>  所以当i = m，j = n时得到的`dp[m][n]`即为两字符串的最长公共子序列和。
</code></pre>
</li>
</ul>
</li>
</ul>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> text1.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text2.length();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//辅助dp数组</span></span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//dp[i][j]表示字符串text1的[1,i]区间 和text2的[1,j]区间的最长公共子序列长度。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">if</span> (text1.charAt(i - <span class="number">1</span>) == text2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(MN)，需要遍历两个字符串。</li>
<li>空间复杂度：O(MN)，需要使用到一个二维数组。</li>
</ul>
<p>参考<a href="https://leetcode-cn.com/problems/longest-common-subsequence/solution/zui-chang-gong-gong-zi-xu-lie-tu-jie-dpz-6mvz/">林小鹿</a>，<a href="https://leetcode-cn.com/problems/longest-common-subsequence/solution/fu-xue-ming-zhu-er-wei-dong-tai-gui-hua-r5ez6/">负雪明烛</a>两位大佬。</p>
<p>动态规划太难了TMD</p>
<p><img src="/pic/111.png" alt="111"></p>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 118 杨辉三角</title>
    <url>/posts/2071261585.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="118-杨辉三角"><a href="#118-杨辉三角" class="headerlink" title="118. 杨辉三角"></a><a href="https://leetcode-cn.com/problems/pascals-triangle/">118. 杨辉三角</a></h4><p>给定一个非负整数 <em><code>numRows</code>，</em>生成「杨辉三角」的前 <em><code>numRows</code></em> 行。</p>
<p>在「杨辉三角」中，每个数是它左上方和右上方的数的和。</p>
 

<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: numRows = 5</span><br><span class="line">输出: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: numRows = 1</span><br><span class="line">输出: [[1]]</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li><code>1 &lt;= numRows &lt;= 30</code></li>
</ul>
<h3 id="题解：简单动态规划"><a href="#题解：简单动态规划" class="headerlink" title="题解：简单动态规划"></a>题解：简单动态规划</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">generate</span><span class="params">(<span class="type">int</span> numRows)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用来存储每一行的数组</span></span><br><span class="line">    List&lt;Integer&gt; list = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line"></span><br><span class="line">        list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//注意这里的j的上限是i，而不是numRows</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="comment">//边界条件，第一列和对角线上的元素都是1</span></span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span> || i == j) &#123;</span><br><span class="line">                list.add(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//递推公式</span></span><br><span class="line">                list.add(res.get(i - <span class="number">1</span>).get(j - <span class="number">1</span>) + res.get(i - <span class="number">1</span>).get(j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(numRows^2)</li>
<li>空间复杂度：O(1)。不考虑返回值空间的占用</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 121 买卖股票的最佳时机</title>
    <url>/posts/992486341.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">121. 买卖股票的最佳时机</a></h4><p>给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。</p>
<p>你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p>
<p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：[7,1,5,3,6,4]</span><br><span class="line">输出：5</span><br><span class="line">解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</span><br><span class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：prices = [7,6,4,3,1]</span><br><span class="line">输出：0</span><br><span class="line">解释：在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= prices.length &lt;= 105</code></li>
<li><code>0 &lt;= prices[i] &lt;= 104</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//买入的最低价格</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">minprice</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="comment">//当前最大利润</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxprofit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//循环遍历数组</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 寻找最大利润的条件：</span></span><br><span class="line"><span class="comment">    *       1.如果当前值小于最低价格，就将当前值设置为最低价格，即从此刻买入</span></span><br><span class="line"><span class="comment">    *       2.若当前值不小于最低价格，则与最大利润进行对比，判断今天是否为最佳卖出时间</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices[i] &lt; minprice) &#123;</span><br><span class="line">            minprice = prices[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            maxprofit = Math.max(maxprofit,prices[i] - minprice);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxprofit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，只遍历了一次数组</li>
<li>空间复杂度：O(1)，只用到了2个整型变量空间</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 1218 最长定差子序列</title>
    <url>/posts/1983823918.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="1218-最长定差子序列"><a href="#1218-最长定差子序列" class="headerlink" title="1218. 最长定差子序列"></a><a href="https://leetcode-cn.com/problems/longest-arithmetic-subsequence-of-given-difference/">1218. 最长定差子序列</a></h4><p>给你一个整数数组 <code>arr</code> 和一个整数 <code>difference</code>，请你找出并返回 <code>arr</code> 中最长等差子序列的长度，该子序列中相邻元素之间的差等于 <code>difference</code> 。</p>
<p><strong>子序列</strong> 是指在不改变其余元素顺序的情况下，通过删除一些元素或不删除任何元素而从 <code>arr</code> 派生出来的序列。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [1,2,3,4], difference = 1</span><br><span class="line">输出：4</span><br><span class="line">解释：最长的等差子序列是 [1,2,3,4]。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [1,3,5,7], difference = 1</span><br><span class="line">输出：1</span><br><span class="line">解释：最长的等差子序列是任意单个元素。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [1,5,7,8,5,3,4,2,1], difference = -2</span><br><span class="line">输出：4</span><br><span class="line">解释：最长的等差子序列是 [7,5,3,1]。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= arr.length &lt;= 105</code></li>
<li><code>-104 &lt;= arr[i], difference &lt;= 104</code></li>
</ul>
<h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><h5 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a><strong>动态规划</strong></h5><p>当前数字<code>num</code>所能构成的最长定差子序列的长度由<code>num - difference</code>所能构成的最长定差子序列长度决定。</p>
<p>使用<code>dp[i]</code>来表示以第<code>i</code>个元素为结尾的最长等差子序列的长度，可以通过等差公式:<code>arr[i] - diffience = arr[j]</code>，找到左侧的前一个以<code>arr[j]</code>为结尾的最长定差子序列，将<code>arr[i]</code>加到该子序列中，就可以根据<code>dp[j]</code>递推出<code>dp[i]</code>。</p>
<p><strong>状态转移方程为：</strong></p>
<p>​						<code>dp[i] = dp[i- difference] + 1</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestSubsequence</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> difference)</span> &#123;</span><br><span class="line">    <span class="comment">//初始化结果为1，因为每个数字都可以单独作为一个等差子序列</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//辅助dp哈希表,键为当前元素，值为最长子序列长度</span></span><br><span class="line">    Map&lt;Integer, Integer&gt; dp = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从头遍历数组,遇到一个数 num，判断num - difference在不在数组里面</span></span><br><span class="line">    <span class="comment">// 也就是看看能不能形成以num为结尾的等差数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">        <span class="comment">//如果dp数组中存在num - difference，就加一存入以当前元素为键的值中,即dp[i] = dp[i - difference ] + 1</span></span><br><span class="line">        <span class="comment">//如果dp数组中不存在num - difference，就初始值为一存入以当前元素为键的值中,即当前元素为一个单独的定差子序列</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> dp.getOrDefault(num - difference, <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//当前位置的最长子序列长度</span></span><br><span class="line">        dp.put(num, val);</span><br><span class="line">        <span class="comment">//记录下来以num结尾的等差数组的长度</span></span><br><span class="line">        ans = Math.max(ans, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，需要对数组进行遍历。</li>
<li>空间复杂度：O(N)，使用到了元素个数为N的哈希表。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 125 验证回文串</title>
    <url>/posts/2423475523.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="125-验证回文串"><a href="#125-验证回文串" class="headerlink" title="125. 验证回文串"></a><a href="https://leetcode-cn.com/problems/valid-palindrome/">125. 验证回文串</a></h4><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p>
<p><strong>说明：</strong>本题中，我们将空字符串定义为有效的回文串。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释：&quot;amanaplanacanalpanama&quot; 是回文串</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;race a car&quot;</span><br><span class="line">输出: false</span><br><span class="line">解释：&quot;raceacar&quot; 不是回文串</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 2 * 105</code></li>
<li>字符串 <code>s</code> 由 ASCII 字符组成</li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><h5 id="解法1：反转"><a href="#解法1：反转" class="headerlink" title="解法1：反转"></a>解法1：反转</h5><p>将字符串中的有效字符构建为一个新的字符串，将其反转，与原有字符串进行比较，若相等，则为回文串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用StringBuffer是为了方便调用API</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sgood</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> s.length();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">    <span class="comment">//Character.isLetterOrDigit(c)表示如果字符是字母或数字，则返回布尔值为true，否则返回为false</span></span><br><span class="line">    <span class="keyword">if</span> (Character.isLetterOrDigit(c)) &#123;</span><br><span class="line">        <span class="comment">//Character.toLowerCase(c)表示把字符转换为小写</span></span><br><span class="line">        sgood.append(Character.toLowerCase(c));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sgoodRev</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(sgood).reverse();</span><br><span class="line"><span class="comment">//验证字符串反转完是否和原字符串相同</span></span><br><span class="line"><span class="keyword">return</span> sgoodRev.toString().equals(sgood.toString());</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(N)</li>
</ul>
<h5 id="解法2：双指针"><a href="#解法2：双指针" class="headerlink" title="解法2：双指针"></a>解法2：双指针</h5><p>和解法一一样，首先将字符串中的有效字符取出，然后使用双指针进行前后比较向中间移动，直到两指针相遇。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="comment">//空串也是回文串</span></span><br><span class="line">    <span class="keyword">if</span>(s.length() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用StringBuffer来构建出只含有字母和数字的字符串</span></span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sgood</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="comment">//如果当前字符是字母或者数字，就将其追加到StringBuffer上</span></span><br><span class="line">        <span class="keyword">if</span>(Character.isLetterOrDigit(c))&#123;</span><br><span class="line">            <span class="comment">//因为题目说了忽略大小写，我们就索性直接全部转为小写</span></span><br><span class="line">            sgood.append(Character.toLowerCase(c));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//到此，新字符串sgood构建完成，但是这个的sgood和原来的s的长度可能是不相同的，要注意</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> sgood.length();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用双指针判断是否回文</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = length -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="comment">//两指针指向的字符不相同，则证明不是回文串，直接返回false</span></span><br><span class="line">        <span class="keyword">if</span>(sgood.charAt(l) != sgood.charAt(r))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则，移动双指针</span></span><br><span class="line">        l++;</span><br><span class="line">        r--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(N)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>回文</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 1305 两颗二叉搜索树中的所有元素</title>
    <url>/posts/3914603551.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="1305-两棵二叉搜索树中的所有元素"><a href="#1305-两棵二叉搜索树中的所有元素" class="headerlink" title="1305. 两棵二叉搜索树中的所有元素"></a><a href="https://leetcode-cn.com/problems/all-elements-in-two-binary-search-trees/">1305. 两棵二叉搜索树中的所有元素</a></h4><p>给你 <code>root1</code> 和 <code>root2</code> 这两棵二叉搜索树。请你返回一个列表，其中包含 <strong>两棵树</strong> 中的所有整数并按 <strong>升序</strong> 排序。.</p>
<p><strong>示例 1：</strong></p>
<p><img src="/Leecode-1305-%E4%B8%A4%E9%A2%97%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0/q2-e1.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root1 = [2,1,4], root2 = [1,0,3]</span><br><span class="line">输出：[0,1,1,2,3,4]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="/Leecode-1305-%E4%B8%A4%E9%A2%97%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0/q2-e5-.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root1 = [1,null,8], root2 = [8,1]</span><br><span class="line">输出：[1,1,8,8]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>每棵树的节点数在 <code>[0, 5000]</code> 范围内</li>
<li><code>-105 &lt;= Node.val &lt;= 105</code></li>
</ul>
<h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p>因为是二叉搜索树，性质为中序遍历后结果为有序，只需得到两棵树的中序遍历集合然后合并进行排序即可。</p>
<p><code>注：排序最好自己写，也可偷懒调用现成的api。</code></p>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getAllElements</span><span class="params">(TreeNode root1, TreeNode root2)</span> &#123;</span><br><span class="line">    <span class="comment">//结果数组</span></span><br><span class="line">    ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//中序遍历两棵树</span></span><br><span class="line">    inorderTraversal(root1,res);</span><br><span class="line">    inorderTraversal(root2,res);</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    Collections.sort(res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root,List res)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inorderTraversal(root.left,res);</span><br><span class="line">    res.add(root.val);</span><br><span class="line">    inorderTraversal(root.right,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(M + N)，M和N分别代表两颗搜索树的节点个数。</li>
<li>空间复杂度：O(M + N)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 141 环形链表</title>
    <url>/posts/3986127795.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle/">141. 环形链表</a></h4><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p>
<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<strong>注意：<code>pos</code> 不作为参数进行传递</strong> 。仅仅是为了标识链表的实际情况。</p>
<p><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p>
<p><strong>示例 1：</strong></p>
 

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
 

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
 

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：false</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表中节点的数目范围是 <code>[0, 104]</code></li>
<li><code>-105 &lt;= Node.val &lt;= 105</code></li>
<li><code>pos</code> 为 <code>-1</code> 或者链表中的一个 <strong>有效索引</strong> 。</li>
</ul>
<p><strong>进阶：</strong>你能用 <code>O(1)</code>（即，常量）内存解决此问题吗？</p>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="解法1：集合"><a href="#解法1：集合" class="headerlink" title="解法1：集合"></a>解法1：集合</h3><p>使用集合来存储已经遍历过的节点，如果某一节点已经存在于集合中，则证明链表中存在环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="comment">//存储已经遍历过的节点集合</span></span><br><span class="line">    HashSet&lt;ListNode&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//当前节点在集合中出现过</span></span><br><span class="line">        <span class="keyword">if</span> (!set.add(cur))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(N)</li>
</ul>
<h3 id="解法2：快慢指针"><a href="#解法2：快慢指针" class="headerlink" title="解法2：快慢指针"></a>解法2：快慢指针</h3><p>使用一个快指针每次移动两步，慢指针每次移动一步，如果链表中有环，则快指针会先一步进入环中，等待慢指针同样进入环，但是由于快指针的移动速度比慢指针块，所以快慢指针一定会在环中的某个节点相遇，即实现了快指针对慢指针的<code>套圈</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//快慢指针</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">    dummy.next = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里快慢指针所指向的节点不能相同，否则不会进入循环</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dummy;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">        <span class="comment">//到达尾节点</span></span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="literal">null</span> || fast.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新指针</span></span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(1)，只用到了两个指针</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 136 只出现一次的数字</title>
    <url>/posts/971406630.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="36-只出现一次的数字"><a href="#36-只出现一次的数字" class="headerlink" title="36. 只出现一次的数字"></a><a href="https://leetcode-cn.com/problems/single-number/">36. 只出现一次的数字</a></h4><p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p><strong>说明：</strong></p>
<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [2,2,1]</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [4,1,2,1,2]</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure>

<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="位运算："><a href="#位运算：" class="headerlink" title="位运算："></a>位运算：</h3><p>异或运算的三个性质：</p>
<ol>
<li>任何数和0做异或运算，结果仍然是原来的数字。</li>
<li>任何数和其自身做异或运算，结果是0。</li>
<li>异或运算满足交换律和结合律，即a⊕b⊕a&#x3D;b⊕a⊕a&#x3D;b⊕(a⊕a)&#x3D;b⊕0&#x3D;b。</li>
</ol>
<p>所以只需要将数组中的全部元素进行一次异或操作，最后得到的就是只出现一次的数字。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">        res ^=nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(1)</li>
</ul>
<p>如果不规定空间复杂度，也可以使用哈希表对该问题进行解决。</p>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 144 二叉树的前序遍历</title>
    <url>/posts/1615909807.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="144-二叉树的前序遍历"><a href="#144-二叉树的前序遍历" class="headerlink" title="144. 二叉树的前序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">144. 二叉树的前序遍历</a></h4><p>给你二叉树的根节点 <code>root</code> ，返回它节点值的 <strong>前序</strong> 遍历。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,null,2,3]</span><br><span class="line">输出：[1,2,3]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2]</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure>

<p><strong>示例 5：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,null,2]</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点数目在范围 <code>[0, 100]</code> 内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p><strong>进阶：</strong>递归算法很简单，你可以通过迭代算法完成吗？</p>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="递归法："><a href="#递归法：" class="headerlink" title="递归法："></a>递归法：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//list用于保存前序遍历的节点序列</span></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    preOrder(list,root);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//确定递归的传入参数为：存储节点数据的集合，和当前根节点,返回值为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(List&lt;Integer&gt; list,TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根</span></span><br><span class="line">    list.add(root.val);</span><br><span class="line">    <span class="comment">//左</span></span><br><span class="line">    preOrder(list,root.left);</span><br><span class="line">    <span class="comment">//右</span></span><br><span class="line">    preOrder(list,root.right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="迭代法："><a href="#迭代法：" class="headerlink" title="迭代法："></a>迭代法：</h3><p>借助栈这个数据结构，每次先将根节点入栈，处理完根节点，然后将其右孩子入栈，再将左孩子入栈，这样的出栈序列才是根左右</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//结果数组</span></span><br><span class="line">    ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根节点入栈</span></span><br><span class="line">    stack.push(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//弹出栈顶元素并存入结果数组</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        res.add(node.val);</span><br><span class="line">        <span class="comment">//右节点不为空，入栈</span></span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左节点不为空，入栈</span></span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 146 LRU缓存</title>
    <url>/posts/490517360.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="146-LRU-缓存"><a href="#146-LRU-缓存" class="headerlink" title="146. LRU 缓存"></a><a href="https://leetcode.cn/problems/lru-cache/">146. LRU 缓存</a></h4><p>请你设计并实现一个满足 <a href="https://baike.baidu.com/item/LRU">LRU (最近最少使用) 缓存</a> 约束的数据结构。</p>
<p>实现 <code>LRUCache</code> 类：</p>
<ul>
<li><code>LRUCache(int capacity)</code> 以 <strong>正整数</strong> 作为容量 <code>capacity</code> 初始化 LRU 缓存</li>
<li><code>int get(int key)</code> 如果关键字 <code>key</code> 存在于缓存中，则返回关键字的值，否则返回 <code>-1</code> 。</li>
<li><code>void put(int key, int value)</code> 如果关键字 <code>key</code> 已经存在，则变更其数据值 <code>value</code> ；如果不存在，则向缓存中插入该组 <code>key-value</code> 。如果插入操作导致关键字数量超过 <code>capacity</code> ，则应该 <strong>逐出</strong> 最久未使用的关键字。</li>
</ul>
<p>函数 <code>get</code> 和 <code>put</code> 必须以 <code>O(1)</code> 的平均时间复杂度运行。</p>
<p><strong>示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line">[&quot;LRUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]</span><br><span class="line">[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]</span><br><span class="line">输出</span><br><span class="line">[null, null, null, 1, null, -1, null, -1, 3, 4]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">LRUCache lRUCache = new LRUCache(2);</span><br><span class="line">lRUCache.put(1, 1); // 缓存是 &#123;1=1&#125;</span><br><span class="line">lRUCache.put(2, 2); // 缓存是 &#123;1=1, 2=2&#125;</span><br><span class="line">lRUCache.get(1);    // 返回 1</span><br><span class="line">lRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 &#123;1=1, 3=3&#125;</span><br><span class="line">lRUCache.get(2);    // 返回 -1 (未找到)</span><br><span class="line">lRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 &#123;4=4, 3=3&#125;</span><br><span class="line">lRUCache.get(1);    // 返回 -1 (未找到)</span><br><span class="line">lRUCache.get(3);    // 返回 3</span><br><span class="line">lRUCache.get(4);    // 返回 4</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= capacity &lt;= 3000</code></li>
<li><code>0 &lt;= key &lt;= 10000</code></li>
<li><code>0 &lt;= value &lt;= 105</code></li>
<li>最多调用 <code>2 * 105</code> 次 <code>get</code> 和 <code>put</code></li>
</ul>
<h4 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h4><p>使用哈希表＋双向链表进行实现</p>
<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">    <span class="comment">//将哈希表和链表中的节点产生对应关系</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, Node&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//双向链表存储数据</span></span><br><span class="line">    <span class="keyword">private</span> DoubleList cache;</span><br><span class="line">    <span class="comment">//容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        cache = <span class="keyword">new</span> <span class="title class_">DoubleList</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取元素，如果不存在返回-1</span></span><br><span class="line"><span class="comment">     * 如果存在就将其设置为最近使用的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key))&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将其设置为最近使用的元素</span></span><br><span class="line">        makeRecently(key);</span><br><span class="line">        <span class="keyword">return</span> map.get(key).val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key))&#123;</span><br><span class="line">            <span class="comment">//删除旧数据</span></span><br><span class="line">            deleteKey(key);</span><br><span class="line">            <span class="comment">//添加新数据,新数据即为最近使用的数据</span></span><br><span class="line">            addRecently(key,value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果容量已满，则将最近最少使用的元素弹出，然后将新数据插入</span></span><br><span class="line">        <span class="keyword">if</span> (capacity == cache.getSize())&#123;</span><br><span class="line">            removeLeastRecently();</span><br><span class="line">        &#125;</span><br><span class="line">        addRecently(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将某个key提升为最近使用的</span></span><br><span class="line"><span class="comment">     * 将该节点从链表中删除并添加至链表末尾即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">makeRecently</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">        <span class="comment">//将该节点从链表中删除</span></span><br><span class="line">        cache.remove(node);</span><br><span class="line">        <span class="comment">//添加至链表末尾即可</span></span><br><span class="line">        cache.addLast(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加最近使用元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addRecently</span><span class="params">(<span class="type">int</span> key,<span class="type">int</span> val)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key, val);</span><br><span class="line">        <span class="comment">//链表尾部节点即为最近使用元素</span></span><br><span class="line">        cache.addLast(node);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在map中添加key和node的映射</span></span><br><span class="line">        map.put(key,node);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除某个key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">deleteKey</span><span class="params">(<span class="type">int</span> key)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">        <span class="comment">//从链表中删除</span></span><br><span class="line">        cache.remove(node);</span><br><span class="line">        <span class="comment">//从哈希表中删除</span></span><br><span class="line">        map.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除最近最少使用的节点，即链表的第一个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">removeLeastRecently</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//从链表中删除</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">deleteNode</span> <span class="operator">=</span> cache.removeFirst();</span><br><span class="line">        <span class="comment">//从哈希表中删除</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">deleteKey</span> <span class="operator">=</span> deleteNode.key;</span><br><span class="line">        map.remove(deleteKey);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义节点类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> key, val;</span><br><span class="line">    <span class="keyword">public</span> Node pre, next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双链表 只能从尾部插入，靠尾部的数据是最近使用的，靠头部的数据是最久未使用的。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoubleList</span> &#123;</span><br><span class="line">    <span class="comment">//头尾节点</span></span><br><span class="line">    <span class="keyword">private</span> Node head, tail;</span><br><span class="line">    <span class="comment">//链表长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DoubleList</span><span class="params">()</span> &#123;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.pre = head;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在链表尾部插入节点，时间复杂度O(1)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="comment">//尾插</span></span><br><span class="line">        node.pre = tail.pre;</span><br><span class="line">        node.next = tail;</span><br><span class="line">        tail.pre.next = node;</span><br><span class="line">        tail.pre = node;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除node节点,node结点是给定的，时间复杂度O(1)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        node.pre.next = node.next;</span><br><span class="line">        node.next.pre = node.pre;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除链表中第一个节点并返回，时间复杂度O(1)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">removeFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next == tail) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="comment">//删除节点</span></span><br><span class="line">        remove(node);</span><br><span class="line">        <span class="comment">//将节点返回</span></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回链表长度，时间复杂度O(1)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 145 二叉树的后序遍历</title>
    <url>/posts/3116446837.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="145-二叉树的后序遍历"><a href="#145-二叉树的后序遍历" class="headerlink" title="145. 二叉树的后序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/">145. 二叉树的后序遍历</a></h4><p>给你一棵二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>后序遍历</strong> 。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,null,2,3]</span><br><span class="line">输出：[3,2,1]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点的数目在范围 <code>[0, 100]</code> 内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p><strong>进阶：</strong>递归算法很简单，你可以通过迭代算法完成吗</p>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="递归写法："><a href="#递归写法：" class="headerlink" title="递归写法："></a>递归写法：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    postorder(result,root);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">postorder</span><span class="params">(List&lt;Integer&gt; result,TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    postorder(result,root.left);</span><br><span class="line">    postorder(result,root.right);</span><br><span class="line">    result.add(root.val);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="迭代写法："><a href="#迭代写法：" class="headerlink" title="迭代写法："></a>迭代写法：</h3><p>因为后序遍历的顺序是左右根，所以只要保证出栈顺序为根右左，然后进行一次反转操作即可。</p>
<p>倒推回来，出栈顺序为根右左，所以入栈顺序即为根左右。</p>
<p>至于为什么要把根节点固定操作，因为这样可以保证根节点的访问顺序和操作顺序保持一致，是在前序遍历的基础上做了修改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//根节点入栈</span></span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="comment">//入栈顺序：根--左--右</span></span><br><span class="line">    <span class="comment">//出栈顺序：根--右--左</span></span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line"></span><br><span class="line">        result.add(node.val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所需结果序列：左--右--根</span></span><br><span class="line">    Collections.reverse(result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 1464 数组中两元素的最大乘积</title>
    <url>/posts/691466115.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="1464-数组中两元素的最大乘积"><a href="#1464-数组中两元素的最大乘积" class="headerlink" title="1464. 数组中两元素的最大乘积"></a><a href="https://leetcode.cn/problems/maximum-product-of-two-elements-in-an-array/">1464. 数组中两元素的最大乘积</a></h4><p>给你一个整数数组 <code>nums</code>，请你选择数组的两个不同下标 <code>i</code> 和 <code>j</code><em>，</em>使 <code>(nums[i]-1)*(nums[j]-1)</code> 取得最大值。</p>
<p>请你计算并返回该式的最大值。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,4,5,2]</span><br><span class="line">输出：12 </span><br><span class="line">解释：如果选择下标 i=1 和 j=2（下标从 0 开始），则可以获得最大值，(nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12 。 </span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,5,4,5]</span><br><span class="line">输出：16</span><br><span class="line">解释：选择下标 i=1 和 j=3（下标从 0 开始），则可以获得最大值 (5-1)*(5-1) = 16 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,7]</span><br><span class="line">输出：12</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 500</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^3</code></li>
</ul>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProduct</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">return</span> (nums[len - <span class="number">1</span>] - <span class="number">1</span>) * (nums[len - <span class="number">2</span>] - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 15 三数之和</title>
    <url>/posts/3051076685.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode-cn.com/problems/3sum/">15. 三数之和</a></h4><p>给你一个包含 <code>n</code> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <em>a，b，c ，</em>使得 <em>a + b + c &#x3D;</em> 0 ？请你找出所有和为 <code>0</code> 且不重复的三元组。</p>
<p><strong>注意：</strong>答案中不可以包含重复的三元组。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= nums.length &lt;= 3000</code></li>
<li><code>-105 &lt;= nums[i] &lt;= 105</code></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>排序 + 双指针</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 排序 + 双指针</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果数组为空或者数组长度小于3，直接不满足条件，返回null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果排序完之后数组的第一个元素（即最小元素）大于0，则数组中不可能出现三数之和等于0的情况，返回null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 固定一个元素nums[i]，其余两个元素使用两个指针left和right进行标记</span></span><br><span class="line"><span class="comment">     * 分别为nums[i + 1] 和 nums[n - 1]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果三数之和等于0，将他们存入三元组，并进行去重操作</span></span><br><span class="line"><span class="comment">     * 如果三数之和小于0，则将右指针左移，继续判断</span></span><br><span class="line"><span class="comment">     * 如果三数之和大于0，则将左指针右移，继续判断</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="comment">//结果数组</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//数组长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果数组为空或者数组长度小于3，直接不满足条件，返回null</span></span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || n &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果排序完之后数组的第一个元素（即最小元素）大于0，则数组中不可能出现三数之和等于0的情况，返回null</span></span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//去重，当起始值等于前一个元素</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i -<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i] + nums[left] + nums[right];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</span><br><span class="line">                ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                list.add(nums[i]);</span><br><span class="line">                list.add(nums[left]);</span><br><span class="line">                list.add(nums[right]);</span><br><span class="line">                result.add(list);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//去重操作</span></span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度:O(N^2)</li>
<li>空间复杂度:O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 1582 二进制矩阵中的特殊位置</title>
    <url>/posts/1438532717.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="1582-二进制矩阵中的特殊位置"><a href="#1582-二进制矩阵中的特殊位置" class="headerlink" title="1582. 二进制矩阵中的特殊位置"></a><a href="https://leetcode.cn/problems/special-positions-in-a-binary-matrix/">1582. 二进制矩阵中的特殊位置</a></h4><p>给你一个大小为 <code>rows x cols</code> 的矩阵 <code>mat</code>，其中 <code>mat[i][j]</code> 是 <code>0</code> 或 <code>1</code>，请返回 <strong>矩阵 *<code>mat</code>* 中特殊位置的数目</strong> 。</p>
<p><strong>特殊位置</strong> 定义：如果 <code>mat[i][j] == 1</code> 并且第 <code>i</code> 行和第 <code>j</code> 列中的所有其他元素均为 <code>0</code>（行和列的下标均 <strong>从 0 开始</strong> ），则位置 <code>(i, j)</code> 被称为特殊位置。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：mat = [[1,0,0],</span><br><span class="line">            [0,0,1],</span><br><span class="line">            [1,0,0]]</span><br><span class="line">输出：1</span><br><span class="line">解释：(1,2) 是一个特殊位置，因为 mat[1][2] == 1 且所处的行和列上所有其他元素都是 0</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：mat = [[1,0,0],</span><br><span class="line">            [0,1,0],</span><br><span class="line">            [0,0,1]]</span><br><span class="line">输出：3</span><br><span class="line">解释：(0,0), (1,1) 和 (2,2) 都是特殊位置</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：mat = [[0,0,0,1],</span><br><span class="line">            [1,0,0,0],</span><br><span class="line">            [0,1,1,0],</span><br><span class="line">            [0,0,0,0]]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：mat = [[0,0,0,0,0],</span><br><span class="line">            [1,0,0,0,0],</span><br><span class="line">            [0,1,0,0,0],</span><br><span class="line">            [0,0,1,0,0],</span><br><span class="line">            [0,0,0,1,1]]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>rows == mat.length</code></li>
<li><code>cols == mat[i].length</code></li>
<li><code>1 &lt;= rows, cols &lt;= 100</code></li>
<li><code>mat[i][j]</code> 是 <code>0</code> 或 <code>1</code></li>
</ul>
<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSpecial</span><span class="params">(<span class="type">int</span>[][] mat)</span> &#123;</span><br><span class="line">        <span class="comment">//用于记录有多少个满足要求的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> mat.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> mat[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录每行中出现的1的个数</span></span><br><span class="line">        <span class="type">int</span>[] rowNum = <span class="keyword">new</span> <span class="title class_">int</span>[row];</span><br><span class="line">        <span class="comment">//记录每列中出现的1的个数</span></span><br><span class="line">        <span class="type">int</span>[] colNum = <span class="keyword">new</span> <span class="title class_">int</span>[col];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次遍历，找出行列中所含有1的个数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; row;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; col;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    rowNum[i]++;</span><br><span class="line">                    colNum[j]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二次遍历找出符合条件的位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; row;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; col;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j] == <span class="number">1</span> &amp;&amp; rowNum[i] == <span class="number">1</span> &amp;&amp; colNum[j] ==<span class="number">1</span>)&#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 1624 两个相同字符之间的最长字符串</title>
    <url>/posts/3400987339.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="1624-两个相同字符之间的最长子字符串"><a href="#1624-两个相同字符之间的最长子字符串" class="headerlink" title="1624. 两个相同字符之间的最长子字符串"></a><a href="https://leetcode.cn/problems/largest-substring-between-two-equal-characters/">1624. 两个相同字符之间的最长子字符串</a></h4><p>给你一个字符串 <code>s</code>，请你返回 <strong>两个相同字符之间的最长子字符串的长度</strong> <em>，</em>计算长度时不含这两个字符。如果不存在这样的子字符串，返回 <code>-1</code> 。</p>
<p><strong>子字符串</strong> 是字符串中的一个连续字符序列。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;aa&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：最优的子字符串是两个 &#x27;a&#x27; 之间的空子字符串。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;abca&quot;</span><br><span class="line">输出：2</span><br><span class="line">解释：最优的子字符串是 &quot;bc&quot; 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;cbzxy&quot;</span><br><span class="line">输出：-1</span><br><span class="line">解释：s 中不存在出现出现两次的字符，所以返回 -1 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;cabbac&quot;</span><br><span class="line">输出：4</span><br><span class="line">解释：最优的子字符串是 &quot;abba&quot; ，其他的非最优解包括 &quot;bb&quot; 和 &quot;&quot; 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 300</code></li>
<li><code>s</code> 只含小写英文字母</li>
</ul>
<h4 id="解题思路：简单模拟"><a href="#解题思路：简单模拟" class="headerlink" title="解题思路：简单模拟"></a>解题思路：简单模拟</h4><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxLengthBetweenEqualCharacters</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">//记录字符第一次出现的索引下标</span></span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="comment">//如果该字符已经出现，更新最长值</span></span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(c))&#123;</span><br><span class="line">                res = Math.max(res,i - map.get(c) - <span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果字符没出现，存入map</span></span><br><span class="line">                map.put(c,i);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 1592 重新排列单词间的空格</title>
    <url>/posts/3503892725.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="1592-重新排列单词间的空格"><a href="#1592-重新排列单词间的空格" class="headerlink" title="1592. 重新排列单词间的空格"></a><a href="https://leetcode.cn/problems/rearrange-spaces-between-words/">1592. 重新排列单词间的空格</a></h4><p>给你一个字符串 <code>text</code> ，该字符串由若干被空格包围的单词组成。每个单词由一个或者多个小写英文字母组成，并且两个单词之间至少存在一个空格。题目测试用例保证 <code>text</code> <strong>至少包含一个单词</strong> 。</p>
<p>请你重新排列空格，使每对相邻单词之间的空格数目都 <strong>相等</strong> ，并尽可能 <strong>最大化</strong> 该数目。如果不能重新平均分配所有空格，请 <strong>将多余的空格放置在字符串末尾</strong> ，这也意味着返回的字符串应当与原 <code>text</code> 字符串的长度相等。</p>
<p>返回 <strong>重新排列空格后的字符串</strong> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text = &quot;  this   is  a sentence &quot;</span><br><span class="line">输出：&quot;this   is   a   sentence&quot;</span><br><span class="line">解释：总共有 9 个空格和 4 个单词。可以将 9 个空格平均分配到相邻单词之间，相邻单词间空格数为：9 / (4-1) = 3 个。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text = &quot; practice   makes   perfect&quot;</span><br><span class="line">输出：&quot;practice   makes   perfect &quot;</span><br><span class="line">解释：总共有 7 个空格和 3 个单词。7 / (3-1) = 3 个空格加上 1 个多余的空格。多余的空格需要放在字符串的末尾。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text = &quot;hello   world&quot;</span><br><span class="line">输出：&quot;hello   world&quot;</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text = &quot;  walks  udp package   into  bar a&quot;</span><br><span class="line">输出：&quot;walks  udp  package  into  bar  a &quot;</span><br></pre></td></tr></table></figure>

<p><strong>示例 5：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text = &quot;a&quot;</span><br><span class="line">输出：&quot;a&quot;</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= text.length &lt;= 100</code></li>
<li><code>text</code> 由小写英文字母和 <code>&#39; &#39;</code> 组成</li>
<li><code>text</code> 中至少包含一个单词</li>
</ul>
<h4 id="解题思路：模拟"><a href="#解题思路：模拟" class="headerlink" title="解题思路：模拟"></a>解题思路：模拟</h4><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reorderSpaces</span><span class="params">(String text)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录空格数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">spaceNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//正则表达式 //s标识空格，+表示一个或多个</span></span><br><span class="line">        String[] words = text.trim().split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录单词数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">wordNum</span> <span class="operator">=</span> words.length;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;单词数为:&quot;+wordNum);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text.length();</span><br><span class="line">        <span class="comment">//计算出空格的数量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> text.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                spaceNum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;空格数为:&quot;+spaceNum);</span></span><br><span class="line">        <span class="comment">//结果字符串</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">resStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只有一个单词，将空格全部放在该单词后</span></span><br><span class="line">        <span class="keyword">if</span> (wordNum == <span class="number">1</span>)&#123;</span><br><span class="line">            resStr.append(words[<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">//追加spaceNum个空格</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; spaceNum;i++)&#123;</span><br><span class="line">                resStr.append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> resStr.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//有多个单词,先得出平均的空格数，然后余数的空格加入到字符串最后</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//平均空格数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">avgSpace</span> <span class="operator">=</span> spaceNum / (wordNum - <span class="number">1</span>);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;平均空格数：&quot;+avgSpace);</span></span><br><span class="line">        <span class="comment">//剩余空格数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">remainerSpace</span> <span class="operator">=</span> spaceNum % (wordNum -<span class="number">1</span>);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;剩余空格数：&quot;+remainerSpace);</span></span><br><span class="line">        <span class="comment">//平均空格数放到各个单词之间</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; wordNum; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; avgSpace; j++) &#123;</span><br><span class="line">                    resStr.append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            resStr.append(words[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//剩余的放最后</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; remainerSpace; i++) &#123;</span><br><span class="line">            resStr.append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resStr.toString();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 1636 按照频率将数组升序排序</title>
    <url>/posts/1197216508.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="1636-按照频率将数组升序排序"><a href="#1636-按照频率将数组升序排序" class="headerlink" title="1636. 按照频率将数组升序排序"></a><a href="https://leetcode.cn/problems/sort-array-by-increasing-frequency/">1636. 按照频率将数组升序排序</a></h4><p>给你一个整数数组 <code>nums</code> ，请你将数组按照每个值的频率 <strong>升序</strong> 排序。如果有多个值的频率相同，请你按照数值本身将它们 <strong>降序</strong> 排序。 </p>
<p>请你返回排序后的数组。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,1,2,2,2,3]</span><br><span class="line">输出：[3,1,1,2,2,2]</span><br><span class="line">解释：&#x27;3&#x27; 频率为 1，&#x27;1&#x27; 频率为 2，&#x27;2&#x27; 频率为 3 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,3,1,3,2]</span><br><span class="line">输出：[1,3,3,2,2]</span><br><span class="line">解释：&#x27;2&#x27; 和 &#x27;3&#x27; 频率都为 2 ，所以它们之间按照数值本身降序排序。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-1,1,-6,4,5,-6,1,4,1]</span><br><span class="line">输出：[5,-1,4,4,-6,-6,1,1,1]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 100</code></li>
<li><code>-100 &lt;= nums[i] &lt;= 100</code></li>
</ul>
<h4 id="思路：简单模拟"><a href="#思路：简单模拟" class="headerlink" title="思路：简单模拟"></a>思路：简单模拟</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] frequencySort(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="comment">//键存储元素，值存储元素频率</span></span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        map.put(num, map.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        list.add(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自定义比较器，如果频率不相等，按照频率排，如果相等,按照值大小排</span></span><br><span class="line">    Collections.sort(list, (a, b) -&gt; &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> map.get(a);</span><br><span class="line">                <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> map.get(b);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> count1 != count2 ? count1 - count2 : b - a;</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//将数组刷回去</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        nums[i] = list.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 1475 商品折扣后的最终价格</title>
    <url>/posts/2667841984.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="1475-商品折扣后的最终价格"><a href="#1475-商品折扣后的最终价格" class="headerlink" title="1475. 商品折扣后的最终价格"></a><a href="https://leetcode.cn/problems/final-prices-with-a-special-discount-in-a-shop/">1475. 商品折扣后的最终价格</a></h4><p>给你一个数组 <code>prices</code> ，其中 <code>prices[i]</code> 是商店里第 <code>i</code> 件商品的价格。</p>
<p>商店里正在进行促销活动，如果你要买第 <code>i</code> 件商品，那么你可以得到与 <code>prices[j]</code> 相等的折扣，其中 <code>j</code> 是满足 <code>j &gt; i</code> 且 <code>prices[j] &lt;= prices[i]</code> 的 <strong>最小下标</strong> ，如果没有满足条件的 <code>j</code> ，你将没有任何折扣。</p>
<p>请你返回一个数组，数组中第 <code>i</code> 个元素是折扣后你购买商品 <code>i</code> 最终需要支付的价格。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：prices = [8,4,6,2,3]</span><br><span class="line">输出：[4,2,4,2,3]</span><br><span class="line">解释：</span><br><span class="line">商品 0 的价格为 price[0]=8 ，你将得到 prices[1]=4 的折扣，所以最终价格为 8 - 4 = 4 。</span><br><span class="line">商品 1 的价格为 price[1]=4 ，你将得到 prices[3]=2 的折扣，所以最终价格为 4 - 2 = 2 。</span><br><span class="line">商品 2 的价格为 price[2]=6 ，你将得到 prices[3]=2 的折扣，所以最终价格为 6 - 2 = 4 。</span><br><span class="line">商品 3 和 4 都没有折扣。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：prices = [1,2,3,4,5]</span><br><span class="line">输出：[1,2,3,4,5]</span><br><span class="line">解释：在这个例子中，所有商品都没有折扣。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：prices = [10,1,1,6]</span><br><span class="line">输出：[9,0,1,6]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= prices.length &lt;= 500</code></li>
<li><code>1 &lt;= prices[i] &lt;= 10^3</code></li>
</ul>
<h4 id="思路：模拟"><a href="#思路：模拟" class="headerlink" title="思路：模拟"></a>思路：模拟</h4><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] finalPrices(<span class="type">int</span>[] prices) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结果数组</span></span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">discount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>;j &lt; len;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prices[j] &lt;= prices[i])&#123;</span><br><span class="line">                <span class="comment">//将折扣之后的值存入结果数组</span></span><br><span class="line">                discount = prices[j];</span><br><span class="line">                <span class="comment">//开始计算下一个商品的折扣值</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res[i]= prices[i] - discount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 165 比较版本号</title>
    <url>/posts/104017922.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="165-比较版本号"><a href="#165-比较版本号" class="headerlink" title="165. 比较版本号"></a><a href="https://leetcode.cn/problems/compare-version-numbers/">165. 比较版本号</a></h4><p>给你两个版本号 <code>version1</code> 和 <code>version2</code> ，请你比较它们。</p>
<p>版本号由一个或多个修订号组成，各修订号由一个 <code>&#39;.&#39;</code> 连接。每个修订号由 <strong>多位数字</strong> 组成，可能包含 <strong>前导零</strong> 。每个版本号至少包含一个字符。修订号从左到右编号，下标从 0 开始，最左边的修订号下标为 0 ，下一个修订号下标为 1 ，以此类推。例如，<code>2.5.33</code> 和 <code>0.1</code> 都是有效的版本号。</p>
<p>比较版本号时，请按从左到右的顺序依次比较它们的修订号。比较修订号时，只需比较 <strong>忽略任何前导零后的整数值</strong> 。也就是说，修订号 <code>1</code> 和修订号 <code>001</code> <strong>相等</strong> 。如果版本号没有指定某个下标处的修订号，则该修订号视为 <code>0</code> 。例如，版本 <code>1.0</code> 小于版本 <code>1.1</code> ，因为它们下标为 <code>0</code> 的修订号相同，而下标为 <code>1</code> 的修订号分别为 <code>0</code> 和 <code>1</code> ，<code>0 &lt; 1</code> 。</p>
<p>返回规则如下：</p>
<ul>
<li>如果 <code>*version1* &gt; *version2*</code> 返回 <code>1</code>，</li>
<li>如果 <code>*version1* &lt; *version2*</code> 返回 <code>-1</code>，</li>
<li>除此之外返回 <code>0</code>。</li>
</ul>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：version1 = &quot;1.01&quot;, version2 = &quot;1.001&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：忽略前导零，&quot;01&quot; 和 &quot;001&quot; 都表示相同的整数 &quot;1&quot;</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：version1 = &quot;1.0&quot;, version2 = &quot;1.0.0&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：version1 没有指定下标为 2 的修订号，即视为 &quot;0&quot;</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：version1 = &quot;0.1&quot;, version2 = &quot;1.1&quot;</span><br><span class="line">输出：-1</span><br><span class="line">解释：version1 中下标为 0 的修订号是 &quot;0&quot;，version2 中下标为 0 的修订号是 &quot;1&quot; 。0 &lt; 1，所以 version1 &lt; version2</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= version1.length, version2.length &lt;= 500</code></li>
<li><code>version1</code> 和 <code>version2</code> 仅包含数字和 <code>&#39;.&#39;</code></li>
<li><code>version1</code> 和 <code>version2</code> 都是 <strong>有效版本号</strong></li>
<li><code>version1</code> 和 <code>version2</code> 的所有修订号都可以存储在 <strong>32 位整数</strong> 中</li>
</ul>
<h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>因为版本号是由修订号组成的，而修订号的前导零又不会影响修订号的大小，所以只需要按照从前往后的顺序从版本号中取出每个修订号，将其转换为数字，然后进行比对大小即可。</p>
<h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol>
<li>使用双指针标识两字符串的下标，遍历两字符串</li>
<li>在遍历到点之前，取到的每一个字符都转换为数字，然后加上前一个数字乘十</li>
<li>遍历到点就停止，这样就截取除了一个修订号，将截取出的修订号进行大小比对</li>
<li>根据大小关系返回，如果当前新修订号比较不出来，就继续比较下一个修订号，直到两字符串遍历完毕</li>
</ol>
<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareVersion</span><span class="params">(String version1, String version2)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> version1.length();</span><br><span class="line">       <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> version2.length();</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//双指针</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//遍历到两个字符串均结束为止</span></span><br><span class="line">       <span class="keyword">while</span>(i &lt; len1 || j &lt; len2)&#123;</span><br><span class="line">           <span class="comment">//到下一个点之前的修订号</span></span><br><span class="line">           <span class="type">long</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">           </span><br><span class="line">           <span class="keyword">while</span>(i &lt; len1 &amp;&amp; version1.charAt(i) != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">               <span class="comment">//version1.charAt(i) - &#x27;0&#x27;是将当前字符转为数字</span></span><br><span class="line">               num1 = num1 * <span class="number">10</span> + (version1.charAt(i) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">               i++;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           <span class="comment">//跳过点</span></span><br><span class="line">           i++;</span><br><span class="line">           </span><br><span class="line">           <span class="type">long</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">while</span>(j &lt; len2 &amp;&amp; version2.charAt(j) != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">               num2 = num2 * <span class="number">10</span> + (version2.charAt(j) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">               j++;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           <span class="comment">//跳过点</span></span><br><span class="line">           j++;</span><br><span class="line">           <span class="comment">//到此为止就得到了version1和version所对应的修订号，对比大小即可</span></span><br><span class="line">           <span class="keyword">if</span>(num1 &gt; num2)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           <span class="keyword">if</span>(num1 &lt; num2)&#123;</span><br><span class="line">               <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//两者版本号相同</span></span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 169 多数元素</title>
    <url>/posts/1003796315.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="169. 多数元素"></a><a href="https://leetcode-cn.com/problems/majority-element/">169. 多数元素</a></h4><p>给定一个大小为 <em>n</em> 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p>
<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：[3,2,3]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：[2,2,1,1,1,2,2]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>

<p><strong>进阶：</strong></p>
<ul>
<li>尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题。</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="1-哈希表法"><a href="#1-哈希表法" class="headerlink" title="1.哈希表法"></a>1.哈希表法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">majorityElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">//使用一个哈希表，数组元素做为键，出现次数作为值</span></span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        map.put(nums[i], map.getOrDefault(nums[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Integer key : map.keySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.get(key) &gt; len / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(1)</li>
</ul>
<h3 id="2-排序"><a href="#2-排序" class="headerlink" title="2. 排序"></a>2. 排序</h3><p><strong>思路：</strong>将数组中的元素按照递增或者递减的顺序排序，那么下标为<code>n/2</code>的元素一定是众数，即“多数元素”。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">majorityElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 例子：</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 原始数组：1 2 1 1 3</span></span><br><span class="line"><span class="comment">     * 排序数组：1 1 1 2 3</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 原始数组：2 2 1 2 3</span></span><br><span class="line"><span class="comment">     * 排序数组：1 2 2 2 3</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 原始数组：3 2 1 3 3</span></span><br><span class="line"><span class="comment">     * 排序数组：1 2 3 3 3</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">return</span> nums[n / <span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(nlogN)，主要是排序花费的时间。</li>
<li>空间复杂度：O(logN)，数组排序的空间复杂度需要使用O(logN)的栈空间。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 19 删除链表的倒数第N个结点</title>
    <url>/posts/1145963684.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h4><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1], n = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2], n = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表中结点的数目为 <code>sz</code></li>
<li><code>1 &lt;= sz &lt;= 30</code></li>
<li><code>0 &lt;= Node.val &lt;= 100</code></li>
<li><code>1 &lt;= n &lt;= sz</code></li>
</ul>
<h4 id="解题思路：快慢指针"><a href="#解题思路：快慢指针" class="headerlink" title="解题思路：快慢指针"></a>解题思路：快慢指针</h4><ol>
<li>快指针先移动n步</li>
<li>然后快慢指针一起移动，当快指针移动到链表末尾时，慢指针正好移动到我们要删除的节点</li>
<li>使用pre来标记要删除节点的前一个位置，来保证删除操作节点不丢失</li>
</ol>
<p>思路和<a href="https://www.kdy.icu/posts/4254875703.html">剑指Offer22 链表中倒数第K个结点</a>一致，就是多了个删除操作。</p>
<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line">    </span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">    </span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(n &gt; <span class="number">0</span> &amp;&amp; fast != <span class="literal">null</span>)&#123;</span><br><span class="line">        n--;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(fast!=<span class="literal">null</span>)&#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    pre.next = cur.next;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 1823 找出游戏的获胜者</title>
    <url>/posts/1929801198.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="1823-找出游戏的获胜者"><a href="#1823-找出游戏的获胜者" class="headerlink" title="1823. 找出游戏的获胜者"></a><a href="https://leetcode-cn.com/problems/find-the-winner-of-the-circular-game/">1823. 找出游戏的获胜者</a></h4><p>共有 <code>n</code> 名小伙伴一起做游戏。小伙伴们围成一圈，按 <strong>顺时针顺序</strong> 从 <code>1</code> 到 <code>n</code> 编号。确切地说，从第 <code>i</code> 名小伙伴顺时针移动一位会到达第 <code>(i+1)</code> 名小伙伴的位置，其中 <code>1 &lt;= i &lt; n</code> ，从第 <code>n</code> 名小伙伴顺时针移动一位会回到第 <code>1</code> 名小伙伴的位置。</p>
<p>游戏遵循如下规则：</p>
<ol>
<li>从第 <code>1</code> 名小伙伴所在位置 <strong>开始</strong> 。</li>
<li>沿着顺时针方向数 <code>k</code> 名小伙伴，计数时需要 <strong>包含</strong> 起始时的那位小伙伴。逐个绕圈进行计数，一些小伙伴可能会被数过不止一次。</li>
<li>你数到的最后一名小伙伴需要离开圈子，并视作输掉游戏。</li>
<li>如果圈子中仍然有不止一名小伙伴，从刚刚输掉的小伙伴的 <strong>顺时针下一位</strong> 小伙伴 <strong>开始</strong>，回到步骤 <code>2</code> 继续执行。</li>
<li>否则，圈子中最后一名小伙伴赢得游戏。</li>
</ol>
<p>给你参与游戏的小伙伴总数 <code>n</code> ，和一个整数 <code>k</code> ，返回游戏的获胜者。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/25/ic234-q2-ex11.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 5, k = 2</span><br><span class="line">输出：3</span><br><span class="line">解释：游戏运行步骤如下：</span><br><span class="line">1) 从小伙伴 1 开始。</span><br><span class="line">2) 顺时针数 2 名小伙伴，也就是小伙伴 1 和 2 。</span><br><span class="line">3) 小伙伴 2 离开圈子。下一次从小伙伴 3 开始。</span><br><span class="line">4) 顺时针数 2 名小伙伴，也就是小伙伴 3 和 4 。</span><br><span class="line">5) 小伙伴 4 离开圈子。下一次从小伙伴 5 开始。</span><br><span class="line">6) 顺时针数 2 名小伙伴，也就是小伙伴 5 和 1 。</span><br><span class="line">7) 小伙伴 1 离开圈子。下一次从小伙伴 3 开始。</span><br><span class="line">8) 顺时针数 2 名小伙伴，也就是小伙伴 3 和 5 。</span><br><span class="line">9) 小伙伴 5 离开圈子。只剩下小伙伴 3 。所以小伙伴 3 是游戏的获胜者。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 6, k = 5</span><br><span class="line">输出：1</span><br><span class="line">解释：小伙伴离开圈子的顺序：5、4、6、2、3 。小伙伴 1 是游戏的获胜者。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= k &lt;= n &lt;= 500</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p><strong>使用队列对题目进行模拟：</strong></p>
<ul>
<li>将所有元素存入队列</li>
<li>将前k -1个元素出队后继续加入队尾</li>
<li>将第k个元素出队，表示淘汰了一名小朋友</li>
<li>对k+1个元素作为队首元素继续之前的操作，直到队列只剩下一个元素。</li>
</ul>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findTheWinner</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 使用队列</span></span><br><span class="line"><span class="comment">     * 将元素存入队列中，</span></span><br><span class="line"><span class="comment">     * 将队首元素出队并继续加入对尾，</span></span><br><span class="line"><span class="comment">     * 直到第k个元素，出队后不在加入队尾，直接出队</span></span><br><span class="line"><span class="comment">     * 第k+1个元素作为队首元素继续执行上述操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    ArrayDeque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//将元素存入队列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        deque.offer(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (deque.size() != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//前k-1个元素加入队尾</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            deque.addLast(deque.poll());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第k个元素弹出</span></span><br><span class="line">        deque.poll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> deque.peek();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(kN)，每一轮都要取出k个元素，存入k-1个元素，一共重复n-1轮。</li>
<li>空间复杂度：O(N)，使用到了一个长度为N的队列。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 198 打家劫舍</title>
    <url>/posts/1821153849.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198. 打家劫舍"></a><a href="https://leetcode-cn.com/problems/house-robber/">198. 打家劫舍</a></h4><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。</p>
<p>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>不触动警报装置的情况下</strong> ，一夜之内能够偷窃到的最高金额。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：[1,2,3,1]</span><br><span class="line">输出：4</span><br><span class="line">解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</span><br><span class="line">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：[2,7,9,3,1]</span><br><span class="line">输出：12</span><br><span class="line">解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。</span><br><span class="line">     偷窃到的最高金额 = 2 + 9 + 1 = 12 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 100</code></li>
<li><code>0 &lt;= nums[i] &lt;= 400</code></li>
</ul>
<h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><h5 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h5><p>首先考虑最简单的情况。</p>
<ul>
<li>只有一间房的情况，只能偷这间房。</li>
<li>只有两间房的情况，盗窃两间房中金额较高的房。</li>
</ul>
<p>然后考虑房间大于两间房的情况：</p>
<ul>
<li>对于第i间房，如果选择偷窃，那么就不能偷窃第i-1间房，偷窃的金额就为前i-2间房偷窃的总金额加上当前房间的金额。</li>
<li>对于第i间房，如果选择不偷窃，那么偷窃的总金额即为前i-1间房偷窃的总金额。</li>
</ul>
<p>在以上两种情况下选取最大值进行偷窃，则可得到状态转移方程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[i] = Math.max(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + nums[i]);</span><br></pre></td></tr></table></figure>

<p>边界条件为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//边界条件</span></span><br><span class="line">dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<p>最终结果为dp[length - 1]，length是数组的长度。</p>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如果选择偷第i家，则证明第i-2家为最优解，加上当前i即可</span></span><br><span class="line"><span class="comment">     * 如果不选择偷第i家，则证明第i-1家为最优解</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 即  dp[i]  = Math.max(dp[i-1],dp[i -2 ] + nums[i])</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 边界条件：</span></span><br><span class="line"><span class="comment">     *       dp[0] = nums[0],只有一间房，只能偷这间房</span></span><br><span class="line"><span class="comment">     *       dp[1] = Math.max(nums[0],nums[1]) 两间房，偷钱多的哪一家</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//辅助dp数组</span></span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//边界条件</span></span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">    dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="comment">//递推公式</span></span><br><span class="line">        dp[i] = Math.max(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，需要遍历数组。</li>
<li>空间复杂度：O(N)，需要一个大小为数组长度的辅助dp数组。</li>
</ul>
<h5 id="空间优化："><a href="#空间优化：" class="headerlink" title="空间优化："></a>空间优化：</h5><p>每间房的最高总金额只和前两件房屋的最高总金额有关，所以可以只用两个值来<strong>时刻存储前两件房屋</strong>的最高金额即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//边界条件</span></span><br><span class="line">    <span class="comment">//记录前nums[i - 1]的最大金额</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//记录前nums[i-2]的最大金额</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">second</span> <span class="operator">=</span> Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="comment">//防止数据丢失</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> second;</span><br><span class="line">        <span class="comment">//状态转移方程</span></span><br><span class="line">        second = Math.max(second, first + nums[i]);</span><br><span class="line">        first = second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> second;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，需要遍历数组。</li>
<li>空间复杂度：O(1)，只使用了两个额外变量来存储前两间房屋的最高金额。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 202 快乐数</title>
    <url>/posts/186067624.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a><a href="https://leetcode.cn/problems/happy-number/">202. 快乐数</a></h4><p>难度简单1091收藏分享切换为英文接收动态反馈</p>
<p>编写一个算法来判断一个数 <code>n</code> 是不是快乐数。</p>
<p><strong>「快乐数」</strong> 定义为：</p>
<ul>
<li>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</li>
<li>然后重复这个过程直到这个数变为 1，也可能是 <strong>无限循环</strong> 但始终变不到 1。</li>
<li>如果这个过程 <strong>结果为</strong> 1，那么这个数就是快乐数。</li>
</ul>
<p>如果 <code>n</code> 是 <em>快乐数</em> 就返回 <code>true</code> ；不是，则返回 <code>false</code> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 19</span><br><span class="line">输出：true</span><br><span class="line">解释：</span><br><span class="line">12 + 92 = 82</span><br><span class="line">82 + 22 = 68</span><br><span class="line">62 + 82 = 100</span><br><span class="line">12 + 02 + 02 = 1</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 231 - 1</code></li>
</ul>
<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        <span class="comment">//如果值为1则证明为快乐数</span></span><br><span class="line">        <span class="comment">//如果值已经存在于集合中，则证明出现了死循环，也跳出循环</span></span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">1</span> &amp;&amp; !set.contains(n))&#123;</span><br><span class="line">            </span><br><span class="line">            set.add(n);</span><br><span class="line">            n = nextNum(n);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">return</span> <span class="variable">n</span> <span class="operator">=</span>= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//算出当前数的下一个数</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">nextNum</span> <span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//取出最后一位</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> n % <span class="number">10</span>;</span><br><span class="line">            sum += temp * temp;</span><br><span class="line">            <span class="comment">//更新值</span></span><br><span class="line">            n /=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 20 有效的括号</title>
    <url>/posts/1919756726.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode-cn.com/problems/valid-parentheses/">20. 有效的括号</a></h4><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<ol>
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
</ol>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;()&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;(]&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;([)]&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>示例 5：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;&#123;[]&#125;&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 104</code></li>
<li><code>s</code> 仅由括号 <code>&#39;()[]&#123;&#125;&#39;</code> 组成</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="comment">//如果字符串的长度为奇数，则可以直接返回false</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用哈希表存储括号之间的对应关系</span></span><br><span class="line">    HashMap&lt;Character, Character&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>);</span><br><span class="line">    map.put(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">    map.put(<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;[&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//是左括号，进栈</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsValue(c)) &#123;</span><br><span class="line">            stack.push(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//是右括号，判断栈是否为空，若不为空弹出栈顶元素，比较看是否为对应的左括号</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Stack.peek()和Stack.pop(）的相同点是 获取栈顶的值，</span></span><br><span class="line"><span class="comment">             * 不同点 则是 Stack.peek()只是获取栈顶的值，而Stack.pop()是获取栈顶的值然后删除。*/</span></span><br><span class="line">            <span class="keyword">if</span> (stack.isEmpty() || stack.peek() != map.get(c)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//满足条件，弹出元素</span></span><br><span class="line">            stack.pop();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//存在全是左括号的情况，最终栈为空则返回true，栈中还有元素返回false</span></span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，正确情况下需要遍历整个完整的字符串</li>
<li>空间复杂度：O(N + 6),6代表6种括号。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 203 移除链表元素</title>
    <url>/posts/3038163852.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203. 移除链表元素"></a><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">203. 移除链表元素</a></h4><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [], val = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [7,7,7,7], val = 7</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>列表中的节点数目在范围 <code>[0, 104]</code> 内</li>
<li><code>1 &lt;= Node.val &lt;= 50</code></li>
<li><code>0 &lt;= val &lt;= 50</code></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    <span class="comment">//pre代表当前节点的前一节点，cur代表当前节点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否到达链表尾部</span></span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//找到目标值，进行删除操作</span></span><br><span class="line">        <span class="keyword">if</span> (cur.val == val) &#123;</span><br><span class="line">            pre.next = cur.next;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新指针</span></span><br><span class="line">        cur = cur.next;</span><br><span class="line">        pre = pre.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 206 反转链表</title>
    <url>/posts/3968011866.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><ul>
<li><p><a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. 反转链表</a></p>
<p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2]</span><br><span class="line">输出：[2,1]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表中节点的数目范围是 <code>[0, 5000]</code></li>
<li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>
</ul>
</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p><strong>双指针迭代</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="comment">//用于保存反转的下一节点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//保存下一节点</span></span><br><span class="line">        temp = cur.next;</span><br><span class="line">        <span class="comment">//反转操作</span></span><br><span class="line">        cur.next = pre;</span><br><span class="line">        <span class="comment">//更新指针</span></span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最终cur指向null，pre指向链表头部</span></span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度:O(N)</li>
<li>空间复杂度:O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 21 合并两个有序链表</title>
    <url>/posts/424623171.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21. 合并两个有序链表"></a><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">21. 合并两个有序链表</a></h4><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [1,2,4], l2 = [1,3,4]</span><br><span class="line">输出：[1,1,2,3,4,4]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [], l2 = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>两个链表的节点数目范围是 <code>[0, 50]</code></li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li><code>l1</code> 和 <code>l2</code> 均按 <strong>非递减顺序</strong> 排列</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>迭代法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//哑结点，标识链表头部</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">    <span class="comment">//pre指针用来指示当前插入位置</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//两链表都非空时进行插入合并操作，有一个为空直接对另一个进行连接操作即可</span></span><br><span class="line">    <span class="keyword">while</span> (list1 != <span class="literal">null</span> &amp;&amp; list2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (list1.val &lt;= list2.val) &#123;</span><br><span class="line">            pre.next = list1;</span><br><span class="line">            list1 = list1.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre.next = list2;</span><br><span class="line">            list2 = list2.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pre = pre.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//合并之后还有部分链表没有合并，则直接将其连到链表尾端即可</span></span><br><span class="line">    pre.next = list1 == <span class="literal">null</span> ? list2:list1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(m+n)，m和n分别是两链表的长度</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 216 组合总和III</title>
    <url>/posts/3363352391.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="216-组合总和-III"><a href="#216-组合总和-III" class="headerlink" title="216. 组合总和 III"></a><a href="https://leetcode.cn/problems/combination-sum-iii/">216. 组合总和 III</a></h4><p>找出所有相加之和为 <code>n</code> 的 <code>k</code> 个数的组合，且满足下列条件：</p>
<ul>
<li>只使用数字1到9</li>
<li>每个数字 <strong>最多使用一次</strong></li>
</ul>
<p>返回 <em>所有可能的有效组合的列表</em> 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: k = 3, n = 7</span><br><span class="line">输出: [[1,2,4]]</span><br><span class="line">解释:</span><br><span class="line">1 + 2 + 4 = 7</span><br><span class="line">没有其他符合的组合了。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: k = 3, n = 9</span><br><span class="line">输出: [[1,2,6], [1,3,5], [2,3,4]]</span><br><span class="line">解释:</span><br><span class="line">1 + 2 + 6 = 9</span><br><span class="line">1 + 3 + 5 = 9</span><br><span class="line">2 + 3 + 4 = 9</span><br><span class="line">没有其他符合的组合了。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: k = 4, n = 1</span><br><span class="line">输出: []</span><br><span class="line">解释: 不存在有效的组合。</span><br><span class="line">在[1,9]范围内使用4个不同的数字，我们可以得到的最小和是1+2+3+4 = 10，因为10 &gt; 1，没有有效的组合。</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li><code>2 &lt;= k &lt;= 9</code></li>
<li><code>1 &lt;= n &lt;= 60</code></li>
</ul>
<h4 id="题解代码："><a href="#题解代码：" class="headerlink" title="题解代码："></a>题解代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单条路径</span></span><br><span class="line">LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line"><span class="comment">//结果集</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    backtracking(k, <span class="number">0</span>, n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k k个数的集合，也是递归深度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sum 已经遍历得到的元素的加和</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target 目标值，也就是n</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startIndex for循环开始的起始位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> sum, <span class="type">int</span> target, <span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (path.size() == k) &#123;</span><br><span class="line">        <span class="comment">//找到符合条件的路径</span></span><br><span class="line">        <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//单层逻辑</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">        path.add(i);</span><br><span class="line">        backtracking(k, sum, target, i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//回溯</span></span><br><span class="line">        sum -= i;</span><br><span class="line">        path.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 222 完全二叉树的节点个数</title>
    <url>/posts/2782220472.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="222-完全二叉树的节点个数"><a href="#222-完全二叉树的节点个数" class="headerlink" title="222. 完全二叉树的节点个数"></a><a href="https://leetcode-cn.com/problems/count-complete-tree-nodes/">222. 完全二叉树的节点个数</a></h4><p>难度中等659收藏分享切换为英文接收动态反馈</p>
<p>给你一棵 <strong>完全二叉树</strong> 的根节点 <code>root</code> ，求出该树的节点个数。</p>
<p><a href="https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin">完全二叉树</a> 的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 <code>h</code> 层，则该层包含 <code>1~ 2h</code> 个节点。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2,3,4,5,6]</span><br><span class="line">输出：6</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点的数目范围是<code>[0, 5 * 104]</code></li>
<li><code>0 &lt;= Node.val &lt;= 5 * 104</code></li>
<li>题目数据保证输入的树是 <strong>完全二叉树</strong></li>
</ul>
<p><strong>进阶：</strong>遍历树来统计节点是一种时间复杂度为 <code>O(n)</code> 的简单解决方案。你可以设计一个更快的算法吗？</p>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="迭代法：层序遍历"><a href="#迭代法：层序遍历" class="headerlink" title="迭代法：层序遍历"></a>迭代法：层序遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//层序遍历，记录节点的个数</span></span><br><span class="line"></span><br><span class="line">    Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    que.offer(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> que.size();</span><br><span class="line">        <span class="keyword">while</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                que.offer(node.left);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                que.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            len--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(N)</li>
</ul>
<h3 id="递归："><a href="#递归：" class="headerlink" title="递归："></a>递归：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//树为空直接返回0</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//树不为空，返回左子树节点数量加右子树节点数量加当前节点</span></span><br><span class="line">    <span class="keyword">return</span> countNodes(root.left) + countNodes(root.right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(logN)，递归系统栈占用的空间</li>
</ul>
<h3 id="完全二叉树性质"><a href="#完全二叉树性质" class="headerlink" title="完全二叉树性质"></a>完全二叉树性质</h3><p>完全二叉树只有两种情况：</p>
<ol>
<li>满二叉树</li>
<li>最后一层叶子结点没有满</li>
</ol>
<p>对于情况1，满二叉树的节点数 <code>N = 2 ^ depth - 1</code>，根节点深度为1</p>
<p>对于情况2，分别递归左孩子和右孩子，递归到某一个深度一定会有左孩子或者右孩子有满二叉树，然后按照情况1来计算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">leftDepth</span> <span class="operator">=</span> getDepth(root.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rightDepth</span> <span class="operator">=</span> getDepth(root.right);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左子树深度等于右子树深度，证明左子树是完全二叉树</span></span><br><span class="line">    <span class="keyword">if</span> (leftDepth == rightDepth) &#123;</span><br><span class="line">        <span class="comment">//将左子树的节点数算出来，然后通过递归去算出右子树的节点数</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; leftDepth) - <span class="number">1</span> + countNodes(root.right) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//左子树深度不等于右子树深度，则证明右子树为完全二叉树</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; rightDepth) - <span class="number">1</span> + countNodes(root.left) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//左子树深度不等于右子树深度，证明不是完全二叉树</span></span><br><span class="line">    <span class="comment">// 递归其左右孩子,加上根节点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//计算树的深度</span></span><br><span class="line">    <span class="keyword">while</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        root = root.left;</span><br><span class="line">        depth++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> depth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(logN * logN)</li>
<li>空间复杂度：O(logN)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 225 用队列实现栈</title>
    <url>/posts/400521211.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225. 用队列实现栈"></a><a href="https://leetcode-cn.com/problems/implement-stack-using-queues/">225. 用队列实现栈</a></h4><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code> 和 <code>empty</code>）。</p>
<p>实现 <code>MyStack</code> 类：</p>
<ul>
<li><code>void push(int x)</code> 将元素 x 压入栈顶。</li>
<li><code>int pop()</code> 移除并返回栈顶元素。</li>
<li><code>int top()</code> 返回栈顶元素。</li>
<li><code>boolean empty()</code> 如果栈是空的，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li>你只能使用队列的基本操作 —— 也就是 <code>push to back</code>、<code>peek/pop from front</code>、<code>size</code> 和 <code>is empty</code> 这些操作。</li>
<li>你所使用的语言也许不支持队列。 你可以使用 list （列表）或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;MyStack&quot;, &quot;push&quot;, &quot;push&quot;, &quot;top&quot;, &quot;pop&quot;, &quot;empty&quot;]</span><br><span class="line">[[], [1], [2], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, 2, 2, false]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">MyStack myStack = new MyStack();</span><br><span class="line">myStack.push(1);</span><br><span class="line">myStack.push(2);</span><br><span class="line">myStack.top(); // 返回 2</span><br><span class="line">myStack.pop(); // 返回 2</span><br><span class="line">myStack.empty(); // 返回 False</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= x &lt;= 9</code></li>
<li>最多调用<code>100</code> 次 <code>push</code>、<code>pop</code>、<code>top</code> 和 <code>empty</code></li>
<li>每次调用 <code>pop</code> 和 <code>top</code> 都保证栈不为空</li>
</ul>
<p><strong>进阶：</strong>你能否仅用一个队列来实现栈。</p>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line">    <span class="comment">//使用一个队列实现栈</span></span><br><span class="line">    Deque&lt;Integer&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在入栈时做文章，在每次入队后，都将之前的元素出队重新入队，即可达到先进后出的效果</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        queue.push(x);</span><br><span class="line">        <span class="comment">//一共需要出队的元素有队列长度减一个</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; queue.size() -<span class="number">1</span>;i++)&#123;</span><br><span class="line">            queue.push(queue.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 226 翻转二叉树</title>
    <url>/posts/2739663424.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a><a href="https://leetcode-cn.com/problems/invert-binary-tree/">226. 翻转二叉树</a></h4><p>给你一棵二叉树的根节点 <code>root</code> ，翻转这棵二叉树，并返回其根节点。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [4,2,7,1,3,6,9]</span><br><span class="line">输出：[4,7,2,9,6,3,1]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [2,1,3]</span><br><span class="line">输出：[2,3,1]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点数目范围在 <code>[0, 100]</code> 内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>只要把每个节点的左右孩子都翻转一次就可以达到整体反转的效果。</p>
<p><code>二叉树的题目递归时一定要注意采用哪一种遍历方式。</code></p>
<p>本题采用前序遍历或者后序遍历都可以，但是中序遍历不可以，可以手动模拟一下。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//递归出口</span></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//采用后序遍历</span></span><br><span class="line">    invertTree(root.left);<span class="comment">//左</span></span><br><span class="line">    invertTree(root.right);<span class="comment">//右</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//中</span></span><br><span class="line">    swapTree(root);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swapTree</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> root.left;</span><br><span class="line">    root.left = root.right;</span><br><span class="line">    root.right = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 217 存在重复元素</title>
    <url>/posts/2399383318.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="217-存在重复元素"><a href="#217-存在重复元素" class="headerlink" title="217. 存在重复元素"></a><a href="https://leetcode-cn.com/problems/contains-duplicate/">217. 存在重复元素</a></h4><p>给你一个整数数组 <code>nums</code> 。如果任一值在数组中出现 <strong>至少两次</strong> ，返回 <code>true</code> ；如果数组中每个元素互不相同，返回 <code>false</code> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3,1]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3,4]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,1,1,3,3,4,3,2,4,2]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 105</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 10</code></li>
</ul>
<h2 id="题解1："><a href="#题解1：" class="headerlink" title="题解1："></a>题解1：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">//使用集合存储，每次存入数据时进行判断，如果集合里面已经包含该元素，则返回true</span></span><br><span class="line">    <span class="comment">//如果不包含该元素，则存入集合</span></span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (set.contains(nums[i])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度:O(N)</li>
<li>空间复杂度:O(N)</li>
</ul>
<h2 id="题解2："><a href="#题解2：" class="headerlink" title="题解2："></a>题解2：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">//使用排序，排序完成后重复元素肯定是相邻的</span></span><br><span class="line">    <span class="comment">//使用两个连续的指针进行对比，若相同则直接返回true</span></span><br><span class="line"></span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N log N)，排序所需的时间复杂度</li>
<li>空间复杂度：O(1),没有用到额外空间，若深究，Arrays.sort(nums)使用到了栈空间，为O(log N)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 232 用栈实现队列</title>
    <url>/posts/1239723032.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232. 用栈实现队列"></a><a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/">232. 用栈实现队列</a></h4><p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）：</p>
<p>实现 <code>MyQueue</code> 类：</p>
<ul>
<li><code>void push(int x)</code> 将元素 x 推到队列的末尾</li>
<li><code>int pop()</code> 从队列的开头移除并返回元素</li>
<li><code>int peek()</code> 返回队列开头的元素</li>
<li><code>boolean empty()</code> 如果队列为空，返回 <code>true</code> ；否则，返回 <code>false</code></li>
</ul>
<p><strong>说明：</strong></p>
<ul>
<li>你 <strong>只能</strong> 使用标准的栈操作 —— 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, 和 <code>is empty</code> 操作是合法的。</li>
<li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li>
</ul>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;MyQueue&quot;, &quot;push&quot;, &quot;push&quot;, &quot;peek&quot;, &quot;pop&quot;, &quot;empty&quot;]</span><br><span class="line">[[], [1], [2], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, 1, 1, false]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">MyQueue myQueue = new MyQueue();</span><br><span class="line">myQueue.push(1); // queue is: [1]</span><br><span class="line">myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)</span><br><span class="line">myQueue.peek(); // return 1</span><br><span class="line">myQueue.pop(); // return 1, queue is [2]</span><br><span class="line">myQueue.empty(); // return false</span><br></pre></td></tr></table></figure>



<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= x &lt;= 9</code></li>
<li>最多调用 <code>100</code> 次 <code>push</code>、<code>pop</code>、<code>peek</code> 和 <code>empty</code></li>
<li>假设所有操作都是有效的 （例如，一个空的队列不会调用 <code>pop</code> 或者 <code>peek</code> 操作）</li>
</ul>
<p><strong>进阶：</strong></p>
<ul>
<li>你能否实现每个操作均摊时间复杂度为 <code>O(1)</code> 的队列？换句话说，执行 <code>n</code> 个操作的总时间复杂度为 <code>O(n)</code> ，即使其中一个操作可能花费较长时间。</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line">    <span class="comment">//使用两个栈来实现队列，一个作为队列的头部作为入口栈，一个作为队列的尾部作为出口栈</span></span><br><span class="line"></span><br><span class="line">    Stack&lt;Integer&gt; stackIn;</span><br><span class="line">    Stack&lt;Integer&gt; stackOut;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//入口栈负责入队</span></span><br><span class="line">        stackIn = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//出口栈负责出栈</span></span><br><span class="line">        stackOut = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        stackIn.push(x);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        dumppstackIn();</span><br><span class="line">        <span class="keyword">return</span> stackOut.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        dumppstackIn();</span><br><span class="line">        <span class="keyword">return</span> stackOut.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//两个栈均为空时，队列为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stackIn.isEmpty() &amp;&amp; stackOut.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果StackOut为空，则将StackIn中的元素全部放到StackOut中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dumppstackIn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!stackOut.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stackIn.isEmpty()) &#123;</span><br><span class="line">            stackOut.push(stackIn.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 234 回文链表</title>
    <url>/posts/1866655192.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="234-回文链表"><a href="#234-回文链表" class="headerlink" title="234. 回文链表"></a><a href="https://leetcode-cn.com/problems/palindrome-linked-list/">234. 回文链表</a></h4><p>给你一个单链表的头节点 <code>head</code> ，请你判断该链表是否为回文链表。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p><strong>示例 1：</strong></p>
<p><img src="/Leecode-234-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/pal1linked-list.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,2,1]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="/Leecode-234-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/pal2linked-list.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表中节点数目在范围<code>[1, 105]</code> 内</li>
<li><code>0 &lt;= Node.val &lt;= 9</code></li>
</ul>
<p><strong>进阶：</strong>你能否用 <code>O(n)</code> 时间复杂度和 <code>O(1)</code> 空间复杂度解决此题？</p>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 235 二叉搜索树的最近公共祖先</title>
    <url>/posts/2057855457.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235. 二叉搜索树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/">235. 二叉搜索树的最近公共祖先</a></h4><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p>
<p><a href="https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p>
<p>例如，给定如下二叉搜索树: root &#x3D; [6,2,8,0,4,7,9,null,null,3,5]</p>


<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8</span><br><span class="line">输出: 6 </span><br><span class="line">解释: 节点 2 和节点 8 的最近公共祖先是 6。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4</span><br><span class="line">输出: 2</span><br><span class="line">解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。</span><br></pre></td></tr></table></figure>

<p><strong>说明:</strong></p>
<ul>
<li>所有节点的值都是唯一的。</li>
<li>p、q 为不同节点且均存在于给定的二叉搜索树中。</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><blockquote>
<p><strong>二叉搜索树的特点：</strong>左子树的所有节点都小于当前节点，右子树的所有节点都大于当前节点。</p>
</blockquote>
<h4 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h4><p>根据分析，首先要找到p，q两个节点，然后才能找到他们的公共祖先。</p>
<p>根据二叉搜索树的特性来对两节点进行搜索，会有三种情况：</p>
<ol>
<li>两节点值都小于根节点，则从根节点的左子树中继续查找两节点</li>
<li>两节点值都大于根节点，则从根节点的右子树中继续查找两节点</li>
<li>两节点不满足上述条件，则证明当前节点就是最近公共祖先。<strong>此时两节点要么分别在当前节点的左右子树中，要么其中一个就是当前节点。</strong></li>
</ol>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//cur指向当前节点</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">//两节点值都小于根节点，则从根节点的左子树中继续查找两节点</span></span><br><span class="line">        <span class="keyword">if</span> (cur.val &gt; p.val &amp;&amp; cur.val &gt; q.val) &#123;</span><br><span class="line">            cur = cur.left;</span><br><span class="line">            <span class="comment">//两节点值都大于根节点，则从根节点的右子树中继续查找两节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur.val &lt; p.val &amp;&amp; cur.val &lt; q.val) &#123;</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，最坏情况下，树为链式结构，且p，q是树中尾端的两节点。</li>
<li>空间复杂度：O(1)，没有使用到额外空间。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 242 有效的字母异位词</title>
    <url>/posts/1502943152.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242. 有效的字母异位词"></a><a href="https://leetcode-cn.com/problems/valid-anagram/">242. 有效的字母异位词</a></h4><p>给定两个字符串 <code>*s*</code> 和 <code>*t*</code> ，编写一个函数来判断 <code>*t*</code> 是否是 <code>*s*</code> 的字母异位词。</p>
<p><strong>注意：</strong>若 <code>*s*</code> 和 <code>*t*</code> 中每个字符出现的次数都相同，则称 <code>*s*</code> 和 <code>*t*</code> 互为字母异位词。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;rat&quot;, t = &quot;car&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li><code>1 &lt;= s.length, t.length &lt;= 5 * 104</code></li>
<li><code>s</code> 和 <code>t</code> 仅包含小写字母</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>哈希表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="comment">//如果两字符串长度不相等，则肯定不符合要求</span></span><br><span class="line">    <span class="keyword">if</span> (s.length() != t.length()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将第一个字符串s存入哈希表，字符为键，出现的次数为值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        map.put(c, map.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断第二个字符串中的逐个字符，如果存在，则更新次数，不存在直接返回false</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> t.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (map.keySet().contains(c)) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> map.get(c);</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                map.put(c, --count);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(n)，n是字符串s的长度</li>
<li>空间复杂度：O(|S|)，S为字符集的大小，此处为26。</li>
</ul>
<h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><p>排序，字母异位词代表字符以及字符的个数要一致，则等价于排序后两字符串相等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.length() != t.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">    <span class="type">char</span>[] chart = t.toCharArray();</span><br><span class="line"></span><br><span class="line">    Arrays.sort(chars);</span><br><span class="line">    Arrays.sort(chart);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Arrays.equals(chars,chart);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度:O(logN)，排序所用到的时间复杂度</li>
<li>空间复杂度：O(logN)，排序所用到的空间复杂度</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 3 无重复字符的最长子串</title>
    <url>/posts/1667841846.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></h4><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= s.length &lt;= 5 * 104</code></li>
<li><code>s</code> 由英文字母、数字、符号和空格组成</li>
</ul>
<h4 id="代码思想："><a href="#代码思想：" class="headerlink" title="代码思想："></a>代码思想：</h4><p>滑动窗口</p>
<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="comment">//最长子串</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//键为当前字符，值为当前字符的下标</span></span><br><span class="line">    HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//start表示滑动窗口的开始位置，end表示滑动窗口的结束位置</span></span><br><span class="line">    <span class="comment">//start不动，end右移</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>, end = <span class="number">0</span>; end &lt; len; end++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(end);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果当前字符已经存在，则需要将start移动到上一个重复字符的下一位置，同时记录最长的长度</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(c)) &#123;</span><br><span class="line">            start = Math.max(start, map.get(c) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新当前最大滑动窗口长度</span></span><br><span class="line">        max = Math.max(max, end - start + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        map.put(c, end);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回结果</span></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 25 K个一组翻转链表</title>
    <url>/posts/150020788.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="25-K-个一组翻转链表"><a href="#25-K-个一组翻转链表" class="headerlink" title="25. K 个一组翻转链表"></a><a href="https://leetcode.cn/problems/reverse-nodes-in-k-group/">25. K 个一组翻转链表</a></h4><p>给你链表的头节点 <code>head</code> ，每 <code>k</code> 个节点一组进行翻转，请你返回修改后的链表。</p>
<p><code>k</code> 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 <code>k</code> 的整数倍，那么请将最后剩余的节点保持原有顺序。</p>
<p>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/reverse_ex1.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], k = 2</span><br><span class="line">输出：[2,1,4,3,5]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/reverse_ex2.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], k = 3</span><br><span class="line">输出：[3,2,1,4,5]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表中的节点数目为 <code>n</code></li>
<li><code>1 &lt;= k &lt;= n &lt;= 5000</code></li>
<li><code>0 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>递归</p>
<ol>
<li>从头开始，每次翻转k个节点，如果节点不足k个，则为递归出口</li>
<li>翻转链表</li>
<li>每一组翻转之后，head变为了原链表的尾部，tail变为了新链表的头部，然后进行链表连接</li>
<li>递归反转下一组k个节点</li>
</ol>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseKGroup</span> <span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="comment">//tail每次翻转的k个节点的尾结点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">tail</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="comment">//遍历k次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; k;i++)&#123;</span><br><span class="line">        <span class="comment">//递归出口</span></span><br><span class="line">        <span class="comment">//如果tail为空，则证明链表长度已经不足k，直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(tail == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = tail.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//*******************翻转***********************//</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur != tail)&#123;</span><br><span class="line">        temp = cur.next;</span><br><span class="line">        cur.next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//此时的tail在第二组的头结点上，进行递归调用</span></span><br><span class="line">    head.next = reverseKGroup(tail,k);</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">              </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 36 有效的数独</title>
    <url>/posts/312029469.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="36-有效的数独"><a href="#36-有效的数独" class="headerlink" title="36. 有效的数独"></a><a href="https://leetcode-cn.com/problems/valid-sudoku/">36. 有效的数独</a></h4><p>请你判断一个 <code>9 x 9</code> 的数独是否有效。只需要 <strong>根据以下规则</strong> ，验证已经填入的数字是否有效即可。</p>
<ol>
<li>数字 <code>1-9</code> 在每一行只能出现一次。</li>
<li>数字 <code>1-9</code> 在每一列只能出现一次。</li>
<li>数字 <code>1-9</code> 在每一个以粗实线分隔的 <code>3x3</code> 宫内只能出现一次。（请参考示例图）</li>
</ol>
<p><strong>注意：</strong></p>
<ul>
<li>一个有效的数独（部分已被填充）不一定是可解的。</li>
<li>只需要根据以上规则，验证已经填入的数字是否有效即可。</li>
<li>空白格用 <code>&#39;.&#39;</code> 表示。</li>
</ul>
<p><strong>示例 1：</strong></p>
 

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：board = </span><br><span class="line">[[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]</span><br><span class="line">,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]</span><br><span class="line">,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：board = </span><br><span class="line">[[&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]</span><br><span class="line">,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]</span><br><span class="line">,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]</span><br><span class="line">输出：false</span><br><span class="line">解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>board.length == 9</code></li>
<li><code>board[i].length == 9</code></li>
<li><code>board[i][j]</code> 是一位数字（<code>1-9</code>）或者 <code>&#39;.&#39;</code></li>
</ul>
<h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><ol>
<li>分别建立行、列和所在的九宫格box的哈希表来记录元素</li>
<li>遍历到每个数字<code>board[i][j]</code>的时候，需要判断它是否满足一下三个条件：<ol>
<li>是否在第i行出现过</li>
<li>是否在第j列出现过</li>
<li>是否在第index个box中出现过</li>
</ol>
</li>
<li>index的取值</li>
</ol>
 

<ul>
<li>从图中可以看出，box是由i和j共同确定的，对于第一排的三个box，序号是可以通过纵坐标唯一确定的，即j&#x2F;3,但是第二排就需要用到横坐标了</li>
<li>据观察，同列不同行之间的box的index之间的差为3，第一排可以看做<code>j / 3</code>,则第二排需要在<code>j / 3</code>的基础上加上 3，第三排同理，所以得出 index &#x3D; j &#x2F; 3 + i &#x2F; 3 * 3</li>
</ul>
<h2 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidSudoku</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分别建立关于行、列、九宫格方块的哈希表</span></span><br><span class="line">    Map&lt;Integer, Set&lt;Integer&gt;&gt; row = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(), col = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(), box = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存值</span></span><br><span class="line">    <span class="comment">//键为第几行，第几列，第几个，值为当前自己所管理的九个数字</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        row.put(i, <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line">        col.put(i, <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line">        box.put(i, <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> board[i][j];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过字符c - 字符0得到c的int值</span></span><br><span class="line">            <span class="comment">//如&#x27;8&#x27;的ASCII码为56,&#x27;0&#x27;的ASCII码为&#x27;48&#x27;,&#x27;8&#x27; - &#x27;0&#x27; = 8,8为数字8的ASCII码</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">intC</span> <span class="operator">=</span> c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//由画图可得</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> j / <span class="number">3</span> + i / <span class="number">3</span> * <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果已经存在于行列或者九宫格中，则返回false</span></span><br><span class="line">            <span class="keyword">if</span> (row.get(i).contains(intC) || col.get(j).contains(intC) || box.get(index).contains(intC)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果都没有，则存入</span></span><br><span class="line">            row.get(i).add(intC);</span><br><span class="line">            col.get(j).add(intC);</span><br><span class="line">            box.get(index).add(intC);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 350 两个数组的交集2</title>
    <url>/posts/939043073.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="350-两个数组的交集-II"><a href="#350-两个数组的交集-II" class="headerlink" title="350. 两个数组的交集 II"></a><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/">350. 两个数组的交集 II</a></h4><p>给你两个整数数组 <code>nums1</code> 和 <code>nums2</code> ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line">输出：[2,2]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class="line">输出：[4,9]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>
<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>
</ul>
<p>**<em>*进阶*<em>：</em></em></p>
<ul>
<li>如果给定的数组已经排好序呢？你将如何优化你的算法？</li>
<li>如果 <code>nums1</code> 的大小比 <code>nums2</code> 小，哪种方法更优？</li>
<li>如果 <code>nums2</code> 的元素存储在磁盘上，内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</li>
</ul>
<h3 id="解法1：哈希表法"><a href="#解法1：哈希表法" class="headerlink" title="解法1：哈希表法"></a>解法1：哈希表法</h3><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><blockquote>
<p>使用哈希表存储每个数字出现的次数，对于一个数字来说，它在交集出现的次数等于该数字在两个数组中出现的次数的最小值。</p>
<p>首先遍历第一个数组，并在哈希表中记录第一个数组中的每个数字以及对应出现的次数，然后遍历第二个数组，对于第二个数组中的每个数字，如果在哈希表中存在这个数字，则将该数字添加到答案，并减少哈希表中该数字出现的次数。</p>
<p>为了降低空间复杂度，首先遍历较短的数组并在哈希表中记录每个数字以及对应出现的次数，然后遍历较长的数组得到交集</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] intersect(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">    <span class="comment">//保证nums2的长度一定小于nums1</span></span><br><span class="line">    <span class="keyword">if</span> (nums1.length &lt; nums2.length)&#123;</span><br><span class="line">        <span class="keyword">return</span> intersect(nums2,nums1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//为了节省空间，使用长度较小的数组存入哈希表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums2) &#123;</span><br><span class="line">        <span class="comment">//Map.getOrDefault(Object key,V defaultValue)方法的作用是；</span></span><br><span class="line">        <span class="comment">//当Map集合中有这个key时，就是用这个key的值，</span></span><br><span class="line">        <span class="comment">//如果没有就使用defaultValue。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> map.getOrDefault(num,<span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">        map.put(num,count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//因为是子集，所以长度不会超过最小的数组长度</span></span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[nums2.length];</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums1) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> map.getOrDefault(num,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//count大于0，证明存在重复元素，取出存入数组，更新count值</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            res[index++] = num;</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            map.remove(num);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(num,count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Arrays.copyOfRange(res,<span class="number">0</span>,index);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(m + n),遍历两个数组</li>
<li>空间复杂度：O(min(m,n))</li>
</ul>
<h3 id="解法2：排序-双指针"><a href="#解法2：排序-双指针" class="headerlink" title="解法2：排序 + 双指针"></a>解法2：排序 + 双指针</h3><h4 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h4><blockquote>
<p>首先使用两个指针指向两个数组头部，每次比较两个指针指向数字，如果不相等，则较小数字的指针右移一位，如果相等，数字添加到结果数组，直到有一个指针超出范围，遍历结束。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] intersect(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line"></span><br><span class="line">    Arrays.sort(nums1);</span><br><span class="line">    Arrays.sort(nums2);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums2.length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[Math.min(m, n)];</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; m &amp;&amp; j &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1[i] &lt; nums2[j]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums1[i] &gt; nums2[j]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res[index++] = nums1[i];</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Arrays.copyOfRange(res, <span class="number">0</span>, index);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(mlogm + nlogn)，排序的时间复杂度为O(mlogm + nlogn)，遍历的时间复杂度为O(m + n)，所以总时间复杂度为O(mlogm + nlogn)。</li>
<li>空间复杂度：O(min(m,n)),原理同解法1</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 380 O(1)时间插入、删除和获取随机元素</title>
    <url>/posts/3445342609.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="380-O-1-时间插入、删除和获取随机元素"><a href="#380-O-1-时间插入、删除和获取随机元素" class="headerlink" title="380. O(1) 时间插入、删除和获取随机元素"></a><a href="https://leetcode.cn/problems/insert-delete-getrandom-o1/">380. O(1) 时间插入、删除和获取随机元素</a></h4><p>实现<code>RandomizedSet</code> 类：</p>
<ul>
<li><code>RandomizedSet()</code> 初始化 <code>RandomizedSet</code> 对象</li>
<li><code>bool insert(int val)</code> 当元素 <code>val</code> 不存在时，向集合中插入该项，并返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>
<li><code>bool remove(int val)</code> 当元素 <code>val</code> 存在时，从集合中移除该项，并返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>
<li><code>int getRandom()</code> 随机返回现有集合中的一项（测试用例保证调用此方法时集合中至少存在一个元素）。每个元素应该有 <strong>相同的概率</strong> 被返回。</li>
</ul>
<p>你必须实现类的所有函数，并满足每个函数的 <strong>平均</strong> 时间复杂度为 <code>O(1)</code> 。</p>
<p><strong>示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line">[&quot;RandomizedSet&quot;, &quot;insert&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;]</span><br><span class="line">[[], [1], [2], [2], [], [1], [2], []]</span><br><span class="line">输出</span><br><span class="line">[null, true, false, true, 2, true, false, 2]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">RandomizedSet randomizedSet = new RandomizedSet();</span><br><span class="line">randomizedSet.insert(1); // 向集合中插入 1 。返回 true 表示 1 被成功地插入。</span><br><span class="line">randomizedSet.remove(2); // 返回 false ，表示集合中不存在 2 。</span><br><span class="line">randomizedSet.insert(2); // 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。</span><br><span class="line">randomizedSet.getRandom(); // getRandom 应随机返回 1 或 2 。</span><br><span class="line">randomizedSet.remove(1); // 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。</span><br><span class="line">randomizedSet.insert(2); // 2 已在集合中，所以返回 false 。</span><br><span class="line">randomizedSet.getRandom(); // 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>-231 &lt;= val &lt;= 231 - 1</code></li>
<li>最多调用 <code>insert</code>、<code>remove</code> 和 <code>getRandom</code> 函数 <code>2 * ``105</code> 次</li>
<li>在调用 <code>getRandom</code> 方法时，数据结构中 <strong>至少存在一个</strong> 元素。</li>
</ul>
<h4 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h4><p>因为要求时间复杂度在O(1)，支持查询数据时间复杂度在O(1)的数据结构有数组，</p>
<p>支持插入和删除在O(1)的数据结构有链表和哈希表，但是链表获取到元素需要O(N)的时间复杂度。</p>
<p>所以使用哈希表和数组进行配合来完成。</p>
<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomizedSet</span> &#123;</span><br><span class="line">    <span class="comment">//用于存储元素</span></span><br><span class="line">    List&lt;Integer&gt; nums = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//用于插入和删除时使用，键为元素值，值为元素在数组中的下标</span></span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//用于随机获取元素</span></span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入数据，先判断哈希表中是否含有该元素，如果有了则直接返回false</span></span><br><span class="line"><span class="comment">     * 将元素添加到数组中,并将元素值存入哈希表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">//判断哈希表中是否含有该元素，如果有了则直接返回false</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(val)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取数组最后一位的下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> nums.size();</span><br><span class="line">        nums.add(val);</span><br><span class="line">        <span class="comment">//将值更新在哈希表中</span></span><br><span class="line">        map.put(val, index);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首先判断哈希表中是否存在该元素，如果不存在则直接返回false</span></span><br><span class="line"><span class="comment">     * 如果存在则获取下标，在数组中查找到该元素，将数组最后一个元素覆盖到当前位置</span></span><br><span class="line"><span class="comment">     * 更新最后一个元素的索引，然后将最后一个元素移除</span></span><br><span class="line"><span class="comment">     * 然后更新哈希表，将哈希表中该元素的键值对也移除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">//首先判断哈希表中是否存在该元素，如果不存在则直接返回false</span></span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(val)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在哈希表中获取要删除元素的索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> map.get(val);</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> nums.size();</span><br><span class="line">        <span class="comment">//数组中最后一个元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> nums.get(size - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//将最后一个元素放置在当前要删除的元素位置上</span></span><br><span class="line">        nums.set(index, end);</span><br><span class="line">        <span class="comment">//更新元素下标</span></span><br><span class="line">        map.put(end, index);</span><br><span class="line">        <span class="comment">//数组移除</span></span><br><span class="line">        nums.remove(size - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//哈希表移除</span></span><br><span class="line">        map.remove(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 限定范围在数组大小，然后随机返回数组中的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRandom</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">randomIndex</span> <span class="operator">=</span> random.nextInt(nums.size());</span><br><span class="line">        <span class="keyword">return</span> nums.get(randomIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 383 赎金信</title>
    <url>/posts/4033215839.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383. 赎金信"></a><a href="https://leetcode-cn.com/problems/ransom-note/">383. 赎金信</a></h4><p>给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code> ，判断 <code>ransomNote</code> 能不能由 <code>magazine</code> 里面的字符构成。</p>
<p>如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。</p>
<p><code>magazine</code> 中的每个字符只能在 <code>ransomNote</code> 中使用一次。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：ransomNote = &quot;a&quot;, magazine = &quot;b&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：ransomNote = &quot;aa&quot;, magazine = &quot;ab&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：ransomNote = &quot;aa&quot;, magazine = &quot;aab&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= ransomNote.length, magazine.length &lt;= 105</code></li>
<li><code>ransomNote</code> 和 <code>magazine</code> 由小写英文字母组成</li>
</ul>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>哈希表法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">    <span class="comment">//如果ransomNote的长度大于magazine则肯定没法构成，直接返回false</span></span><br><span class="line">    <span class="keyword">if</span> (ransomNote.length() &gt; magazine.length()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将magazine中的字符作为键，出现次数作为值，存入哈希表</span></span><br><span class="line">    HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; magazine.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> magazine.charAt(i);</span><br><span class="line">        map.put(c, map.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将map中存储的字符进行取出，用来构建ransomNote看是否能成功</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ransomNote.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> ransomNote.charAt(i);</span><br><span class="line">        <span class="comment">//若ransomNote中存在magazine没有的字符，直接返回false</span></span><br><span class="line">        <span class="keyword">if</span> (map.keySet().contains(c)) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> map.get(c);</span><br><span class="line">            <span class="comment">//若存在，更新字符个数</span></span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                map.put(c, --count);</span><br><span class="line">                <span class="comment">//字符个数不够，返回false</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度:O(m + n)，m和n分别为两个字符串的长度</li>
<li>空间复杂度:<em>O</em>(∣<em>S</em>∣)，<em>S</em> 是字符集，这道题中 <em>S</em> 为全部小写英语字母，因此 |S| &#x3D; 26。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 409 最长回文串</title>
    <url>/posts/2219399987.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="409-最长回文串"><a href="#409-最长回文串" class="headerlink" title="409. 最长回文串"></a><a href="https://leetcode.cn/problems/longest-palindrome/">409. 最长回文串</a></h4><p>给定一个包含大写字母和小写字母的字符串 <code>s</code> ，返回 <em>通过这些字母构造成的 <strong>最长的回文串</strong></em> 。</p>
<p>在构造过程中，请注意 <strong>区分大小写</strong> 。比如 <code>&quot;Aa&quot;</code> 不能当做一个回文字符串。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入:s = &quot;abccccdd&quot;</span><br><span class="line">输出:7</span><br><span class="line">解释:</span><br><span class="line">我们可以构造的最长的回文串是&quot;dccaccd&quot;, 它的长度是 7。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入:s = &quot;a&quot;</span><br><span class="line">输入:1</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入:s = &quot;bb&quot;</span><br><span class="line">输入: 2</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 2000</code></li>
<li><code>s</code> 只能由小写和&#x2F;或大写英文字母组成</li>
</ul>
<hr>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>回文串说到底只有两种情况：</p>
<ol>
<li>aa</li>
<li>aba</li>
</ol>
<p>也就是说构成回文串的两种情况有：</p>
<ul>
<li>所有字符出现的次数都是双数，对应情况1。</li>
<li>除某个字符出现的次数为单数，其余所有字符出现的次数都为双数，对应情况2。</li>
</ul>
<p>所以就可以使用集合进行存储字符串中的字符，因为集合中的元素具有不可重复的特性，可以用于统计字符串中字符出现的次数。</p>
<p>将字符串中的字符依次存入集合</p>
<ul>
<li>如果集合中已经存在该元素，则当前字符与集合中的字符构成一对回文串，结果值加一，移除集合中该元素。</li>
<li>如果不存在该元素，则直接将其存入集合，以便与之后的字符进行匹配。</li>
</ul>
<hr>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="comment">//如果字符串长度为0，直接返回0</span></span><br><span class="line">    <span class="keyword">if</span>(s.length() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	HashSet&lt;Character&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Character&gt;();</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//最终回文串的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; s.length();i++)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="comment">//如果集合中有这个元素，则证明找到了成对的字符，将其移除，回文串长度加一</span></span><br><span class="line">        <span class="keyword">if</span>(set.contains(c))&#123;</span><br><span class="line">            set.remove(c);</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果集合中没有这个元素，则将其存入集合中</span></span><br><span class="line">        set.add(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> set.isEmpty()?res* <span class="number">2</span>:res*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>回文</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 387 字符串中第一个唯一字符</title>
    <url>/posts/2958422701.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="387-字符串中的第一个唯一字符"><a href="#387-字符串中的第一个唯一字符" class="headerlink" title="387. 字符串中的第一个唯一字符"></a><a href="https://leetcode-cn.com/problems/first-unique-character-in-a-string/">387. 字符串中的第一个唯一字符</a></h4><p>给定一个字符串 <code>s</code> ，找到 <em>它的第一个不重复的字符，并返回它的索引</em> 。如果不存在，则返回 <code>-1</code> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;leetcode&quot;</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;loveleetcode&quot;</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;aabb&quot;</span><br><span class="line">输出: -1</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 105</code></li>
<li><code>s</code> 只包含小写字母</li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>哈希表法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">firstUniqChar</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="comment">//将字符作为键，将字符出现次数作为值</span></span><br><span class="line">    Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//第一次遍历将字符串存入</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        map.put(c, map.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二次遍历，找到第一个值为1的字符，返回其索引即可</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (map.get(c) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>时间复杂度：O(N)，两次遍历</p>
</li>
<li><p>空间复杂度：O(∣Σ∣)，其中 Σ 是字符集，在本题中 s 只包含小写字母，因此∣Σ∣≤26。我们需要 O(∣Σ∣) 的空间存储哈希映射。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 442 数组中重复的数据</title>
    <url>/posts/2913451855.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="442-数组中重复的数据"><a href="#442-数组中重复的数据" class="headerlink" title="442. 数组中重复的数据"></a><a href="https://leetcode-cn.com/problems/find-all-duplicates-in-an-array/">442. 数组中重复的数据</a></h4><p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> ，其中 <code>nums</code> 的所有整数都在范围 <code>[1, n]</code> 内，且每个整数出现 <strong>一次</strong> 或 <strong>两次</strong> 。请你找出所有出现 <strong>两次</strong> 的整数，并以数组形式返回。</p>
<p>你必须设计并实现一个时间复杂度为 <code>O(n)</code> 且仅使用常量额外空间的算法解决此问题。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [4,3,2,7,8,2,3,1]</span><br><span class="line">输出：[2,3]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,1,2]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>n == nums.length</code></li>
<li><code>1 &lt;= n &lt;= 105</code></li>
<li><code>1 &lt;= nums[i] &lt;= n</code></li>
<li><code>nums</code> 中的每个元素出现 <strong>一次</strong> 或 <strong>两次</strong></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>可以遍历数组将其存入哈希表，如果存入某个元素时发现其已经在哈希表内，则证明该元素为重复元素，但是哈希表使用到了O(N)的空间复杂度，所以不能使用哈希表。</p>
<p>由于数组元素的范围是[1,n]，数组下标索引的范围是[0,n],所以可以将数组作为哈希表，第一次遍历将元素值为i的元素存入数组下标索引为i-1的位置，第二次遍历将所有不在其该有位置上的元素取出并返回，即为重复元素。</p>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 因为数组元素的范围是1 ~ n</span></span><br><span class="line"><span class="comment">     * 数组下标索引的范围是0  ~  n-1</span></span><br><span class="line"><span class="comment">     * 使用数组本身作为哈希表，</span></span><br><span class="line"><span class="comment">     * 将元素值为i的元素放在索引下标为i-1的地方，</span></span><br><span class="line"><span class="comment">     * 全部放完之后，剩下的就是重复的元素</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span> || nums == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">//nums[nums[i] - 1]表示哈希映射在该位置上的值</span></span><br><span class="line">        <span class="comment">//nums[i]表示现在存放在该位置上的值</span></span><br><span class="line">        <span class="keyword">while</span> (nums[nums[i] - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">            swap(nums, nums[i] - <span class="number">1</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找出所有不在其该有位置上的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] - <span class="number">1</span> != i) &#123;</span><br><span class="line">            res.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度:O(N)</li>
<li>空间复杂度:O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 451 根据字符出现频率排序</title>
    <url>/posts/626892490.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="451-根据字符出现频率排序"><a href="#451-根据字符出现频率排序" class="headerlink" title="451. 根据字符出现频率排序"></a><a href="https://leetcode.cn/problems/sort-characters-by-frequency/">451. 根据字符出现频率排序</a></h4><p>给定一个字符串 <code>s</code> ，根据字符出现的 <strong>频率</strong> 对其进行 <strong>降序排序</strong> 。一个字符出现的 <strong>频率</strong> 是它出现在字符串中的次数。</p>
<p>返回 <em>已排序的字符串</em> 。如果有多个答案，返回其中任何一个。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;tree&quot;</span><br><span class="line">输出: &quot;eert&quot;</span><br><span class="line">解释: &#x27;e&#x27;出现两次，&#x27;r&#x27;和&#x27;t&#x27;都只出现一次。</span><br><span class="line">因此&#x27;e&#x27;必须出现在&#x27;r&#x27;和&#x27;t&#x27;之前。此外，&quot;eetr&quot;也是一个有效的答案。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;cccaaa&quot;</span><br><span class="line">输出: &quot;cccaaa&quot;</span><br><span class="line">解释: &#x27;c&#x27;和&#x27;a&#x27;都出现三次。此外，&quot;aaaccc&quot;也是有效的答案。</span><br><span class="line">注意&quot;cacaca&quot;是不正确的，因为相同的字母必须放在一起。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;Aabb&quot;</span><br><span class="line">输出: &quot;bbAa&quot;</span><br><span class="line">解释: 此外，&quot;bbaA&quot;也是一个有效的答案，但&quot;Aabb&quot;是不正确的。</span><br><span class="line">注意&#x27;A&#x27;和&#x27;a&#x27;被认为是两种不同的字符。</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 5 * 105</code></li>
<li><code>s</code> 由大小写英文字母和数字组成</li>
</ul>
<h4 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h4><ol>
<li>将字符串中的字符在哈希表中进行存储</li>
<li>然后将字符按照频率高低进行排序</li>
<li>然后将排好序的字符重新刷回来</li>
</ol>
<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">frequencySort</span><span class="params">(String s)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用哈希表对字符串中字符的出现频率进行记录</span></span><br><span class="line">    Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : chars)&#123;</span><br><span class="line">        map.put(c, map.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Character&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Character c: map.keySet())&#123;</span><br><span class="line">        list.add(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将字符根据出现频率进行排序</span></span><br><span class="line">    Collections.sort(list,(a,b) -&gt; map.get(b) - map.get(a));</span><br><span class="line">    <span class="comment">//现在的list就已经是按照字符频率排好序的数组了</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将字符串刷回来</span></span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; list.size();i++)&#123;</span><br><span class="line">        <span class="comment">//获取当前字符及其出现频率</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">        <span class="type">int</span> <span class="variable">frequency</span> <span class="operator">=</span> map.get(c);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; frequency;j++)&#123;</span><br><span class="line">            sb.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 455 分发饼干</title>
    <url>/posts/771035778.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="455-分发饼干"><a href="#455-分发饼干" class="headerlink" title="455. 分发饼干"></a><a href="https://leetcode.cn/problems/assign-cookies/">455. 分发饼干</a></h4><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p>
<p>对每个孩子 <code>i</code>，都有一个胃口值 <code>g[i]</code>，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 <code>j</code>，都有一个尺寸 <code>s[j]</code> 。如果 <code>s[j] &gt;= g[i]</code>，我们可以将这个饼干 <code>j</code> 分配给孩子 <code>i</code> ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: g = [1,2,3], s = [1,1]</span><br><span class="line">输出: 1</span><br><span class="line">解释: </span><br><span class="line">你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。</span><br><span class="line">虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。</span><br><span class="line">所以你应该输出1。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: g = [1,2], s = [1,2,3]</span><br><span class="line">输出: 2</span><br><span class="line">解释: </span><br><span class="line">你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。</span><br><span class="line">你拥有的饼干数量和尺寸都足以让所有孩子满足。</span><br><span class="line">所以你应该输出2.</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= g.length &lt;= 3 * 104</code></li>
<li><code>0 &lt;= s.length &lt;= 3 * 104</code></li>
<li><code>1 &lt;= g[i], s[j] &lt;= 231 - 1</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><h5 id="贪心：大饼干先满足大胃口"><a href="#贪心：大饼干先满足大胃口" class="headerlink" title="贪心：大饼干先满足大胃口"></a>贪心：大饼干先满足大胃口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findContentChildren</span><span class="params">(<span class="type">int</span>[] g, <span class="type">int</span>[] s)</span> &#123;</span><br><span class="line">    Arrays.sort(g);</span><br><span class="line">    Arrays.sort(s);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> s.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> g.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(start &gt;= <span class="number">0</span>&amp;&amp;s[start] &gt;= g[i])&#123;</span><br><span class="line">            start--;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="贪心：小饼干先满足小胃口"><a href="#贪心：小饼干先满足小胃口" class="headerlink" title="贪心：小饼干先满足小胃口"></a>贪心：小饼干先满足小胃口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findContentChildren</span><span class="params">(<span class="type">int</span>[] g, <span class="type">int</span>[] s)</span> &#123;</span><br><span class="line">    Arrays.sort(g);</span><br><span class="line">    Arrays.sort(s);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//小饼干先喂饱小胃口</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (start &lt; g.length &amp;&amp; s[i] &gt;= g[start]) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(MlogM+NlogN)，排序所产生的时间复杂度为O(logM+logN)，遍历数组的时间复杂度是O(M+N)，所以总时间复杂度为O(MlogM+NlogN)。</li>
<li>空间复杂度：O(logM+logN),排序所产生的空间复杂度。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 5 最长回文子串</title>
    <url>/posts/1854435997.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a><a href="https://leetcode.cn/problems/longest-palindromic-substring/">5. 最长回文子串</a></h4><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;babad&quot;</span><br><span class="line">输出：&quot;bab&quot;</span><br><span class="line">解释：&quot;aba&quot; 同样是符合题意的答案。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;cbbd&quot;</span><br><span class="line">输出：&quot;bb&quot;</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li><code>s</code> 仅由数字和英文字母组成</li>
</ul>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>中心扩散法</p>
<p>以某个或某两个元素为中心，判断当前是否为回文串，然后向左右两侧进行扩充，最终分别计算出偶数长度的回文最大长度和奇数长度的回文最大长度的子串，进行子串截取并返回。</p>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结果最长回文子串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中心扩散法</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> s.length();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字符串长度小于2，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//针对于aba这种形式的回文串，以一个元素为中心</span></span><br><span class="line">        expandAroundCenter(s, i, i);</span><br><span class="line">        <span class="comment">//针对aabb这种形式的回文串，以两个元素为中心</span></span><br><span class="line">        expandAroundCenter(s, i, i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">expandAroundCenter</span><span class="params">(String s, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="comment">//如果当前两端点满足回文串的条件，就向两端进行扩散</span></span><br><span class="line">    <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length() &amp;&amp; s.charAt(left) == s.charAt(right)) &#123;</span><br><span class="line">        left--;</span><br><span class="line">        right++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终最长回文子串的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> right - left - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新最终扩展的最长的回文串</span></span><br><span class="line">    <span class="keyword">if</span> (len &gt; res.length()) &#123;</span><br><span class="line">        <span class="comment">//这里的substring是左闭右开，此时的left和right指向的是最长子串的左一个位置和右一个位置</span></span><br><span class="line">        res = s.substring(left + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>回文</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 53 最大子数组和</title>
    <url>/posts/412066832.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53. 最大子数组和"></a><a href="https://leetcode-cn.com/problems/maximum-subarray/">53. 最大子数组和</a></h4><p>难度简单4599收藏分享切换为英文接收动态反馈</p>
<p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<p><strong>子数组</strong> 是数组中的一个连续部分。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [5,4,-1,7,8]</span><br><span class="line">输出：23</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 105</code></li>
<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>
</ul>
<h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><h4 id="遍历子串或者子序列的遍历方式："><a href="#遍历子串或者子序列的遍历方式：" class="headerlink" title="遍历子串或者子序列的遍历方式："></a>遍历子串或者子序列的遍历方式：</h4><ol>
<li>以某个节点为开头的所有子序列。例如数组{1，2，3}的遍历结果为：[1]，[1，2]，[1，2，3]，[2]，[2，3]</li>
<li>根据子序列的长度。比如先遍历出子序列长度为1的子序列，再遍历出自序列长度为2的子序列。</li>
<li>以某个节点为结尾的子序列，因为每个节点都可能会是子序列的结束节点，因此要遍历整个序列。例如以2为结束点的遍历结果为：[1,2]，[2]，以3为结束点的遍历结果为：[1，2，3]，[2，3]，[3]。</li>
</ol>
<p>第一种遍历方式主要用于暴力解法。</p>
<p><strong>第三种遍历方式因为可以产生递推关系，所以经常用于动态规划，这里的动态规划解法是以 先遍历出以某个节点为结束节点的所有子序列的 思路。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 使用f(i)来表示以当前元素为结尾元素的最大子序列和，</span></span><br><span class="line"><span class="comment">     * 因为一共有n个元素，所以f(i)也有n个，所以需要创建一个长度为n的f数组，时间复杂度为O(N)，</span></span><br><span class="line"><span class="comment">     * 但是考虑到f(i) 只和 f(i - 1)相关，所以只需要使用一个变量保存f(i)即可，时间复杂度为O(1)</span></span><br><span class="line"><span class="comment">     * 则f(i）的更新规则为：当前值 和 f(i - 1) 加上当前值 中的最大值</span></span><br><span class="line"><span class="comment">     * 即状态转移方程为</span></span><br><span class="line"><span class="comment">     *           f(i)  =  max&#123;(f(i-1) + nums[i]),nums[i]&#125;</span></span><br><span class="line"><span class="comment">     * 只需计算出每个元素的f(i)，最后返回最大值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用sum代表f(i)，初始化为0</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//ans 代表结果</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> n : nums) &#123;</span><br><span class="line">        sum = Math.max(sum + n, n);</span><br><span class="line">        ans = Math.max(sum,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，数组遍历</li>
<li>空间复杂度：O(1)，f(i)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 583 两个字符串的删除操作</title>
    <url>/posts/269620867.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="583-两个字符串的删除操作"><a href="#583-两个字符串的删除操作" class="headerlink" title="583. 两个字符串的删除操作"></a><a href="https://leetcode.cn/problems/delete-operation-for-two-strings/">583. 两个字符串的删除操作</a></h4><p>给定两个单词 <code>word1</code> 和 <code>word2</code> ，返回使得 <code>word1</code> 和 <code>word2</code> <strong>相同</strong>所需的<strong>最小步数</strong>。</p>
<p><strong>每步</strong> 可以删除任意一个字符串中的一个字符。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: word1 = &quot;sea&quot;, word2 = &quot;eat&quot;</span><br><span class="line">输出: 2</span><br><span class="line">解释: 第一步将 &quot;sea&quot; 变为 &quot;ea&quot; ，第二步将 &quot;eat &quot;变为 &quot;ea&quot;</span><br></pre></td></tr></table></figure>

<p><strong>示例  2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：word1 = &quot;leetcode&quot;, word2 = &quot;etco&quot;</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= word1.length, word2.length &lt;= 500</code></li>
<li><code>word1</code> 和 <code>word2</code> 只包含小写英文字母</li>
</ul>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解:"></a>题解:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 动态规划</span></span><br><span class="line"><span class="comment">     * 类似于找出两个字符串的最长公共子序列</span></span><br><span class="line"><span class="comment">     * 找出后，用两个字符串的长度之和减去两倍的公共子序列的长度即为所需删除的最小步数</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> word1.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> word2.length();</span><br><span class="line">    <span class="comment">//辅助dp数组</span></span><br><span class="line">    <span class="comment">//dp[i][j] 表示 word1 的前 i 个字符与 word2 的前 j 个字符的最长公共子序列。</span></span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//边界条件</span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (word1.charAt(i-<span class="number">1</span>) == word2.charAt(j-<span class="number">1</span>)) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m + n - <span class="number">2</span> * dp[m][n];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(m * n)</li>
<li>空间复杂度：O(m * n)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 566 重塑矩阵</title>
    <url>/posts/3251823035.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="566-重塑矩阵"><a href="#566-重塑矩阵" class="headerlink" title="566. 重塑矩阵"></a><a href="https://leetcode-cn.com/problems/reshape-the-matrix/">566. 重塑矩阵</a></h4><p>在 MATLAB 中，有一个非常有用的函数 <code>reshape</code> ，它可以将一个 <code>m x n</code> 矩阵重塑为另一个大小不同（<code>r x c</code>）的新矩阵，但保留其原始数据。</p>
<p>给你一个由二维数组 <code>mat</code> 表示的 <code>m x n</code> 矩阵，以及两个正整数 <code>r</code> 和 <code>c</code> ，分别表示想要的重构的矩阵的行数和列数。</p>
<p>重构后的矩阵需要将原始矩阵的所有元素以相同的 <strong>行遍历顺序</strong> 填充。</p>
<p>如果具有给定参数的 <code>reshape</code> 操作是可行且合理的，则输出新的重塑矩阵；否则，输出原始矩阵。</p>
<p><strong>示例 1：</strong></p>
 

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：mat = [[1,2],[3,4]], r = 1, c = 4</span><br><span class="line">输出：[[1,2,3,4]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
 

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：mat = [[1,2],[3,4]], r = 2, c = 4</span><br><span class="line">输出：[[1,2],[3,4]]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>m == mat.length</code></li>
<li><code>n == mat[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 100</code></li>
<li><code>-1000 &lt;= mat[i][j] &lt;= 1000</code></li>
<li><code>1 &lt;= r, c &lt;= 300</code></li>
</ul>
<h3 id="题解：简单模拟题"><a href="#题解：简单模拟题" class="headerlink" title="题解：简单模拟题"></a>题解：简单模拟题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] matrixReshape(<span class="type">int</span>[][] mat, <span class="type">int</span> r, <span class="type">int</span> c) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> mat.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> mat[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不合理的参数，直接返回原矩阵</span></span><br><span class="line">    <span class="keyword">if</span> (r * c != m * n)&#123;</span><br><span class="line">        <span class="keyword">return</span> mat;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//结果矩阵</span></span><br><span class="line">    <span class="type">int</span>[][] ans = <span class="keyword">new</span> <span class="title class_">int</span>[r][c];</span><br><span class="line">    <span class="comment">//先将数组转存到一维数组中</span></span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[m*n];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ;i &lt; m;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; n;j++)&#123;</span><br><span class="line">            arr[k] = mat[i][j];</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将一维数组的值转存到新的多维数组</span></span><br><span class="line">    k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ;i &lt; r;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; c;j++)&#123;</span><br><span class="line">            ans[i][j] = arr[k];</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(m * n)，遍历了两次数组</li>
<li>空间复杂度：O(m * n)，使用了一个大小为m * n的一维数组</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 46 全排列</title>
    <url>/posts/934498316.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>Leecode 653 两数之和IV-输入BST</title>
    <url>/posts/1940890326.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="653-两数之和-IV-输入-BST"><a href="#653-两数之和-IV-输入-BST" class="headerlink" title="653. 两数之和 IV - 输入 BST"></a><a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/">653. 两数之和 IV - 输入 BST</a></h4><p>难度简单386收藏分享切换为英文接收动态反馈</p>
<p>给定一个二叉搜索树 <code>root</code> 和一个目标结果 <code>k</code>，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 <code>true</code>。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: root = [5,3,6,2,4,null,7], k = 9</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: root = [5,3,6,2,4,null,7], k = 28</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li>二叉树的节点个数的范围是 <code>[1, 104]</code>.</li>
<li><code>-104 &lt;= Node.val &lt;= 104</code></li>
<li><code>root</code> 为二叉搜索树</li>
<li><code>-105 &lt;= k &lt;= 105</code></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="解法1：DFS-哈希表"><a href="#解法1：DFS-哈希表" class="headerlink" title="解法1：DFS + 哈希表"></a>解法1：DFS + 哈希表</h3><p>通过DFS来遍历整棵树，用哈希表记录遍历过的结点值。</p>
<p>对于一个值为<code>x</code>的节点，只要检查哈希表中是否存在<code>k - x</code>即可。</p>
<p>如果找到存在对应的元素，则返回true。</p>
<p>否则，将当前结点值存入哈希表。</p>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//深度优先搜索+哈希表</span></span><br><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findTarget</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断哈希表中是否含有对应元素</span></span><br><span class="line">    <span class="keyword">if</span> (set.contains(k - root.val)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    set.add(root.val);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> findTarget(root.left, k) || findTarget(root.right, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，需要遍历整棵树</li>
<li>空间复杂度：O(N)，最坏情况需要一个存储整棵树所有结点值的哈希表</li>
</ul>
<h3 id="解法2：BFS-哈希表"><a href="#解法2：BFS-哈希表" class="headerlink" title="解法2：BFS + 哈希表"></a>解法2：BFS + 哈希表</h3><p>原理同解法1，只是遍历方式不同</p>
<h4 id="代码如下：-1"><a href="#代码如下：-1" class="headerlink" title="代码如下："></a>代码如下：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findTarget</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    que.offer(root);</span><br><span class="line"></span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">        <span class="keyword">if</span> (set.contains(k - node.val)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        set.add(node.val);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里一定记住是当前节点node，不是root</span></span><br><span class="line">        <span class="comment">//错了好几次了</span></span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            que.offer(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            que.offer(node.right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，需要遍历整棵树</li>
<li>空间复杂度：O(N)，最坏情况需要一个存储整棵树所有结点值的哈希表和队列</li>
</ul>
<h3 id="解法3：DFS-中序遍历-双指针"><a href="#解法3：DFS-中序遍历-双指针" class="headerlink" title="解法3：DFS + 中序遍历 + 双指针"></a>解法3：DFS + 中序遍历 + 双指针</h3><p>二叉搜索树的中序遍历结果是一个递增序列，可以遍历得到整棵树的结点值，然后使用双指针找到是否有两数之和等于目标值的元素。如果两数之和大于目标值，右指针左移；如果两数之和小于目标值，左指针右移。</p>
<h4 id="代码如下：-2"><a href="#代码如下：-2" class="headerlink" title="代码如下："></a>代码如下：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findTarget</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    inorderTraversal(root, list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = list.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="comment">//两数之和大于目标值，右指针左移</span></span><br><span class="line">        <span class="keyword">if</span> (list.get(left) + list.get(right) &gt; k) &#123;</span><br><span class="line">            right--;</span><br><span class="line">        <span class="comment">//两数之和小于目标值，左指针右移</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list.get(left) + list.get(right) &lt; k) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root, List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inorderTraversal(root.left, list);</span><br><span class="line">    list.add(root.val);</span><br><span class="line">    inorderTraversal(root.right, list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，需要遍历整棵树</li>
<li>空间复杂度：O(N)，需要一个存储整棵树所有结点值的集合</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 700 二叉搜索树中的搜索</title>
    <url>/posts/1354420128.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="700-二叉搜索树中的搜索"><a href="#700-二叉搜索树中的搜索" class="headerlink" title="700. 二叉搜索树中的搜索"></a><a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/">700. 二叉搜索树中的搜索</a></h4><p>给定二叉搜索树（BST）的根节点 <code>root</code> 和一个整数值 <code>val</code>。</p>
<p>你需要在 BST 中找到节点值等于 <code>val</code> 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 <code>null</code> 。</p>
<p><strong>示例 1:</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [4,2,7,1,3], val = 2</span><br><span class="line">输出：[2,1,3]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [4,2,7,1,3], val = 5</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>数中节点数在 <code>[1, 5000]</code> 范围内</li>
<li><code>1 &lt;= Node.val &lt;= 107</code></li>
<li><code>root</code> 是二叉搜索树</li>
<li><code>1 &lt;= val &lt;= 107</code></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h4 id="思路一：借助队列广度优先遍历搜索"><a href="#思路一：借助队列广度优先遍历搜索" class="headerlink" title="思路一：借助队列广度优先遍历搜索"></a>思路一：借助队列广度优先遍历搜索</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">searchBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="comment">//据观察，此题应该广度优先遍历，找到目标节点，就将以该节点为根的子树返回</span></span><br><span class="line">    Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//根节点不为空，入队</span></span><br><span class="line">    <span class="keyword">if</span>(root != <span class="literal">null</span>)&#123;</span><br><span class="line">        que.offer(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> que.size();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">        <span class="keyword">if</span> (node.val == val)&#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            que.offer(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            que.offer(node.right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="思路二：递归"><a href="#思路二：递归" class="headerlink" title="思路二：递归"></a>思路二：递归</h4><p>根据二叉搜索数的特性来写递归</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">searchBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="comment">//递归出口</span></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span> || root.val == val)&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//因为是二叉搜索数，所以右节点的值一定大于左节点，根据此特性可写出如下代码</span></span><br><span class="line">    <span class="keyword">return</span> val &gt; root.val ? searchBST(root.right,val) : searchBST(root.left,val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="思路三：根据二叉搜索树的特性进行迭代"><a href="#思路三：根据二叉搜索树的特性进行迭代" class="headerlink" title="思路三：根据二叉搜索树的特性进行迭代"></a>思路三：根据二叉搜索树的特性进行迭代</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> TreeNode <span class="title function_">searchBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(root != <span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="comment">//目标节点在左子树,root指针指向左子树</span></span><br><span class="line">         <span class="keyword">if</span>(root.val &gt; val)&#123;</span><br><span class="line">             root = root.left;</span><br><span class="line">         &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val &lt; val)&#123;</span><br><span class="line">             <span class="comment">//目标节点在右子树，root指针指向右子树</span></span><br><span class="line">             root = root.right;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="comment">//root为目标节点，直接返回</span></span><br><span class="line">             <span class="keyword">return</span> root;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//没有找到，返回null</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 70 爬楼梯</title>
    <url>/posts/1526160652.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a><a href="https://leetcode.cn/problems/climbing-stairs/">70. 爬楼梯</a></h4><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。</p>
<p>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：2</span><br><span class="line">解释：有两种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶</span><br><span class="line">2. 2 阶</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：3</span><br><span class="line">解释：有三种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶 + 1 阶</span><br><span class="line">2. 1 阶 + 2 阶</span><br><span class="line">3. 2 阶 + 1 阶</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 45</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p><strong>简单动态规划</strong></p>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(N)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 662 二叉树的最大宽度</title>
    <url>/posts/167902676.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="662-二叉树最大宽度"><a href="#662-二叉树最大宽度" class="headerlink" title="662. 二叉树最大宽度"></a><a href="https://leetcode.cn/problems/maximum-width-of-binary-tree/">662. 二叉树最大宽度</a></h4><p>给你一棵二叉树的根节点 <code>root</code> ，返回树的 <strong>最大宽度</strong> 。</p>
<p>树的 <strong>最大宽度</strong> 是所有层中最大的 <strong>宽度</strong> 。</p>
<p>每一层的 <strong>宽度</strong> 被定义为该层最左和最右的非空节点（即，两个端点）之间的长度。将这个二叉树视作与满二叉树结构相同，两端点间会出现一些延伸到这一层的 <code>null</code> 节点，这些 <code>null</code> 节点也计入长度。</p>
<p>题目数据保证答案将会在 <strong>32 位</strong> 带符号整数范围内。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/width1-tree.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,3,2,5,3,null,9]</span><br><span class="line">输出：4</span><br><span class="line">解释：最大宽度出现在树的第 3 层，宽度为 4 (5,3,null,9) 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/maximum-width-of-binary-tree-v3.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,3,2,5,null,null,9,6,null,7]</span><br><span class="line">输出：7</span><br><span class="line">解释：最大宽度出现在树的第 4 层，宽度为 7 (6,null,null,null,null,null,7) 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/width3-tree.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,3,2,5]</span><br><span class="line">输出：2</span><br><span class="line">解释：最大宽度出现在树的第 2 层，宽度为 2 (3,2) 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点的数目范围是 <code>[1, 3000]</code></li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><ol>
<li>新建类用于记录当前节点以及当前节点值索引的关系</li>
<li>然后层序遍历该树，因为对于完全二叉树来说，某一个节点的索引值为x，则它左孩子的索引值为2x，它右孩子的索引值为2x+1</li>
<li>所以只要计算出每一层的宽度，即每层节点的最大索引减去每层节点的最小索引+1即为该层的宽度，</li>
<li>比较得出最大值即可</li>
</ol>
<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用于标识当前节点和当前节点的索引的关系</span></span><br><span class="line"><span class="comment">//对于满二叉树来说，如果一个节点的索引值为x</span></span><br><span class="line"><span class="comment">//则他左孩子的索引值为2x,他右孩子索引值为2x * 1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TreeNode treeNode;</span><br><span class="line">    <span class="keyword">private</span> Integer index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">getTreeNode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> treeNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">(TreeNode treeNode, Integer index)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.treeNode = treeNode;</span><br><span class="line">        <span class="built_in">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lc662</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">widthOfBinaryTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">//广度优先遍历，使用队列辅助</span></span><br><span class="line">        ArrayDeque&lt;Pair&gt; que = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//根节点及其索引</span></span><br><span class="line">        <span class="type">Pair</span> <span class="variable">rootPair</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pair</span>(root, <span class="number">1</span>);</span><br><span class="line">        que.add(rootPair);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//每层的节点个数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> que.size();</span><br><span class="line">            <span class="comment">//每层的第一个节点索引和最后一个节点索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">firstIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lastIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//获取当前节点信息</span></span><br><span class="line">                <span class="type">Pair</span> <span class="variable">curPair</span> <span class="operator">=</span> que.poll();</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> curPair.getTreeNode();</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">index</span> <span class="operator">=</span> curPair.getIndex();</span><br><span class="line">                <span class="comment">//如果开始索引等于0，则证明该节点为当前层第一个节点，记录下来</span></span><br><span class="line">                <span class="keyword">if</span> (firstIndex == <span class="number">0</span>)&#123;</span><br><span class="line">                    firstIndex = index;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//左节点入队</span></span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    que.offer(<span class="keyword">new</span> <span class="title class_">Pair</span>(node.left, index * <span class="number">2</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//右节点入队</span></span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    que.offer(<span class="keyword">new</span> <span class="title class_">Pair</span>(node.right, index * <span class="number">2</span> + <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//记录当前层最后一个节点的索引值</span></span><br><span class="line">                lastIndex = index;</span><br><span class="line">                length--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当前层的最后一个元素索引值减去当前层的第一个元素索引值+1,即为当前层的最大宽度</span></span><br><span class="line">            res = Math.max(res, lastIndex - firstIndex + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 670 最大交换</title>
    <url>/posts/3794281148.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="670-最大交换"><a href="#670-最大交换" class="headerlink" title="670. 最大交换"></a><a href="https://leetcode.cn/problems/maximum-swap/">670. 最大交换</a></h4><p>给定一个非负整数，你<strong>至多</strong>可以交换一次数字中的任意两位。返回你能得到的最大值。</p>
<p><strong>示例 1 :</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: 2736</span><br><span class="line">输出: 7236</span><br><span class="line">解释: 交换数字2和数字7。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2 :</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: 9973</span><br><span class="line">输出: 9973</span><br><span class="line">解释: 不需要交换。</span><br></pre></td></tr></table></figure>

<p><strong>注意:</strong></p>
<ol>
<li>给定数字的范围是 [0, 108]</li>
</ol>
<h4 id="算法思路：暴力遍历"><a href="#算法思路：暴力遍历" class="headerlink" title="算法思路：暴力遍历"></a>算法思路：暴力遍历</h4><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumSwap</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="comment">//将数字转换为字符数组</span></span><br><span class="line">        <span class="type">char</span>[] charArray = String.valueOf(num).toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> num;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> charArray.length;</span><br><span class="line">        <span class="comment">//将数组中的元素两两比较</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="comment">//交换对比最大值</span></span><br><span class="line">                swap(charArray, i, j);</span><br><span class="line">                <span class="comment">//更新最大值</span></span><br><span class="line">                max = Math.max(max, Integer.parseInt(<span class="keyword">new</span> <span class="title class_">String</span>(charArray)));</span><br><span class="line">                <span class="comment">//还原</span></span><br><span class="line">                swap(charArray, i, j);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">char</span>[] chars, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> chars[i];</span><br><span class="line">        chars[i] = chars[j];</span><br><span class="line">        chars[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 701 二叉搜索树中的插入操作</title>
    <url>/posts/3694567883.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="701-二叉搜索树中的插入操作"><a href="#701-二叉搜索树中的插入操作" class="headerlink" title="701. 二叉搜索树中的插入操作"></a><a href="https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/">701. 二叉搜索树中的插入操作</a></h4><p>难度中等285收藏分享切换为英文接收动态反馈</p>
<p>给定二叉搜索树（BST）的根节点 <code>root</code> 和要插入树中的值 <code>value</code> ，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 <strong>保证</strong> ，新值和原始二叉搜索树中的任意节点值都不同。</p>
<p><strong>注意</strong>，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 <strong>任意有效的结果</strong> 。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [4,2,7,1,3], val = 5</span><br><span class="line">输出：[4,2,7,1,3,5]</span><br></pre></td></tr></table></figure>

<p>解释：另一个满足题目要求可以通过的树是：</p>


<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [40,20,60,10,30,50,70], val = 25</span><br><span class="line">输出：[40,20,60,10,30,50,70,null,null,25]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [4,2,7,1,3,null,null,null,null,null,null], val = 5</span><br><span class="line">输出：[4,2,7,1,3,5]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中的节点数将在 <code>[0, 104]</code>的范围内。</li>
<li><code>-108 &lt;= Node.val &lt;= 108</code></li>
<li>所有值 <code>Node.val</code> 是 <strong>独一无二</strong> 的。</li>
<li><code>-108 &lt;= val &lt;= 108</code></li>
<li><strong>保证</strong> <code>val</code> 在原始BST中不存在。</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">insertIntoBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="comment">//递归出口</span></span><br><span class="line">    <span class="comment">//如果当前节点为空，则证明val找到了合适的位置，直接创建节点并返回</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//结点应插入到左子树中，对左子树进行递归操作</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; val) &#123;</span><br><span class="line">        root.left = insertIntoBST(root.left, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.val &lt; val) &#123;</span><br><span class="line">        <span class="comment">//结点应插入到右子树中，对右子树进行递归操作</span></span><br><span class="line">        root.right = insertIntoBST(root.right, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 704 二分查找</title>
    <url>/posts/501789385.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a><a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a></h4><p>给定一个 <code>n</code> 个元素有序的（升序）整型数组 <code>nums</code> 和一个目标值 <code>target</code> ，写一个函数搜索 <code>nums</code> 中的 <code>target</code>，如果目标值存在返回下标，否则返回 <code>-1</code>。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="line">输出: 4</span><br><span class="line">解释: 9 出现在 nums 中并且下标为 4</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 2</span><br><span class="line">输出: -1</span><br><span class="line">解释: 2 不存在 nums 中因此返回 -1</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ol>
<li>你可以假设 <code>nums</code> 中的所有元素是不重复的。</li>
<li><code>n</code> 将在 <code>[1, 10000]</code>之间。</li>
<li><code>nums</code> 的每个元素都将在 <code>[-9999, 9999]</code>之间。</li>
</ol>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) /<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)&#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 713 乘积小于K的子数组</title>
    <url>/posts/2740596180.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="713-乘积小于-K-的子数组"><a href="#713-乘积小于-K-的子数组" class="headerlink" title="713. 乘积小于 K 的子数组"></a><a href="https://leetcode-cn.com/problems/subarray-product-less-than-k/">713. 乘积小于 K 的子数组</a></h4><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回子数组内所有元素的乘积严格小于 <code>k</code> 的连续子数组的数目。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [10,5,2,6], k = 100</span><br><span class="line">输出：8</span><br><span class="line">解释：8 个乘积小于 100 的子数组分别为：[10]、[5]、[2],、[6]、[10,5]、[5,2]、[2,6]、[5,2,6]。</span><br><span class="line">需要注意的是 [10,5,2] 并不是乘积小于 100 的子数组。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3], k = 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong> </p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li>
<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>
<li><code>0 &lt;= k &lt;= 106</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p><strong>滑动窗口</strong>，</p>
<ul>
<li>使用left和right两个指针代表窗口的左右两端</li>
<li>计算窗口内所有元素的乘积<ul>
<li>如果乘积小于k，则right指针右移，继续累乘。记录有效子数组个数</li>
<li>如果乘积大于k，则left指针右移，来减少累乘的结果。</li>
</ul>
</li>
<li>因为乘积小于k的子数组，所有的子数组都满足答案，所以只需要对于每个右指针，找到其左指针的个数，即只需要计算以right为右边界的有效子数组的个数，为<code>right - left +1</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSubarrayProductLessThanK</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录当前窗口的乘积</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">prod</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结果个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (right &lt; length) &#123;</span><br><span class="line">        prod *= nums[right];</span><br><span class="line">        <span class="comment">//乘积大于k，左指针右移</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right &amp;&amp; prod &gt;= k) &#123;</span><br><span class="line">            prod /= nums[left];</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//记录以当前right为右边界的有效子数组的个数</span></span><br><span class="line">        ans += (right - left + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//更新右指针</span></span><br><span class="line">        right++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，需要遍历整个数组</li>
<li>空间复杂度：O(1)，只使用到了常数个额外空间。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 728 自除数</title>
    <url>/posts/464169127.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="728-自除数"><a href="#728-自除数" class="headerlink" title="728. 自除数"></a><a href="https://leetcode-cn.com/problems/self-dividing-numbers/">728. 自除数</a></h4><p><strong>自除数</strong> 是指可以被它包含的每一位数整除的数。</p>
<ul>
<li>例如，<code>128</code> 是一个 <strong>自除数</strong> ，因为 <code>128 % 1 == 0</code>，<code>128 % 2 == 0</code>，<code>128 % 8 == 0</code>。</li>
</ul>
<p><strong>自除数</strong> 不允许包含 0 。</p>
<p>给定两个整数 <code>left</code> 和 <code>right</code> ，返回一个列表，<em>列表的元素是范围 <code>[left, right]</code> 内所有的 <strong>自除数</strong></em> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：left = 1, right = 22</span><br><span class="line">输出：[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：left = 47, right = 85</span><br><span class="line">输出：[48,55,66,77]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= left &lt;= right &lt;= 104</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>暴力法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">selfDividingNumbers</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="comment">//结果集合</span></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//从给定的区间开始逐个值判断是否为自除数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> left; num &lt;= right; num++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isSelfNumber(num)) &#123;</span><br><span class="line">            list.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为自除数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSelfNumber</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="comment">//用于拆分的副本num</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> num;</span><br><span class="line">    <span class="comment">//逐次取余得到每个位置上的值</span></span><br><span class="line">    <span class="keyword">while</span> (temp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="comment">//取得当前整数的最后一位</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">digit</span> <span class="operator">=</span> temp % <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//不满足条件，直接返回false</span></span><br><span class="line">        <span class="keyword">if</span> (digit == <span class="number">0</span> || num % digit != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新为下一个值</span></span><br><span class="line">        temp /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 73 矩阵置零</title>
    <url>/posts/338660647.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="73-矩阵置零"><a href="#73-矩阵置零" class="headerlink" title="73. 矩阵置零"></a><a href="https://leetcode-cn.com/problems/set-matrix-zeroes/">73. 矩阵置零</a></h4><p>给定一个 <code>*m* x *n*</code> 的矩阵，如果一个元素为 <strong>0</strong> ，则将其所在行和列的所有元素都设为 <strong>0</strong> 。请使用 <strong><a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 算法<strong>。</strong></p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：matrix = [[1,1,1],[1,0,1],[1,1,1]]</span><br><span class="line">输出：[[1,0,1],[0,0,0],[1,0,1]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]</span><br><span class="line">输出：[[0,0,0,0],[0,4,5,0],[0,3,1,0]]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>m == matrix.length</code></li>
<li><code>n == matrix[0].length</code></li>
<li><code>1 &lt;= m, n &lt;= 200</code></li>
<li><code>-231 &lt;= matrix[i][j] &lt;= 231 - 1</code></li>
</ul>
<p><strong>进阶：</strong></p>
<ul>
<li>一个直观的解决方案是使用  <code>O(*m**n*)</code> 的额外空间，但这并不是一个好的解决方案。</li>
<li>一个简单的改进方案是使用 <code>O(*m* + *n*)</code> 的额外空间，但这仍然不是最好的解决方案。</li>
<li>你能想出一个仅使用常量空间的解决方案吗？</li>
</ul>
<h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>我们不能遇到0后直接对该行该列进行直接修改，因为这样后面出现的0会被“覆盖”，该0所对应的行和列就没有被置0。</p>
<p>解决办法是将出现0的行和列分别存放在标记数组中，再次遍历矩阵的时将对应出现行和列置为0.</p>
<h3 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h3><p>使用O(m + n)额外空间来作为标记数组，两遍遍历，第一遍找出存在0的行和列，第二遍根据第一遍找出来的行列对矩阵进行置零操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要O(m + n)空间的解法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setZeroes</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录当前行、列是否含有0</span></span><br><span class="line">    HashSet&lt;Integer&gt; row_zero = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    HashSet&lt;Integer&gt; col_zero = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一次遍历用来记录</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; row;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; col;j++)&#123;</span><br><span class="line">            <span class="comment">//当前数字为0，记录下来他所在的行和列</span></span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                row_zero.add(i);</span><br><span class="line">                col_zero.add(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二次遍历用来清零</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; row;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; col;j++)&#123;</span><br><span class="line">            <span class="comment">//只要处于所在行或者列的元素，整行整列全部清零</span></span><br><span class="line">            <span class="keyword">if</span> (row_zero.contains(i) || col_zero.contains(j))&#123;</span><br><span class="line">                matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解法1：-1"><a href="#解法1：-1" class="headerlink" title="解法1："></a>解法1：</h3><p>使用第一行第一列来作为标记数组，但这样潜在的问题是，如果第一行或者第一列本来就存在着0，那么我们需要额外对这一整行进行置0操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要O(1)空间的解法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setZeroes</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">row0_flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">col0_flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一行是否有零</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix[<span class="number">0</span>][j] == <span class="number">0</span>) &#123;</span><br><span class="line">            row0_flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一列是否有零</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; row;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">            col0_flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//把第一行第一列设为标志位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; row;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j &lt; col;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//置零操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; row;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j &lt; col;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] == <span class="number">0</span> || matrix[<span class="number">0</span>][j] ==<span class="number">0</span>)&#123;</span><br><span class="line">                matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果第一行中有0，则额外对该行置零</span></span><br><span class="line">    <span class="keyword">if</span> (row0_flag)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; col;j++)&#123;</span><br><span class="line">            matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果第一列中有0，则额外对该列置零</span></span><br><span class="line">    <span class="keyword">if</span> (col0_flag)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; row;i++)&#123;</span><br><span class="line">            matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 75 颜色分类</title>
    <url>/posts/1358875939.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="75-颜色分类"><a href="#75-颜色分类" class="headerlink" title="75. 颜色分类"></a><a href="https://leetcode-cn.com/problems/sort-colors/">75. 颜色分类</a></h4><p>给定一个包含红色、白色和蓝色、共 <code>n</code> 个元素的数组 <code>nums</code> ，**<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a>**对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p>
<p>我们使用整数 <code>0</code>、 <code>1</code> 和 <code>2</code> 分别表示红色、白色和蓝色。</p>
<p>必须在不使用库的sort函数的情况下解决这个问题。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,0,2,1,1,0]</span><br><span class="line">输出：[0,0,1,1,2,2]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,0,1]</span><br><span class="line">输出：[0,1,2]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>n == nums.length</code></li>
<li><code>1 &lt;= n &lt;= 300</code></li>
<li><code>nums[i]</code> 为 <code>0</code>、<code>1</code> 或 <code>2</code></li>
</ul>
<p><strong>进阶：</strong></p>
<ul>
<li>你可以不使用代码库中的排序函数来解决这道题吗？</li>
<li>你能想出一个仅使用常数空间的一趟扫描算法吗？</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="桶排序："><a href="#桶排序：" class="headerlink" title="桶排序："></a>桶排序：</h3><p>因为只有0，1，2三个数字，所以可以使用桶排序，首先记录他们的数量，然后根据他们的数量重写整个数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sortColors</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">//存储0,1,2出现的次数</span></span><br><span class="line">    <span class="type">int</span>[] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="comment">//计数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        bucket[num]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将桶中的数据还原到数组中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (bucket[i] != <span class="number">0</span>) &#123;</span><br><span class="line">            nums[j++] = i;</span><br><span class="line">            bucket[i]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(1)</li>
</ul>
<h3 id="双指针："><a href="#双指针：" class="headerlink" title="双指针："></a>双指针：</h3><p>使用两个指针<code>p_zero</code>和<code>p_two</code>来划分0，1，2的范围，即将数组分为<code>[0,p_zero）</code>,<code>[p_zero,i）</code>,<code>[p_two,len-1]</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sortColors</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 使用两个指针p_zero和p_two来划分0，1，2的范围</span></span><br><span class="line"><span class="comment">     *  即将数组分为[0,p_zero）,[p_zero,i）,[p_two,len-1]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了保证初始化的时候 [0, p_zero)为空，设置p_zero = 0</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">p_zero</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//为了保证初始化的时候 [p_two,len-1] 为空，设置 p_two = len</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">p_two</span> <span class="operator">=</span> len;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//当i==p_two时，子区间正好覆盖全部数组</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; p_two) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            swap(nums, p_zero, i);</span><br><span class="line">            p_zero++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] == <span class="number">2</span>) &#123;</span><br><span class="line">            p_two--;</span><br><span class="line">            swap(nums, p_two, i);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[l];</span><br><span class="line">    nums[l] = nums[r];</span><br><span class="line">    nums[r] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 744 寻找比目标字母大的最小字母</title>
    <url>/posts/2325317807.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="744-寻找比目标字母大的最小字母"><a href="#744-寻找比目标字母大的最小字母" class="headerlink" title="744. 寻找比目标字母大的最小字母"></a><a href="https://leetcode-cn.com/problems/find-smallest-letter-greater-than-target/">744. 寻找比目标字母大的最小字母</a></h4><p>给你一个排序后的字符列表 <code>letters</code> ，列表中只包含小写英文字母。另给出一个目标字母 <code>target</code>，请你寻找在这一有序列表里比目标字母大的最小字母。</p>
<p>在比较时，字母是依序循环出现的。举个例子：</p>
<ul>
<li>如果目标字母 <code>target = &#39;z&#39;</code> 并且字符列表为 <code>letters = [&#39;a&#39;, &#39;b&#39;]</code>，则答案返回 <code>&#39;a&#39;</code></li>
</ul>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: letters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]，target = &quot;a&quot;</span><br><span class="line">输出: &quot;c&quot;</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: letters = [&quot;c&quot;,&quot;f&quot;,&quot;j&quot;], target = &quot;c&quot;</span><br><span class="line">输出: &quot;f&quot;</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: letters = [&quot;c&quot;,&quot;f&quot;,&quot;j&quot;], target = &quot;d&quot;</span><br><span class="line">输出: &quot;f&quot;</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>2 &lt;= letters.length &lt;= 104</code></li>
<li><code>letters[i]</code> 是一个小写字母</li>
<li><code>letters</code> 按非递减顺序排序</li>
<li><code>letters</code> 最少包含两个不同的字母</li>
<li><code>target</code> 是一个小写字母</li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">char</span> <span class="title function_">nextGreatestLetter</span><span class="params">(<span class="type">char</span>[] letters, <span class="type">char</span> target)</span> &#123;</span><br><span class="line">    <span class="comment">//线性查找</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; letters.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (letters[i] &gt; target) &#123;</span><br><span class="line">            <span class="keyword">return</span> letters[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//因为字母是循环出现的，所以如果一次遍历没有查找到就直接返回第一个字符</span></span><br><span class="line">    <span class="keyword">return</span> letters[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N),遍历了一次字符数组</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 796 旋转字符串</title>
    <url>/posts/880135690.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="796-旋转字符串"><a href="#796-旋转字符串" class="headerlink" title="796. 旋转字符串"></a><a href="https://leetcode-cn.com/problems/rotate-string/">796. 旋转字符串</a></h4><p>给定两个字符串, <code>s</code> 和 <code>goal</code>。如果在若干次旋转操作之后，<code>s</code> 能变成 <code>goal</code> ，那么返回 <code>true</code> 。</p>
<p><code>s</code> 的 <strong>旋转操作</strong> 就是将 <code>s</code> 最左边的字符移动到最右边。 </p>
<ul>
<li>例如, 若 <code>s = &#39;abcde&#39;</code>，在旋转一次之后结果就是<code>&#39;bcdea&#39;</code> 。</li>
</ul>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abcde&quot;, goal = &quot;cdeab&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abcde&quot;, goal = &quot;abced&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li><code>1 &lt;= s.length, goal.length &lt;= 100</code></li>
<li><code>s</code> 和 <code>goal</code> 由小写英文字母组成</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>由于每次旋转操作都是把最左侧的一个字符移动到最右侧，因此<code>goal</code>是由<code>s</code>从任意位置开始经过多步旋转而来的，而字符串<code>s + s</code>中包含了所有字符串<code>s</code>经过旋转而得到的字符串，那么满足条件的<code>goal</code>就一定会出现在<code>s + s</code>字符串中。</p>
<p><code>ps：在很多头尾相连的数组题目中也经常使用两倍数组的技巧。</code></p>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">rotateString</span><span class="params">(String s, String goal)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s.length() == goal.length() &amp;&amp; (s + s).contains(goal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，KMP算法搜索子字符串的时间复杂度为O(N)。</li>
<li>空间复杂度：O(N)，KMP算法搜索子字符串的空间复杂度为O(N)。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 77 组合</title>
    <url>/posts/2519134806.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="77-组合"><a href="#77-组合" class="headerlink" title="77. 组合"></a><a href="https://leetcode.cn/problems/combinations/">77. 组合</a></h4><p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p>
<p>你可以按 <strong>任何顺序</strong> 返回答案。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 4, k = 2</span><br><span class="line">输出：</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 1, k = 1</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 20</code></li>
<li><code>1 &lt;= k &lt;= n</code></li>
</ul>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p><strong>回溯算法</strong></p>
<p>回溯法解决的问题都可以抽象为树形结构来理解，如下图</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/20201123195223940.png" alt="77.组合"></p>
<p>其中n（集合长度）相当于树的宽度，k（组合子集的长度）相当于树的深度。</p>
<p>每次搜索到叶子结点，就找到了一个子集结果，然后只要把所有的从根节点搜索到叶子结点的路径收集起来，就可以求出结果集。</p>
<h4 id="回溯三部曲："><a href="#回溯三部曲：" class="headerlink" title="回溯三部曲："></a>回溯三部曲：</h4><ol>
<li><strong>递归函数的返回值以及参数</strong><ol>
<li>返回值，一般递归函数的返回值都为空</li>
<li>参数：<ol>
<li>n：集合中元素个数，遍历宽度（for循环宽度）</li>
<li>k：组合子集中元素个数，遍历深度（递归深度）</li>
<li>startIndex：用于记录下一层递归搜索的起始位置</li>
</ol>
</li>
</ol>
</li>
<li><strong>回溯终止条件</strong><ol>
<li>从根节点到达叶子节点即结束本层递归</li>
<li>也就是说path数组的大小如果达到k，说明我们找到了一个子集大小为k的组合了，在图中path存的就是根节点到叶子节点的路径</li>
</ol>
</li>
<li><strong>单层搜索逻辑</strong><ol>
<li>for循环每次从startIndex开始遍历，然后用path保存取到的节点i</li>
<li>然后通过递归函数不断调用自己 一直往深处遍历，直到遇到了叶子节点再返回。</li>
<li><strong>回溯操作，比如这次的遍历结果是{1,2}，这个结果已经保存在结果集res中了，但是我们还要遍历{1,3}，{1,4}，所以需要进行回溯，把2剔除，然后3，4才能进去。</strong></li>
</ol>
</li>
</ol>
<h4 id="回溯算法模板："><a href="#回溯算法模板：" class="headerlink" title="回溯算法模板："></a>回溯算法模板：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(参数)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (终止条件) &#123;</span><br><span class="line">        存放结果;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;</span><br><span class="line">        处理节点;</span><br><span class="line">         <span class="comment">// 递归</span></span><br><span class="line">        backtracking(路径，选择列表);</span><br><span class="line">        回溯，撤销处理结果</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单条路径</span></span><br><span class="line"><span class="keyword">public</span> LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//路径结果集</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    backtracking(n, k, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">    <span class="comment">//******************************************************//</span></span><br><span class="line">    <span class="comment">//回溯终止条件，单条路径大小达到k，说明找到了一个子集大小为k的组合</span></span><br><span class="line">    <span class="keyword">if</span> (path.size() == k) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//******************************************************//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//单层搜索过程,从startIndex开始遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt;= n; i++) &#123;</span><br><span class="line">        path.add(i);</span><br><span class="line">        backtracking(n, k, i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//回溯，撤销当前处理的节点</span></span><br><span class="line">        path.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="剪枝："><a href="#剪枝：" class="headerlink" title="剪枝："></a>剪枝：</h4><p>来举一个例子，n &#x3D; 4，k &#x3D; 4的话，那么第一层for循环的时候，从元素2开始的遍历都没有意义了，<strong>因为从元素2到元素4一共才三个元素，构不成一个4位的集合。</strong> 在第二层for循环，从元素3开始的遍历都没有意义了。</p>
<p>如图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/20210130194335207.png" alt="77.组合4"></p>
<p>也就是说：</p>
<p><strong>如果for循环选择的起始位置之后的元素个数 已经不足 我们需要的元素个数了，那么就没有必要搜索了</strong>。</p>
<h5 id="优化过程："><a href="#优化过程：" class="headerlink" title="优化过程："></a>优化过程：</h5><ol>
<li>已经选择了的元素个数：path.size();</li>
<li>还需要选择的元素个数：k - path.size();</li>
<li>从集合n和还需要的元素个数(k - path.size)反推startIndex，可得在集合n中至多要从该起始位置 : n - (k - path.size()) + 1的地方开始遍历。</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/IMG_4306.PNG" alt="IMG_4306"></p>
<h4 id="代码优化："><a href="#代码优化：" class="headerlink" title="代码优化："></a>代码优化：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单条路径</span></span><br><span class="line"><span class="keyword">public</span> LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//路径结果集</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    backtracking(n, k, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">    <span class="comment">//******************************************************//</span></span><br><span class="line">    <span class="comment">//回溯终止条件，单条路径大小达到k，说明找到了一个子集大小为k的组合</span></span><br><span class="line">    <span class="keyword">if</span> (path.size() == k) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//******************************************************//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//单层搜索过程,从startIndex开始遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt;= n - (k - path.size()) + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        path.add(i);</span><br><span class="line">        backtracking(n, k, i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//回溯，撤销当前处理的节点</span></span><br><span class="line">        path.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>参考自代码随想录：</strong><a href="https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html#%E5%89%AA%E6%9E%9D%E4%BC%98%E5%8C%96">https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html#%E5%89%AA%E6%9E%9D%E4%BC%98%E5%8C%96</a></p>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 83 删除排序链表中的重复元素</title>
    <url>/posts/2462748065.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="83-删除排序链表中的重复元素"><a href="#83-删除排序链表中的重复元素" class="headerlink" title="83. 删除排序链表中的重复元素"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">83. 删除排序链表中的重复元素</a></h4><p>给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> 。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/04/list1.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,1,2]</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/04/list2.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,1,2,3,3]</span><br><span class="line">输出：[1,2,3]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表中节点数目在范围 <code>[0, 300]</code> 内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li>题目数据保证链表已经按升序 <strong>排列</strong></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p><strong>双指针</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 双指针法：</span></span><br><span class="line"><span class="comment">    *       因为是排序链表，所以重复元素肯定相邻</span></span><br><span class="line"><span class="comment">    *       使用两个并列的指针对链表进行遍历，</span></span><br><span class="line"><span class="comment">    *       逐一比较</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (pre.val == cur.val)&#123;</span><br><span class="line">            pre.next = cur.next;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 806 写字符串需要的行数</title>
    <url>/posts/3727263191.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="806-写字符串需要的行数"><a href="#806-写字符串需要的行数" class="headerlink" title="806. 写字符串需要的行数"></a><a href="https://leetcode-cn.com/problems/number-of-lines-to-write-string/">806. 写字符串需要的行数</a></h4><p>我们要把给定的字符串 <code>S</code> 从左到右写到每一行上，每一行的最大宽度为100个单位，如果我们在写某个字母的时候会使这行超过了100 个单位，那么我们应该把这个字母写到下一行。我们给定了一个数组 <code>widths</code> ，这个数组 widths[0] 代表 ‘a’ 需要的单位， widths[1] 代表 ‘b’ 需要的单位，…， widths[25] 代表 ‘z’ 需要的单位。</p>
<p>现在回答两个问题：至少多少行能放下<code>S</code>，以及最后一行使用的宽度是多少个单位？将你的答案作为长度为2的整数列表返回。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: </span><br><span class="line">widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]</span><br><span class="line">S = &quot;abcdefghijklmnopqrstuvwxyz&quot;</span><br><span class="line">输出: [3, 60]</span><br><span class="line">解释: </span><br><span class="line">所有的字符拥有相同的占用单位10。所以书写所有的26个字母，</span><br><span class="line">我们需要2个整行和占用60个单位的一行。</span><br><span class="line">示例 2:</span><br><span class="line">输入: </span><br><span class="line">widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]</span><br><span class="line">S = &quot;bbbcccdddaaa&quot;</span><br><span class="line">输出: [2, 4]</span><br><span class="line">解释: </span><br><span class="line">除去字母&#x27;a&#x27;所有的字符都是相同的单位10，并且字符串 &quot;bbbcccdddaa&quot; 将会覆盖 9 * 10 + 2 * 4 = 98 个单位.</span><br><span class="line">最后一个字母 &#x27;a&#x27; 将会被写到第二行，因为第一行只剩下2个单位了。</span><br><span class="line">所以，这个答案是2行，第二行有4个单位宽度。</span><br></pre></td></tr></table></figure>

<p><strong>注:</strong></p>
<ul>
<li>字符串 <code>S</code> 的长度在 [1, 1000] 的范围。</li>
<li><code>S</code> 只包含小写字母。</li>
<li><code>widths</code> 是长度为 <code>26</code>的数组。</li>
<li><code>widths[i]</code> 值的范围在 <code>[2, 10]</code>。</li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="简单模拟题"><a href="#简单模拟题" class="headerlink" title="简单模拟题"></a>简单模拟题</h3><p>从左到右遍历字符串，<code>line</code>表示当前行数，<code>width</code>表示当前行已经使用的宽度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] numberOfLines(<span class="type">int</span>[] widths, String s) &#123;</span><br><span class="line">    <span class="comment">//总行数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">line</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//当前行的宽度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="comment">//当前字符</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="comment">//当前字符所需要的单位</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> widths[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="comment">//更新当前行</span></span><br><span class="line">        width += num;</span><br><span class="line">		<span class="comment">//当前行已经写满，更新行数</span></span><br><span class="line">        <span class="keyword">if</span> (width &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            line++;</span><br><span class="line">            <span class="comment">//当前行不足的直接写到下一行的情况</span></span><br><span class="line">            width = num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;line, width&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 88 合并两个有序数组</title>
    <url>/posts/2743186979.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="88-合并两个有序数组"><a href="#88-合并两个有序数组" class="headerlink" title="88. 合并两个有序数组"></a><a href="https://leetcode-cn.com/problems/merge-sorted-array/">88. 合并两个有序数组</a></h4><p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p>
<p>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p>
<p><strong>注意：</strong>最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span><br><span class="line">输出：[1,2,2,3,5,6]</span><br><span class="line">解释：需要合并 [1,2,3] 和 [2,5,6] 。</span><br><span class="line">合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1], m = 1, nums2 = [], n = 0</span><br><span class="line">输出：[1]</span><br><span class="line">解释：需要合并 [1] 和 [] 。</span><br><span class="line">合并结果是 [1] 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [0], m = 0, nums2 = [1], n = 1</span><br><span class="line">输出：[1]</span><br><span class="line">解释：需要合并的数组是 [] 和 [1] 。</span><br><span class="line">合并结果是 [1] 。</span><br><span class="line">注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>nums1.length == m + n</code></li>
<li><code>nums2.length == n</code></li>
<li><code>0 &lt;= m, n &lt;= 200</code></li>
<li><code>1 &lt;= m + n &lt;= 200</code></li>
<li><code>-109 &lt;= nums1[i], nums2[j] &lt;= 109</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> m, <span class="type">int</span>[] nums2, <span class="type">int</span> n)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//逆向双指针，比较两个数组最后的元素，选择较大的一个塞到数组尾部</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//i指向nums1最后一个被插入元素的后一位置，nums1.length和 m + n等同</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//如果num1中还有元素，就进行比较选取较大值</span></span><br><span class="line">        <span class="keyword">if</span> (m &gt; <span class="number">0</span> &amp;&amp; nums1[m - <span class="number">1</span>] &gt; nums2[n -<span class="number">1</span>])&#123;</span><br><span class="line">            nums1[--i] = nums1[--m];</span><br><span class="line">            <span class="comment">//nums1中元素小或者nums1已为空，就把nums2存入</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            nums1[--i] = nums2[--n];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 846 一手顺子</title>
    <url>/posts/3874869538.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="846-一手顺子"><a href="#846-一手顺子" class="headerlink" title="846. 一手顺子"></a><a href="https://leetcode.cn/problems/hand-of-straights/">846. 一手顺子</a></h4><p>Alice 手中有一把牌，她想要重新排列这些牌，分成若干组，使每一组的牌数都是 <code>groupSize</code> ，并且由 <code>groupSize</code> 张连续的牌组成。</p>
<p>给你一个整数数组 <code>hand</code> 其中 <code>hand[i]</code> 是写在第 <code>i</code> 张牌，和一个整数 <code>groupSize</code> 。如果她可能重新排列这些牌，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：hand = [1,2,3,6,2,3,4,7,8], groupSize = 3</span><br><span class="line">输出：true</span><br><span class="line">解释：Alice 手中的牌可以被重新排列为 [1,2,3]，[2,3,4]，[6,7,8]。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：hand = [1,2,3,4,5], groupSize = 4</span><br><span class="line">输出：false</span><br><span class="line">解释：Alice 手中的牌无法被重新排列成几个大小为 4 的组。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= hand.length &lt;= 104</code></li>
<li><code>0 &lt;= hand[i] &lt;= 109</code></li>
<li><code>1 &lt;= groupSize &lt;= hand.length</code></li>
</ul>
<h4 id="算法思想："><a href="#算法思想：" class="headerlink" title="算法思想："></a>算法思想：</h4><ul>
<li>如果数组长度不能被顺子长度等分，则直接不符合</li>
<li>然后将数组进行从小到大排序</li>
<li>将数组元素存入哈希表并记录出现次数</li>
<li>每次取出最小元素x当做顺子的头，然后在哈希表中读取当前顺子的其余元素</li>
<li>如果可以满足要求，则当前顺子的其余元素在哈希表中的值都必须大于等于1</li>
<li>如果值小于1则不满足</li>
</ul>
<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isNStraightHand</span><span class="params">(<span class="type">int</span>[] hand, <span class="type">int</span> groupSize)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> hand.length;</span><br><span class="line">    <span class="comment">//如果当前数组长度不能被groupSize均分，则直接返回false</span></span><br><span class="line">    <span class="keyword">if</span> (len % groupSize != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//数组排序，每次找出最小元素</span></span><br><span class="line">    Arrays.sort(hand);</span><br><span class="line"></span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : hand) &#123;</span><br><span class="line">        map.put(x, map.getOrDefault(x, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : hand) &#123;</span><br><span class="line">        <span class="comment">//找出顺子的开头</span></span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(x)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; groupSize; i++) &#123;</span><br><span class="line">            <span class="comment">//判断以x开头的当前顺子组的元素</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> x + i;</span><br><span class="line">            <span class="comment">//如果后续元素不存在，直接返回false</span></span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(num)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">            <span class="comment">//存在，更新记录</span></span><br><span class="line">            map.put(num, map.get(num) - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//如果当前数字出现次数已经为0，则移除</span></span><br><span class="line">            <span class="keyword">if</span> (map.get(num) == <span class="number">0</span>) &#123;</span><br><span class="line">                map.remove(num);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 905 按奇偶排序数组</title>
    <url>/posts/116536660.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="905-按奇偶排序数组"><a href="#905-按奇偶排序数组" class="headerlink" title="905. 按奇偶排序数组"></a><a href="https://leetcode-cn.com/problems/sort-array-by-parity/">905. 按奇偶排序数组</a></h4><p>给你一个整数数组 <code>nums</code>，将 <code>nums</code> 中的的所有偶数元素移动到数组的前面，后跟所有奇数元素。</p>
<p>返回满足此条件的 <strong>任一数组</strong> 作为答案。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,1,2,4]</span><br><span class="line">输出：[2,4,3,1]</span><br><span class="line">解释：[4,2,3,1]、[2,4,1,3] 和 [4,2,1,3] 也会被视作正确答案。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 5000</code></li>
<li><code>0 &lt;= nums[i] &lt;= 5000</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>简单模拟题，双指针</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] sortArrayByParity(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[l] % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; nums[r] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.swap(nums, l, r);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[l] % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; nums[r] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            l++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[l] % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; nums[r] % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            r--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l++;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    nums[i] = nums[i] ^ nums[j];</span><br><span class="line">    nums[j] = nums[i] ^ nums[j];</span><br><span class="line">    nums[i] = nums[i] ^ nums[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，只需要遍历一次数组即可。</li>
<li>空间复杂度：O(1)，没有使用到额外空间。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 908 最小差值 1</title>
    <url>/posts/93674517.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="908-最小差值-I"><a href="#908-最小差值-I" class="headerlink" title="908. 最小差值 I"></a><a href="https://leetcode-cn.com/problems/smallest-range-i/">908. 最小差值 I</a></h4><p>给你一个整数数组 <code>nums</code>，和一个整数 <code>k</code> 。</p>
<p>在一个操作中，您可以选择 <code>0 &lt;= i &lt; nums.length</code> 的任何索引 <code>i</code> 。将 <code>nums[i]</code> 改为 <code>nums[i] + x</code> ，其中 <code>x</code> 是一个范围为 <code>[-k, k]</code> 的整数。对于每个索引 <code>i</code> ，最多 <strong>只能</strong> 应用 <strong>一次</strong> 此操作。</p>
<p><code>nums</code> 的 <strong>分数</strong> 是 <code>nums</code> 中最大和最小元素的差值。 </p>
<p><em>在对 <code>nums</code> 中的每个索引最多应用一次上述操作后，返回 <code>nums</code> 的最低 <strong>分数</strong></em> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1], k = 0</span><br><span class="line">输出：0</span><br><span class="line">解释：分数是 max(nums) - min(nums) = 1 - 1 = 0。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,10], k = 2</span><br><span class="line">输出：6</span><br><span class="line">解释：将 nums 改为 [2,8]。分数是 max(nums) - min(nums) = 8 - 2 = 6。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,3,6], k = 3</span><br><span class="line">输出：0</span><br><span class="line">解释：将 nums 改为 [4,4,4]。分数是 max(nums) - min(nums) = 4 - 4 = 0。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 104</code></li>
<li><code>0 &lt;= nums[i] &lt;= 104</code></li>
<li><code>0 &lt;= k &lt;= 104</code></li>
</ul>
<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>最低分数，即为数组中最大值和最小值的差值。</p>
<p>即<code>maxNum - minNum</code>，对于本题，只需要将最大值减去<code>k</code>，最小值加上<code>k</code>，然后相减才会得到最低分数。</p>
<p>会有两种情况：</p>
<ul>
<li>最小值加上k小于最大值减去k，即<code>minNum + k &lt; maxNum - k</code>,直接将改变后的最值差返回即可</li>
<li>最小值加上k大于最大值减去k，即<code>minNum + k &gt;= maxNum - k</code>，因为最低分数不能小于0，所以这种情况就返回0</li>
</ul>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">smallestRangeI</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="comment">//数组的最大最小值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">minNum</span> <span class="operator">=</span> <span class="number">10001</span>, maxNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        minNum = Math.min(minNum, num);</span><br><span class="line">        maxNum = Math.max(maxNum, num);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//对应上面的两种情况，移项可得</span></span><br><span class="line">    <span class="keyword">return</span> Math.max(maxNum - minNum - <span class="number">2</span> * k, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 92 反转链表II</title>
    <url>/posts/3535119294.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="92-反转链表-II"><a href="#92-反转链表-II" class="headerlink" title="92. 反转链表 II"></a><a href="https://leetcode.cn/problems/reverse-linked-list-ii/">92. 反转链表 II</a></h4><p>难度中等1367收藏分享切换为英文接收动态反馈</p>
<p>给你单链表的头指针 <code>head</code> 和两个整数 <code>left</code> 和 <code>right</code> ，其中 <code>left &lt;= right</code> 。请你反转从位置 <code>left</code> 到位置 <code>right</code> 的链表节点，返回 <strong>反转后的链表</strong> 。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/rev2ex2.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], left = 2, right = 4</span><br><span class="line">输出：[1,4,3,2,5]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [5], left = 1, right = 1</span><br><span class="line">输出：[5]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表中节点数目为 <code>n</code></li>
<li><code>1 &lt;= n &lt;= 500</code></li>
<li><code>-500 &lt;= Node.val &lt;= 500</code></li>
<li><code>1 &lt;= left &lt;= right &lt;= n</code></li>
</ul>
<h4 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h4><ol>
<li>记录需要反转的子链表的两端节点的前一位置和后一位置</li>
<li>将子链表截取出来</li>
<li>反转子链表</li>
<li>连接回原链表</li>
</ol>
<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseBetween</span><span class="params">(ListNode head, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">    dummy.next = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于记录left节点的前一节点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//假设链表的左右端点为left和right</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于记录left节点</span></span><br><span class="line">    ListNode leftNode;</span><br><span class="line">    <span class="comment">//用于记录right节点</span></span><br><span class="line">    ListNode rightNode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.首先找出左端点的前一个节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; left - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        pre = pre.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//直接把rightNode放在pre的地方进行遍历，少走几步路</span></span><br><span class="line">    rightNode = pre;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.然后找到右端点的后一个节点</span></span><br><span class="line">    <span class="comment">//这里如果从dummy开始走是走right步，现在已经走了left- 1步，所以再走right-left+1步就可以了</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; right - left + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        rightNode = rightNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.截取链表</span></span><br><span class="line">    leftNode = pre.next;</span><br><span class="line">    <span class="comment">//保存右端点之后的链表的开始节点，防止丢失</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> rightNode.next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.断链</span></span><br><span class="line">    pre.next = <span class="literal">null</span>;</span><br><span class="line">    rightNode.next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.反转子链表</span></span><br><span class="line">    reverseLinkedList(leftNode);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.连接回原来的链表</span></span><br><span class="line">    pre.next = rightNode;</span><br><span class="line">    leftNode.next = cur;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reverseLinkedList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">	<span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">        temp = cur.next;</span><br><span class="line">        cur.next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>关于反转链表可以参考：<a href="https://www.kdy.icu/posts/3968011866.html">反转链表</a></p>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 937 重新排列日志文件</title>
    <url>/posts/302480251.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="937-重新排列日志文件"><a href="#937-重新排列日志文件" class="headerlink" title="937. 重新排列日志文件"></a><a href="https://leetcode-cn.com/problems/reorder-data-in-log-files/">937. 重新排列日志文件</a></h4><p>给你一个日志数组 <code>logs</code>。每条日志都是以空格分隔的字串，其第一个字为字母与数字混合的 <strong>标识符</strong> 。</p>
<p>有两种不同类型的日志：</p>
<ul>
<li><strong>字母日志</strong>：除标识符之外，所有字均由小写字母组成</li>
<li><strong>数字日志</strong>：除标识符之外，所有字均由数字组成</li>
</ul>
<p>请按下述规则将日志重新排序：</p>
<ul>
<li>所有 <strong>字母日志</strong> 都排在 <strong>数字日志</strong> 之前。</li>
<li><strong>字母日志</strong> 在内容不同时，忽略标识符后，按内容字母顺序排序；在内容相同时，按标识符排序。</li>
<li><strong>数字日志</strong> 应该保留原来的相对顺序。</li>
</ul>
<p>返回日志的最终顺序。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：logs = [&quot;dig1 8 1 5 1&quot;,&quot;let1 art can&quot;,&quot;dig2 3 6&quot;,&quot;let2 own kit dig&quot;,&quot;let3 art zero&quot;]</span><br><span class="line">输出：[&quot;let1 art can&quot;,&quot;let3 art zero&quot;,&quot;let2 own kit dig&quot;,&quot;dig1 8 1 5 1&quot;,&quot;dig2 3 6&quot;]</span><br><span class="line">解释：</span><br><span class="line">字母日志的内容都不同，所以顺序为 &quot;art can&quot;, &quot;art zero&quot;, &quot;own kit dig&quot; 。</span><br><span class="line">数字日志保留原来的相对顺序 &quot;dig1 8 1 5 1&quot;, &quot;dig2 3 6&quot; 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：logs = [&quot;a1 9 2 3 1&quot;,&quot;g1 act car&quot;,&quot;zo4 4 7&quot;,&quot;ab1 off key dog&quot;,&quot;a8 act zoo&quot;]</span><br><span class="line">输出：[&quot;g1 act car&quot;,&quot;a8 act zoo&quot;,&quot;ab1 off key dog&quot;,&quot;a1 9 2 3 1&quot;,&quot;zo4 4 7&quot;]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= logs.length &lt;= 100</code></li>
<li><code>3 &lt;= logs[i].length &lt;= 100</code></li>
<li><code>logs[i]</code> 中，字与字之间都用 <strong>单个</strong> 空格分隔</li>
<li>题目数据保证 <code>logs[i]</code> 都有一个标识符，并且在标识符之后至少存在一个字</li>
</ul>
<h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p><strong>自定义排序：</strong></p>
<p>将日志数组中的日志元素按照第一个空格分成两部分，第一部分为标识符，第二部分为日志内容。</p>
<p>两条日志进行比较规则：</p>
<ul>
<li>字母日志小于数字日志。</li>
<li>数字日志保留相对顺序。</li>
<li>字母日志进行比较时，先比较第二部分日志内容的大小；如果相等，在比较标识符大小。</li>
</ul>
<p>方法logCompare:</p>
<ul>
<li>log1大于log2时，返回1。</li>
<li>log1小于log2时，返回-1。</li>
<li>log1等于log2时，返回0。</li>
</ul>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lc937</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String[] reorderLogFiles(String[] logs) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> logs.length;</span><br><span class="line">        Pair[] pairs = <span class="keyword">new</span> <span class="title class_">Pair</span>[length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="comment">//赋值</span></span><br><span class="line">            pairs[i] = <span class="keyword">new</span> <span class="title class_">Pair</span>(logs[i], i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//排序操作</span></span><br><span class="line">        Arrays.sort(pairs, (a, b) -&gt; logCompare(a, b));</span><br><span class="line">        <span class="comment">//排序好的数组</span></span><br><span class="line">        String[] reorderd = <span class="keyword">new</span> <span class="title class_">String</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            reorderd[i] = pairs[i].log;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> reorderd;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志比较方法，两个日志进行比较，第一个日志大于返回1，等于返回0，小于返回-1</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">logCompare</span><span class="params">(Pair pair1, Pair pair2)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">log1</span> <span class="operator">=</span> pair1.log;</span><br><span class="line">        <span class="type">String</span> <span class="variable">log2</span> <span class="operator">=</span> pair2.log;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> pair1.index;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index2</span> <span class="operator">=</span> pair2.index;</span><br><span class="line">        <span class="comment">//split()方法的第一个参数regex为以什么字符分隔，limit是指将字符串分隔为几个字符串的数量，</span></span><br><span class="line">        <span class="comment">// 2即分隔为两个，即只分割一次</span></span><br><span class="line"></span><br><span class="line">        String[] split1 = log1.split(<span class="string">&quot; &quot;</span>, <span class="number">2</span>);</span><br><span class="line">        String[] split2 = log2.split(<span class="string">&quot; &quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断为字符日志还是数字日志</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isDigit1</span> <span class="operator">=</span> Character.isDigit(split1[<span class="number">1</span>].charAt(<span class="number">0</span>));</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isDigit2</span> <span class="operator">=</span> Character.isDigit(split2[<span class="number">1</span>].charAt(<span class="number">0</span>));</span><br><span class="line">        <span class="comment">//都是数字日志，按照顺序返回</span></span><br><span class="line">        <span class="keyword">if</span> (isDigit1 &amp;&amp; isDigit2) &#123;</span><br><span class="line">            <span class="keyword">return</span> index1 - index2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//都不是数字日志，比较字符大小</span></span><br><span class="line">        <span class="keyword">if</span> (!isDigit1 &amp;&amp; !isDigit2) &#123;</span><br><span class="line">            <span class="comment">//比较标识符后面的字符串是否相同</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sc</span> <span class="operator">=</span> split1[<span class="number">1</span>].compareTo(split2[<span class="number">1</span>]);</span><br><span class="line">            <span class="comment">//不相同直接按顺序返回</span></span><br><span class="line">            <span class="keyword">if</span> (sc != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> sc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//相同则比较前面的标识符</span></span><br><span class="line">            <span class="keyword">return</span> split1[<span class="number">0</span>].compareTo(split2[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//若有一个为字符日志，一个为数字日志</span></span><br><span class="line">        <span class="comment">//则只需要判断isDigit1是否为真，若为真，则</span></span><br><span class="line">        <span class="keyword">return</span> isDigit1 ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//日志类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span> &#123;</span><br><span class="line">    String log;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">(String log, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.log = log;</span><br><span class="line">        <span class="built_in">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 942 增减字符串匹配</title>
    <url>/posts/613586191.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="942-增减字符串匹配"><a href="#942-增减字符串匹配" class="headerlink" title="942. 增减字符串匹配"></a><a href="https://leetcode.cn/problems/di-string-match/">942. 增减字符串匹配</a></h4><p>由范围 <code>[0,n]</code> 内所有整数组成的 <code>n + 1</code> 个整数的排列序列可以表示为长度为 <code>n</code> 的字符串 <code>s</code> ，其中:</p>
<ul>
<li>如果 <code>perm[i] &lt; perm[i + 1]</code> ，那么 <code>s[i] == &#39;I&#39;</code> </li>
<li>如果 <code>perm[i] &gt; perm[i + 1]</code> ，那么 <code>s[i] == &#39;D&#39;</code></li>
</ul>
<p>给定一个字符串 <code>s</code> ，重构排列 <code>perm</code> 并返回它。如果有多个有效排列perm，则返回其中 <strong>任何一个</strong> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;IDID&quot;</span><br><span class="line">输出：[0,4,1,3,2]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;III&quot;</span><br><span class="line">输出：[0,1,2,3]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;DDI&quot;</span><br><span class="line">输出：[3,2,0,1]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 105</code></li>
<li><code>s</code> 只包含字符 <code>&quot;I&quot;</code> 或 <code>&quot;D&quot;</code></li>
</ul>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p><strong>贪心：每次选取最大或者最小值加入数组。</strong></p>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] diStringMatch(String s) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> len;</span><br><span class="line">    <span class="comment">//根据题意，数组长度比字符串长度多1</span></span><br><span class="line">    <span class="type">int</span>[] perm = <span class="keyword">new</span> <span class="title class_">int</span>[len + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="comment">//如果是I，选取最小值加入数组</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;I&#x27;</span>) &#123;</span><br><span class="line">            perm[i] = low++;</span><br><span class="line">            <span class="comment">//如果是D，选取最大值加入数组</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;D&#x27;</span>) &#123;</span><br><span class="line">            perm[i] = high--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最终两指针重合，将最后一个值填入数组</span></span><br><span class="line">    perm[len] = high;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> perm;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 944 删列造序</title>
    <url>/posts/1270248048.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="944-删列造序"><a href="#944-删列造序" class="headerlink" title="944. 删列造序"></a><a href="https://leetcode.cn/problems/delete-columns-to-make-sorted/">944. 删列造序</a></h4><p>给你由 <code>n</code> 个小写字母字符串组成的数组 <code>strs</code>，其中每个字符串长度相等。</p>
<p>这些字符串可以每个一行，排成一个网格。例如，<code>strs = [&quot;abc&quot;, &quot;bce&quot;, &quot;cae&quot;]</code> 可以排列为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abc</span><br><span class="line">bce</span><br><span class="line">cae</span><br></pre></td></tr></table></figure>

<p>你需要找出并删除 <strong>不是按字典序升序排列的</strong> 列。在上面的例子（下标从 0 开始）中，列 0（<code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, <code>&#39;c&#39;</code>）和列 2（<code>&#39;c&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;e&#39;</code>）都是按升序排列的，而列 1（<code>&#39;b&#39;</code>, <code>&#39;c&#39;</code>, <code>&#39;a&#39;</code>）不是，所以要删除列 1 。</p>
<p>返回你需要删除的列数。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：strs = [&quot;cba&quot;,&quot;daf&quot;,&quot;ghi&quot;]</span><br><span class="line">输出：1</span><br><span class="line">解释：网格示意如下：</span><br><span class="line">  cba</span><br><span class="line">  daf</span><br><span class="line">  ghi</span><br><span class="line">列 0 和列 2 按升序排列，但列 1 不是，所以只需要删除列 1 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：strs = [&quot;a&quot;,&quot;b&quot;]</span><br><span class="line">输出：0</span><br><span class="line">解释：网格示意如下：</span><br><span class="line">  a</span><br><span class="line">  b</span><br><span class="line">只有列 0 这一列，且已经按升序排列，所以不用删除任何列。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：strs = [&quot;zyx&quot;,&quot;wvu&quot;,&quot;tsr&quot;]</span><br><span class="line">输出：3</span><br><span class="line">解释：网格示意如下：</span><br><span class="line">  zyx</span><br><span class="line">  wvu</span><br><span class="line">  tsr</span><br><span class="line">所有 3 列都是非升序排列的，所以都要删除。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>n == strs.length</code></li>
<li><code>1 &lt;= n &lt;= 100</code></li>
<li><code>1 &lt;= strs[i].length &lt;= 1000</code></li>
<li><code>strs[i]</code> 由小写英文字母组成</li>
</ul>
<h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p>简单模拟题</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDeletionSize</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">    <span class="comment">//行的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> strs.length;</span><br><span class="line">    <span class="comment">//列的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> strs[<span class="number">0</span>].length();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; col; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; row; j++) &#123;</span><br><span class="line">            <span class="comment">//判断当前列元素之间的大小关系</span></span><br><span class="line">            <span class="keyword">if</span> (strs[j].charAt(i) &lt; strs[j - <span class="number">1</span>].charAt(i)) &#123;</span><br><span class="line">                <span class="comment">//更新删除的列数</span></span><br><span class="line">                res++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(M*N)</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 978 最长湍流子数组</title>
    <url>/posts/2088858698.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="978-最长湍流子数组"><a href="#978-最长湍流子数组" class="headerlink" title="978. 最长湍流子数组"></a><a href="https://leetcode-cn.com/problems/longest-turbulent-subarray/">978. 最长湍流子数组</a></h4><p>给定一个整数数组 <code>arr</code> ，返回 <code>arr</code> 的 <em>最大湍流子数组的<strong>长度</strong></em> 。</p>
<p>如果比较符号在子数组中的每个相邻元素对之间翻转，则该子数组是 <strong>湍流子数组</strong> 。</p>
<p>更正式地来说，当 <code>arr</code> 的子数组 <code>A[i], A[i+1], ..., A[j]</code> 满足仅满足下列条件时，我们称其为<em>湍流子数组</em>：</p>
<ul>
<li>若 i &lt;&#x3D; k &lt; j ：<ul>
<li>当 <code>k</code> 为奇数时， <code>A[k] &gt; A[k+1]</code>，且</li>
<li>当 <code>k</code> 为偶数时，<code>A[k] &lt; A[k+1]</code>；</li>
</ul>
</li>
<li>或 若 i &lt;&#x3D; k &lt; j ：<ul>
<li>当 <code>k</code> 为偶数时，<code>A[k] &gt; A[k+1]</code> ，且</li>
<li>当 <code>k</code> 为奇数时， <code>A[k] &lt; A[k+1]</code>。</li>
</ul>
</li>
</ul>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [9,4,2,10,7,8,8,1,9]</span><br><span class="line">输出：5</span><br><span class="line">解释：arr[1] &gt; arr[2] &lt; arr[3] &gt; arr[4] &lt; arr[5]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [4,8,12,16]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [100]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= arr.length &lt;= 4 * 104</code></li>
<li><code>0 &lt;= arr[i] &lt;= 109</code></li>
</ul>
<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p><strong>湍流子数组的形成条件是两种相反的状态，所以需要两个dp数组来分别表示两种状态。</strong></p>
<ol>
<li>确定dp数组及其下标含义：<ol>
<li>定义<code>up[i]</code>表示以位置i结尾，并且<code>arr[i-1] &lt; arr[i]</code>的最长湍流子数组的长度</li>
<li>定义<code>down[i]</code>来表示以位置i结尾，，并且<code>arr[i-1] &gt;arr[i]</code>的最长湍流子数组的长度</li>
</ol>
</li>
<li>确定递推方程：<ol>
<li>当<code>arr[i - 1] &lt; arr[i]</code>，根据下降湍流子数组的长度更新上升数组，<code>up[i] = down[i -1] + 1</code>，并记录最大值</li>
<li>当<code>arr[i - 1] &gt; arr[i]</code>，根据上升湍流子数组的长度更新上升数组，<code>down[i] = up[i -1] + 1</code>，并记录最大值</li>
</ol>
</li>
<li>dp数组如何初始化：<ol>
<li>因为每个数字本身就是一个最小的湍流子数组，所以<code>up[i]</code>和<code>down[i]</code>初始化都为1</li>
</ol>
</li>
</ol>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxTurbulenceSize</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> arr.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于记录最长湍流子数组长度</span></span><br><span class="line">    <span class="type">int</span>[] up = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">    <span class="type">int</span>[] down = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//填充值</span></span><br><span class="line">    Arrays.fill(up, <span class="number">1</span>);</span><br><span class="line">    Arrays.fill(down, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结果值，因为每个数字都可以看做为一个最小的湍流子数组，所以初始值为1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="comment">//上升</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; arr[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="comment">//更新上升数组并比较子数组最长长度</span></span><br><span class="line">            up[i] = down[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            ans = Math.max(ans, up[i]);</span><br><span class="line">            <span class="comment">//下降</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &lt; arr[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="comment">//更新下降数组并比较子数组最长长度</span></span><br><span class="line">            down[i] = up[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            ans = Math.max(ans, down[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，只需要遍历一次数组。</li>
<li>空间复杂度：O(N)，使用到两个额外数组。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 94 二叉树的中序遍历</title>
    <url>/posts/914448632.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94. 二叉树的中序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历</a></h4><p>给定一个二叉树的根节点 <code>root</code> ，返回 <em>它的 <strong>中序</strong> 遍历</em> 。</p>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,null,2,3]</span><br><span class="line">输出：[1,3,2]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点数目在范围 <code>[0, 100]</code> 内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p><strong>进阶:</strong> 递归算法很简单，你可以通过迭代算法完成吗？</p>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="递归写法："><a href="#递归写法：" class="headerlink" title="递归写法："></a>递归写法：</h3><p>原理同前序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    inorder(result,root);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inorder</span><span class="params">(List&lt;Integer&gt; result,TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//左</span></span><br><span class="line">    inorder(result,root.left);</span><br><span class="line">    <span class="comment">//根</span></span><br><span class="line">    result.add(root.val);</span><br><span class="line">    <span class="comment">//右</span></span><br><span class="line">    inorder(result,root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="迭代写法："><a href="#迭代写法：" class="headerlink" title="迭代写法："></a>迭代写法：</h3><p>前序遍历的顺序是根左右，先访问的是根节点，要处理的也是根节点，<strong>处理顺序和访问顺序是一致的。</strong></p>
<p>但是中序遍历的顺序是左根右，一层一层向下访问，直到到达树的最底部然后再开始处理节点，<strong>处理顺序和访问顺序是不一致的。</strong></p>
<p>所以需要借助指针来帮助访问节点，借助栈来帮助处理节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//辅助指针</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//找到最左侧节点，有可能是含有右子树的左节点</span></span><br><span class="line">        <span class="keyword">if</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur = stack.pop();</span><br><span class="line">            <span class="comment">//将当前值存入结果数组，左</span></span><br><span class="line">            result.add(cur.val);</span><br><span class="line">            <span class="comment">//当前节点的右节点入栈，</span></span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 删除并获得点数</title>
    <url>/posts/2723465510.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="740-删除并获得点数"><a href="#740-删除并获得点数" class="headerlink" title="740. 删除并获得点数"></a><a href="https://leetcode-cn.com/problems/delete-and-earn/">740. 删除并获得点数</a></h4><p>给你一个整数数组 <code>nums</code> ，你可以对它进行一些操作。</p>
<p>每次操作中，选择任意一个 <code>nums[i]</code> ，删除它并获得 <code>nums[i]</code> 的点数。之后，你必须删除 <strong>所有</strong> 等于 <code>nums[i] - 1</code> 和 <code>nums[i] + 1</code> 的元素。</p>
<p>开始你拥有 <code>0</code> 个点数。返回你能通过这些操作获得的最大点数。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,4,2]</span><br><span class="line">输出：6</span><br><span class="line">解释：</span><br><span class="line">删除 4 获得 4 个点数，因此 3 也被删除。</span><br><span class="line">之后，删除 2 获得 2 个点数。总共获得 6 个点数。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,2,3,3,3,4]</span><br><span class="line">输出：9</span><br><span class="line">解释：</span><br><span class="line">删除 3 获得 3 个点数，接着要删除两个 2 和 4 。</span><br><span class="line">之后，再次删除 3 获得 3 个点数，再次删除 3 获得 3 个点数。</span><br><span class="line">总共获得 9 个点数。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 2 * 104</code></li>
<li><code>1 &lt;= nums[i] &lt;= 104</code></li>
</ul>
<h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p>类似于“打家劫舍“升级版，提升了报警系统，在偷金额为3的房间的时候，金额为2和金额为4的房间会报警，但是其余金额为3的房间继续偷就不会触发报警系统。</p>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteAndEarn</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 每个位置上的数字都是在前两种结果的基础上进行选择的：</span></span><br><span class="line"><span class="comment">     *       1.如果不删除当前i位置元素，则得到的是前一个位置上元素的最优解。</span></span><br><span class="line"><span class="comment">     *       2.如果删除当前i位置元素，则会得到i -2 位置上的最优结果加上当前值乘以当前值的个数。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 注：偷了第i位置上的元素之后，再偷这个元素就不会有问题。</span></span><br><span class="line"><span class="comment">     * 每次取以上两个结果中最大的值进行记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 打家劫舍升级版</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        max = Math.max(max, nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造一个记录数组元素出现次数的辅助数组</span></span><br><span class="line">    <span class="comment">//  nums:  2 , 4, 3, 2, 3, 3</span></span><br><span class="line">    <span class="comment">//  all:   0,  0, 2, 3, 1</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] all = <span class="keyword">new</span> <span class="title class_">int</span>[max + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> item : nums) &#123;</span><br><span class="line">        all[item]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//辅助dp数组</span></span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[max + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//边界条件</span></span><br><span class="line">    dp[<span class="number">1</span>] = all[<span class="number">1</span>] * <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">2</span>] = Math.max(dp[<span class="number">1</span>], all[<span class="number">2</span>] * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= max; i++) &#123;</span><br><span class="line">        dp[i] = Math.max(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + all[i] * i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[max];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(N)，需要遍历数组。</li>
<li>空间复杂度：O(N)，需要两个辅助数组。</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Leecode 98 验证二叉搜索树</title>
    <url>/posts/1385982031.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98. 验证二叉搜索树"></a><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/">98. 验证二叉搜索树</a></h4><p>给你一个二叉树的根节点 <code>root</code> ，判断其是否是一个有效的二叉搜索树。</p>
<p><strong>有效</strong> 二叉搜索树定义如下：</p>
<ul>
<li>节点的左子树只包含 <strong>小于</strong> 当前节点的数。</li>
<li>节点的右子树只包含 <strong>大于</strong> 当前节点的数。</li>
<li>所有左子树和右子树自身必须也是二叉搜索树。</li>
</ul>
<p><strong>示例 1：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [2,1,3]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [5,1,4,null,null,3,6]</span><br><span class="line">输出：false</span><br><span class="line">解释：根节点的值是 5 ，但是右子节点的值是 4 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点数目范围在<code>[1, 104]</code> 内</li>
<li><code>-231 &lt;= Node.val &lt;= 231 - 1</code></li>
</ul>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h4 id="写法一，借助数组递归："><a href="#写法一，借助数组递归：" class="headerlink" title="写法一，借助数组递归："></a>写法一，借助数组递归：</h4><p>二叉搜索树的中序遍历是递增序列，所以只要对该二叉树进行中序遍历，然后检查其是否有序即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存储遍历后结点值的数组</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    traveral(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (list.get(i) &lt;= list.get(i - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">traveral</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    traveral(root.left);</span><br><span class="line">    list.add(root.val);</span><br><span class="line">    traveral(root.right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="写法二，自身递归："><a href="#写法二，自身递归：" class="headerlink" title="写法二，自身递归："></a>写法二，自身递归：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存储中序遍历中前一个结点的值</span></span><br><span class="line"><span class="comment">//因为题目中Integer.MIN_VALUE在结点取值范围内，所以需要用Long</span></span><br><span class="line"><span class="type">long</span> <span class="variable">pre</span> <span class="operator">=</span> Long.MIN_VALUE;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//空树也是二叉搜索树</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//左</span></span><br><span class="line">    <span class="keyword">if</span> (!isValidBST(root.left))&#123;</span><br><span class="line">        <span class="comment">//如果左子树不是二叉搜索树，直接返回false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//中</span></span><br><span class="line">    <span class="comment">//判断当前节点值是否大于前一节点值</span></span><br><span class="line">    <span class="comment">//二叉搜索树中不能有值相同的节点，所以直接用&lt;=进行判断不满足条件的情况</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt;= pre)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新前一节点值</span></span><br><span class="line">    pre = root.val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//右</span></span><br><span class="line">    <span class="keyword">return</span> isValidBST(root.right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Leecode 面试01.05 一次编辑</title>
    <url>/posts/840916945.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="面试题-01-05-一次编辑"><a href="#面试题-01-05-一次编辑" class="headerlink" title="面试题 01.05. 一次编辑"></a><a href="https://leetcode.cn/problems/one-away-lcci/">面试题 01.05. 一次编辑</a></h4><p>字符串有三种编辑操作:插入一个字符、删除一个字符或者替换一个字符。 给定两个字符串，编写一个函数判定它们是否只需要一次(或者零次)编辑。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">first = &quot;pale&quot;</span><br><span class="line">second = &quot;ple&quot;</span><br><span class="line">输出: True</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">first = &quot;pales&quot;</span><br><span class="line">second = &quot;pal&quot;</span><br><span class="line">输出: False</span><br></pre></td></tr></table></figure>

<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>模拟：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">oneEditAway</span><span class="params">(String first, String second)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 分情况讨论：</span></span><br><span class="line"><span class="comment">     * first长度为m，second长度为n</span></span><br><span class="line"><span class="comment">     *           1.插入了一个字符，n - m = 1,使用双指针进行比较</span></span><br><span class="line"><span class="comment">     *           2.删除了一个字符，m - n = 1，使用双指针进行比较</span></span><br><span class="line"><span class="comment">     *           3.替换了一个字符，m = n，遍历两字符串，看逐个字符是否相同即可</span></span><br><span class="line"><span class="comment">     *           4.不符合一次编辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> first.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> second.length();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//情况一：插入字符</span></span><br><span class="line">    <span class="keyword">if</span> (n - m == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> inOrDel(first, second);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m - n == <span class="number">1</span>) &#123;<span class="comment">//情况二：删除字符</span></span><br><span class="line">        <span class="keyword">return</span> inOrDel(second, first);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m == n) &#123;<span class="comment">//情况三：替换字符,存在两字符串长度为1的情况，所以需要来记录字符不同的个数来判断</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first.charAt(i) != second.charAt(i)) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//情况四：不符合一次编辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">inOrDel</span><span class="params">(String shorter, String longer)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> shorter.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> longer.length();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> <span class="number">0</span>, index2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index1 &lt; m &amp;&amp; index2 &lt; n) &#123;</span><br><span class="line">        <span class="comment">//如果当前字符不相同，则只移动长字符串的指针</span></span><br><span class="line">        <span class="keyword">if</span> (shorter.charAt(index1) == longer.charAt(index2)) &#123;</span><br><span class="line">            index1++;</span><br><span class="line">        &#125;</span><br><span class="line">        index2++;</span><br><span class="line">        <span class="comment">//两字符串中有超过一个字符不相同了，不满足条件</span></span><br><span class="line">        <span class="keyword">if</span> (index2 - index1 &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(m+n)</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>Linux克隆GitHub仓库被拒绝问题解决</title>
    <url>/posts/2445744023.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>今天使用Linux克隆github仓库的时候遇到了这个问题</p>
<p><code>fatal: unable to access &#39;https://github.com/cyh245689173/demo.git/&#39;: Failed connect to github.com:443; Connection refused</code></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810093835264.png" alt="image-20220810093835264"></p>
<p>解决了一圈，又是设置通信缓存，又是设置代理，都没有解决</p>
<p>最后使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping github.com</span><br></pre></td></tr></table></figure>

<p>发现连接不上github，可能是本地DNS无法解析导致的。</p>
<h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>首先查执行一下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat \etc\hosts</span><br></pre></td></tr></table></figure>

<p>查看文件中有没有github.com的解析</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810094343238.png" alt="image-20220810094343238"></p>
<p>发现没有，使用vim编辑器在hosts文件末尾添加以下内容并保存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 192.30.255.112  github.com git </span><br><span class="line">185.31.16.184 github.global.ssl.fastly.net  </span><br></pre></td></tr></table></figure>

<p>重新克隆，发现就可以了。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810094514379.png" alt="image-20220810094514379"></p>
]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
  </entry>
  <entry>
    <title>Linux常用命令小结</title>
    <url>/posts/1193251745.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="1、Linux命令初体验"><a href="#1、Linux命令初体验" class="headerlink" title="1、Linux命令初体验"></a>1、Linux命令初体验</h1><h2 id="1-1-常用命令演示"><a href="#1-1-常用命令演示" class="headerlink" title="1.1 常用命令演示"></a>1.1 常用命令演示</h2><p>Linux主要包含以下几个常用指令： </p>
<table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>对应英文</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>ls [目录名]</td>
<td>list</td>
<td>查看当前目录下的内容</td>
</tr>
<tr>
<td>2</td>
<td>pwd</td>
<td>print work directory</td>
<td>查看当前所在目录</td>
</tr>
<tr>
<td>3</td>
<td>cd [目录名]</td>
<td>change directory</td>
<td>切换目录</td>
</tr>
<tr>
<td>4</td>
<td>touch [文件名]</td>
<td>touch</td>
<td>如果文件不存在,创建文件</td>
</tr>
<tr>
<td>5</td>
<td>mkdir [目录名]</td>
<td>make directory</td>
<td>创建目录</td>
</tr>
<tr>
<td>6</td>
<td>rm [文件名]</td>
<td>remove</td>
<td>删除指定文件</td>
</tr>
</tbody></table>
<h3 id="指令演示"><a href="#指令演示" class="headerlink" title="指令演示"></a>指令演示</h3><p><strong>1、ls</strong> </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808191735454.png" alt="image-20220808191735454"></p>
<p>指令解读: </p>
<p>​	ls 	查看当前目录下的内容(文件及目录)</p>
<p>​	ls &#x2F;   查看指定目录(&#x2F;)下的内容</p>
<p><strong>2、pwd</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808191752381.png" alt="image-20220808191752381"></p>
<blockquote>
<p>指令解读: </p>
<p>​	pwd	查看当前所在目录</p>
</blockquote>
<p><strong>3、cd</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808191930247.png" alt="image-20220808191930247"></p>
<blockquote>
<p>指令解读: </p>
<p>​	cd  &#x2F;		切换到根目录</p>
<p>​	cd  &#x2F;root	切换到&#x2F;root目录</p>
</blockquote>
<p><strong>4、touch</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808191904946.png" alt="image-20220808191904946"></p>
<blockquote>
<p>指令解读: </p>
<p>​	touch  1.txt    创建文件1.txt</p>
<p>​	touch  2.txt 3.txt 4.txt   一次性创建文件2.txt,3.txt,3.txt</p>
</blockquote>
<p><strong>5、mkdir</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808192057663.png" alt="image-20220808192057663"></p>
<blockquote>
<p>指令解读: </p>
<p>​	mkdir 01 	创建文件夹01 </p>
</blockquote>
<p><strong>6、rm</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808192212005.png" alt="image-20220808192212005"></p>
<blockquote>
<p>指令解读: </p>
<p>​	rm  4.txt	删除文件 (删除文件时,需要确认,输入y, 代表确定)</p>
</blockquote>
<h3 id="命令使用小技巧"><a href="#命令使用小技巧" class="headerlink" title="命令使用小技巧"></a>命令使用小技巧</h3><p>在我们使用Linux系统命令时，可以使用以下几个技巧： </p>
<ol>
<li><p>Tab键自动补全</p>
</li>
<li><p>连续两次Tab键，给出操作提示</p>
</li>
<li><p>使用上下箭头快速调出曾经使用过的命令</p>
</li>
<li><p>使用clear命令或者Ctrl+l快捷键实现清屏</p>
</li>
</ol>
<h3 id="Linux命令格式"><a href="#Linux命令格式" class="headerlink" title="Linux命令格式"></a>Linux命令格式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command [-options] [parameter]</span><br><span class="line">	</span><br><span class="line">说明: </span><br><span class="line">	command: 	 命令名</span><br><span class="line">	[-options]:  选项，可用来对命令进行控制，也可以省略</span><br><span class="line">	[parameter]: 传给命令的参数，可以是零个、一个或者多个</span><br><span class="line">	</span><br><span class="line">注意: </span><br><span class="line">	[] 	 代表可选</span><br><span class="line">	命令名、选项、参数之间有空格进行分隔</span><br></pre></td></tr></table></figure>

<p><strong>示例：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808193036969.png" alt="image-20220808193036969"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808193449458.png" alt="image-20220808193449458"></p>
<h1 id="2、文件目录操作命令"><a href="#2、文件目录操作命令" class="headerlink" title="2、文件目录操作命令"></a>2、文件目录操作命令</h1><h4 id="1、-ls"><a href="#1、-ls" class="headerlink" title="1、 ls"></a>1、 ls</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 显示指定目录下的内容</span><br><span class="line">语法: ls [-al] [dir]</span><br><span class="line">说明: </span><br><span class="line">	-a 显示所有文件及目录 (. 开头的隐藏文件也会列出)</span><br><span class="line">	-l 除文件名称外，同时将文件型态(d表示目录，-表示文件)、权限、拥有者、文件大小等信息详细列出</span><br><span class="line">	</span><br><span class="line">注意: </span><br><span class="line">	由于我们使用ls命令时经常需要加入-l选项，所以Linux为ls -l命令提供了一种简写方式，即ll</span><br><span class="line">	</span><br><span class="line">常见用法: </span><br><span class="line">	ls -al 	查看当前目录的所有文件及目录详细信息</span><br><span class="line">	ls -al /etc   查看/etc目录下所有文件及目录详细信息</span><br><span class="line">	ll  	查看当前目录文件及目录的详细信息 </span><br></pre></td></tr></table></figure>

<p><strong>示例:</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808194205997.png" alt="image-20220808194205997"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808194242037.png" alt="image-20220808194242037"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808194309473.png" alt="image-20220808194309473"></p>
<h4 id="2、cd"><a href="#2、cd" class="headerlink" title="2、cd"></a>2、cd</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 用于切换当前工作目录，即进入指定目录</span><br><span class="line">语法: cd [dirName]</span><br><span class="line">	</span><br><span class="line">特殊说明: </span><br><span class="line">	~	表示用户的home目录</span><br><span class="line">	. 	表示目前所在的目录</span><br><span class="line">	.. 	表示目前目录位置的上级目录</span><br><span class="line">	</span><br><span class="line">举例: </span><br><span class="line">	cd 	..		切换到当前目录的上级目录</span><br><span class="line">	cd 	~		切换到用户的home目录</span><br><span class="line">	cd 	/usr/local	切换到/usr/local目录</span><br></pre></td></tr></table></figure>

<blockquote>
<p>备注: </p>
<p>​	用户的home目录 </p>
<p>​	root用户	&#x2F;root</p>
<p>​	其他用户	&#x2F;home&#x2F;xxx</p>
</blockquote>
<p><strong>示例：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808194511923.png" alt="image-20220808194511923"></p>
<h4 id="3、cat"><a href="#3、cat" class="headerlink" title="3、cat"></a>3、cat</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 用于显示文件内容</span><br><span class="line">语法: cat [-n] fileName</span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line">	-n: 由1开始对所有输出的行数编号</span><br><span class="line"></span><br><span class="line">举例:</span><br><span class="line">	cat /etc/profile		查看/etc目录下的profile文件内容</span><br></pre></td></tr></table></figure>



<p><strong>示例:</strong> </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808194705417.png" alt="image-20220808194705417"></p>
<p>cat -n &#x2F;etc&#x2F;profile，每一行前面就加上了编号</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808194746567.png" alt="image-20220808194746567"></p>
<p>cat 指令会一次性查看文件的所有内容，如果文件内容比较多，这个时候查看起来就不是很方便了，这个时候我们可以通过一个新的指令more。</p>
<h4 id="4、more"><a href="#4、more" class="headerlink" title="4、more"></a>4、more</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 以分页的形式显示文件内容</span><br><span class="line">语法: more fileName</span><br><span class="line"></span><br><span class="line">操作说明:</span><br><span class="line">    回车键 	向下滚动一行</span><br><span class="line">    空格键 	向下滚动一屏</span><br><span class="line">    b 		返回上一屏</span><br><span class="line">    q或者Ctrl+C	退出more</span><br><span class="line">	</span><br><span class="line">举例：</span><br><span class="line">	more /etc/profile		以分页方式显示/etc目录下的profile文件内容</span><br></pre></td></tr></table></figure>



<p><strong>示例：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808195019010.png" alt="image-20220808195019010"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808195029006.png" alt="image-20220808195029006"></p>
<p>当我们在查看一些比较大的文件时，我们可能需要经常查询文件尾部的数据信息，那这个时候如果文件很大，我们要一直向下翻页，直到最后一页，去看最新添加的数据，这种方式就比较繁琐了，此时，我们可以借助于tail指令。</p>
<h4 id="5、tail"><a href="#5、tail" class="headerlink" title="5、tail"></a>5、tail</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 查看文件末尾的内容</span><br><span class="line">语法: tail [-f] fileName</span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line">	-f : 动态读取文件末尾内容并显示，通常用于日志文件的内容输出</span><br><span class="line">	</span><br><span class="line">举例: </span><br><span class="line">tail /etc/profile		显示/etc目录下的profile文件末尾10行的内容</span><br><span class="line">tail -20 /etc/profile	显示/etc目录下的profile文件末尾20行的内容</span><br><span class="line">tail -f /itcast/my.log	动态读取/itcast目录下的my.log文件末尾内容并显示</span><br></pre></td></tr></table></figure>



<p><strong>示例：</strong></p>
<p>默认查看文件尾部10行数据</p>
<p><img src="C:/Users/%E9%99%88%E7%8E%89%E7%9A%93/AppData/Roaming/Typora/typora-user-images/image-20220808195619165.png" alt="image-20220808195619165"></p>
<p>最后两行</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808195206932.png" alt="image-20220808195206932"></p>
<p>动态读取文件尾部的数据</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808202645939.png" alt="image-20220808202645939"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808202705095.png" alt="image-20220808202705095"></p>
<p>在窗口1中执行指令 <code>tail -f 1.txt</code> 动态查看文件尾部的数据。然后在顶部的标签中右键选择 “复制标签”，打开新的窗口2 , 此时再新打开的窗口2中执行指令 <code>echo 1 &gt;&gt; 1.txt</code> , 往1.txt文件尾部追加内容，然后我们就可以在窗口1中看到最新的文件尾部的数据。</p>
<p>如果我们不想查看文件尾部的数据了，可以直接使用快捷键 Ctrl+C ， 结束当前进程。</p>
<h4 id="6、mkdir"><a href="#6、mkdir" class="headerlink" title="6、mkdir"></a>6、mkdir</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 创建目录</span><br><span class="line">语法: mkdir [-p] dirName</span><br><span class="line"></span><br><span class="line">说明: </span><br><span class="line">	-p: 确保目录名称存在，不存在的就创建一个。通过此选项，可以实现多层目录同时创建</span><br><span class="line"></span><br><span class="line">举例: </span><br><span class="line">    mkdir itcast  在当前目录下，建立一个名为itcast的子目录</span><br><span class="line">    mkdir -p itcast/test   在工作目录下的itcast目录中建立一个名为test的子目录，若itcast目录不存在，则建立一个</span><br></pre></td></tr></table></figure>

<p><strong>示例:</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808203201830.png" alt="image-20220808203201830"></p>
<h4 id="7、-rmdir"><a href="#7、-rmdir" class="headerlink" title="7、 rmdir"></a>7、 rmdir</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 删除空目录</span><br><span class="line">语法: rmdir [-p] dirName</span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line">	-p: 当子目录被删除后使父目录为空目录的话，则一并删除</span><br><span class="line"></span><br><span class="line">举例:</span><br><span class="line">    rmdir itcast   删除名为itcast的空目录</span><br><span class="line">    rmdir -p itcast/test   删除itcast目录中名为test的子目录，若test目录删除后itcast目录变为空目录，则也被删除</span><br><span class="line">    rmdir itcast*   删除名称以itcast开始的空目录</span><br></pre></td></tr></table></figure>

<p><strong>示例:</strong> </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808203530008.png" alt="image-20220808203530008"></p>
<h4 id="8、rm"><a href="#8、rm" class="headerlink" title="8、rm"></a>8、rm</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 删除文件或者目录</span><br><span class="line">语法: rm [-rf] name</span><br><span class="line"></span><br><span class="line">说明: </span><br><span class="line">    -r: 将目录及目录中所有文件（目录）逐一删除，即递归删除</span><br><span class="line">    -f: 无需确认，直接删除</span><br><span class="line">	</span><br><span class="line">举例: </span><br><span class="line">    rm -r itcast/     删除名为itcast的目录和目录中所有文件，删除前需确认</span><br><span class="line">    rm -rf itcast/    无需确认，直接删除名为itcast的目录和目录中所有文件</span><br><span class="line">    rm -f hello.txt   无需确认，直接删除hello.txt文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>示例:</strong> </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808203941220.png" alt="image-20220808203941220"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808204021728.png" alt="image-20220808204021728"></p>
<p>&#x3D;&#x3D;注意: 对于 rm -rf xxx 这样的指令，在执行的时候，一定要慎重，确认无误后再进行删除，避免误删。&#x3D;&#x3D;</p>
<h1 id="3、-拷贝移动命令"><a href="#3、-拷贝移动命令" class="headerlink" title="3、 拷贝移动命令"></a>3、 拷贝移动命令</h1><h4 id="1、-cp"><a href="#1、-cp" class="headerlink" title="1、 cp"></a>1、 cp</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 用于复制文件或目录</span><br><span class="line">语法: cp [-r] source dest</span><br><span class="line"></span><br><span class="line">说明: </span><br><span class="line">	-r: 如果复制的是目录需要使用此选项，此时将复制该目录下所有的子目录和文件</span><br><span class="line"></span><br><span class="line">举例: </span><br><span class="line">    cp hello.txt itcast/            将hello.txt复制到itcast目录中</span><br><span class="line">    cp hello.txt ./hi.txt           将hello.txt复制到当前目录，并改名为hi.txt</span><br><span class="line">    cp -r itcast/ ./itheima/    	将itcast目录和目录下所有文件复制到itheima目录下</span><br><span class="line">    cp -r itcast/* ./itheima/ 	 	将itcast目录下所有文件复制到itheima目录下</span><br></pre></td></tr></table></figure>

<p><strong>示例:</strong> </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808204233101.png" alt="image-20220808204233101"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808204242485.png" alt="image-20220808204242485"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808204250220.png" alt="image-20220808204250220"></p>
<p><strong>如果拷贝的内容是目录，需要加上参数 -r</strong>。 </p>
<h4 id="2、mv"><a href="#2、mv" class="headerlink" title="2、mv"></a>2、mv</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 为文件或目录改名、或将文件或目录移动到其它位置</span><br><span class="line">语法: mv source dest</span><br><span class="line"></span><br><span class="line">举例: </span><br><span class="line">    mv hello.txt hi.txt                 将hello.txt改名为hi.txt</span><br><span class="line">    mv hi.txt itheima/                  将文件hi.txt移动到itheima目录中</span><br><span class="line">    mv hi.txt itheima/hello.txt   		将hi.txt移动到itheima目录中，并改名为hello.txt</span><br><span class="line">    mv itcast/ itheima/                 如果itheima目录不存在，将itcast目录改名为itheima</span><br><span class="line">    mv itcast/ itheima/                 如果itheima目录存在，将itcast目录移动到itheima目录中</span><br></pre></td></tr></table></figure>



<p><strong>示例:</strong> </p>
<p>mv 命令既能够改名，又可以移动，具体是改名还是移动,系统会根据我们输入的参数进行判定(如果第二个参数dest是一个已存在的目录,将执行移动操作,其他情况都是改名)</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808204308814.png" alt="image-20220808204308814"></p>
<h1 id="4、-打包压缩命令"><a href="#4、-打包压缩命令" class="headerlink" title="4、 打包压缩命令"></a>4、 打包压缩命令</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 对文件进行打包、解包、压缩、解压</span><br><span class="line">语法: tar  [-zcxvf]  fileName  [files]</span><br><span class="line">    包文件后缀为.tar表示只是完成了打包，并没有压缩</span><br><span class="line">    包文件后缀为.tar.gz表示打包的同时还进行了压缩</span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line">    -z: z代表的是gzip，通过gzip命令处理文件，gzip可以对文件压缩或者解压</span><br><span class="line">    -c: c代表的是create，即创建新的包文件</span><br><span class="line">    -x: x代表的是extract，实现从包文件中还原文件</span><br><span class="line">    -v: v代表的是verbose，显示命令的执行过程</span><br><span class="line">    -f: f代表的是file，用于指定包文件的名称</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line">    打包</span><br><span class="line">        tar -cvf hello.tar ./*		  		将当前目录下所有文件打包，打包后的文件名为hello.tar</span><br><span class="line">        tar -zcvf hello.tar.gz ./*		  	将当前目录下所有文件打包并压缩，打包后的文件名为hello.tar.gz</span><br><span class="line">		</span><br><span class="line">    解包</span><br><span class="line">        tar -xvf hello.tar		  			将hello.tar文件进行解包，并将解包后的文件放在当前目录</span><br><span class="line">        tar -zxvf hello.tar.gz		  		将hello.tar.gz文件进行解压，并将解压后的文件放在当前目录</span><br><span class="line">        tar -zxvf hello.tar.gz -C /usr/local     将hello.tar.gz文件进行解压，并将解压后的文件放在/usr/local目录</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>示例:</strong> </p>
<ol>
<li><strong>打包</strong></li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808205139104.png" alt="image-20220808205139104"></p>
<ol start="2">
<li><strong>打包并压缩</strong></li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808205157828.png" alt="image-20220808205157828"></p>
<ol start="3">
<li><strong>解包</strong></li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20210811190307630.png" alt="image-20210811190307630"></p>
<ol start="4">
<li><strong>解压</strong></li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20210811190450820.png" alt="image-20210811190450820"></p>
<p>解压到指定目录,需要加上参数 -C</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20210811190626414.png" alt="image-20210811190626414"></p>
<h1 id="5、-文本编辑命令"><a href="#5、-文本编辑命令" class="headerlink" title="5、 文本编辑命令"></a>5、 文本编辑命令</h1><p>文本编辑的命令，主要包含两个: vi 和 vim，两个命令的用法类似，我们课程中主要讲解vim的使用。</p>
<h4 id="1、-vi-amp-vim介绍"><a href="#1、-vi-amp-vim介绍" class="headerlink" title="1、 vi&amp;vim介绍"></a>1、 vi&amp;vim介绍</h4><p><strong>作用:</strong> vi命令是Linux系统提供的一个文本编辑工具，可以对文件内容进行编辑，类似于Windows中的记事本</p>
<p>语法: vi fileName</p>
<p>说明: </p>
<ol>
<li>vim是从vi发展来的一个功能更加强大的文本编辑工具，编辑文件时可以对文本内容进行着色，方便我们对文件进行编辑处理，所以实际工作中vim更加常用。</li>
<li>要使用vim命令，需要我们自己完成安装。可以使用下面的命令来完成安装：<code>yum install vim</code></li>
</ol>
<h4 id="2、-vim安装"><a href="#2、-vim安装" class="headerlink" title="2、 vim安装"></a>2、 vim安装</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808210625425.png" alt="image-20220808210625425"></p>
<p>安装成功~</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808210640869.png" alt="image-20220808210640869"></p>
<h4 id="3、vim使用"><a href="#3、vim使用" class="headerlink" title="3、vim使用"></a>3、vim使用</h4><p>作用: 对文件内容进行编辑，vim其实就是一个文本编辑器<br>语法: vim fileName<br>说明:<br>    1). 在使用vim命令编辑文件时，如果指定的文件存在则直接打开此文件。如果指定的文件不存在则新建文件。<br>    2). vim在进行文本编辑时共分为三种模式，分别是 命令模式（Command mode），插入模式（Insert mode）和底行模式（Last line mode）。这三种模式之间可以相互切换。我们在使用vim时一定要注意我们当前所处的是哪种模式。</p>
<p>三种模式:<br>    - 命令模式<br>      A. 命令模式下可以查看文件内容、移动光标（上下左右箭头、gg、G）<br>      B. 通过vim命令打开文件后，默认进入命令模式<br>      C. 另外两种模式需要首先进入命令模式，才能进入彼此</p>
<pre><code>  | 命令模式指令 | 含义                              |
  | ------------ | --------------------------------- |
  | gg           | 定位到文本内容的第一行            |
  | G            | 定位到文本内容的最后一行          |
  | dd           | 删除光标所在行的数据              |
  | ndd          | 删除当前光标所在行及之后的n行数据 |
  | u            | 撤销操作                          |
  | shift+zz     | 保存并退出                        |
  | i 或 a 或 o  | 进入插入模式                      |
</code></pre>
<p>​      </p>
<ul>
<li><p>插入模式<br>A. 插入模式下可以对文件内容进行编辑<br>B. 在命令模式下按下[i,a,o]任意一个，可以进入插入模式。进入插入模式后，下方会出现【insert】字样<br>C. 在插入模式下按下ESC键，回到命令模式</p>
</li>
<li><p>底行模式<br>A. 底行模式下可以通过命令对文件内容进行查找、显示行号、退出等操作<br>B. 在命令模式下按下[:,&#x2F;]任意一个，可以进入底行模式<br>C. 通过&#x2F;方式进入底行模式后，可以对文件内容进行查找<br>D. 通过:方式进入底行模式后，可以输入wq（保存并退出）、q!（不保存退出）、set nu（显示行号）</p>
<table>
<thead>
<tr>
<th>底行模式命令</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>:wq</td>
<td>保存并退出</td>
</tr>
<tr>
<td>:q!</td>
<td>不保存退出</td>
</tr>
<tr>
<td>:set nu</td>
<td>显示行号</td>
</tr>
<tr>
<td>:set nonu</td>
<td>取消行号显示</td>
</tr>
<tr>
<td>:n</td>
<td>定位到第n行, 如 :10 就是定位到第10行</td>
</tr>
</tbody></table>
</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808202245567.png" alt="image-20220808202245567"></p>
<p><strong>示例：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808211241852.png" alt="image-20220808211241852"></p>
<h1 id="6、查找命令"><a href="#6、查找命令" class="headerlink" title="6、查找命令"></a>6、查找命令</h1><h4 id="1、-find"><a href="#1、-find" class="headerlink" title="1、 find"></a>1、 find</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 在指定目录下查找文件</span><br><span class="line">语法: find dirName -option fileName</span><br><span class="line">举例:</span><br><span class="line">    find  .  –name &quot;*.java&quot;			在当前目录及其子目录下查找.java结尾文件</span><br><span class="line">    find  /itcast  -name &quot;*.java&quot;	在/itcast目录及其子目录下查找.java结尾的文件</span><br></pre></td></tr></table></figure>

<p><strong>操作示例:</strong> </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808211301070.png" alt="image-20220808211301070"></p>
<h4 id="2、-grep"><a href="#2、-grep" class="headerlink" title="2、 grep"></a>2、 grep</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作用: 从指定文件中查找指定的文本内容</span><br><span class="line">语法: grep word fileName</span><br><span class="line">举例: </span><br><span class="line">    grep Hello HelloWorld.java	查找HelloWorld.java文件中出现的Hello字符串的位置</span><br><span class="line">    grep hello *.java			查找当前目录中所有.java结尾的文件中包含hello字符串的位置</span><br></pre></td></tr></table></figure>

<p><strong>操作示例:</strong> </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808211309511.png" alt="image-20220808211309511"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux目录结构小结</title>
    <url>/posts/2296675065.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="Linux文件及目录结构"><a href="#Linux文件及目录结构" class="headerlink" title="Linux文件及目录结构"></a>Linux文件及目录结构</h2><p><strong>Linux系统中一切皆文件。</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659249811122-856a8a45-8ec9-49df-abae-332ac8655980.png" alt="img"></p>
<p>相对于Windows而言，这种管理方式更加扁平，更加高效。</p>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul>
<li><p><strong>&#x2F;bin</strong></p>
</li>
<li><ul>
<li>Binary的缩写，这个目录中存放着最经常使用的命令。</li>
</ul>
</li>
<li><p>&#x2F;sbin</p>
</li>
<li><ul>
<li>s是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</li>
</ul>
</li>
<li><p>&#x2F;home</p>
</li>
<li><ul>
<li>存放普通用户的主目录，在Linux中每个用户都用一个自己的目录，一般该目录是以用户账号命名的。</li>
</ul>
</li>
<li><p><strong>&#x2F;root</strong></p>
</li>
<li><ul>
<li>该目录为系统管理员，也称作超级权限者的用户主目录。</li>
</ul>
</li>
<li><p>&#x2F;lib</p>
</li>
<li><ul>
<li>系统开机所需要的最基本的动态连接共享库，起作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</li>
</ul>
</li>
<li><p>&#x2F;lost+found</p>
</li>
<li><ul>
<li>这个目录一般情况下是空的，当系统非法关机后，这里就会存放一些文件。</li>
</ul>
</li>
<li><p><strong>&#x2F;etc</strong></p>
</li>
<li><ul>
<li>所有的系统管理所需要的配置文件和子目录。</li>
</ul>
</li>
<li><p><strong>&#x2F;usr</strong></p>
</li>
<li><ul>
<li>这是一个非常重要的目录，用户的所有的应用程序和文件都放在这个目录下，类似于Windows下的Program files目录。</li>
</ul>
</li>
<li><p><strong>&#x2F;boot</strong></p>
</li>
<li><ul>
<li>这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件，<strong>自己安装的东西不要放在这里。</strong></li>
</ul>
</li>
<li><p>&#x2F;proc</p>
</li>
<li><ul>
<li>这个目录是一个虚拟目录，是系统内存的映射，可以通过访问这个目录来获取系统信息。</li>
</ul>
</li>
<li><p>&#x2F;srv</p>
</li>
<li><ul>
<li>service的缩写，主要存放了一些服务启动之后需要提取的数据。</li>
</ul>
</li>
<li><p>&#x2F;sys</p>
</li>
<li><ul>
<li>这是Linux2.6内核的一个很大的变化，该目录下安装了2.6内核中新出现的一个文件系统sysfs。</li>
</ul>
</li>
<li><p>&#x2F;tmp</p>
</li>
<li><ul>
<li>这个目录用来存放一些临时文件，存储空间不足了可以清清这里的文件。</li>
</ul>
</li>
<li><p>&#x2F;dev</p>
</li>
<li><ul>
<li>类似于Windows的设备管理器，将所有的硬件用文件的形式存储。</li>
</ul>
</li>
<li><p><strong>&#x2F;media(CentOS6)</strong></p>
</li>
<li><ul>
<li>Linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后会把这些识别的设备挂载到这个目录下。</li>
<li>CentOS7迁移到了&#x2F;run&#x2F;media下</li>
</ul>
</li>
<li><p><strong>&#x2F;mnt</strong></p>
</li>
<li><ul>
<li>系统提供该目录是为了让用户临时挂载别的文件系统的，可以将外部的存储挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以查看挂载来的内容。</li>
</ul>
</li>
<li><p><strong>&#x2F;opt</strong></p>
</li>
<li><ul>
<li>这是给主机额外安装软件所摆放的目录。比如安装一个mysql数据库就可以放在这个目录下，默认是空的。</li>
</ul>
</li>
<li><p><strong>&#x2F;var</strong></p>
</li>
<li><ul>
<li>这个目录存放着在不断扩充着的东西，习惯上把一些经常被修改的目录放在这个目录下，包括各种日志文件。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux视频推荐-老韩</title>
    <url>/posts/2586368063.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script>]]></content>
      <categories>
        <category>学习视频推荐</category>
      </categories>
  </entry>
  <entry>
    <title>MybatisPlus学习笔记</title>
    <url>/posts/216962441.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script>]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL主从复制时Slave_IO_Running为No的问题与解决</title>
    <url>/posts/523593886.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>今天在虚拟机上配置MySQL数据库主从复制的时候遇到了Slave_IO_Running为No的问题，是因为克隆服务器导致了MySQL的uuid重复了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811133527004.png" alt="image-20220811133527004"></p>
<h3 id="解决方式："><a href="#解决方式：" class="headerlink" title="解决方式："></a>解决方式：</h3><h4 id="1-首先检查两台服务器的uuid是否相同"><a href="#1-首先检查两台服务器的uuid是否相同" class="headerlink" title="1.首先检查两台服务器的uuid是否相同"></a>1.首先检查两台服务器的uuid是否相同</h4><p>执行一下命令，查看当前服务器mysql的uuid</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /var/lib/mysql/auto.cnf</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811133946999.png" alt="image-20220811133946999"></p>
<h4 id="2-重新生成从库uuid"><a href="#2-重新生成从库uuid" class="headerlink" title="2.重新生成从库uuid"></a>2.重新生成从库uuid</h4><p>执行以下命令：</p>
<ul>
<li>停止mysql服务</li>
</ul>
<p><code>systemctl stop mysqld.service</code></p>
<ul>
<li>删除从库的auto.cnf文件</li>
</ul>
<p><code>mv /var/lib/mysql/auto.cnf /var/lib/mysql/auto.cnf.bak</code></p>
<ul>
<li>重启mysql服务</li>
</ul>
<p><code>systemctl start mysqld.service</code></p>
<h4 id="3-重新查看从库uuid"><a href="#3-重新查看从库uuid" class="headerlink" title="3.重新查看从库uuid"></a>3.重新查看从库uuid</h4><p>已经重新生成uuid</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811134536177.png" alt="image-20220811134536177"></p>
<h4 id="4-重新查看数据库状态"><a href="#4-重新查看数据库状态" class="headerlink" title="4.重新查看数据库状态"></a>4.重新查看数据库状态</h4><p>Slave_IO_Running以成功变为Yes</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811134701636.png" alt="image-20220811134701636"></p>
<p>问题解决~</p>
<p>参考自：<a href="https://blog.csdn.net/qq_41256238/article/details/106944541">配置数据库主从复制时Slave_IO_Running为No的问题与解决</a></p>
]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
  </entry>
  <entry>
    <title>Linux软件安装&amp;项目部署</title>
    <url>/posts/4078519207.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="一、Linux软件安装方式"><a href="#一、Linux软件安装方式" class="headerlink" title="一、Linux软件安装方式"></a>一、Linux软件安装方式</h1><h3 id="1-1-软件安装方式"><a href="#1-1-软件安装方式" class="headerlink" title="1.1 软件安装方式"></a>1.1 软件安装方式</h3><p>在Linux系统中，安装软件的方式主要有四种，这四种安装方式的特点如下：</p>
<table>
<thead>
<tr>
<th>安装方式</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>二进制发布包安装</td>
<td>软件已经针对具体平台编译打包发布，只要解压，修改配置即可</td>
</tr>
<tr>
<td>rpm安装</td>
<td>软件已经按照redhat的包管理规范进行打包，使用rpm命令进行安装，&#x3D;&#x3D;不能自行解决库依赖问题&#x3D;&#x3D;</td>
</tr>
<tr>
<td>yum安装</td>
<td>一种在线软件安装方式，本质上还是rpm安装，自动下载安装包并安装，安装过程中自动解决库依赖问题(安装过程需要联网)</td>
</tr>
<tr>
<td>源码编译安装</td>
<td>软件以源码工程的形式发布，需要自己编译打包</td>
</tr>
</tbody></table>
<h3 id="1-2-安装JDK"><a href="#1-2-安装JDK" class="headerlink" title="1.2 安装JDK"></a>1.2 安装JDK</h3><h4 id="1-上传安装包"><a href="#1-上传安装包" class="headerlink" title="1. 上传安装包"></a><strong>1. 上传安装包</strong></h4><p>使用FinalShell自带的上传工具将jdk的二进制发布包上传到Linux</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809194738668.png" alt="image-20220809194738668"></p>
<p>由于上述在进行文件上传时，选择的上传目录为根目录 &#x2F;，上传完毕后，我们执行指令 cd &#x2F; 切换到根目录下，可以看到安装包已经上传成功了。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809194748923.png" alt="image-20220809194748923"></p>
<h4 id="2-解压安装包"><a href="#2-解压安装包" class="headerlink" title="2.解压安装包"></a>2.解压安装包</h4><p>执行如下指令，将上传上来的压缩包进行解压，并通过-C参数指定解压文件存放目录为 &#x2F;usr&#x2F;local。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809195212651.png" alt="image-20220809195212651"></p>
<p>来到&#x2F;usr&#x2F;local，查看文件，解压成功。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809195019071.png" alt="image-20220809195019071"></p>
<h4 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3.配置环境变量"></a>3.配置环境变量</h4><p>环境变量要在&#x2F;etc&#x2F;profile文件中进行配置，使用vim命令修改&#x2F;etc&#x2F;profile文件</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809195653433.png" alt="image-20220809195653433">在文件末尾加入如下配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=/usr/local/jdk1.8.0_171</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>

<p>具体操作指令如下: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1). 编辑/etc/profile文件，进入命令模式</span><br><span class="line">	vim /etc/profile</span><br><span class="line"></span><br><span class="line">2). 在命令模式中，输入指令 G ， 切换到文件最后</span><br><span class="line">	G</span><br><span class="line"></span><br><span class="line">3). 在命令模式中输入 i/a/o 进入插入模式，然后切换到文件最后一行</span><br><span class="line">	i</span><br><span class="line"></span><br><span class="line">4). 将上述的配置拷贝到文件中</span><br><span class="line">	JAVA_HOME=/usr/local/jdk1.8.0_171</span><br><span class="line">	PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">	</span><br><span class="line">5). 从插入模式，切换到指令模式</span><br><span class="line">	ESC</span><br><span class="line">	</span><br><span class="line">6). 按:进入底行模式，然后输入wq，回车保存</span><br><span class="line">	:wq</span><br></pre></td></tr></table></figure>



<h4 id="4-重新加载profile文件"><a href="#4-重新加载profile文件" class="headerlink" title="4. 重新加载profile文件"></a><strong>4. 重新加载profile文件</strong></h4><p>为了使更改的配置立即生效，需要重新加载profile文件，执行命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h4 id="5-检查安装是否成功"><a href="#5-检查安装是否成功" class="headerlink" title="5. 检查安装是否成功"></a><strong>5. 检查安装是否成功</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809195916518.png" alt="image-20220809195916518"></p>
<p>JDK安装成功~</p>
<h3 id="1-3-安装Tomcat"><a href="#1-3-安装Tomcat" class="headerlink" title="1.3 安装Tomcat"></a>1.3 安装Tomcat</h3><p>和安装JDK几乎一样的步骤</p>
<h4 id="1-上传安装包-1"><a href="#1-上传安装包-1" class="headerlink" title="1.上传安装包"></a>1.上传安装包</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809200123231.png" alt="image-20220809200123231"></p>
<h4 id="2-解压安装包-1"><a href="#2-解压安装包-1" class="headerlink" title="2.解压安装包"></a>2.解压安装包</h4><p>将上传上来的安装包解压到指定目录&#x2F;usr&#x2F;local下，执行命令为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-7.0.57.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809200343732.png" alt="image-20220809200343732"></p>
<h4 id="3-启动Tomcat"><a href="#3-启动Tomcat" class="headerlink" title="3. 启动Tomcat"></a><strong>3. 启动Tomcat</strong></h4><p>进入Tomcat的bin目录启动服务。执行命令为: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/apache-tomcat-7.0.57/</span><br><span class="line"></span><br><span class="line">cd bin</span><br><span class="line"></span><br><span class="line">sh startup.sh或者./startup.sh</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809200518775.png" alt="image-20220809200518775"></p>
<h4 id="4-Tomcat进程查看"><a href="#4-Tomcat进程查看" class="headerlink" title="4. Tomcat进程查看"></a>4. Tomcat进程查看</h4><p>上述我们将Tomcat启动完成之后，并不能知道Tomcat是否正常运行，那么我们验证Tomcat启动是否成功，有多种方式，我们这里主要介绍常见的两种方式： </p>
<p><strong>1). 查看启动日志</strong></p>
<p>Tomcat的启动日志输出在Tomcat的安装目录下的logs目录中，Tomcat的启动及运行日志文件名为 catalina.out，所以我们查看Tomcat启动日志，主要可以通过两条指令，如下： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1). 分页查询Tomcat的日志信息</span><br><span class="line">more /usr/local/apache-tomcat-7.0.57/logs/catalina.out</span><br><span class="line"></span><br><span class="line">2). 查询日志文件尾部的50行记录</span><br><span class="line">tail -50 /usr/local/apache-tomcat-7.0.57/logs/catalina.out</span><br></pre></td></tr></table></figure>

<p>只要Tomcat在启动的过程中，日志输出没有报错，基本可以判定Tomcat启动成功了。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809200702095.png" alt="image-20220809200702095"></p>
<p><strong>2). 查询系统进程</strong></p>
<p>我们也可以通过Linux系统的查看系统进程的指令，来判定Tomcat进程是否存在，从而判定Tomcat是否启动。执行如下指令： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef|grep tomcat</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809201223933.png" alt="image-20220809201223933"></p>
<p><strong>说明:</strong> </p>
<ul>
<li><p>&#x3D;&#x3D;ps&#x3D;&#x3D;命令是linux下非常强大的进程查看命令，通过ps -ef可以查看当前运行的所有进程的详细信息</p>
</li>
<li><p>&#x3D;&#x3D;”|”&#x3D;&#x3D; 在Linux中称为管道符，可以将前一个命令的结果输出给后一个命令作为输入</p>
</li>
<li><p>使用ps命令查看进程时，经常配合管道符和查找命令 grep 一起使用，来查看特定进程</p>
</li>
</ul>
<h4 id="5-防火墙操作"><a href="#5-防火墙操作" class="headerlink" title="5.防火墙操作"></a>5.防火墙操作</h4><p>我的Linuxip地址为：192.168.2.130</p>
<p>这里来访问一下tomcat，发现访问不到</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809201453330.png" alt="image-20220809201453330"></p>
<p>那为什么tomcat启动成功了，但就是访问不到呢？</p>
<p>原因就在于Linux系统的防火墙，系统安装完毕后，系统启动时，防火墙自动启动，防火墙拦截了所有端口的访问。</p>
<p>接下来需要学习一下如何操作防火墙，具体指令如下： </p>
<table>
<thead>
<tr>
<th>操作</th>
<th>指令</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>查看防火墙状态</td>
<td>systemctl status firewalld &#x2F; firewall-cmd –state</td>
<td></td>
</tr>
<tr>
<td>暂时关闭防火墙</td>
<td>systemctl stop firewalld</td>
<td></td>
</tr>
<tr>
<td>永久关闭防火墙(禁用开机自启)</td>
<td>systemctl disable firewalld</td>
<td>&#x3D;&#x3D;下次启动,才生效&#x3D;&#x3D;</td>
</tr>
<tr>
<td>暂时开启防火墙</td>
<td>systemctl start firewalld</td>
<td></td>
</tr>
<tr>
<td>永久开启防火墙(启用开机自启)</td>
<td>systemctl enable firewalld</td>
<td>&#x3D;&#x3D;下次启动,才生效&#x3D;&#x3D;</td>
</tr>
<tr>
<td>开放指定端口</td>
<td>firewall-cmd –zone&#x3D;public –add-port&#x3D;8080&#x2F;tcp –permanent</td>
<td>&#x3D;&#x3D;需要重新加载生效&#x3D;&#x3D;</td>
</tr>
<tr>
<td>关闭指定端口</td>
<td>firewall-cmd –zone&#x3D;public –remove-port&#x3D;8080&#x2F;tcp –permanent</td>
<td>&#x3D;&#x3D;需要重新加载生效&#x3D;&#x3D;</td>
</tr>
<tr>
<td>立即生效(重新加载)</td>
<td>firewall-cmd –reload</td>
<td></td>
</tr>
<tr>
<td>查看开放端口</td>
<td>firewall-cmd –zone&#x3D;public –list-ports</td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>注意：</p>
<p>​	A. systemctl是管理Linux中服务的命令，可以对服务进行启动、停止、重启、查看状态等操作</p>
<p>​	B. firewall-cmd是Linux中专门用于控制防火墙的命令</p>
<p>​	C. 为了保证系统安全，服务器的防火墙不建议关闭</p>
</blockquote>
<p>那么我们要想访问到Tomcat，就可以采取两种类型的操作：</p>
<p><strong>A. 关闭防火墙</strong></p>
<p>执行指令 : </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>

<p>关闭之后，再次访问Tomcat，就可以访问到了。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809202252954.png" alt="image-20220809202252954"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809202317417.png" alt="image-20220809202317417"></p>
<p><font color='red'>注意: 直接关闭系统的防火墙，是不建议的，因为这样会造成系统不安全。</font></p>
<p><strong>B. 开放Tomcat的端口号8080</strong></p>
<p>执行指令: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">①. 先开启系统防火墙</span><br><span class="line">systemctl start firewalld</span><br><span class="line"></span><br><span class="line">②. 再开放8080端口号</span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line"></span><br><span class="line">③. 重新加载防火墙</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>执行上述的操作之后，就开放了当前系统中的8080端口号，再次访问Tomcat。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809202355093.png" alt="image-20220809202355093"></p>
<h4 id="6-停止Tomcat"><a href="#6-停止Tomcat" class="headerlink" title="6.停止Tomcat"></a>6.停止Tomcat</h4><p>在Linux系统中，停止Tomcat服务的方式主要有两种： </p>
<p><strong>1). 运行Tomcat提供的脚本文件</strong></p>
<p>在Tomcat安装目录下有一个bin目录，这个目录中存放的是tomcat的运行脚本文件，其中有一个脚本就是用于停止tomcat服务的。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809202658764.png" alt="image-20220809202658764"></p>
<p>我们可以切换到bin目录，并执行如下指令，来停止Tomcat服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh shutdown.sh</span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure>

<p>停掉之后，这边就访问不到了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809202649088.png" alt="image-20220809202649088"></p>
<p><strong>2). 结束Tomcat进程</strong></p>
<p>我们可以先通过 <code>ps -ef|grep tomcat</code> 指令查看tomcat进程的信息，从进程信息中获取tomcat服务的进程号。然后通过kill -9 的形式，来杀死系统进程。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809203042728.png" alt="image-20220809203042728"></p>
<p>通过上述的指令，我们可以获取到tomcat的进程号为 79947。接下来，我们就可以通过指令 ，来杀死tomcat的进程 ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -940292</span><br></pre></td></tr></table></figure>

<p>执行完上述指令之后，我们再访问Linux系统中的Tomcat，就访问不到了。</p>
<blockquote>
<p>注意：</p>
<p>​	kill命令是Linux提供的用于结束进程的命令，-9表示强制结束</p>
</blockquote>
<blockquote>
<p>注意 ： </p>
<p>​	虽然上述讲解的两种方式，都可以停止Tomcat服务，但是推荐使用第一种方式(.&#x2F;shutdown.sh)执行脚本来关闭tomcat服务，如果通过第一种方式停止不了tomcat了，这个时候，我们可以考虑使用第二种方式，强制杀死进程。</p>
</blockquote>
<h3 id="1-4-安装MySQL"><a href="#1-4-安装MySQL" class="headerlink" title="1.4 安装MySQL"></a>1.4 安装MySQL</h3><h4 id="1-MySQL安装"><a href="#1-MySQL安装" class="headerlink" title="1. MySQL安装"></a>1. MySQL安装</h4><p>对于MySQL数据库的安装，我们将要使用前面讲解的第二种安装方式rpm进行安装。那么首先我们先了解一下什么rpm？</p>
<blockquote>
<p><strong>RPM：</strong>全称为 Red-Hat Package Manager，RPM软件包管理器，是红帽Linux用于管理和安装软件的工具。</p>
</blockquote>
<p>我们要通过rpm，进行MySQL数据库的安装，主要的步骤如下：</p>
<p><strong>1). 检测当前系统是否安装过MySQL相关数据库</strong></p>
<p>需要通过rpm相关指令，来查询当前系统中是否存在已安装的mysql软件包，执行指令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -qa							查询当前系统中安装的所有软件</span><br><span class="line">rpm -qa | grep mysql			查询当前系统中安装的名称带mysql的软件</span><br><span class="line">rpm -qa | grep mariadb			查询当前系统中安装的名称带mariadb的软件</span><br></pre></td></tr></table></figure>

<p>通过rpm -qa 查询到系统通过rpm安装的所有软件，太多了，不方便查看，所以我们可以通过管道符 | 配合着grep进行过滤查询。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809203920807.png" alt="image-20220809203920807"></p>
<p>通过查询，我们发现在当前系统中存在mariadb数据库，是CentOS7中自带的，而这个数据库和MySQL数据库是冲突的，所以要想保证MySQL成功安装，需要卸载mariadb数据库。</p>
<p><strong>2). 卸载现有的MySQL数据库</strong></p>
<p>在rpm中，卸载软件的语法为： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps  软件名称</span><br></pre></td></tr></table></figure>

<p>那么，我们就可以通过指令，卸载 mariadb，具体指令为： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps  mariadb-libs-5.5.60-1.el7_5.x86_64</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809204030308.png" alt="image-20220809204030308"></p>
<p>我们看到执行完毕之后， 再次查询 mariadb，就查不到了，因为已经被成功卸载了。</p>
<p><strong>3). 上传MySQL安装包到Linux并解压</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809204436045.png" alt="image-20220809204436045"></p>
<p>B. 解压到&#x2F;usr&#x2F;local&#x2F;mysql</p>
<p>执行如下指令: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /usr/local/mysql</span><br><span class="line">tar -zxvf mysql-5.7.25-1.el7.x86_64.rpm-bundle.tar.gz -C /usr/local/mysql</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809204816780.png" alt="image-20220809204816780"></p>
<p><strong>4). 安装顺序安装rpm安装包</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-devel-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-compat-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">yum install net-tools</span><br><span class="line">rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>



<blockquote>
<p>说明: </p>
<ul>
<li>因为rpm安装方式，是不会自动处理依赖关系的，需要我们自己处理，所以对于上面的rpm包的安装顺序不能随意修改。</li>
<li>安装过程中提示缺少net-tools依赖，使用yum安装(yum是一种在线安装方式，需要保证联网)</li>
<li>可以通过指令(yum update)升级现有软件及系统内核</li>
</ul>
</blockquote>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809205320537.png" alt="image-20220809205320537"></p>
<h4 id="2-MySQL启动"><a href="#2-MySQL启动" class="headerlink" title="2.MySQL启动"></a>2.MySQL启动</h4><p>MySQL安装完成之后，会自动注册为系统的服务，服务名为mysqld。那么，我们就可以通过systemctl指令来查看mysql的状态、启动mysql、停止mysql。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status mysqld		查看mysql服务状态</span><br><span class="line">systemctl start mysqld		启动mysql服务</span><br><span class="line">systemctl stop mysqld		停止mysql服务</span><br></pre></td></tr></table></figure>



<blockquote>
<p>说明： </p>
<p>​	可以设置开机时启动mysql服务，避免每次开机启动mysql。执行如下指令： </p>
<p>​	systemctl enable mysqld</p>
</blockquote>
<p>我们可以通过如下两种方式，来判定mysql是否启动：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -tunlp					查看已经启动的服务</span><br><span class="line">netstat -tunlp | grep mysql		查看mysql的服务信息</span><br><span class="line"></span><br><span class="line">ps –ef | grep mysql				查看mysql进程</span><br></pre></td></tr></table></figure>



<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809210535760.png" alt="image-20220809210535760"></p>
<blockquote>
<p><font color='red'>备注: </font></p>
<p>​	<font color='red'>A. netstat命令用来打印Linux中网络系统的状态信息，可让你得知整个Linux系统的网络情况。</font></p>
<p>​		参数说明: </p>
<p>​		-l或–listening：显示监控中的服务器的Socket；<br>​		-n或–numeric：直接使用ip地址，而不通过域名服务器；<br>​		-p或–programs：显示正在使用Socket的程序识别码和程序名称；<br>​		-t或–tcp：显示TCP传输协议的连线状况；<br>​		-u或–udp：显示UDP传输协议的连线状况；</p>
<p>​	<font color='red'>B. ps命令用于查看Linux中的进程数据。</font></p>
</blockquote>
<h4 id="3-MySQL登录"><a href="#3-MySQL登录" class="headerlink" title="3. MySQL登录"></a>3. MySQL登录</h4><h5 id="1-查阅临时密码"><a href="#1-查阅临时密码" class="headerlink" title="1. 查阅临时密码"></a>1. 查阅临时密码</h5><p>MySQL启动起来之后，我们就可以测试一下登录操作，但是我们要想登录MySQL，需要一个访问密码，而刚才在安装MySQL的过程中，并没有看到让我们设置访问密码，那这个访问密码是多少呢? 那实际上，对于rpm安装的mysql，在mysql第一次启动时，会自动帮我们生成root用户的访问密码，并且输出在mysql的日志文件 &#x2F;var&#x2F;log&#x2F;mysqld.log中，我们可以查看这份日志文件，从而获取到访问密码。</p>
<p>可以执行如下指令：</p>
<p>1). cat &#x2F;var&#x2F;log&#x2F;mysqld.log</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809210733783.png" alt="image-20220809210733783"></p>
<p>2). cat &#x2F;var&#x2F;log&#x2F;mysqld.log | grep password</p>
<p>我们可以通过上述指令，查询日志文件内容中包含password的行信息。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809210835247.png" alt="image-20220809210835247"></p>
<h5 id="2-登录MySQL"><a href="#2-登录MySQL" class="headerlink" title="2.登录MySQL"></a>2.登录MySQL</h5><p>获取到root用户的临时密码之后，我们就可以登录mysql数据库，修改root的密码，为root设置一个新的密码。并且我们还需要开启root用户远程访问该数据库的权限，这样的话，我们就可以在windows上来访问这台MySQL数据库。</p>
<p>执行如下指令： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">①. 登录mysql（复制日志中的临时密码登录）</span><br><span class="line">	mysql -uroot -p								</span><br><span class="line"></span><br><span class="line">②. 修改密码</span><br><span class="line">    set global validate_password_length=4;			设置密码长度最低位数</span><br><span class="line">    set global validate_password_policy=LOW;		设置密码安全等级低，便于密码可以修改成root</span><br><span class="line">    set password = password(&#x27;root&#x27;);				设置密码为root</span><br><span class="line">    </span><br><span class="line">③. 开启访问权限</span><br><span class="line">    grant all on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27;;</span><br><span class="line">    flush privileges;</span><br></pre></td></tr></table></figure>

<p>操作完上述的指令之后，数据库root用户的密码以及远程访问我们就配置好了，接下来，可以执行exit退出mysql，再次通过新的密码进行登录。</p>
<p>1.临时密码登录</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809211015860.png" alt="image-20220809211015860"></p>
<p>2.修改密码，设置安全等级</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809211243646.png" alt="image-20220809211243646"></p>
<p>3.重新登陆</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809211309735.png" alt="image-20220809211309735"></p>
<h5 id="3-外部连接"><a href="#3-外部连接" class="headerlink" title="3.外部连接"></a>3.外部连接</h5><p>使用安装在windows系统中的sNavicat来远程连接linux上的MySQL</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810082202546.png" alt="image-20220810082202546"></p>
<p>&#x3D;&#x3D;注意： 要想在windows上能够访问MySQL，还需要开放防火墙的3306端口，执行如下指令：&#x3D;&#x3D;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;注意： 这里要保证防火墙开放了端口并且Linux上的Mysql是处于启动状态的&#x3D;&#x3D;</p>
<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810082552895.png" alt="image-20220810082552895" style="zoom: 50%;" />

<h3 id="1-5-安装lrzsz"><a href="#1-5-安装lrzsz" class="headerlink" title="1.5 安装lrzsz"></a>1.5 安装lrzsz</h3><p>lrzsz 是用于在Linux系统中文件上传下载的软件。大家可能会存在疑问，我们用finalShell图形化界面就可以很方便的完成上传下载，为什么还要使用这个软件来完成上传下载呢？实际上是这样的，Linux的远程连接工具有很多，而finalShell只是其中的一种，而还有很多的远程连接工具并没有上传下载的功能，这个时候就需要依赖于lrzsz这个软件了。</p>
<p>对于lrzsz的安装，我们需要通过第三种软件安装方式yum来进行安装。这里，我们先对yum做一个简单介绍。</p>
<blockquote>
<p><strong>Yum：</strong> (Yellow dog Updater,Modified)，是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。</p>
</blockquote>
<p>安装lrzsz的步骤如下: </p>
<p><strong>1). 搜索lrzsz安装包</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum list lrzsz</span><br></pre></td></tr></table></figure>

<p><strong>2). 在线安装lrzsz</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install lrzsz.x86_64</span><br></pre></td></tr></table></figure>

<p><strong>3). 测试</strong></p>
<p>在命令行中输入 rz , 就会自动打开一个文件选择的窗口，然后选择要上传的文件。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810083052358.png" alt="image-20220810083052358"></p>
<blockquote>
<p><strong>yum拓展知识:</strong></p>
<p>​	 1). 如果在不更改软件来源的情况下，是需要联网才能使用yum的，那么我们安装的软件是从哪儿下载的呢，这里就涉及到一个概念： yum源。</p>
<p>​		</p>
<p>​	 2). 我们可以通过一个指令，来检查当前的yum源</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810083153345.png" alt="image-20220810083153345"></p>
<p>​		从图中，我们可以看到我们安装的 CentOS7 采用的是网易的163yum源。</p>
<p>​		</p>
<p>​	  3). 网络 yum 源配置文件位于 &#x2F;etc&#x2F;yum.repos.d&#x2F; 目录下，文件扩展名为”*.repo”</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810083203179.png" alt="image-20220810083203179"></p>
<p>​		可以看到，该目录下有 7 个 yum 配置文件，通常情况下 CentOS-Base.repo 文件生效。</p>
<p>​		</p>
<p>​	  4). 添加阿里云yum源</p>
<p>​		A. 先通过 <code>yum install wget</code> ,安装wget命令</p>
<p>​		B. 备份默认的网易163的yum源，执行指令 ：</p>
<p>​			切换目录: cd &#x2F;etc&#x2F;yum.repos.d&#x2F;</p>
<p>​			创建备份目录: mkdir bak</p>
<p>​			移动现有的yum源文件到bak: mv *.repo bak&#x2F;</p>
<p>​		C. 下载阿里云的yum源</p>
<p>​			wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo">http://mirrors.aliyun.com/repo/Centos-7.repo</a></p>
<p>​		D. 执行命令，重新生成cache			</p>
<p>​			yum clean all</p>
<p>​			yum makecache</p>
<p>​		E. 再次查看yum源</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810083211997.png" alt="image-20220810083211997"></p>
<p>​		之后，我们通过yum指令安装软件，就是从阿里云下载的。</p>
</blockquote>
<h1 id="二、项目部署"><a href="#二、项目部署" class="headerlink" title="二、项目部署"></a>二、项目部署</h1><h3 id="2-1-手动部署"><a href="#2-1-手动部署" class="headerlink" title="2.1 手动部署"></a>2.1 手动部署</h3><p><strong>1). 在IDEA中开发SpringBoot项目并打成jar包</strong></p>
<p>项目是一个很简单的springboot项目，结构如下： </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810085825310.png" alt="image-20220810085825310"></p>
<p>执行package指令，进行打包操作，将当前的springboot项目，打成一个jar包。 </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810085847982.png" alt="image-20220810085847982"></p>
<p><strong>2). 将jar包上传到Linux服务器</strong></p>
<p>通过 rz 指令，将打好的jar包上传至Linux服务器的 &#x2F;usr&#x2F;local&#x2F;app 目录下。 先执行指令创建app目录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A. 在/usr/local下创建目录app</span><br><span class="line">mkdir /usr/local/app</span><br><span class="line"></span><br><span class="line">B. 切换到app目录下</span><br><span class="line">cd /usr/local/app</span><br><span class="line"></span><br><span class="line">C. 执行指令,进行jar包上传</span><br><span class="line">rz</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810085858897.png" alt="image-20220810085858897"></p>
<p>此时这个jar包就上传到 &#x2F;usr&#x2F;local&#x2F;app 目录了。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810085907341.png" alt="image-20220810085907341"></p>
<p><strong>3). 启动SpringBoot程序</strong></p>
<p>由于我们的项目已经打成jar包上传上来到Linux服务器，我们只需要运行这个jar包项目就启动起来了，所以只需要执行如下指令即可： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar helloworld-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20210815131812582.png" alt="image-20210815131812582"></p>
<p>&#x3D;&#x3D;注意： 由于前面安装的Tomcat在启动时，会占用端口号8080，而当前springboot项目我们没有配置端口号，默认也是8080，所以我们要想启动springboot项目，需要把之前运行的Tomcat停止掉。&#x3D;&#x3D;</p>
<p><strong>4). 检查防火墙，确保8080端口对外开放，访问SpringBoot项目</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure>

<p>如果防火墙没有放开8080端口，还需要放开对应的端口号，执行如下指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br></pre></td></tr></table></figure>



<p><strong>5). 访问测试</strong></p>
<p><a href="http://192.168.138.130:8080/hello">http://192.168.138.130:8080/hello</a></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810085951284.png" alt="image-20220810085951284"></p>
<p><strong>6). 后台运行项目</strong></p>
<p>当前这个demo工程我们已经部署成功了，并且我们也可以访问项目了。但是这个工程目前是存在问题的，就是当前我们项目启动的这个窗口被霸屏占用了，如果我们把这个窗口关闭掉(或ctrl+c)，当前服务也就访问不到了，我们可以试一下。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20210815133510405.png" alt="image-20210815133510405"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20210815133719642.png" alt="image-20210815133719642"></p>
<p><strong>目前程序运行的问题：</strong></p>
<p>A. 线上程序不会采用控制台霸屏的形式运行程序，而是将程序在后台运行</p>
<p>B. 线上程序不会将日志输出到控制台，而是输出到日志文件，方便运维查阅信息</p>
<p><strong>后台运行程序:</strong></p>
<p>要想让我们部署的项目进行后台运行，这个时候我们需要使用到linux中的一个命令 nohup ，接下来，就来介绍一下nohup命令。</p>
<blockquote>
<p><strong>nohup命令：</strong>英文全称 no hang up（不挂起），用于不挂断地运行指定命令，退出终端不会影响程序的运行</p>
<p><strong>语法格式：</strong> nohup Command [ Arg … ] [&amp;]</p>
<p><strong>参数说明：</strong></p>
<p>​	Command：要执行的命令</p>
<p>​	Arg：一些参数，可以指定输出文件</p>
<p>​	&amp;：让命令在后台运行</p>
<p><strong>举例：</strong></p>
<p>​	nohup java -jar boot工程.jar &amp;&gt; hello.log &amp;</p>
<p>​	上述指令的含义为： 后台运行 java -jar 命令，并将日志输出到hello.log文件</p>
</blockquote>
<p>那么经过上面的介绍，我们可以推测中，我们要想让当前部署的项目后台运行，就可以使用下面的指令： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup java -jar helloworld-1.0-SNAPSHOT.jar &amp;&gt; hello.log &amp;</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810090051909.png" alt="image-20220810090051909"></p>
<p>这样的话，我们的项目就已经启动成功了，我们可以通过ps指令，查看到系统的进程。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810090102647.png" alt="image-20220810090102647"></p>
<p>接下来，我们再次访问我们的项目，来看看服务是否可用。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810090110436.png" alt="image-20220810090110436"></p>
<p><strong>7). 停止SpringBoot项目</strong></p>
<ul>
<li><p>先查找到项目当前的进程</p>
</li>
<li><p>杀死进程</p>
</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810090116739.png" alt="image-20220810090116739"></p>
<h3 id="2-2-基于Shell脚本自动部署"><a href="#2-2-基于Shell脚本自动部署" class="headerlink" title="2.2 基于Shell脚本自动部署"></a>2.2 基于Shell脚本自动部署</h3><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h4><p>前面介绍的项目部署是手动部署，也就是部署过程中的每一步操作都需要我们手动操作。接下来，我们需要再讲解一下项目的自动部署，从而来简化项目部署的操作，那么我们先来整体上了解一下项目自动部署的流程及操作步骤。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810090216596.png" alt="image-20220810090216596"></p>
<p>操作步骤如下： </p>
<p>1). 在Gitee上创建远程仓库，并将本地的项目代码推送到远程仓库中</p>
<p>2). 在Linux中安装Git,克隆代码</p>
<p>3). 在Linux中安装maven</p>
<p>4). 编写Shell脚本（拉取代码、编译、打包、启动）</p>
<p>5). 为用户授予执行Shell脚本的权限</p>
<p>6). 执行Shell脚本</p>
<h4 id="2-推送代码到远程"><a href="#2-推送代码到远程" class="headerlink" title="2.推送代码到远程"></a>2.推送代码到远程</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810091635264.png" alt="image-20220810091635264"></p>
<p>上传成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810091754629.png" alt="image-20220810091754629"></p>
<h4 id="3-Git操作"><a href="#3-Git操作" class="headerlink" title="3. Git操作"></a>3. Git操作</h4><p><strong>1). Git软件安装</strong></p>
<p>通过yum命令在线安装git，执行如下指令： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum list git			列出git安装包</span><br><span class="line">yum install git			在线安装git</span><br></pre></td></tr></table></figure>



<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810090729882.png" alt="image-20220810090729882"></p>
<p>通过上述指令，安装好git之后，我们就可以通过 git –version去验证git的环境。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810090827296.png" alt="image-20220810090827296"></p>
<p><strong>2). Git克隆代码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line">git clone https://gitee.com/ChuanZhiBoKe/helloworld.git</span><br></pre></td></tr></table></figure>

<p><img src="C:/Users/%E9%99%88%E7%8E%89%E7%9A%93/AppData/Roaming/Typora/typora-user-images/image-20220810094547676.png" alt="image-20220810094547676"></p>
<h4 id="4-Maven安装"><a href="#4-Maven安装" class="headerlink" title="4. Maven安装"></a>4. Maven安装</h4><p>由于我们的工程是maven工程，我们要想进行项目的编译打包，需要用到maven的指令，所以需要安装maven。具体操作步骤如下：</p>
<p><strong>1). 上传maven的安装包</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810095224571.png" alt="image-20220810095224571"></p>
<p><strong>2). 解压maven安装包到&#x2F;usr&#x2F;local目录</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-maven-3.5.4-bin.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810095238957.png" alt="image-20220810095238957"></p>
<p><strong>3). 在&#x2F;etc&#x2F;profile配置文件中配置环境变量</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">修改配置文件，进入到命令模式，按G切换到最后一行，按a/i/o进入插入模式，然后在最后加入如下内容 :</span><br><span class="line">export MAVEN_HOME=/usr/local/apache-maven-3.5.4</span><br><span class="line">export PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">然后按ESC进入到命令模式，输入 :wq 保存并退出</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810095256964.png" alt="image-20220810095256964"></p>
<p>要想让配置的环境变量生效,还需要执行如下指令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<p>输入mvn -v来查看版本是否安装成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810095356926.png" alt="image-20220810095356926"></p>
<p><strong>4). 修改maven的settings.xml配置文件,配置本地仓库地址</strong></p>
<p>A. 切换目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/apache-maven-3.5.4/conf</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810095747557.png" alt="image-20220810095747557"></p>
<p>B. 编辑settings.xml配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim settings.xml</span><br></pre></td></tr></table></figure>

<p>在其中增加如下配置,配置本地仓库地址:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;localRepository&gt;/usr/local/repo&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure>

<p><img src="C:/Users/%E9%99%88%E7%8E%89%E7%9A%93/AppData/Roaming/Typora/typora-user-images/image-20220810095644113.png" alt="image-20220810095644113"></p>
<p>并在settings.xml中的<mirrors>标签中,配置阿里云的私服:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span> </span><br></pre></td></tr></table></figure>





<h4 id="5-Shell脚本准备"><a href="#5-Shell脚本准备" class="headerlink" title="5.Shell脚本准备"></a>5.Shell脚本准备</h4><blockquote>
<p>Shell脚本（shell script），是一种Linux系统中的脚本程序。使用Shell脚本编程跟 JavaScript、Java编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。 </p>
<p>对于Shell脚本编写不作为本课程重点内容，直接使用课程资料中提供的脚本文件bootStart.sh即可。</p>
</blockquote>
<p>在&#x2F;usr&#x2F;local&#x2F;目录下创建一个目录 sh(mkdir sh)，并在sh目录下创建一个脚本bootStart.sh</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810103146731.png" alt="image-20220810103146731"></p>
<p>代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">echo =================================</span><br><span class="line">echo  自动化部署脚本启动</span><br><span class="line">echo =================================</span><br><span class="line"></span><br><span class="line">echo 停止原来运行中的工程</span><br><span class="line">APP_NAME=demo</span><br><span class="line"></span><br><span class="line">tpid=`ps -ef|grep $APP_NAME|grep -v grep|grep -v kill|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">if [ $&#123;tpid&#125; ]; then</span><br><span class="line">    echo &#x27;Stop Process...&#x27;</span><br><span class="line">    kill -15 $tpid</span><br><span class="line">fi</span><br><span class="line">sleep 2</span><br><span class="line">tpid=`ps -ef|grep $APP_NAME|grep -v grep|grep -v kill|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">if [ $&#123;tpid&#125; ]; then</span><br><span class="line">    echo &#x27;Kill Process!&#x27;</span><br><span class="line">    kill -9 $tpid</span><br><span class="line">else</span><br><span class="line">    echo &#x27;Stop Success!&#x27;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo 准备从Git仓库拉取最新代码</span><br><span class="line">cd /usr/local/demo</span><br><span class="line"></span><br><span class="line">echo 开始从Git仓库拉取最新代码</span><br><span class="line">git pull</span><br><span class="line">echo 代码拉取完成</span><br><span class="line"></span><br><span class="line">echo 开始打包</span><br><span class="line">output=`mvn clean package -Dmaven.test.skip=true`</span><br><span class="line"></span><br><span class="line">cd target</span><br><span class="line"></span><br><span class="line">echo 启动项目</span><br><span class="line">nohup java -jar demo-1.0-SNAPSHOT.jar &amp;&gt; demo.log &amp;</span><br><span class="line">echo 项目启动完成</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>记得把项目都改成自己的</p>
<p><strong>脚本解读：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20210815154943654.png" alt="image-20210815154943654"></p>
<h4 id="6-Linux权限"><a href="#6-Linux权限" class="headerlink" title="6 Linux权限"></a>6 Linux权限</h4><p>前面我们已经把Shell脚本准备好了，但是Shell脚本要想正常的执行，还需要给Shell脚本分配执行权限。 由于linux系统是一个多用户的操作系统，并且针对每一个用户，Linux会严格的控制操作权限。接下来，我们就需要介绍一下Linux系统的权限控制。</p>
<blockquote>
<p>1). &#x3D;&#x3D;chmod&#x3D;&#x3D;（英文全拼：change mode）命令是控制用户对文件的权限的命令</p>
<p>2). Linux中的权限分为三种 ：读(r)、写(w)、执行(x)</p>
<p>3). Linux文件权限分为三级 : 文件所有者（Owner）、用户组（Group）、其它用户（Other Users）</p>
<p>4). 只有文件的所有者和超级用户可以修改文件或目录的权限</p>
<p>5). 要执行Shell脚本需要有对此脚本文件的执行权限(x)，如果没有则不能执行</p>
</blockquote>
<p>Linux系统中权限描述如下: </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810100241642.png" alt="image-20220810100241642"></p>
<p>解析当前脚本的权限情况: </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810100248115.png" alt="image-20220810100248115"></p>
<p>chmod命令可以使用八进制数来指定权限(0 - 代表无 , 1 - 执行x , 2 - 写w , 4 - 读r):</p>
<table>
<thead>
<tr>
<th>值</th>
<th>权限</th>
<th>rwx</th>
</tr>
</thead>
<tbody><tr>
<td>7</td>
<td>读 + 写 + 执行</td>
<td>rwx</td>
</tr>
<tr>
<td>6</td>
<td>读 + 写</td>
<td>rw-</td>
</tr>
<tr>
<td>5</td>
<td>读 + 执行</td>
<td>r-x</td>
</tr>
<tr>
<td>4</td>
<td>只读</td>
<td>r–</td>
</tr>
<tr>
<td>3</td>
<td>写 + 执行</td>
<td>-wx</td>
</tr>
<tr>
<td>2</td>
<td>只写</td>
<td>-w-</td>
</tr>
<tr>
<td>1</td>
<td>只执行</td>
<td>–x</td>
</tr>
<tr>
<td>0</td>
<td>无</td>
<td>—</td>
</tr>
</tbody></table>
<p><strong>举例:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 bootStart.sh   为所有用户授予读、写、执行权限</span><br><span class="line">chmod 755 bootStart.sh   为文件拥有者授予读、写、执行权限，同组用户和其他用户授予读、执行权限</span><br><span class="line">chmod 210 bootStart.sh   为文件拥有者授予写权限，同组用户授予执行权限，其他用户没有任何权限</span><br></pre></td></tr></table></figure>



<p>&#x3D;&#x3D;注意:&#x3D;&#x3D;</p>
<p>三个数字分别代表不同用户的权限</p>
<ul>
<li>第1位表示文件拥有者的权限</li>
<li>第2位表示同组用户的权限</li>
<li>第3位表示其他用户的权限</li>
</ul>
<h4 id="7-授权并执行脚本"><a href="#7-授权并执行脚本" class="headerlink" title="7. 授权并执行脚本"></a>7. 授权并执行脚本</h4><p>在测试阶段，我们可以给所有的人都赋予执行该shell脚本的权限。所以可以执行如下指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 bootStart.sh</span><br></pre></td></tr></table></figure>



<p>为了方便测试，直接777，这里了可以看到bootStart.sh已经变绿了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810103245640.png" alt="image-20220810103245640"></p>
<p>权限解读: </p>
<p>A. 第一个7，代表当前文件所有者root用户，对该文件具有读写执行权限；</p>
<p>B. 第二个7，代表当前文件所有者所属组的用户，对该文件具有读写执行权限；</p>
<p>B. 第三个7，代表其他用户，对该文件具有读写执行权限；</p>
<p>执行该shell脚本:</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810103517747.png" alt="image-20220810103517747"></p>
<p>&#x3D;&#x3D;注意： 在执行maven指令进行打包时，第一次执行可能会耗时比较长，因为在进行maven工程的打包时，需要到中央仓库下载工程依赖的jar包和插件(可以在settings.xml中配置阿里云私服加速下载)。&#x3D;&#x3D;</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810104439218.png" alt="image-20220810104439218"></p>
<p>启动完成之后, 我们可以查看java进程：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810110018275.png" alt="image-20220810110018275"></p>
<p>&#x3D;&#x3D;注意：这里的Springboot程序内置的Tomcat会和我们安装的tomcat冲突，把我们的Tomcat关闭即可&#x3D;&#x3D;</p>
<h4 id="8-设置静态IP"><a href="#8-设置静态IP" class="headerlink" title="8. 设置静态IP"></a>8. 设置静态IP</h4><p>我们目前安装的Linux操作系统，安装完毕之后并没有配置IP地址，默认IP地址是动态获取的，那如果我们使用该Linux服务器部署项目，IP动态获取的话，也就意味着，IP地址可能会发生变动，那我们访问项目的话就会非常繁琐，所以作为服务器，我们一般还需要把IP地址设置为静态的。 </p>
<p><strong>1). 设置静态IP</strong></p>
<p>设置静态ip，我们就需要修改 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33 配置文件，内容如下： </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">TYPE</span>=<span class="string">Ethernet</span></span><br><span class="line"><span class="attr">PROXY_METHOD</span>=<span class="string">none</span></span><br><span class="line"><span class="attr">BROWSER_ONLY</span>=<span class="string">no</span></span><br><span class="line"><span class="attr">BOOTPROTO</span>=<span class="string">static</span></span><br><span class="line"><span class="attr">IPADDR</span>=<span class="string">&quot;192.168.2.100&quot;        # 设置的静态IP地址</span></span><br><span class="line"><span class="attr">NETMASK</span>=<span class="string">&quot;255.255.255.0&quot;         # 子网掩码</span></span><br><span class="line"><span class="attr">GATEWAY</span>=<span class="string">&quot;192.168.2.2&quot;         # 网关地址</span></span><br><span class="line"><span class="attr">DNS1</span>=<span class="string">&quot;192.168.2.2&quot;            # DNS服务器</span></span><br><span class="line"><span class="attr">DEFROUTE</span>=<span class="string">yes</span></span><br><span class="line"><span class="attr">IPV4_FAILURE_FATAL</span>=<span class="string">no</span></span><br><span class="line"><span class="attr">IPV6INIT</span>=<span class="string">yes</span></span><br><span class="line"><span class="attr">IPV6_AUTOCONF</span>=<span class="string">yes</span></span><br><span class="line"><span class="attr">IPV6_DEFROUTE</span>=<span class="string">yes</span></span><br><span class="line"><span class="attr">IPV6_FAILURE_FATAL</span>=<span class="string">no</span></span><br><span class="line"><span class="attr">IPV6_ADDR_GEN_MODE</span>=<span class="string">stable-privacy</span></span><br><span class="line"><span class="attr">NAME</span>=<span class="string">ens33</span></span><br><span class="line"><span class="attr">UUID</span>=<span class="string">afd0baa3-8bf4-4e26-8d20-5bc426b75fd6</span></span><br><span class="line"><span class="attr">DEVICE</span>=<span class="string">ens33</span></span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="string">yes</span></span><br><span class="line"><span class="attr">ZONE</span>=<span class="string">public</span></span><br></pre></td></tr></table></figure>

<p>上述我们所设置的网段为2，并不是随意指定的，需要和我们虚拟机中的虚拟网络编辑器中的NAT模式配置的网关保持一致。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810103921476.png" alt="image-20220810103921476"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810101454985.png" alt="image-20220810101454985"></p>
<p><strong>2). 重启网络服务</strong></p>
<p>ip地址修改完毕之后，需要重启网络服务，执行如下指令： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>



<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810101549290.png" alt="image-20220810101549290"></p>
<p>&#x3D;&#x3D;注意：重启完网络服务后ip地址已经发生了改变，此时FinalShell已经连接不上Linux系统，需要创建一个新连接才能连接到Linux。&#x3D;&#x3D;</p>
<p>再次连接上Linux之后，我们再次查看IP地址，就可以看到我们所设置的静态IP：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810101647418.png" alt="image-20220810101647418"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810101716057.png" alt="image-20220810101716057"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL视频推荐-老杜</title>
    <url>/posts/2548228766.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script>]]></content>
      <categories>
        <category>学习视频推荐</category>
      </categories>
  </entry>
  <entry>
    <title>老杜MySQL学习笔记</title>
    <url>/posts/2205612470.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><blockquote>
<p>什么是数据库？什么是数据库管理系统？什么是SQL？他们之间的关系是什么？</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据库：</span><br><span class="line">	英文单词DataBase，简称DB。按照一定格式存储数据的一些文件的组合。</span><br><span class="line">	顾名思义：存储数据的仓库，实际上就是一堆文件。这些文件中存储了具有特定格式的数据。</span><br><span class="line">数据库管理系统：</span><br><span class="line">		DataBaseManagement，简称DBMS。</span><br><span class="line">		数据库管理系统是专门用来管理数据库中数据的，数据库管理系统可以对数据库当中的数据进行增删改查。</span><br><span class="line">常见的数据库管理系统：</span><br><span class="line">		MySQL、Oracle、MS SqlServer、DB2、sybase等....</span><br></pre></td></tr></table></figure>

<h1 id="SQL：结构化查询语言"><a href="#SQL：结构化查询语言" class="headerlink" title="SQL：结构化查询语言"></a>SQL：结构化查询语言</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">程序员需要学习SQL语句，程序员通过编写SQL语句，然后DBMS负责执行SQL语句，最终来完成数据库中数据的增删改查操作。</span><br><span class="line">SQL是一套标准，程序员主要学习的就是SQL语句，这个SQL在mysql中可以使用，</span><br><span class="line">同时在Oracle中也可以使用，在DB2中也可以使用。</span><br><span class="line"></span><br><span class="line">三者之间的关系？</span><br><span class="line">	DBMS--执行--&gt; SQL --操作--&gt; DB</span><br><span class="line"></span><br><span class="line">先安装数据库管理系统MySQL，然后学习SQL语句怎么写，编写SQL语句之后，DBMS</span><br><span class="line">对SQL语句进行执行，最终来完成数据库的数据管理。</span><br></pre></td></tr></table></figure>

<h2 id="关于SQL语句的分类"><a href="#关于SQL语句的分类" class="headerlink" title="关于SQL语句的分类"></a>关于SQL语句的分类</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQL语句有很多，最好进行分门别类，这样更容易记忆。</span><br><span class="line">	分为：</span><br><span class="line">	DQL：</span><br><span class="line">		数据查询语言（凡是带有select关键字的都是查询语句）</span><br><span class="line">		select...</span><br><span class="line"></span><br><span class="line">	DML：</span><br><span class="line">		数据操作语言（凡是对表当中的数据进行增删改的都是DML）</span><br><span class="line">		insert delete update</span><br><span class="line">		insert 增</span><br><span class="line">		delete 删</span><br><span class="line">		update 改</span><br><span class="line">		这个主要是操作表中的数据data。</span><br><span class="line"></span><br><span class="line">	DDL：</span><br><span class="line">		数据定义语言</span><br><span class="line">		凡是带有create、drop、alter的都是DDL。</span><br><span class="line">		DDL主要操作的是表的结构。不是表中的数据。</span><br><span class="line">		create：新建，等同于增</span><br><span class="line">		drop：删除</span><br><span class="line">		alter：修改</span><br><span class="line">		这个增删改和DML不同，这个主要是对表结构进行操作。</span><br><span class="line"></span><br><span class="line">	TCL：</span><br><span class="line">		是事务控制语言</span><br><span class="line">		包括：</span><br><span class="line">		事务提交：commit;</span><br><span class="line">		事务回滚：rollback;</span><br><span class="line"></span><br><span class="line">	DCL：</span><br><span class="line">		是数据控制语言。</span><br><span class="line">		例如：授权grant、撤销权限revoke....</span><br></pre></td></tr></table></figure>

<h1 id="MySQL常用命令"><a href="#MySQL常用命令" class="headerlink" title="MySQL常用命令"></a>MySQL常用命令</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">退出mysql ：exit;</span><br><span class="line"></span><br><span class="line">查看mysql中有哪些数据库 : show databases;  #注意：以分号结尾，分号是英文的分号。</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">	+--------------------+</span><br><span class="line">	| Database           |</span><br><span class="line">	+--------------------+</span><br><span class="line">	| information_schema |</span><br><span class="line">	| mysql              |</span><br><span class="line">	| performance_schema |</span><br><span class="line">	| test               |</span><br><span class="line">	+--------------------+</span><br><span class="line">	mysql默认自带了4个数据库。</span><br><span class="line">	</span><br><span class="line">选择使用某个数据库:</span><br><span class="line">mysql&gt; use test;</span><br><span class="line">	Database changed</span><br><span class="line">	表示正在使用一个名字叫做test的数据库。</span><br><span class="line"></span><br><span class="line">创建数据库:</span><br><span class="line">mysql&gt; create database bjpowernode;</span><br><span class="line">	Query OK, 1 row affected (0.00 sec)</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">		+--------------------+</span><br><span class="line">		| Database           |</span><br><span class="line">		+--------------------+</span><br><span class="line">		| information_schema |</span><br><span class="line">		| bjpowernode        |</span><br><span class="line">		| mysql              |</span><br><span class="line">		| performance_schema |</span><br><span class="line">		| test               |</span><br><span class="line">		+--------------------+</span><br><span class="line">		</span><br><span class="line">查看某个数据库下有哪些表:</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line"></span><br><span class="line">查看mysql数据库的版本号：</span><br><span class="line">mysql&gt; select version();</span><br><span class="line">		+-----------+</span><br><span class="line">		| version() |</span><br><span class="line">		+-----------+</span><br><span class="line">		| 5.5.36    |</span><br><span class="line">		+-----------+</span><br><span class="line">		</span><br><span class="line">查看当前使用的是哪个数据库:</span><br><span class="line">mysql&gt; select database();</span><br><span class="line">	+-------------+</span><br><span class="line">	| database()  |</span><br><span class="line">	+-------------+</span><br><span class="line">	| bjpowernode |</span><br><span class="line">	+-------------+</span><br><span class="line"></span><br><span class="line">导入一下提前准备好的数据：bjpowernode.sql 这个文件中是练习准备的数据库表。</span><br><span class="line">怎么将sql文件中的数据导入</span><br><span class="line">mysql&gt; source D:\course\03-MySQL\document\bjpowernode.sql #注意：路径中不要有中文！！！！</span><br><span class="line"></span><br><span class="line">查看表的结构：</span><br><span class="line">mysql&gt; desc dept; # describe缩写为：desc</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| DEPTNO | int(2)      | NO   | PRI | NULL    |       |部门编号</span><br><span class="line">| DNAME  | varchar(14) | YES  |     | NULL    |       |部门名字</span><br><span class="line">| LOC    | varchar(13) | YES  |     | NULL    |       |地理位置</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据库当中最基本的单元是表：table</span><br><span class="line"></span><br><span class="line">	什么是表table？为什么用表来存储数据呢？</span><br><span class="line"></span><br><span class="line">		姓名	性别	年龄(列：字段) </span><br><span class="line">		---------------------------</span><br><span class="line">		张三	男			20            -------&gt;行（记录）</span><br><span class="line">		李四	女			21            -------&gt;行（记录）</span><br><span class="line">		王五	男			22            -------&gt;行（记录）</span><br><span class="line">	</span><br><span class="line">	数据库当中是以表格的形式表示数据的。因为表比较直观。</span><br><span class="line"></span><br><span class="line">	任何一张表都有行和列：</span><br><span class="line">		行（row）：被称为数据/记录。</span><br><span class="line">		列（column）：被称为字段。</span><br><span class="line">        </span><br><span class="line">	姓名字段、性别字段、年龄字段。</span><br><span class="line"></span><br><span class="line">	了解一下：</span><br><span class="line">		每一个字段都有：字段名、数据类型、约束等属性。字段名可以理解，是一个普通的名字，见名知意就行。</span><br><span class="line">		数据类型：字符串，数字，日期等，后期讲。</span><br><span class="line">		约束：约束也有很多，其中一个叫做唯一性约束，这种约束添加之后，该字段中的数据不能重复。		</span><br></pre></td></tr></table></figure>

<h1 id="查询：select"><a href="#查询：select" class="headerlink" title="查询：select"></a>查询：select</h1><h2 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询一个字段？</span><br><span class="line">select 字段名 from 表名; </span><br><span class="line"># 其中要注意：select和from都是关键字。</span><br><span class="line"># 字段名和表名都是标识符。</span><br><span class="line"></span><br><span class="line">强调：对于SQL语句来说，是通用的，所有的SQL语句以“;”结尾。</span><br><span class="line">	 另外SQL语句不区分大小写，都行。</span><br><span class="line"></span><br><span class="line">查询两个字段，或者多个字段使用逗号隔开“,”</span><br><span class="line">查询部门编号和部门名</span><br><span class="line">select deptno,dname from dept;</span><br><span class="line">    +--------+------------+</span><br><span class="line">    | deptno | dname      |</span><br><span class="line">    +--------+------------+</span><br><span class="line">    |     10 | ACCOUNTING |</span><br><span class="line">    |     20 | RESEARCH   |</span><br><span class="line">    |     30 | SALES      |</span><br><span class="line">    |     40 | OPERATIONS |</span><br><span class="line">    +--------+------------+</span><br><span class="line">    </span><br><span class="line">查询所有字段</span><br><span class="line">第一种方式：可以把每个字段都写上</span><br><span class="line">	select a,b,c,d,e,f... from tablename;</span><br><span class="line"></span><br><span class="line">第二种方式：可以使用*</span><br><span class="line">	select * from dept;</span><br><span class="line">		+--------+------------+----------+</span><br><span class="line">		| DEPTNO | DNAME      | LOC      |</span><br><span class="line">		+--------+------------+----------+</span><br><span class="line">        |     10 | ACCOUNTING | NEW YORK |</span><br><span class="line">        |     20 | RESEARCH   | DALLAS   |</span><br><span class="line">        |     30 | SALES      | CHICAGO  |</span><br><span class="line">        |     40 | OPERATIONS | BOSTON   |</span><br><span class="line">        +--------+------------+----------+</span><br><span class="line"></span><br><span class="line">    这种方式的缺点：</span><br><span class="line">        1、效率低</span><br><span class="line">        2、可读性差。</span><br><span class="line">    在实际开发中不建议，可以自己玩没问题。</span><br><span class="line">    你可以在DOS命令窗口中想快速的看一看全表数据可以采用这种方式。</span><br><span class="line"></span><br><span class="line">给查询的列起别名：使用as关键字起别名。</span><br><span class="line">  mysql&gt; select deptno,dname as deptname from dept;</span><br><span class="line">      +--------+------------+</span><br><span class="line">      | deptno | deptname   |</span><br><span class="line">      +--------+------------+</span><br><span class="line">      |     10 | ACCOUNTING |</span><br><span class="line">      |     20 | RESEARCH   |</span><br><span class="line">      |     30 | SALES      |</span><br><span class="line">      |     40 | OPERATIONS |</span><br><span class="line">      +--------+------------+</span><br><span class="line">  注意：只是将显示的查询结果列名显示为deptname，原表列名还是叫：dname</span><br><span class="line">  记住：select语句是永远都不会进行修改操作的。（因为只负责查询）</span><br><span class="line"></span><br><span class="line">  as关键字可以省略吗？可以的</span><br><span class="line">    mysql&gt; select deptno,dname deptname from dept;</span><br><span class="line">    </span><br><span class="line">假设起别名的时候，别名里面有空格，怎么办？   </span><br><span class="line">select deptno,dname &#x27;dept name&#x27; from dept; //加单引号</span><br><span class="line">select deptno,dname &quot;dept name&quot; from dept; //加双引号</span><br><span class="line">      +--------+------------+</span><br><span class="line">      | deptno | dept name  |</span><br><span class="line">      +--------+------------+</span><br><span class="line">      |     10 | ACCOUNTING |</span><br><span class="line">      |     20 | RESEARCH   |</span><br><span class="line">      |     30 | SALES      |</span><br><span class="line">      |     40 | OPERATIONS |</span><br><span class="line">      +--------+------------+</span><br><span class="line">注意：在所有的数据库当中，字符串统一使用单引号括起来，单引号是标准，双引号在oracle数据库中用不了。但是在mysql中可以使用。</span><br></pre></td></tr></table></figure>

<h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p>条件查询：不是将表中所有数据都查出来。是查询出来符合条件的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询语法格式：</span><br><span class="line">    select</span><br><span class="line">      字段1,字段2,字段3....</span><br><span class="line">    from </span><br><span class="line">      表名</span><br><span class="line">    where</span><br><span class="line">      条件;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">都有哪些条件？</span><br><span class="line">= 等于</span><br><span class="line">查询薪资等于800的员工姓名和编号？</span><br><span class="line">  select empno,ename from emp where sal = 800;</span><br><span class="line">查询SMITH的编号和薪资？</span><br><span class="line">  select empno,sal from emp where ename = &#x27;SMITH&#x27;; //字符串使用单引号</span><br><span class="line"></span><br><span class="line">&lt;&gt; 或!= 不等于</span><br><span class="line">查询薪资不等于800的员工姓名和编号？</span><br><span class="line">  select empno,ename from emp where sal != 800;</span><br><span class="line">  select empno,ename from emp where sal &lt;&gt; 800; // 小于号和大于号组成的不等号</span><br><span class="line">  </span><br><span class="line">&lt; 小于</span><br><span class="line">查询薪资小于2000的员工姓名和编号？</span><br><span class="line">  mysql&gt; select empno,ename,sal from emp where sal &lt; 2000;</span><br><span class="line">  +-------+--------+---------+</span><br><span class="line">  | empno | ename  | sal     |</span><br><span class="line">  +-------+--------+---------+</span><br><span class="line">  |  7369 | SMITH  |  800.00 |</span><br><span class="line">  |  7499 | ALLEN  | 1600.00 |</span><br><span class="line">  |  7521 | WARD   | 1250.00 |</span><br><span class="line">  +-------+--------+---------+</span><br><span class="line"></span><br><span class="line">&lt;= 小于等于</span><br><span class="line">查询薪资小于等于3000的员工姓名和编号？</span><br><span class="line">  select empno,ename,sal from emp where sal &lt;= 3000;</span><br><span class="line"></span><br><span class="line">&gt; 大于</span><br><span class="line">查询薪资大于3000的员工姓名和编号？</span><br><span class="line">  select empno,ename,sal from emp where sal &gt; 3000;</span><br><span class="line"></span><br><span class="line">&gt;= 大于等于</span><br><span class="line">查询薪资大于等于3000的员工姓名和编号？</span><br><span class="line">  select empno,ename,sal from emp where sal &gt;= 3000;</span><br><span class="line"></span><br><span class="line">between … and …. 两个值之间, 等同于 &gt;= and &lt;=</span><br><span class="line">查询薪资在2450和3000之间的员工信息？包括2450和3000</span><br><span class="line">  第一种方式：&gt;= and &lt;= （and是并且的意思。）</span><br><span class="line">    select empno,ename,sal from emp where sal &gt;= 2450 and sal &lt;= 3000;</span><br><span class="line">    +-------+-------+---------+</span><br><span class="line">    | empno | ename | sal     |</span><br><span class="line">    +-------+-------+---------+</span><br><span class="line">    |  7566 | JONES | 2975.00 |</span><br><span class="line">    |  7698 | BLAKE | 2850.00 |</span><br><span class="line">    |  7782 | CLARK | 2450.00 |</span><br><span class="line">    |  7788 | SCOTT | 3000.00 |</span><br><span class="line">    |  7902 | FORD  | 3000.00 |</span><br><span class="line">    +-------+-------+---------+</span><br><span class="line">  第二种方式：between … and …</span><br><span class="line">    select </span><br><span class="line">      empno,ename,sal </span><br><span class="line">    from </span><br><span class="line">      emp </span><br><span class="line">    where </span><br><span class="line">      sal between 2450 and 3000;</span><br><span class="line">    </span><br><span class="line">    注意：</span><br><span class="line">      使用between and的时候，必须遵循左小右大。</span><br><span class="line">      between and是闭区间，包括两端的值。</span><br><span class="line"></span><br><span class="line">is null 为 null（is not null 不为空）</span><br><span class="line">注意：在数据库当中null不能使用等号进行衡量。需要使用is null因为数据库中的null代表什么也没有，它不是一个值，所以不能使用等号衡量。</span><br><span class="line"></span><br><span class="line">and 并且 </span><br><span class="line"></span><br><span class="line">or 或者</span><br><span class="line"></span><br><span class="line">and和or同时出现的话，有优先级问题吗？</span><br><span class="line">and和or同时出现，and优先级较高。如果想让or先执行，需要加“小括号”.以后在开发中，如果不确定优先级，就加小括号就行了。</span><br><span class="line"></span><br><span class="line">in 包含，相当于多个 or （not in 不在这个范围中）</span><br><span class="line"></span><br><span class="line">not 可以取非，主要用在 is 或 in 中</span><br><span class="line"></span><br><span class="line">like 称为模糊查询，支持%或下划线匹配</span><br><span class="line"># %匹配任意多个字符</span><br><span class="line"># 下划线：任意一个字符。</span><br><span class="line">#（%是一个特殊的符号，_ 也是一个特殊符号）</span><br><span class="line"></span><br><span class="line">找出名字以T结尾的？</span><br><span class="line">  select ename from emp where ename like &#x27;%T&#x27;;</span><br><span class="line">  </span><br><span class="line">找出名字以K开始的？</span><br><span class="line">  select ename from emp where ename like &#x27;K%&#x27;;</span><br><span class="line"></span><br><span class="line">找出第二个字每是A的？</span><br><span class="line">  select ename from emp where ename like &#x27;_A%&#x27;;</span><br><span class="line"></span><br><span class="line">找出第三个字母是R的？</span><br><span class="line">  select ename from emp where ename like &#x27;__R%&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><blockquote>
<p>什么是分组查询？</p>
</blockquote>
<ul>
<li>在实际的应用中，可能有这样的需求，需要先进行分组，然后对每一组的数据进行操作，这个时候我们需要使用分组查询。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">	select</span><br><span class="line">      ...</span><br><span class="line">    from</span><br><span class="line">      ...</span><br><span class="line">    group by</span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">select ename,job,sum(sal) from emp group by job;</span><br><span class="line">    +-------+-----------+----------+</span><br><span class="line">    | ename | job       | sum(sal) |</span><br><span class="line">    +-------+-----------+----------+</span><br><span class="line">    | SCOTT | ANALYST   |  6000.00 |</span><br><span class="line">    | SMITH | CLERK     |  4150.00 |</span><br><span class="line">    | JONES | MANAGER   |  8275.00 |</span><br><span class="line">    | KING  | PRESIDENT |  5000.00 |</span><br><span class="line">    | ALLEN | SALESMAN  |  5600.00 |</span><br><span class="line">    +-------+-----------+----------+</span><br><span class="line">以上语句在mysql中可以执行，但select后面添加ename字段没有意义。</span><br><span class="line">以上语句在oracle中执行报错。</span><br><span class="line">oracle的语法比mysql的语法严格。（mysql的语法相对来说松散一些！）</span><br><span class="line"></span><br><span class="line">重点结论：在一条select语句当中，如果有group by语句的话，select后面只能跟：参加分组的字段，以及分组函数。其它的一律不能跟。</span><br><span class="line"></span><br><span class="line">找出“每个部门，不同工作岗位”的最高薪资？</span><br><span class="line">select </span><br><span class="line">  deptno, job, max(sal)</span><br><span class="line">from</span><br><span class="line">  emp</span><br><span class="line">group by</span><br><span class="line">  deptno, job;</span><br><span class="line">技巧：两个字段联合成1个字段看。（两个字段联合分组）</span><br><span class="line"></span><br><span class="line">使用having可以对分完组之后的数据进一步过滤。</span><br><span class="line">having不能单独使用，having不能代替where，having必须和group by联合使用。</span><br><span class="line"></span><br><span class="line">where和having，优先选择where，where实在完成不了了，再选择having。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>补充一点</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将之前的关键字全部组合在一起，来看一下他们的执行顺序？</span><br><span class="line">    select</span><br><span class="line">      	...</span><br><span class="line">    from</span><br><span class="line">     	...</span><br><span class="line">    where</span><br><span class="line">    	...</span><br><span class="line">    group by</span><br><span class="line">     	 ...</span><br><span class="line">	having</span><br><span class="line">		...</span><br><span class="line">    order by</span><br><span class="line">     	...</span><br><span class="line">以上关键字的顺序不能颠倒，需要记忆。</span><br><span class="line">执行顺序是什么？</span><br><span class="line">  1. from</span><br><span class="line">  2. where</span><br><span class="line">  3. group by</span><br><span class="line">  4. having</span><br><span class="line">  5. select</span><br><span class="line">  6. order by</span><br></pre></td></tr></table></figure>



<h1 id="排序：order-by"><a href="#排序：order-by" class="headerlink" title="排序：order by"></a>排序：order by</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">	select </span><br><span class="line">		ename,sal</span><br><span class="line">	from</span><br><span class="line">		emp</span><br><span class="line">	order by</span><br><span class="line">		sal; // 默认是升序！！</span><br><span class="line">指定降序： desc</span><br><span class="line">指定升序： asc</span><br><span class="line"></span><br><span class="line">以两个字段排序吗？或者说按照多个字段排序？</span><br><span class="line">查询员工名字和薪资，要求按照薪资升序，如果薪资一样的话，再按照名字升序排列。</span><br><span class="line">select </span><br><span class="line">	ename,sal</span><br><span class="line">from</span><br><span class="line">	emp</span><br><span class="line">order by</span><br><span class="line">	sal asc, ename asc; // sal在前，起主导，只有sal相等的时候，才会考虑启用ename排序。</span><br></pre></td></tr></table></figure>

<h1 id="数据处理函数"><a href="#数据处理函数" class="headerlink" title="数据处理函数"></a>数据处理函数</h1><ul>
<li>数据处理函数又被称为单行处理函数</li>
</ul>
<h3 id="单行处理函数"><a href="#单行处理函数" class="headerlink" title="单行处理函数"></a>单行处理函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单行处理函数的特点：一个输入对应一个输出。</span><br><span class="line">单行处理函数常见:</span><br><span class="line">lower 转换小写</span><br><span class="line">	mysql&gt; select lower(ename) as ename from emp;</span><br><span class="line">	</span><br><span class="line">upper 转换大写</span><br><span class="line">	mysql&gt; select upper(name) as name from t_student;</span><br><span class="line">	</span><br><span class="line">substr 取子串（substr(被截取的字符串, 起始下标,截取的长度)）</span><br><span class="line">	mysql&gt; select substr(ename, 1, 1) as ename from emp;</span><br><span class="line">	</span><br><span class="line">concat函数进行字符串的拼接</span><br><span class="line">	mysql&gt; select concat(empno,ename) from emp;</span><br><span class="line">length 取长度</span><br><span class="line">	mysql&gt; select length(ename) enamelength from emp;</span><br><span class="line">	</span><br><span class="line">trim 去空格</span><br><span class="line">	mysql&gt;	select * from emp where ename = trim(&#x27;   KING&#x27;);</span><br><span class="line">	</span><br><span class="line">str_to_date 将字符串转换成日期</span><br><span class="line"></span><br><span class="line">date_format 格式化日期</span><br><span class="line">	</span><br><span class="line">format 设置千分位</span><br><span class="line">	</span><br><span class="line">case..when..then..when..then..else..end</span><br><span class="line">当员工的工作岗位是MANAGER的时候，工资上调10%，当工作岗位是SALESMAN的时候，工资上调50%,其它正常。	（注意：不修改数据库，只是将查询结果显示为工资上调）</span><br><span class="line">select </span><br><span class="line">  ename,job, sal as oldsal,</span><br><span class="line">  (case job when &#x27;MANAGER&#x27; then sal*1.1 when &#x27;SALESMAN&#x27; then sal*1.5 else sal end) as newsal </span><br><span class="line">from </span><br><span class="line">  emp;</span><br><span class="line"></span><br><span class="line">round 四舍五入</span><br><span class="line">mysql&gt; select round(1236.567, 0) as result from emp; //保留整数位。</span><br><span class="line">mysql&gt; select round(1236.567, 1) as result from emp; //保留1个小数</span><br><span class="line">mysql&gt; select round(1236.567, 2) as result from emp; //保留2个小数</span><br><span class="line">mysql&gt; select round(1236.567, -1) as result from emp; // 保留到十位。</span><br><span class="line"></span><br><span class="line">rand() 生成随机数</span><br><span class="line">  mysql&gt; select round(rand()*100,0) from emp; // 100以内的随机数</span><br><span class="line"></span><br><span class="line">ifnull 可以将 null 转换成一个具体值</span><br><span class="line">ifnull是空处理函数。专门处理空的。在所有数据库当中，只要有NULL参与的数学运算，最终结果就是NULL。</span><br><span class="line">注意：NULL只要参与运算，最终结果一定是NULL。为了避免这个现象，需要使用ifnull函数。ifnull函数用法：ifnull(数据, 被当做哪个值)。如果“数据”为NULL的时候，把这个数据结构当做哪个值。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="分组函数（多行处理函数）"><a href="#分组函数（多行处理函数）" class="headerlink" title="分组函数（多行处理函数）"></a>分组函数（多行处理函数）</h3><p>多行处理函数特点：多个输入，对应1个输出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">count	# 计数</span><br><span class="line">sum		# 求和</span><br><span class="line">avg		# 平均值</span><br><span class="line">max		# 最大值</span><br><span class="line">min		# 最小值</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">	1. 分组函数在使用的时候必须先进行分组，然后才能用。如果你没有对数据进行分组，整张表默认为一组。</span><br><span class="line">	2. 分组函数自动忽略NULL，你不需要提前对NULL进行处理。</span><br><span class="line">	3. 分组函数中count(*)和count(具体字段)有什么区别？</span><br><span class="line">		count(具体字段)：表示统计该字段下所有不为NULL的元素的总数。</span><br><span class="line">		count(*)：统计表当中的总行数。（只要有一行数据count则++）</span><br><span class="line">      	因为每一行记录不可能都为NULL，一行数据中有一列不为NULL，则这行数据就是有效的。</span><br><span class="line">    4. 分组函数不能够直接使用在where子句中。</span><br><span class="line">    5. 所有的分组函数可以组合起来一起用。</span><br></pre></td></tr></table></figure>

<h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h3><blockquote>
<p>把查询结果去除重复记录 <strong>distinct</strong> </p>
</blockquote>
<p>注意：原表数据不会被修改，只是查询结果去重。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// distinct只能出现在所有字段的最前方。</span><br><span class="line">mysql&gt; select distinct job from emp;</span><br><span class="line"></span><br><span class="line">// distinct出现在job,deptno两个字段之前，表示两个字段联合起来去重。</span><br><span class="line">mysql&gt; select distinct job,deptno from emp;</span><br></pre></td></tr></table></figure>

<h1 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h1><blockquote>
<p>多张表联合起来查询数据，被称为连接查询。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">根据表连接的方式分类：</span><br><span class="line">内连接： 等值连接 非等值连接 自连接</span><br><span class="line"></span><br><span class="line">外连接： 左外连接（左连接）	右外连接（右连接）</span><br></pre></td></tr></table></figure>

<h2 id="内连接：等值连接"><a href="#内连接：等值连接" class="headerlink" title="内连接：等值连接"></a>内连接：等值连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQL99语法：</span><br><span class="line">  select </span><br><span class="line">    ...</span><br><span class="line">  from</span><br><span class="line">    a</span><br><span class="line">  inner join</span><br><span class="line">    b</span><br><span class="line">  on</span><br><span class="line">    a和b的连接条件</span><br><span class="line">  where</span><br><span class="line">    筛选条件</span><br><span class="line"># inner可以省略（带着inner可读性更好！！！一眼就能看出来是内连接）</span><br></pre></td></tr></table></figure>

<h2 id="内连接：非等值连接"><a href="#内连接：非等值连接" class="headerlink" title="内连接：非等值连接"></a>内连接：非等值连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">	e.ename, e.sal, s.grade</span><br><span class="line">from</span><br><span class="line">	emp e</span><br><span class="line">join</span><br><span class="line">	salgrade s</span><br><span class="line">on</span><br><span class="line">	e.sal between s.losal and s.hisal; // 条件不是一个等量关系，称为非等值连接。</span><br></pre></td></tr></table></figure>

<h2 id="内连接：自连接"><a href="#内连接：自连接" class="headerlink" title="内连接：自连接"></a>内连接：自连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">	a.ename as &#x27;员工名&#x27;, b.ename as &#x27;领导名&#x27;</span><br><span class="line">from</span><br><span class="line">	emp a</span><br><span class="line">join</span><br><span class="line">	emp b</span><br><span class="line">on</span><br><span class="line">	a.mgr = b.empno; //员工的领导编号 = 领导的员工编号</span><br><span class="line">以上就是内连接中的：自连接，技巧：一张表看做两张表</span><br></pre></td></tr></table></figure>

<h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// outer是可以省略的，带着可读性强。</span><br><span class="line">select </span><br><span class="line">	e.ename,d.dname</span><br><span class="line">from</span><br><span class="line">	emp e </span><br><span class="line">right outer join </span><br><span class="line">	dept d</span><br><span class="line">on</span><br><span class="line">	e.deptno = d.deptno;</span><br><span class="line">	</span><br><span class="line">right代表什么：表示将join关键字右边的这张表看成主表，主要是为了将这张表的数据全部查询出来，捎带着关联查询左边的表。在外连接当中，两张表连接，产生了主次关系。</span><br><span class="line"></span><br><span class="line">带有right的是右外连接，又叫做右连接。</span><br><span class="line">带有left的是左外连接，又叫做左连接。</span><br><span class="line">任何一个右连接都有左连接的写法。</span><br><span class="line">任何一个左连接都有右连接的写法。</span><br><span class="line"></span><br><span class="line">思考：外连接的查询结果条数一定是 &gt;= 内连接的查询结果条数？</span><br><span class="line">	正确。</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">三张表，四张表怎么连接？</span><br><span class="line">语法：</span><br><span class="line">  select </span><br><span class="line">    ...</span><br><span class="line">  from</span><br><span class="line">    a</span><br><span class="line">  join</span><br><span class="line">    b</span><br><span class="line">  on</span><br><span class="line">    a和b的连接条件</span><br><span class="line">  join</span><br><span class="line">    c</span><br><span class="line">  on</span><br><span class="line">    a和c的连接条件</span><br><span class="line">  right join</span><br><span class="line">    d</span><br><span class="line">  on</span><br><span class="line">    a和d的连接条件</span><br><span class="line">  </span><br><span class="line">  一条SQL中内连接和外连接可以混合。都可以出现！</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><blockquote>
<p>select语句中嵌套select语句，被嵌套的select语句称为子查询。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">子查询都可以出现在哪里呢？</span><br><span class="line">select</span><br><span class="line">  ..(select).</span><br><span class="line">from</span><br><span class="line">  ..(select).</span><br><span class="line">where</span><br><span class="line">  ..(select).</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">where子句中的子查询:</span><br><span class="line"></span><br><span class="line">第一步：查询最低工资是多少</span><br><span class="line">  select min(sal) from emp;</span><br><span class="line">  +----------+</span><br><span class="line">  | min(sal) |</span><br><span class="line">  +----------+</span><br><span class="line">  |   800.00 |</span><br><span class="line">  +----------+</span><br><span class="line">第二步：找出&gt;800的</span><br><span class="line">  select ename,sal from emp where sal &gt; 800;</span><br><span class="line"></span><br><span class="line">第三步：合并</span><br><span class="line">  select ename,sal from emp where sal &gt; (select min(sal) from emp);</span><br><span class="line">  </span><br><span class="line">from子句中的子查询:</span><br><span class="line">	注意：from后面的子查询，可以将子查询的查询结果当做一张临时表。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select后面出现的子查询（这个内容不需要掌握，了解即可！！！）</span><br><span class="line">	注意：对于select后面的子查询来说，这个子查询只能一次返回1条结果</span><br></pre></td></tr></table></figure>

<h1 id="union合并"><a href="#union合并" class="headerlink" title="union合并"></a>union合并</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">案例：查询工作岗位是MANAGER和SALESMAN的员工？</span><br><span class="line">select ename,job from emp where job = &#x27;MANAGER&#x27; or job = &#x27;SALESMAN&#x27;;</span><br><span class="line">select ename,job from emp where job in(&#x27;MANAGER&#x27;,&#x27;SALESMAN&#x27;);</span><br><span class="line">+--------+----------+</span><br><span class="line">| ename  | job      |</span><br><span class="line">+--------+----------+</span><br><span class="line">| ALLEN  | SALESMAN |</span><br><span class="line">| WARD   | SALESMAN |</span><br><span class="line">| JONES  | MANAGER  |</span><br><span class="line">| MARTIN | SALESMAN |</span><br><span class="line">| BLAKE  | MANAGER  |</span><br><span class="line">| CLARK  | MANAGER  |</span><br><span class="line">| TURNER | SALESMAN |</span><br><span class="line">+--------+----------+</span><br><span class="line"></span><br><span class="line">select ename,job from emp where job = &#x27;MANAGER&#x27;</span><br><span class="line">union</span><br><span class="line">select ename,job from emp where job = &#x27;SALESMAN&#x27;;</span><br><span class="line"></span><br><span class="line">+--------+----------+</span><br><span class="line">| ename  | job      |</span><br><span class="line">+--------+----------+</span><br><span class="line">| JONES  | MANAGER  |</span><br><span class="line">| BLAKE  | MANAGER  |</span><br><span class="line">| CLARK  | MANAGER  |</span><br><span class="line">| ALLEN  | SALESMAN |</span><br><span class="line">| WARD   | SALESMAN |</span><br><span class="line">| MARTIN | SALESMAN |</span><br><span class="line">| TURNER | SALESMAN |</span><br><span class="line">+--------+----------+</span><br><span class="line">union的效率要高一些。对于表连接来说，每连接一次新表，</span><br><span class="line">则匹配的次数满足笛卡尔积，成倍的翻。。。</span><br><span class="line">但是union可以减少匹配的次数。在减少匹配次数的情况下，</span><br><span class="line">还可以完成两个结果集的拼接。</span><br><span class="line"></span><br><span class="line">a 连接 b 连接 c</span><br><span class="line">a 10条记录</span><br><span class="line">b 10条记录</span><br><span class="line">c 10条记录</span><br><span class="line">匹配次数是：1000</span><br><span class="line"></span><br><span class="line">a 连接 b一个结果：10 * 10 --&gt; 100次</span><br><span class="line">a 连接 c一个结果：10 * 10 --&gt; 100次</span><br><span class="line">使用union的话是：100次 + 100次 = 200次。（union把乘法变成了加法运算）</span><br><span class="line"></span><br><span class="line">union在使用的时候有注意事项吗？</span><br><span class="line"></span><br><span class="line">//错误的：union在进行结果集合并的时候，要求两个结果集的列数相同。</span><br><span class="line">select ename,job from emp where job = &#x27;MANAGER&#x27;</span><br><span class="line">union</span><br><span class="line">select ename from emp where job = &#x27;SALESMAN&#x27;;</span><br><span class="line"></span><br><span class="line">// MYSQL可以，oracle语法严格 ，不可以，报错。要求：结果集合并时列和列的数据类型也要一致。</span><br><span class="line">select ename,job from emp where job = &#x27;MANAGER&#x27;</span><br><span class="line">union</span><br><span class="line">select ename,sal from emp where job = &#x27;SALESMAN&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">limit作用：将查询结果集的一部分取出来。通常使用在分页查询当中。</span><br><span class="line">百度默认：一页显示10条记录。</span><br><span class="line">分页的作用是为了提高用户的体验，因为一次全部都查出来，用户体验差。可以一页一页翻页看</span><br><span class="line"></span><br><span class="line">limit的使用</span><br><span class="line">完整用法：limit startIndex, length</span><br><span class="line">  startIndex是起始下标，length是长度。</span><br><span class="line">  起始下标从0开始。</span><br><span class="line"></span><br><span class="line">缺省用法：limit 5; 这是取前5</span><br><span class="line"></span><br><span class="line">注意：mysql当中limit在order by之后执行！！！！！！</span><br><span class="line"></span><br><span class="line">分页</span><br><span class="line">每页显示3条记录</span><br><span class="line">第1页：limit 0,3		[0 1 2]</span><br><span class="line">第2页：limit 3,3		[3 4 5]</span><br><span class="line">第3页：limit 6,3		[6 7 8]</span><br><span class="line">第4页：limit 9,3		[9 10 11]</span><br><span class="line"></span><br><span class="line">每页显示pageSize条记录</span><br><span class="line">第pageNo页：limit (pageNo - 1) * pageSize  , pageSize</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">  // 用户提交过来一个页码，以及每页显示的记录条数</span><br><span class="line">  int pageNo = 5; //第5页</span><br><span class="line">  int pageSize = 10; //每页显示10条</span><br><span class="line"></span><br><span class="line">  int startIndex = (pageNo - 1) * pageSize;</span><br><span class="line">  String sql = &quot;select ...limit &quot; + startIndex + &quot;, &quot; + pageSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">记公式：</span><br><span class="line">limit (pageNo-1)*pageSize , pageSize</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关于DQL语句的大总结：</span><br><span class="line">select </span><br><span class="line">  ...</span><br><span class="line">from</span><br><span class="line">  ...</span><br><span class="line">where</span><br><span class="line">  ...</span><br><span class="line">group by</span><br><span class="line">  ...</span><br><span class="line">having</span><br><span class="line">  ...</span><br><span class="line">order by</span><br><span class="line">  ...</span><br><span class="line">limit</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">执行顺序？</span><br><span class="line">  1.from</span><br><span class="line">  2.where</span><br><span class="line">  3.group by</span><br><span class="line">  4.having</span><br><span class="line">  5.select</span><br><span class="line">  6.order by</span><br><span class="line">  7.limit..</span><br></pre></td></tr></table></figure>

<h1 id="表的创建"><a href="#表的创建" class="headerlink" title="表的创建"></a>表的创建</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">建表的语法格式：(建表属于DDL语句，DDL包括：create drop alter)</span><br><span class="line">create table 表名(字段名1 数据类型, 字段名2 数据类型, 字段名3 数据类型);</span><br><span class="line"></span><br><span class="line">create table 表名(</span><br><span class="line">  字段名1 数据类型, </span><br><span class="line">  字段名2 数据类型, </span><br><span class="line">  字段名3 数据类型</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">表名：建议以t_ 或者 tbl_开始，可读性强。见名知意。</span><br><span class="line">字段名：见名知意。</span><br><span class="line">表名和字段名都属于标识符。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">关于mysql中的数据类型</span><br><span class="line">很多数据类型，我们只需要掌握一些常见的数据类型即可。</span><br><span class="line"></span><br><span class="line">  varchar(最长255)</span><br><span class="line">    可变长度的字符串</span><br><span class="line">    比较智能，节省空间。</span><br><span class="line">    会根据实际的数据长度动态分配空间。</span><br><span class="line"></span><br><span class="line">    优点：节省空间</span><br><span class="line">    缺点：需要动态分配空间，速度慢。</span><br><span class="line"></span><br><span class="line">  char(最长255)</span><br><span class="line">    定长字符串</span><br><span class="line">    不管实际的数据长度是多少。</span><br><span class="line">    分配固定长度的空间去存储数据。</span><br><span class="line">    使用不恰当的时候，可能会导致空间的浪费。</span><br><span class="line"></span><br><span class="line">    优点：不需要动态分配空间，速度快。</span><br><span class="line">    缺点：使用不当可能会导致空间的浪费。</span><br><span class="line"></span><br><span class="line">   varchar 和 char 我们应该怎么选择？</span><br><span class="line">      性别字段你选什么？因为性别是固定长度的字符串，所以选择char。</span><br><span class="line">      姓名字段你选什么？每一个人的名字长度不同，所以选择varchar。</span><br><span class="line"></span><br><span class="line">  int(最长11)</span><br><span class="line">    数字中的整数型。等同于java的int。</span><br><span class="line"></span><br><span class="line">  bigint</span><br><span class="line">    数字中的长整型。等同于java中的long。</span><br><span class="line"></span><br><span class="line">  float	</span><br><span class="line">    单精度浮点型数据</span><br><span class="line"></span><br><span class="line">  double</span><br><span class="line">    双精度浮点型数据</span><br><span class="line"></span><br><span class="line">  date</span><br><span class="line">    短日期类型</span><br><span class="line"></span><br><span class="line">  datetime</span><br><span class="line">    长日期类型</span><br><span class="line"></span><br><span class="line">  clob </span><br><span class="line">    字符大对象</span><br><span class="line">    最多可以存储4G的字符串。</span><br><span class="line">    比如：存储一篇文章，存储一个说明。</span><br><span class="line">    超过255个字符的都要采用CLOB字符大对象来存储。</span><br><span class="line">    Character Large OBject:CLOB</span><br><span class="line"></span><br><span class="line">  blob</span><br><span class="line">    二进制大对象</span><br><span class="line">    Binary Large OBject</span><br><span class="line">    专门用来存储图片、声音、视频等流媒体数据。</span><br><span class="line">    往BLOB类型的字段上插入数据的时候，例如插入一个图片、视频等，</span><br><span class="line">    你需要使用IO流才行。</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">创建一个学生表？</span><br><span class="line">    学号、姓名、年龄、性别、邮箱地址</span><br><span class="line">    create table t_student(</span><br><span class="line">      no int,</span><br><span class="line">      name varchar(32),</span><br><span class="line">      sex char(1),</span><br><span class="line">      age int(3),</span><br><span class="line">      email varchar(255)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  删除表：</span><br><span class="line">  drop table t_student; // 当这张表不存在的时候会报错！</span><br><span class="line"></span><br><span class="line">  // 如果这张表存在的话，删除</span><br><span class="line">  drop table if exists t_student;</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="插入数据insert"><a href="#插入数据insert" class="headerlink" title="插入数据insert"></a>插入数据insert</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">插入数据insert （DML）</span><br><span class="line">	</span><br><span class="line">语法格式：</span><br><span class="line">  insert into 表名(字段名1,字段名2,字段名3...) values(值1,值2,值3);</span><br><span class="line"></span><br><span class="line">  注意：字段名和值要一一对应。什么是一一对应？</span><br><span class="line">    数量要对应。数据类型要对应。</span><br><span class="line">    </span><br><span class="line">insert语句中的“字段名”可以省略吗？可以</span><br><span class="line">  insert into t_student values(2); //错误的</span><br><span class="line"></span><br><span class="line">  // 注意：前面的字段名省略的话，等于都写上了！所以值也要都写上！</span><br><span class="line">  insert into t_student values(2, &#x27;lisi&#x27;, &#x27;f&#x27;, 20, &#x27;lisi@123.com&#x27;);</span><br><span class="line">  +------+------+------+------+--------------+</span><br><span class="line">  | no   | name | sex  | age  | email        |</span><br><span class="line">  +------+------+------+------+--------------+</span><br><span class="line">  |    1 | NULL | m    | NULL | NULL         |</span><br><span class="line">  |    2 | lisi | f    |   20 | lisi@123.com |</span><br><span class="line">  +------+------+------+------+--------------+</span><br><span class="line"></span><br><span class="line">一次可以插入多条记录：</span><br><span class="line">  insert into t_user(id,name,birth,create_time) values</span><br><span class="line">  (1,&#x27;zs&#x27;,&#x27;1980-10-11&#x27;,now()), </span><br><span class="line">  (2,&#x27;lisi&#x27;,&#x27;1981-10-11&#x27;,now()),</span><br><span class="line">  (3,&#x27;wangwu&#x27;,&#x27;1982-10-11&#x27;,now());</span><br><span class="line"></span><br><span class="line">  语法：insert into t_user(字段名1,字段名2) values(),(),(),();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert插入日期</span><br><span class="line">	数字格式化：format</span><br><span class="line">	</span><br><span class="line">	格式化数字：format(数字, &#x27;格式&#x27;)</span><br><span class="line">  select ename,format(sal, &#x27;$999,999&#x27;) as sal from emp;</span><br><span class="line"></span><br><span class="line">str_to_date：将字符串varchar类型转换成date类型</span><br><span class="line">date_format：将date类型转换成具有一定格式的varchar字符串类型。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">插入数据？</span><br><span class="line">insert into t_user(id,name,birth) values(1, &#x27;zhangsan&#x27;, &#x27;01-10-1990&#x27;); // 1990年10月1日</span><br><span class="line">出问题了：原因是类型不匹配。数据库birth是date类型，这里给了一个字符串varchar。</span><br><span class="line"></span><br><span class="line">怎么办？可以使用str_to_date函数进行类型转换。</span><br><span class="line">str_to_date函数可以将字符串转换成日期类型date？</span><br><span class="line">语法格式：</span><br><span class="line">  str_to_date(&#x27;字符串日期&#x27;, &#x27;日期格式&#x27;)</span><br><span class="line"></span><br><span class="line">mysql的日期格式：</span><br><span class="line">  %Y	年</span><br><span class="line">  %m    月</span><br><span class="line">  %d    日</span><br><span class="line">  %h	时</span><br><span class="line">  %i	分</span><br><span class="line">  %s	秒</span><br><span class="line"></span><br><span class="line">insert into t_user(id,name,birth) values(1, &#x27;zhangsan&#x27;, str_to_date(&#x27;01-10-1990&#x27;,&#x27;%d-%m-%Y&#x27;));</span><br><span class="line"></span><br><span class="line">str_to_date函数可以把字符串varchar转换成日期date类型数据，</span><br><span class="line">通常使用在插入insert方面，因为插入的时候需要一个日期类型的数据，</span><br><span class="line">需要通过该函数将字符串转换成date。</span><br><span class="line"></span><br><span class="line">如果你提供的日期字符串是这个格式，str_to_date函数就不需要了！！！</span><br><span class="line">  %Y-%m-%d</span><br><span class="line">insert into t_user(id,name,birth) values(2, &#x27;lisi&#x27;, &#x27;1990-10-01&#x27;);</span><br><span class="line"></span><br><span class="line">查询的时候可以以某个特定的日期格式展示吗？</span><br><span class="line">date_format</span><br><span class="line">这个函数可以将日期类型转换成特定格式的字符串。</span><br><span class="line"></span><br><span class="line">select id,name,date_format(birth, &#x27;%m/%d/%Y&#x27;) as birth from t_user;</span><br><span class="line">+------+----------+------------+</span><br><span class="line">| id   | name     | birth      |</span><br><span class="line">+------+----------+------------+</span><br><span class="line">|    1 | zhangsan | 10/01/1990 |</span><br><span class="line">|    2 | lisi     | 10/01/1990 |</span><br><span class="line">+------+----------+------------+</span><br><span class="line"></span><br><span class="line">date_format函数怎么用？</span><br><span class="line">  date_format(日期类型数据, &#x27;日期格式&#x27;)</span><br><span class="line">  这个函数通常使用在查询日期方面。设置展示的日期格式。</span><br><span class="line"></span><br><span class="line">mysql&gt; select id,name,birth from t_user;</span><br><span class="line">+------+----------+------------+</span><br><span class="line">| id   | name     | birth      |</span><br><span class="line">+------+----------+------------+</span><br><span class="line">|    1 | zhangsan | 1990-10-01 |</span><br><span class="line">|    2 | lisi     | 1990-10-01 |</span><br><span class="line">+------+----------+------------+</span><br><span class="line">以上的SQL语句实际上是进行了默认的日期格式化，</span><br><span class="line">自动将数据库中的date类型转换成varchar类型。</span><br><span class="line">并且采用的格式是mysql默认的日期格式：&#x27;%Y-%m-%d&#x27;</span><br><span class="line"></span><br><span class="line">select id,name,date_format(birth,&#x27;%Y/%m/%d&#x27;) as birth from t_user;</span><br><span class="line"></span><br><span class="line">java中的日期格式？</span><br><span class="line">  yyyy-MM-dd HH:mm:ss SSS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">date和datetime两个类型的区别？</span><br><span class="line">	date是短日期：只包括年月日信息。</span><br><span class="line">	datetime是长日期：包括年月日时分秒信息。</span><br><span class="line">	mysql短日期默认格式：%Y-%m-%d</span><br><span class="line">	mysql长日期默认格式：%Y-%m-%d %h:%i:%s</span><br></pre></td></tr></table></figure>

<h1 id="修改update"><a href="#修改update" class="headerlink" title="修改update"></a>修改update</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">update 表名 set 字段名1=值1,字段名2=值2,字段名3=值3... where 条件;</span><br><span class="line"></span><br><span class="line">注意：没有条件限制会导致所有数据全部更新。</span><br><span class="line"></span><br><span class="line">update t_user set name = &#x27;jack&#x27;, birth = &#x27;2000-10-11&#x27; where id = 2;</span><br><span class="line">+------+----------+------------+---------------------+</span><br><span class="line">| id   | name     | birth      | create_time         |</span><br><span class="line">+------+----------+------------+---------------------+</span><br><span class="line">|    1 | zhangsan | 1990-10-01 | 2020-03-18 15:49:50 |</span><br><span class="line">|    2 | jack     | 2000-10-11 | 2020-03-18 15:51:23 |</span><br><span class="line">+------+----------+------------+---------------------+</span><br><span class="line"></span><br><span class="line">update t_user set name = &#x27;jack&#x27;, birth = &#x27;2000-10-11&#x27;, create_time = now() where id = 2;</span><br><span class="line"></span><br><span class="line">更新所有？</span><br><span class="line">  update t_user set name = &#x27;abc&#x27;;</span><br></pre></td></tr></table></figure>

<h1 id="删除数据-delete"><a href="#删除数据-delete" class="headerlink" title="删除数据 delete"></a>删除数据 delete</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法格式？</span><br><span class="line">  delete from 表名 where 条件;</span><br><span class="line"></span><br><span class="line">注意：没有条件，整张表的数据会全部删除！</span><br><span class="line"></span><br><span class="line">delete from t_user where id = 2;</span><br><span class="line"></span><br><span class="line">insert into t_user(id) values(2);</span><br><span class="line"></span><br><span class="line">delete from t_user; // 删除所有！</span><br><span class="line"></span><br><span class="line">快速删除表中的数据？【truncate比较重要，必须掌握】</span><br><span class="line"></span><br><span class="line">//删除dept_bak表中的数据</span><br><span class="line">delete from dept_bak; //这种删除数据的方式比较慢。</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from dept_bak;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">delete语句删除数据的原理？（delete属于DML语句！！！）</span><br><span class="line">  表中的数据被删除了，但是这个数据在硬盘上的真实存储空间不会被释放！！！</span><br><span class="line">  这种删除缺点是：删除效率比较低。</span><br><span class="line">  这种删除优点是：支持回滚，后悔了可以再恢复数据！！！</span><br><span class="line"></span><br><span class="line">truncate语句删除数据的原理？</span><br><span class="line">  这种删除效率比较高，表被一次截断，物理删除。</span><br><span class="line">  这种删除缺点：不支持回滚。</span><br><span class="line">  这种删除优点：快速。</span><br><span class="line"></span><br><span class="line">用法：truncate table dept_bak; （这种操作属于DDL操作。）</span><br><span class="line"></span><br><span class="line">大表非常大，上亿条记录？？？？</span><br><span class="line">  删除的时候，使用delete，也许需要执行1个小时才能删除完！效率较低。</span><br><span class="line">  可以选择使用truncate删除表中的数据。只需要不到1秒钟的时间就删除结束。效率较高。</span><br><span class="line">  但是使用truncate之前，必须仔细询问客户是否真的要删除，并警告删除之后不可恢复！</span><br><span class="line"></span><br><span class="line">  truncate是删除表中的数据，表还在！</span><br><span class="line"></span><br><span class="line">删除表操作？</span><br><span class="line">  drop table 表名; // 这不是删除表中的数据，这是把表删除。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">什么是约束？</span><br><span class="line">约束对应的英语单词： constraint</span><br><span class="line">在创建表的时候，我们可以给表中的字段加上一些约束，来保证这个表中数据的</span><br><span class="line">完整性、有效性！！！</span><br><span class="line"></span><br><span class="line">约束的作用就是为了保证：表中的数据有效！！</span><br><span class="line"></span><br><span class="line">约束包括哪些？</span><br><span class="line">非空约束：not null</span><br><span class="line">唯一性约束: unique</span><br><span class="line">主键约束: primary key （简称PK）</span><br><span class="line">外键约束：foreign key（简称FK）</span><br><span class="line">检查约束：check（mysql不支持，oracle支持）</span><br></pre></td></tr></table></figure>

<h2 id="非空约束：not-null"><a href="#非空约束：not-null" class="headerlink" title="非空约束：not null"></a>非空约束：not null</h2><blockquote>
<p>唯一性约束unique约束的字段不能重复，但是可以为NULL。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table if exists t_vip;</span><br><span class="line">create table t_vip(</span><br><span class="line">  id int,</span><br><span class="line">  name varchar(255) not null  // not null只有列级约束，没有表级约束！</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="唯一性约束-unique"><a href="#唯一性约束-unique" class="headerlink" title="唯一性约束: unique"></a>唯一性约束: unique</h2><blockquote>
<p>唯一性约束unique约束的字段不能重复，但是可以为NULL。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">唯一性约束unique约束的字段不能重复，但是可以为NULL。</span><br><span class="line">drop table if exists t_vip;</span><br><span class="line">create table t_vip(</span><br><span class="line">  id int,</span><br><span class="line">  name varchar(255) unique,</span><br><span class="line">  email varchar(255)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">如何做到联合唯一约束</span><br><span class="line">drop table if exists t_vip;</span><br><span class="line">create table t_vip(</span><br><span class="line">  id int,</span><br><span class="line">  name varchar(255),</span><br><span class="line">  email varchar(255),</span><br><span class="line">  unique(name,email) // 约束没有添加在列的后面，这种约束被称为表级约束。</span><br><span class="line">);</span><br><span class="line">name和email两个字段联合起来唯一</span><br><span class="line">在mysql当中，如果一个字段同时被not null和unique约束的话，该字段自动变成主键字段。</span><br></pre></td></tr></table></figure>

<h2 id="主键约束-primary-key"><a href="#主键约束-primary-key" class="headerlink" title="主键约束: primary key"></a>主键约束: primary key</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主键约束的相关术语？</span><br><span class="line">  主键约束：就是一种约束。</span><br><span class="line">  主键字段：该字段上添加了主键约束，这样的字段叫做：主键字段</span><br><span class="line">  主键值：主键字段中的每一个值都叫做：主键值。</span><br><span class="line"></span><br><span class="line">什么是主键？有啥用？</span><br><span class="line">  主键值是每一行记录的唯一标识。</span><br><span class="line">  主键值是每一行记录的身份证号！！！</span><br><span class="line"></span><br><span class="line">记住：任何一张表都应该有主键，没有主键，表无效！！</span><br><span class="line"></span><br><span class="line">主键的特征：not null + unique（主键值不能是NULL，同时也不能重复！）</span><br><span class="line"></span><br><span class="line">怎么给一张表添加主键约束呢？</span><br><span class="line">  drop table if exists t_vip;</span><br><span class="line">  // 1个字段做主键，叫做：单一主键</span><br><span class="line">  create table t_vip(</span><br><span class="line">    id int primary key,  //列级约束</span><br><span class="line">    name varchar(255)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">表级约束主要是给多个字段联合起来添加约束？</span><br><span class="line">  drop table if exists t_vip;</span><br><span class="line">  // id和name联合起来做主键：复合主键！！！！</span><br><span class="line">  create table t_vip(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(255),</span><br><span class="line">    email varchar(255),</span><br><span class="line">    primary key(id,name)</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line">在实际开发中不建议使用：复合主键。建议使用单一主键！</span><br><span class="line">因为主键值存在的意义就是这行记录的身份证号，只要意义达到即可，单一主键可以做到。</span><br><span class="line">复合主键比较复杂，不建议使用！！！</span><br><span class="line"></span><br><span class="line">主键值建议使用：</span><br><span class="line">  int</span><br><span class="line">  bigint</span><br><span class="line">  char</span><br><span class="line">  等类型。</span><br><span class="line"></span><br><span class="line">不建议使用：varchar来做主键。主键值一般都是数字，一般都是定长的！</span><br><span class="line"></span><br><span class="line">主键除了：单一主键和复合主键之外，还可以这样进行分类？</span><br><span class="line">  自然主键：主键值是一个自然数，和业务没关系。</span><br><span class="line">  业务主键：主键值和业务紧密关联，例如拿银行卡账号做主键值。这就是业务主键！</span><br><span class="line"></span><br><span class="line">在实际开发中使用业务主键多，还是使用自然主键多一些？</span><br><span class="line">  自然主键使用比较多，因为主键只要做到不重复就行，不需要有意义。</span><br><span class="line">  业务主键不好，因为主键一旦和业务挂钩，那么当业务发生变动的时候，</span><br><span class="line">  可能会影响到主键值，所以业务主键不建议使用。尽量使用自然主键。</span><br><span class="line">  </span><br><span class="line">在mysql当中，有一种机制，可以帮助我们自动维护一个主键值？</span><br><span class="line">		drop table if exists t_vip;</span><br><span class="line">		create table t_vip(</span><br><span class="line">			id int primary key auto_increment, //auto_increment表示自增，从1开始，以1递增！</span><br><span class="line">			name varchar(255)</span><br><span class="line">		);</span><br></pre></td></tr></table></figure>



<h2 id="外键约束：foreign-key"><a href="#外键约束：foreign-key" class="headerlink" title="外键约束：foreign key"></a>外键约束：foreign key</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">外键约束涉及到的相关术语：</span><br><span class="line">  外键约束：一种约束（ foreign key）</span><br><span class="line">  外键字段：该字段上添加了外键约束</span><br><span class="line">  外键值：外键字段当中的每一个值。</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><blockquote>
<p>什么是存储引擎，有什么用呢？</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">存储引擎是MySQL中特有的一个术语，其它数据库中没有。（Oracle中有，但是不叫这个名字）</span><br><span class="line">存储引擎这个名字高端大气上档次。实际上存储引擎是一个表存储/组织数据的方式。</span><br><span class="line">不同的存储引擎，表存储数据的方式不同。</span><br><span class="line"></span><br><span class="line">怎么给表添加/指定“存储引擎”呢？</span><br><span class="line">show create table t_student;</span><br><span class="line"></span><br><span class="line">可以在建表的时候给表指定存储引擎。</span><br><span class="line">CREATE TABLE `t_student` (</span><br><span class="line">  `no` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `cno` int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`no`),</span><br><span class="line">  KEY `cno` (`cno`),</span><br><span class="line">  CONSTRAINT `t_student_ibfk_1` FOREIGN KEY (`cno`) REFERENCES `t_class` (`classno`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">在建表的时候可以在最后小括号的&quot;)&quot;的右边使用：</span><br><span class="line">  ENGINE来指定存储引擎。</span><br><span class="line">  CHARSET来指定这张表的字符编码方式。</span><br><span class="line">	</span><br><span class="line">结论：</span><br><span class="line">  mysql默认的存储引擎是：InnoDB</span><br><span class="line">  mysql默认的字符编码方式是：utf8</span><br><span class="line">  </span><br><span class="line">怎么查看mysql支持哪些存储引擎呢？</span><br><span class="line">命令： show engines \G</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="MyISAM存储引擎"><a href="#MyISAM存储引擎" class="headerlink" title="MyISAM存储引擎"></a>MyISAM存储引擎</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">它管理的表具有以下特征：</span><br><span class="line">  使用三个文件表示每个表：</span><br><span class="line">    格式文件 — 存储表结构的定义（mytable.frm）</span><br><span class="line">    数据文件 — 存储表行的内容（mytable.MYD）</span><br><span class="line">    索引文件 — 存储表上索引（mytable.MYI）：索引是一本书的目录，缩小扫描范围，提高查询效率的一种机制。</span><br><span class="line">  可被转换为压缩、只读表来节省空间</span><br><span class="line"></span><br><span class="line">  提示一下：</span><br><span class="line">    对于一张表来说，只要是主键，</span><br><span class="line">    或者加有unique约束的字段上会自动创建索引。</span><br><span class="line"></span><br><span class="line">  MyISAM存储引擎特点：</span><br><span class="line">    可被转换为压缩、只读表来节省空间</span><br><span class="line">    这是这种存储引擎的优势！！！！</span><br><span class="line">  </span><br><span class="line">  MyISAM不支持事务机制，安全性低。</span><br></pre></td></tr></table></figure>

<h2 id="InnoDB存储引擎"><a href="#InnoDB存储引擎" class="headerlink" title="InnoDB存储引擎"></a>InnoDB存储引擎</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是mysql默认的存储引擎，同时也是一个重量级的存储引擎。</span><br><span class="line">InnoDB支持事务，支持数据库崩溃后自动恢复机制。</span><br><span class="line">InnoDB存储引擎最主要的特点是：非常安全。</span><br><span class="line"></span><br><span class="line">它管理的表具有下列主要特征：</span><br><span class="line">  – 每个 InnoDB 表在数据库目录中以.frm 格式文件表示</span><br><span class="line">  – InnoDB 表空间 tablespace 被用于存储表的内容（表空间是一个逻辑名称。表空间存储数据+索引。）</span><br><span class="line"></span><br><span class="line">  – 提供一组用来记录事务性活动的日志文件</span><br><span class="line">  – 用 COMMIT(提交)、SAVEPOINT 及ROLLBACK(回滚)支持事务处理</span><br><span class="line">  – 提供全 ACID 兼容</span><br><span class="line">  – 在 MySQL 服务器崩溃后提供自动恢复</span><br><span class="line">  – 多版本（MVCC）和行级锁定</span><br><span class="line">  – 支持外键及引用的完整性，包括级联删除和更新</span><br><span class="line"></span><br><span class="line">InnoDB最大的特点就是支持事务：</span><br><span class="line">  以保证数据的安全。效率不是很高，并且也不能压缩，不能转换为只读，</span><br><span class="line">  不能很好的节省存储空间。</span><br></pre></td></tr></table></figure>

<h2 id="MEMORY存储引擎"><a href="#MEMORY存储引擎" class="headerlink" title="MEMORY存储引擎"></a>MEMORY存储引擎</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用 MEMORY 存储引擎的表，其数据存储在内存中，且行的长度固定，</span><br><span class="line">这两个特点使得 MEMORY 存储引擎非常快。</span><br><span class="line"></span><br><span class="line">MEMORY 存储引擎管理的表具有下列特征：</span><br><span class="line">  – 在数据库目录内，每个表均以.frm 格式的文件表示。</span><br><span class="line">  – 表数据及索引被存储在内存中。（目的就是快，查询快！）</span><br><span class="line">  – 表级锁机制。</span><br><span class="line">  – 不能包含 TEXT 或 BLOB 字段。</span><br><span class="line"></span><br><span class="line">MEMORY 存储引擎以前被称为HEAP 引擎。</span><br><span class="line"></span><br><span class="line">MEMORY引擎优点：查询效率是最高的。不需要和硬盘交互。</span><br><span class="line">MEMORY引擎缺点：不安全，关机之后数据消失。因为数据和索引都是在内存当中。</span><br></pre></td></tr></table></figure>

<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">什么是事务？</span><br><span class="line"></span><br><span class="line">一个事务其实就是一个完整的业务逻辑。</span><br><span class="line">是一个最小的工作单元。不可再分。</span><br><span class="line"></span><br><span class="line">什么是一个完整的业务逻辑？</span><br><span class="line">  假设转账，从A账户向B账户中转账10000.</span><br><span class="line">  将A账户的钱减去10000（update语句）</span><br><span class="line">  将B账户的钱加上10000（update语句）</span><br><span class="line">  这就是一个完整的业务逻辑。</span><br><span class="line"></span><br><span class="line">  以上的操作是一个最小的工作单元，要么同时成功，要么同时失败，不可再分。</span><br><span class="line">  这两个update语句要求必须同时成功或者同时失败，这样才能保证钱是正确的。</span><br><span class="line"></span><br><span class="line">只有DML语句才会有事务这一说，其它语句和事务无关！！！</span><br><span class="line">insert</span><br><span class="line">delete</span><br><span class="line">update</span><br><span class="line">只有以上的三个语句和事务有关系，其它都没有关系。</span><br><span class="line"></span><br><span class="line">因为 只有以上的三个语句是数据库表中数据进行增、删、改的。</span><br><span class="line">只要你的操作一旦涉及到数据的增、删、改，那么就一定要考虑安全问题。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">InnoDB存储引擎：提供一组用来记录事务性活动的日志文件</span><br><span class="line"></span><br><span class="line">事务开启了：</span><br><span class="line">insert</span><br><span class="line">insert</span><br><span class="line">insert</span><br><span class="line">delete</span><br><span class="line">update</span><br><span class="line">update</span><br><span class="line">update</span><br><span class="line">事务结束了！</span><br><span class="line"></span><br><span class="line">在事务的执行过程中，每一条DML的操作都会记录到“事务性活动的日志文件”中。</span><br><span class="line">在事务的执行过程中，我们可以提交事务，也可以回滚事务。</span><br><span class="line"></span><br><span class="line">提交事务？</span><br><span class="line">  清空事务性活动的日志文件，将数据全部彻底持久化到数据库表中。</span><br><span class="line">  提交事务标志着，事务的结束。并且是一种全部成功的结束。</span><br><span class="line"></span><br><span class="line">回滚事务？</span><br><span class="line">  将之前所有的DML操作全部撤销，并且清空事务性活动的日志文件</span><br><span class="line">  回滚事务标志着，事务的结束。并且是一种全部失败的结束。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="提交事务、回滚事务"><a href="#提交事务、回滚事务" class="headerlink" title="提交事务、回滚事务"></a>提交事务、回滚事务</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">提交事务：commit; 语句</span><br><span class="line">回滚事务：rollback; 语句（回滚永远都是只能回滚到上一次的提交点！）</span><br><span class="line"></span><br><span class="line">事务对应的英语单词是：transaction</span><br><span class="line"></span><br><span class="line">测试一下，在mysql当中默认的事务行为是怎样的？</span><br><span class="line">  mysql默认情况下是支持自动提交事务的。（自动提交）</span><br><span class="line">  什么是自动提交？</span><br><span class="line">    每执行一条DML语句，则提交一次！</span><br><span class="line"></span><br><span class="line">  这种自动提交实际上是不符合我们的开发习惯，因为一个业务</span><br><span class="line">  通常是需要多条DML语句共同执行才能完成的，为了保证数据</span><br><span class="line">  的安全，必须要求同时成功之后再提交，所以不能执行一条</span><br><span class="line">  就提交一条。</span><br><span class="line"></span><br><span class="line">怎么将mysql的自动提交机制关闭掉呢？</span><br><span class="line">  先执行这个命令：start transaction;</span><br></pre></td></tr></table></figure>

<p><strong>代码演示</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">演示事务：</span><br><span class="line">  ---------------------------------回滚事务----------------------------------------</span><br><span class="line">  mysql&gt; use bjpowernode;</span><br><span class="line">  Database changed</span><br><span class="line">  mysql&gt; select * from dept_bak;</span><br><span class="line">  Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; start transaction;</span><br><span class="line">  Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; insert into dept_bak values(10,&#x27;abc&#x27;, &#x27;tj&#x27;);</span><br><span class="line">  Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; insert into dept_bak values(10,&#x27;abc&#x27;, &#x27;tj&#x27;);</span><br><span class="line">  Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; select * from dept_bak;</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  | DEPTNO | DNAME | LOC  |</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  |     10 | abc   | tj   |</span><br><span class="line">  |     10 | abc   | tj   |</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; rollback;</span><br><span class="line">  Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; select * from dept_bak;</span><br><span class="line">  Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ---------------------------------提交事务----------------------------------------</span><br><span class="line">  mysql&gt; use bjpowernode;</span><br><span class="line">  Database changed</span><br><span class="line">  mysql&gt; select * from dept_bak;</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  | DEPTNO | DNAME | LOC  |</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  |     10 | abc   | bj   |</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; start transaction;</span><br><span class="line">  Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; insert into dept_bak values(20,&#x27;abc</span><br><span class="line">  Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; insert into dept_bak values(20,&#x27;abc</span><br><span class="line">  Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; insert into dept_bak values(20,&#x27;abc</span><br><span class="line">  Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; commit;</span><br><span class="line">  Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; select * from dept_bak;</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  | DEPTNO | DNAME | LOC  |</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  |     10 | abc   | bj   |</span><br><span class="line">  |     20 | abc   | tj   |</span><br><span class="line">  |     20 | abc   | tj   |</span><br><span class="line">  |     20 | abc   | tj   |</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; rollback;</span><br><span class="line">  Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; select * from dept_bak;</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  | DEPTNO | DNAME | LOC  |</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  |     10 | abc   | bj   |</span><br><span class="line">  |     20 | abc   | tj   |</span><br><span class="line">  |     20 | abc   | tj   |</span><br><span class="line">  |     20 | abc   | tj   |</span><br><span class="line">  +--------+-------+------+</span><br><span class="line">  4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="事务四个特性"><a href="#事务四个特性" class="headerlink" title="事务四个特性"></a>事务四个特性</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A：原子性</span><br><span class="line">  说明事务是最小的工作单元。不可再分。</span><br><span class="line"></span><br><span class="line">C：一致性</span><br><span class="line">  所有事务要求，在同一个事务当中，所有操作必须同时成功，或者同时失败，</span><br><span class="line">  以保证数据的一致性。</span><br><span class="line"></span><br><span class="line">I：隔离性</span><br><span class="line">  A事务和B事务之间具有一定的隔离。</span><br><span class="line">  教室A和教室B之间有一道墙，这道墙就是隔离性。</span><br><span class="line">  A事务在操作一张表的时候，另一个事务B也操作这张表会那样？？？</span><br><span class="line"></span><br><span class="line">D：持久性</span><br><span class="line">  事务最终结束的一个保障。事务提交，就相当于将没有保存到硬盘上的数据</span><br><span class="line">  保存到硬盘上！</span><br></pre></td></tr></table></figure>

<h2 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A教室和B教室中间有一道墙，这道墙可以很厚，也可以很薄。这就是事务的隔离级别。</span><br><span class="line">这道墙越厚，表示隔离级别就越高。</span><br><span class="line"></span><br><span class="line">事务和事务之间的隔离级别有哪些呢？4个级别</span><br><span class="line"></span><br><span class="line">读未提交：read uncommitted（最低的隔离级别）《没有提交就读到了》</span><br><span class="line">  什么是读未提交？</span><br><span class="line">    事务A可以读取到事务B未提交的数据。</span><br><span class="line">  这种隔离级别存在的问题就是：</span><br><span class="line">    脏读现象！(Dirty Read)</span><br><span class="line">    我们称读到了脏数据。</span><br><span class="line">  这种隔离级别一般都是理论上的，大多数的数据库隔离级别都是二档起步！</span><br><span class="line"></span><br><span class="line">读已提交：read committed《提交之后才能读到》</span><br><span class="line">  什么是读已提交？</span><br><span class="line">    事务A只能读取到事务B提交之后的数据。</span><br><span class="line">  这种隔离级别解决了什么问题？</span><br><span class="line">    解决了脏读的现象。</span><br><span class="line">  这种隔离级别存在什么问题？</span><br><span class="line">    不可重复读取数据。</span><br><span class="line">    什么是不可重复读取数据呢？</span><br><span class="line">      在事务开启之后，第一次读到的数据是3条，当前事务还没有</span><br><span class="line">      结束，可能第二次再读取的时候，读到的数据是4条，3不等于4</span><br><span class="line">      称为不可重复读取。</span><br><span class="line"></span><br><span class="line">  这种隔离级别是比较真实的数据，每一次读到的数据是绝对的真实。</span><br><span class="line">  oracle数据库默认的隔离级别是：read committed</span><br><span class="line"></span><br><span class="line">可重复读：repeatable read《提交之后也读不到，永远读取的都是刚开启事务时的数据》</span><br><span class="line">  什么是可重复读取？</span><br><span class="line">    事务A开启之后，不管是多久，每一次在事务A中读取到的数据</span><br><span class="line">    都是一致的。即使事务B将数据已经修改，并且提交了，事务A</span><br><span class="line">    读取到的数据还是没有发生改变，这就是可重复读。</span><br><span class="line">  可重复读解决了什么问题？</span><br><span class="line">    解决了不可重复读取数据。</span><br><span class="line">  可重复读存在的问题是什么？</span><br><span class="line">    可以会出现幻影读。</span><br><span class="line">    每一次读取到的数据都是幻象。不够真实！</span><br><span class="line">  </span><br><span class="line">  早晨9点开始开启了事务，只要事务不结束，到晚上9点，读到的数据还是那样！</span><br><span class="line">  读到的是假象。不够绝对的真实。</span><br><span class="line"></span><br><span class="line">  mysql中默认的事务隔离级别就是这个！！！！！！！！！！！</span><br><span class="line"></span><br><span class="line">序列化/串行化：serializable（最高的隔离级别）</span><br><span class="line">  这是最高隔离级别，效率最低。解决了所有的问题。</span><br><span class="line">  这种隔离级别表示事务排队，不能并发！</span><br><span class="line">  synchronized，线程同步（事务同步）</span><br><span class="line">  每一次读取到的数据都是最真实的，并且效率是最低的。</span><br><span class="line"></span><br><span class="line">查看隔离级别：SELECT @@tx_isolation</span><br><span class="line">+-----------------+</span><br><span class="line">| @@tx_isolation  |</span><br><span class="line">+-----------------+</span><br><span class="line">| REPEATABLE-READ |</span><br><span class="line">+-----------------+</span><br><span class="line">mysql默认的隔离级别</span><br></pre></td></tr></table></figure>

<h1 id="索引（index）"><a href="#索引（index）" class="headerlink" title="索引（index）"></a>索引（index）</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">什么是索引？</span><br><span class="line">索引是在数据库表的字段上添加的，是为了提高查询效率存在的一种机制。</span><br><span class="line">一张表的一个字段可以添加一个索引，当然，多个字段联合起来也可以添加索引。</span><br><span class="line">索引相当于一本书的目录，是为了缩小扫描范围而存在的一种机制。</span><br><span class="line"></span><br><span class="line">对于一本字典来说，查找某个汉字有两种方式：</span><br><span class="line">  第一种方式：一页一页挨着找，直到找到为止，这种查找方式属于全字典扫描。</span><br><span class="line">  效率比较低。</span><br><span class="line">  第二种方式：先通过目录（索引）去定位一个大概的位置，然后直接定位到这个</span><br><span class="line">  位置，做局域性扫描，缩小扫描的范围，快速的查找。这种查找方式属于通过</span><br><span class="line">  索引检索，效率较高。</span><br><span class="line">  </span><br><span class="line">select * from t_user where name = &#x27;jack&#x27;;</span><br><span class="line"></span><br><span class="line">以上的这条SQL语句会去name字段上扫描，为什么？</span><br><span class="line">  因为查询条件是：name=&#x27;jack&#x27;</span><br><span class="line"></span><br><span class="line">如果name字段上没有添加索引（目录），或者说没有给name字段创建索引，</span><br><span class="line">MySQL会进行全扫描，会将name字段上的每一个值都比对一遍。效率比较低。</span><br><span class="line"></span><br><span class="line">MySQL在查询方面主要就是两种方式：</span><br><span class="line">  第一种方式：全表扫描</span><br><span class="line">  第二种方式：根据索引检索。</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">  在实际中，汉语字典前面的目录是排序的，按照a b c d e f....排序，</span><br><span class="line">  为什么排序呢？因为只有排序了才会有区间查找这一说！（缩小扫描范围</span><br><span class="line">  其实就是扫描某个区间罢了！）</span><br><span class="line"></span><br><span class="line">  在mysql数据库当中索引也是需要排序的，并且这个所以的排序和TreeSet</span><br><span class="line">  数据结构相同。TreeSet（TreeMap）底层是一个自平衡的二叉树！在mysql</span><br><span class="line">  当中索引是一个B-Tree数据结构。</span><br><span class="line"></span><br><span class="line">  遵循左小又大原则存放。采用中序遍历方式遍历取数据。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">假设有一张用户表：t_user</span><br><span class="line"></span><br><span class="line">id(PK)					name						每一行记录在硬盘上都有物理存储编号</span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line">100						zhangsan					0x1111</span><br><span class="line">120						lisi						0x2222</span><br><span class="line">99							wangwu					0x8888</span><br><span class="line">88							zhaoliu					0x9999</span><br><span class="line">101						jack						0x6666</span><br><span class="line">55							lucy						0x5555</span><br><span class="line">130						tom						0x7777</span><br><span class="line"></span><br><span class="line">提醒1：在任何数据库当中主键上都会自动添加索引对象，id字段上自动有索引，</span><br><span class="line">因为id是PK。另外在mysql当中，一个字段上如果有unique约束的话，也会自动</span><br><span class="line">创建索引对象。</span><br><span class="line"></span><br><span class="line">提醒2：在任何数据库当中，任何一张表的任何一条记录在硬盘存储上都有</span><br><span class="line">一个硬盘的物理存储编号。</span><br><span class="line"></span><br><span class="line">提醒3：在mysql当中，索引是一个单独的对象，不同的存储引擎以不同的形式</span><br><span class="line">存在，在MyISAM存储引擎中，索引存储在一个.MYI文件中。在InnoDB存储引擎中</span><br><span class="line">索引存储在一个逻辑名称叫做tablespace的当中。在MEMORY存储引擎当中索引</span><br><span class="line">被存储在内存当中。不管索引存储在哪里，索引在mysql当中都是一个树的形式</span><br><span class="line">存在。（自平衡二叉树：B-Tree）</span><br></pre></td></tr></table></figure>

<h2 id="添加索引的条件"><a href="#添加索引的条件" class="headerlink" title="添加索引的条件"></a>添加索引的条件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">什么条件下，我们会考虑给字段添加索引呢？</span><br><span class="line">条件1：数据量庞大（到底有多么庞大算庞大，这个需要测试，因为每一个硬件环境不同）</span><br><span class="line">条件2：该字段经常出现在where的后面，以条件的形式存在，也就是说这个字段总是被扫描。</span><br><span class="line">条件3：该字段很少的DML(insert delete update)操作。（因为DML之后，索引需要重新排序。）</span><br><span class="line"></span><br><span class="line">建议不要随意添加索引，因为索引也是需要维护的，太多的话反而会降低系统的性能。</span><br><span class="line">建议通过主键查询，建议通过unique约束的字段进行查询，效率是比较高的。</span><br></pre></td></tr></table></figure>

<h2 id="索引的创建和删除"><a href="#索引的创建和删除" class="headerlink" title="索引的创建和删除"></a>索引的创建和删除</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建索引：</span><br><span class="line">  mysql&gt; create index emp_ename_index on emp(ename);</span><br><span class="line">  给emp表的ename字段添加索引，起名：emp_ename_index</span><br><span class="line"></span><br><span class="line">删除索引：</span><br><span class="line">  mysql&gt; drop index emp_ename_index on emp;</span><br><span class="line">  将emp表上的emp_ename_index索引对象删除。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="是否使用索引进行检索"><a href="#是否使用索引进行检索" class="headerlink" title="是否使用索引进行检索"></a>是否使用索引进行检索</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.5、在mysql当中，怎么查看一个SQL语句是否使用了索引进行检索？</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from emp where ename = &#x27;KING&#x27;;</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">|  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | NULL |   14 | Using where |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">扫描14条记录：说明没有使用索引。type=ALL</span><br><span class="line"></span><br><span class="line">mysql&gt; create index emp_ename_index on emp(ename);</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from emp where ename = &#x27;KING&#x27;;</span><br><span class="line">+----+-------------+-------+------+-----------------+-----------------+---------+-------+------+-------------+</span><br><span class="line">| id | select_type | table | type | possible_keys   | key             | key_len | ref   | rows | Extra       |</span><br><span class="line">+----+-------------+-------+------+-----------------+-----------------+---------+-------+------+-------------+</span><br><span class="line">|  1 | SIMPLE      | emp   | ref  | emp_ename_index | emp_ename_index | 33      | const |    1 | Using where |</span><br><span class="line">+----+-------------+-------+------+-----------------+-----------------+---------+-------+------+-------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="索引失效的情况"><a href="#索引失效的情况" class="headerlink" title="索引失效的情况"></a>索引失效的情况</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">索引有失效的时候，什么时候索引失效呢？</span><br><span class="line"></span><br><span class="line">失效的第1种情况：</span><br><span class="line">  select * from emp where ename like &#x27;%T&#x27;;</span><br><span class="line"></span><br><span class="line">  ename上即使添加了索引，也不会走索引，为什么？</span><br><span class="line">    原因是因为模糊匹配当中以“%”开头了！</span><br><span class="line">    尽量避免模糊查询的时候以“%”开始。</span><br><span class="line">    这是一种优化的手段/策略。</span><br><span class="line"></span><br><span class="line">  mysql&gt; explain select * from emp where ename like &#x27;%T&#x27;;</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">  | id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">  |  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | NULL |   14 | Using where |</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line"></span><br><span class="line">失效的第2种情况：</span><br><span class="line">  使用or的时候会失效，如果使用or那么要求or两边的条件字段都要有</span><br><span class="line">  索引，才会走索引，如果其中一边有一个字段没有索引，那么另一个</span><br><span class="line">  字段上的索引也会实现。所以这就是为什么不建议使用or的原因。</span><br><span class="line"></span><br><span class="line">  mysql&gt; explain select * from emp where ename = &#x27;KING&#x27; or job = &#x27;MANAGER&#x27;;</span><br><span class="line">  +----+-------------+-------+------+-----------------+------+---------+------+------+-------------+</span><br><span class="line">  | id | select_type | table | type | possible_keys   | key  | key_len | ref  | rows | Extra       |</span><br><span class="line">  +----+-------------+-------+------+-----------------+------+---------+------+------+-------------+</span><br><span class="line">  |  1 | SIMPLE      | emp   | ALL  | emp_ename_index | NULL | NULL    | NULL |   14 | Using where |</span><br><span class="line">  +----+-------------+-------+------+-----------------+------+---------+------+------+-------------+</span><br><span class="line"></span><br><span class="line">失效的第3种情况：</span><br><span class="line">  使用复合索引的时候，没有使用左侧的列查找，索引失效</span><br><span class="line">  什么是复合索引？</span><br><span class="line">    两个字段，或者更多的字段联合起来添加一个索引，叫做复合索引。</span><br><span class="line">  </span><br><span class="line">  create index emp_job_sal_index on emp(job,sal);</span><br><span class="line">  </span><br><span class="line">  mysql&gt; explain select * from emp where job = &#x27;MANAGER&#x27;;</span><br><span class="line">  +----+-------------+-------+------+-------------------+-------------------+---------+-------+------+-------------+</span><br><span class="line">  | id | select_type | table | type | possible_keys     | key               | key_len | ref   | rows | Extra       |</span><br><span class="line">  +----+-------------+-------+------+-------------------+-------------------+---------+-------+------+-------------+</span><br><span class="line">  |  1 | SIMPLE      | emp   | ref  | emp_job_sal_index | emp_job_sal_index | 30      | const |    3 | Using where |</span><br><span class="line">  +----+-------------+-------+------+-------------------+-------------------+---------+-------+------+-------------+</span><br><span class="line">  </span><br><span class="line">  mysql&gt; explain select * from emp where sal = 800;</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">  | id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">  |  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | NULL |   14 | Using where |</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line"></span><br><span class="line">失效的第4种情况：</span><br><span class="line">  在where当中索引列参加了运算，索引失效。</span><br><span class="line">  mysql&gt; create index emp_sal_index on emp(sal);</span><br><span class="line"></span><br><span class="line">  explain select * from emp where sal = 800;</span><br><span class="line">  +----+-------------+-------+------+---------------+---------------+---------+-------+------+-------------+</span><br><span class="line">  | id | select_type | table | type | possible_keys | key           | key_len | ref   | rows | Extra       |</span><br><span class="line">  +----+-------------+-------+------+---------------+---------------+---------+-------+------+-------------+</span><br><span class="line">  |  1 | SIMPLE      | emp   | ref  | emp_sal_index | emp_sal_index | 9       | const |    1 | Using where |</span><br><span class="line">  +----+-------------+-------+------+---------------+---------------+---------+-------+------+-------------+</span><br><span class="line"></span><br><span class="line">  mysql&gt; explain select * from emp where sal+1 = 800;</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">  | id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">  |  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | NULL |   14 | Using where |</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line"></span><br><span class="line">失效的第5种情况：</span><br><span class="line">  在where当中索引列使用了函数</span><br><span class="line">  explain select * from emp where lower(ename) = &#x27;smith&#x27;;</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">  | id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">  |  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | NULL |   14 | Using where |</span><br><span class="line">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单一索引：一个字段上添加索引。</span><br><span class="line">复合索引：两个字段或者更多的字段上添加索引。</span><br><span class="line"></span><br><span class="line">主键索引：主键上添加索引。</span><br><span class="line">唯一性索引：具有unique约束的字段上添加索引。</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">注意：唯一性比较弱的字段上添加索引用处不大。</span><br></pre></td></tr></table></figure>

<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><blockquote>
<p>什么是视图？</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">视图：站在不同的角度去看待同一份数据。</span><br></pre></td></tr></table></figure>

<h2 id="视图创建和删除"><a href="#视图创建和删除" class="headerlink" title="视图创建和删除"></a>视图创建和删除</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建视图对象：</span><br><span class="line">  create view dept2_view as select * from dept2;</span><br><span class="line"></span><br><span class="line">删除视图对象：</span><br><span class="line">  drop view dept2_view;</span><br><span class="line"></span><br><span class="line">注意：只有DQL语句才能以view的形式创建。</span><br><span class="line">  create view view_name as 这里的语句必须是DQL语句;</span><br></pre></td></tr></table></figure>

<h2 id="视图的用途"><a href="#视图的用途" class="headerlink" title="视图的用途"></a>视图的用途</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">《方便，简化开发，利于维护》</span><br><span class="line">我们可以面向视图对象进行增删改查，对视图对象的增删改查，会导致</span><br><span class="line">原表被操作！（视图的特点：通过对视图的操作，会影响到原表数据。）</span><br><span class="line"></span><br><span class="line">//面向视图查询</span><br><span class="line">select * from dept2_view; </span><br><span class="line"></span><br><span class="line">// 面向视图插入</span><br><span class="line">insert into dept2_view(deptno,dname,loc) values(60,&#x27;SALES&#x27;, &#x27;BEIJING&#x27;);</span><br><span class="line"></span><br><span class="line">// 查询原表数据</span><br><span class="line">mysql&gt; select * from dept2;</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">| DEPTNO | DNAME      | LOC      |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">|     10 | ACCOUNTING | NEW YORK |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">|     60 | SALES      | BEIJING  |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line"></span><br><span class="line">// 面向视图删除</span><br><span class="line">mysql&gt; delete from dept2_view;</span><br><span class="line"></span><br><span class="line">// 查询原表数据</span><br><span class="line">mysql&gt; select * from dept2;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">假设有一条非常复杂的SQL语句，而这条SQL语句需要在不同的位置上反复使用。</span><br><span class="line">每一次使用这个sql语句的时候都需要重新编写，很长，很麻烦，怎么办？</span><br><span class="line">  可以把这条复杂的SQL语句以视图对象的形式新建。</span><br><span class="line">  在需要编写这条SQL语句的位置直接使用视图对象，可以大大简化开发。</span><br><span class="line">  并且利于后期的维护，因为修改的时候也只需要修改一个位置就行，只需要</span><br><span class="line">  修改视图对象所映射的SQL语句。</span><br><span class="line"></span><br><span class="line">我们以后面向视图开发的时候，使用视图的时候可以像使用table一样。</span><br><span class="line">可以对视图进行增删改查等操作。视图不是在内存当中，视图对象也是</span><br><span class="line">存储在硬盘上的，不会消失。</span><br><span class="line"></span><br><span class="line">再提醒一下：</span><br><span class="line">  视图对应的语句只能是DQL语句。</span><br><span class="line">  但是视图对象创建完成之后，可以对视图进行增删改查等操作。</span><br><span class="line"></span><br><span class="line">小插曲：</span><br><span class="line">  增删改查，又叫做：CRUD。</span><br><span class="line">  CRUD是在公司中程序员之间沟通的术语。一般我们很少说增删改查。</span><br><span class="line">  一般都说CRUD。</span><br><span class="line"></span><br><span class="line">  C:Create（增）</span><br><span class="line">  R:Retrive（查：检索）</span><br><span class="line">  U:Update（改）</span><br><span class="line">  D:Delete（删）</span><br></pre></td></tr></table></figure>

<h1 id="DBA常用命令"><a href="#DBA常用命令" class="headerlink" title="DBA常用命令"></a>DBA常用命令</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">重点掌握：</span><br><span class="line">  数据的导入和导出（数据的备份）</span><br><span class="line">  其它命令了解一下即可。</span><br><span class="line"></span><br><span class="line">数据导出？</span><br><span class="line">  注意：在windows的dos命令窗口中：</span><br><span class="line">    mysqldump bjpowernode&gt;D:\bjpowernode.sql -uroot -p123456</span><br><span class="line">  </span><br><span class="line">  可以导出指定的表吗？</span><br><span class="line">    mysqldump bjpowernode emp&gt;D:\bjpowernode.sql -uroot -p123456</span><br><span class="line"></span><br><span class="line">数据导入？</span><br><span class="line">  注意：需要先登录到mysql数据库服务器上。</span><br><span class="line">  然后创建数据库：create database bjpowernode;</span><br><span class="line">  使用数据库：use bjpowernode</span><br><span class="line">  然后初始化数据库：source D:\bjpowernode.sql</span><br></pre></td></tr></table></figure>

<h1 id="数据库设计三范式"><a href="#数据库设计三范式" class="headerlink" title="数据库设计三范式"></a>数据库设计三范式</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">什么是数据库设计范式？</span><br><span class="line">数据库表的设计依据。教你怎么进行数据库表的设计。</span><br><span class="line"></span><br><span class="line">数据库设计范式共有？</span><br><span class="line">3个。</span><br><span class="line">第一范式：要求任何一张表必须有主键，每一个字段原子性不可再分。</span><br><span class="line"></span><br><span class="line">第二范式：建立在第一范式的基础之上，要求所有非主键字段完全依赖主键，</span><br><span class="line">不要产生部分依赖。</span><br><span class="line"></span><br><span class="line">第三范式：建立在第二范式的基础之上，要求所有非主键字段直接依赖主键，</span><br><span class="line">不要产生传递依赖。</span><br><span class="line"></span><br><span class="line">声明：三范式是面试官经常问的，所以一定要熟记在心！</span><br><span class="line"></span><br><span class="line">设计数据库表的时候，按照以上的范式进行，可以避免表中数据的冗余，空间的浪费。</span><br><span class="line"></span><br><span class="line">第一范式</span><br><span class="line">最核心，最重要的范式，所有表的设计都需要满足。</span><br><span class="line">必须有主键，并且每一个字段都是原子性不可再分。</span><br><span class="line"></span><br><span class="line">学生编号 学生姓名 联系方式</span><br><span class="line">------------------------------------------</span><br><span class="line">1001		张三		zs@gmail.com,1359999999</span><br><span class="line">1002		李四		ls@gmail.com,13699999999</span><br><span class="line">1001		王五		ww@163.net,13488888888</span><br><span class="line"></span><br><span class="line">以上是学生表，满足第一范式吗？</span><br><span class="line">  不满足，第一：没有主键。第二：联系方式可以分为邮箱地址和电话</span><br><span class="line"></span><br><span class="line">学生编号(pk) 学生姓名	邮箱地址			联系电话</span><br><span class="line">----------------------------------------------------</span><br><span class="line">1001				张三		zs@gmail.com	1359999999</span><br><span class="line">1002				李四		ls@gmail.com	13699999999</span><br><span class="line">1003				王五		ww@163.net		13488888888</span><br><span class="line"></span><br><span class="line">第二范式：</span><br><span class="line">建立在第一范式的基础之上，</span><br><span class="line">要求所有非主键字段必须完全依赖主键，不要产生部分依赖。</span><br><span class="line"></span><br><span class="line">学生编号 学生姓名 教师编号 教师姓名</span><br><span class="line">----------------------------------------------------</span><br><span class="line">1001			张三		001		王老师</span><br><span class="line">1002			李四		002		赵老师</span><br><span class="line">1003			王五		001		王老师</span><br><span class="line">1001			张三		002		赵老师</span><br><span class="line"></span><br><span class="line">这张表描述了学生和老师的关系：（1个学生可能有多个老师，1个老师有多个学生）</span><br><span class="line">这是非常典型的：多对多关系！</span><br><span class="line"></span><br><span class="line">分析以上的表是否满足第一范式？</span><br><span class="line">  不满足第一范式。</span><br><span class="line"></span><br><span class="line">怎么满足第一范式呢？修改</span><br><span class="line"></span><br><span class="line">学生编号+教师编号(pk)		学生姓名  教师姓名</span><br><span class="line">----------------------------------------------------</span><br><span class="line">1001			001				张三			王老师</span><br><span class="line">1002			002				李四			赵老师</span><br><span class="line">1003			001				王五			王老师</span><br><span class="line">1001			002				张三			赵老师</span><br><span class="line"></span><br><span class="line">学生编号 教师编号，两个字段联合做主键，复合主键（PK: 学生编号+教师编号）</span><br><span class="line">经过修改之后，以上的表满足了第一范式。但是满足第二范式吗？</span><br><span class="line">  不满足，“张三”依赖1001，“王老师”依赖001，显然产生了部分依赖。</span><br><span class="line">  产生部分依赖有什么缺点？</span><br><span class="line">    数据冗余了。空间浪费了。“张三”重复了，“王老师”重复了。</span><br><span class="line"></span><br><span class="line">为了让以上的表满足第二范式，你需要这样设计：</span><br><span class="line">  使用三张表来表示多对多的关系！！！！</span><br><span class="line">  学生表</span><br><span class="line">  学生编号(pk)		学生名字</span><br><span class="line">  ------------------------------------</span><br><span class="line">  1001					张三</span><br><span class="line">  1002					李四</span><br><span class="line">  1003					王五</span><br><span class="line">  </span><br><span class="line">  教师表</span><br><span class="line">  教师编号(pk)		教师姓名</span><br><span class="line">  --------------------------------------</span><br><span class="line">  001					王老师</span><br><span class="line">  002					赵老师</span><br><span class="line"></span><br><span class="line">  学生教师关系表</span><br><span class="line">  id(pk)			学生编号(fk)			教师编号(fk)</span><br><span class="line">  ------------------------------------------------------</span><br><span class="line">  1						1001						001</span><br><span class="line">  2						1002						002</span><br><span class="line">  3						1003						001</span><br><span class="line">  4						1001						002</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">背口诀：</span><br><span class="line">  多对多怎么设计？</span><br><span class="line">    多对多，三张表，关系表两个外键！！！！！！！！！！！！！！！</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第三范式</span><br><span class="line">第三范式建立在第二范式的基础之上</span><br><span class="line">要求所有非主键字典必须直接依赖主键，不要产生传递依赖。</span><br><span class="line"></span><br><span class="line">学生编号（PK） 学生姓名 班级编号  班级名称</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">  1001				张三		01			一年一班</span><br><span class="line">  1002				李四		02			一年二班</span><br><span class="line">  1003				王五		03			一年三班</span><br><span class="line">  1004				赵六		03			一年三班</span><br><span class="line"></span><br><span class="line">以上表的设计是描述：班级和学生的关系。很显然是1对多关系！</span><br><span class="line">一个教室中有多个学生。</span><br><span class="line"></span><br><span class="line">分析以上表是否满足第一范式？</span><br><span class="line">  满足第一范式，有主键。</span><br><span class="line"></span><br><span class="line">分析以上表是否满足第二范式？</span><br><span class="line">  满足第二范式，因为主键不是复合主键，没有产生部分依赖。主键是单一主键。</span><br><span class="line"></span><br><span class="line">分析以上表是否满足第三范式？</span><br><span class="line">  第三范式要求：不要产生传递依赖！</span><br><span class="line">  一年一班依赖01，01依赖1001，产生了传递依赖。</span><br><span class="line">  不符合第三范式的要求。产生了数据的冗余。</span><br><span class="line"></span><br><span class="line">那么应该怎么设计一对多呢？</span><br><span class="line"></span><br><span class="line">  班级表：一</span><br><span class="line">  班级编号(pk)				班级名称</span><br><span class="line">  ----------------------------------------</span><br><span class="line">  01								一年一班</span><br><span class="line">  02								一年二班</span><br><span class="line">  03								一年三班</span><br><span class="line"></span><br><span class="line">  学生表：多</span><br><span class="line"></span><br><span class="line">  学生编号（PK） 学生姓名 班级编号(fk)</span><br><span class="line">  -------------------------------------------</span><br><span class="line">  1001				张三			01			</span><br><span class="line">  1002				李四			02			</span><br><span class="line">  1003				王五			03			</span><br><span class="line">  1004				赵六			03		</span><br><span class="line">  </span><br><span class="line">  背口诀：</span><br><span class="line">    一对多，两张表，多的表加外键！！！！！！！！！！！！</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="总结表的设计"><a href="#总结表的设计" class="headerlink" title="总结表的设计"></a>总结表的设计</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一对多：</span><br><span class="line">  一对多，两张表，多的表加外键！！！！！！！！！！！！</span><br><span class="line"></span><br><span class="line">多对多：</span><br><span class="line">  多对多，三张表，关系表两个外键！！！！！！！！！！！！！！！</span><br><span class="line"></span><br><span class="line">一对一：</span><br><span class="line">一对一放到一张表中不就行了吗？为啥还要拆分表？</span><br><span class="line">在实际的开发中，可能存在一张表字段太多，太庞大。这个时候要拆分表。</span><br><span class="line">一对一怎么设计？</span><br><span class="line">  没有拆分表之前：一张表</span><br><span class="line">    t_user</span><br><span class="line">    id		login_name		login_pwd		real_name		email				address........</span><br><span class="line">    ---------------------------------------------------------------------------</span><br><span class="line">    1			zhangsan		123				张三				zhangsan@xxx</span><br><span class="line">    2			lisi			123				李四				lisi@xxx</span><br><span class="line">    ...</span><br><span class="line">  </span><br><span class="line">  这种庞大的表建议拆分为两张：</span><br><span class="line">    t_login 登录信息表</span><br><span class="line">    id(pk)		login_name		login_pwd	</span><br><span class="line">    ---------------------------------</span><br><span class="line">    1				zhangsan		123			</span><br><span class="line">    2				lisi			123			</span><br><span class="line"></span><br><span class="line">    t_user 用户详细信息表</span><br><span class="line">    id(pk)		real_name		email				address........	login_id(fk+unique)</span><br><span class="line">    -----------------------------------------------------------------------------------------</span><br><span class="line">    100			张三				zhangsan@xxx								1</span><br><span class="line">    200			李四				lisi@xxx									2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    口诀：一对一，外键唯一！！！！！！！！！！</span><br></pre></td></tr></table></figure>

<h1 id="嘱咐"><a href="#嘱咐" class="headerlink" title="嘱咐"></a>嘱咐</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据库设计三范式是理论上的。</span><br><span class="line"></span><br><span class="line">实践和理论有的时候有偏差。</span><br><span class="line"></span><br><span class="line">最终的目的都是为了满足客户的需求，有的时候会拿冗余换执行速度。</span><br><span class="line"></span><br><span class="line">因为在sql当中，表和表之间连接次数越多，效率越低。（笛卡尔积）</span><br><span class="line"></span><br><span class="line">有的时候可能会存在冗余，但是为了减少表的连接次数，这样做也是合理的，</span><br><span class="line">并且对于开发人员来说，sql语句的编写难度也会降低。</span><br><span class="line"></span><br><span class="line">面试的时候把这句话说上：他就不会认为你是初级程序员了！</span><br></pre></td></tr></table></figure>



<p>转载自：<a href="https://blog.csdn.net/weixin_43896929/article/details/120750965?spm=1001.2014.3001.5501">MySQL总结</a></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>RabbitMQ学习笔记day01</title>
    <url>/posts/2224567829.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="一、MQ基本概念"><a href="#一、MQ基本概念" class="headerlink" title="一、MQ基本概念"></a>一、MQ基本概念</h1><h2 id="1-1-MQ概述"><a href="#1-1-MQ概述" class="headerlink" title="1.1 MQ概述"></a>1.1 MQ概述</h2><p>MQ全称<strong>Message Queue（消息队列）</strong>，是在消息传输的过程中用于保存消息的容器，多用于分布式系统之间进行通信。</p>
<p><strong>直接远程调用：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820085901418.png" alt="image-20220820085901418"></p>
<p><strong>借助第三方完成间接通信</strong>，发送方称为生产者，接收方称为消费者。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820085719389.png" alt="image-20220820085719389"></p>
<hr>
<h2 id="1-2-MQ优势"><a href="#1-2-MQ优势" class="headerlink" title="1.2 MQ优势"></a>1.2 MQ优势</h2><ul>
<li>应用解耦：提高系统的容错性和可维护性</li>
<li>异步提速：提升用户体验和系统吞吐量</li>
<li>削峰填谷：提高系统稳定性</li>
</ul>
<h4 id="1-应用解耦"><a href="#1-应用解耦" class="headerlink" title="1. 应用解耦"></a>1. 应用解耦</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820090114772.png" alt="image-20220820090114772"></p>
<p>上图的系统耦合性太高，如果需要新添加或者更新后台系统都要修改订单系统的代码。</p>
<p><strong>系统耦合性越高，容错性就越低，可维护性就越低。</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820090229425.png" alt="image-20220820090229425"></p>
<p>使用了MQ之后，就实现了订单系统和后台系统之间的<strong>解耦</strong>，更改后台系统不用修改订单系统的代码，<strong>提升了容错性和可维护性。</strong></p>
<hr>
<h4 id="2-异步提速"><a href="#2-异步提速" class="headerlink" title="2.异步提速"></a>2.异步提速</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820090427640.png" alt="image-20220820090427640"></p>
<p>上图系统的一个下单操作耗时：</p>
<p>20 + 300 + 300 +300 &#x3D; 920ms</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820090524556.png" alt="image-20220820090524556"></p>
<p>加入消息队列后下单操作耗时：</p>
<p>5 + 20 &#x3D; 25ms</p>
<p><strong>类似于先斩后奏，先给用户返回，然后后台系统慢慢从MQ中获取服务。</strong></p>
<p><strong>提升了用户的体验和系统吞吐量（单位时间内处理请求的数目）。</strong></p>
<hr>
<h4 id="3-削峰填谷"><a href="#3-削峰填谷" class="headerlink" title="3.削峰填谷"></a>3.削峰填谷</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820090809420.png" alt="image-20220820090809420"></p>
<p>常见于商品秒杀时，请求量爆发，但是系统每秒最大只能处理1000，这样就会对系统造成很大压力，甚至崩掉。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820091112442.png" alt="image-20220820091112442"></p>
<p>这时可以通过引入MQ来进行并发量的削峰，把5000个请求存入MQ，然后每次拉出来1000个请求进行处理，这样高峰并发量就被削掉了，这就叫做<strong>“削峰”</strong>。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820091253875.png" alt="image-20220820091253875"></p>
<p>但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持在1000，直到消费完积压的消息，这就叫做**”填谷”**</p>
<p>所以<strong>使用MQ可以提高系统的稳定性。</strong></p>
<hr>
<h2 id="1-3-MQ劣势"><a href="#1-3-MQ劣势" class="headerlink" title="1.3 MQ劣势"></a>1.3 MQ劣势</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820091701004.png" alt="image-20220820091701004"></p>
<ul>
<li>系统可用性降低<ul>
<li>系统引入的外部依赖越多，系统稳定性越差。（原来只要保证A、B系统正常运行即可，现在还要保证MQ的正常运行）。</li>
<li>怎么保证MQ的高可用？</li>
</ul>
</li>
<li>系统复杂度提高<ul>
<li>MQ的加入大大增加了系统的复杂度，以前系统间是同步的远程调用，现在是通过MQ进行异步调用。</li>
<li>如何保证消息没有被重复消费？</li>
<li>怎么处理消息丢失？</li>
<li>怎么保证消息的传递性？</li>
</ul>
</li>
<li>一致性<ul>
<li>A系统处理完业务，通过MQ给B、C、D三个系统发消息数据，如果B系统、C系统处理成功，D系统处理失败。</li>
<li>如何保证消息数据处理的一致性？</li>
</ul>
</li>
</ul>
<hr>
<h2 id="1-4-小结"><a href="#1-4-小结" class="headerlink" title="1.4 小结"></a>1.4 小结</h2><p>既然 MQ 有优势也有劣势，那么使用 MQ 需要满足什么条件呢？</p>
<ol>
<li>生产者不需要从消费者处获得反馈。引入消息队列之前的直接调用，其接口的返回值应该为空，这才让明明下层的动作还没做，上层却当成动作做完了继续往后走，即所谓异步成为了可能。</li>
<li>容许短暂的不一致性。</li>
<li>确实是用了有效果。即解耦、提速、削峰这些方面的收益，超过加入MQ，管理MQ这些成本。</li>
</ol>
<hr>
<h1 id="二、RabbitMQ"><a href="#二、RabbitMQ" class="headerlink" title="二、RabbitMQ"></a>二、RabbitMQ</h1><h2 id="2-1-RabbitMQ简介"><a href="#2-1-RabbitMQ简介" class="headerlink" title="2.1 RabbitMQ简介"></a>2.1 RabbitMQ简介</h2><p>RabbitMQ 采用 Erlang 语言开发。Erlang 语言由 Ericson 设计，专门为开发高并发和分布式系统的一种语言，在电信领域使用广泛。</p>
<p>RabbitMQ 基础架构如下图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820094015693.png" alt="image-20220820094015693"></p>
<hr>
<h2 id="2-2-RabbitMQ中的相关概念"><a href="#2-2-RabbitMQ中的相关概念" class="headerlink" title="2.2 RabbitMQ中的相关概念"></a>2.2 RabbitMQ中的相关概念</h2><ul>
<li><p><strong>Broker：</strong>接收和分发消息的应用，RabbitMQ Server就是 Message Broker</p>
</li>
<li><p><strong>Virtual host：</strong>出于多租户和安全因素设计的，把 AMQP 的基本组件划分到一个虚拟的分组中，类似于网络中的 namespace 概念。当多个不同的用户使用同一个 RabbitMQ server 提供的服务时，可以划分出多个vhost，每个用户在自己的 vhost 创建 exchange／queue 等 </p>
</li>
<li><p><strong>Connection：</strong>publisher／consumer 和 broker 之间的 TCP 连接</p>
</li>
<li><p><strong>Channel：</strong>如果每一次访问 RabbitMQ 都建立一个 Connection，在消息量大的时候建立 TCP Connection的开销将是巨大的，效率也较低。Channel 是在 connection 内部建立的逻辑连接，如果应用程序支持多线程，通常每个thread创建单独的 channel 进行通讯，AMQP method 包含了channel id 帮助客户端和message broker 识别 channel，所以 channel 之间是完全隔离的。Channel 作为轻量级的 Connection 极大减少了操作系统建立 TCP connection 的开销</p>
</li>
<li><p><strong>Exchange：</strong>message 到达 broker 的第一站，根据分发规则，匹配查询表中的 routing key，分发消息到queue 中去。常用的类型有：direct (point-to-point), topic (publish-subscribe) and fanout (multicast)</p>
</li>
<li><p><strong>Queue：</strong>消息最终被送到这里等待 consumer 取走</p>
</li>
<li><p><strong>Binding：</strong>exchange 和 queue 之间的虚拟连接，binding 中可以包含 routing key。Binding 信息被保存到 exchange 中的查询表中，用于 message 的分发依据</p>
</li>
</ul>
<hr>
<h2 id="2-3-六种工作模式"><a href="#2-3-六种工作模式" class="headerlink" title="2.3 六种工作模式"></a>2.3 六种工作模式</h2><ol>
<li>简单模式</li>
<li>work queues</li>
<li>Publish&#x2F;Subscribe 发布与订阅模式</li>
<li>Routing路由模式</li>
<li>Topics 主题模式</li>
<li>RPC 远程调用模式（远程调用，不太算 MQ）</li>
</ol>
<p>官网对应模式介绍：<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820094356999.png" alt="image-20220820094356999"></p>
<hr>
<h2 id="2-4-JMS"><a href="#2-4-JMS" class="headerlink" title="2.4 JMS"></a>2.4 JMS</h2><ul>
<li><p>JMS 即 Java 消息服务（JavaMessage Service）应用程序接口，是一个 Java 平台中关于面向消息中间件的API</p>
</li>
<li><p>JMS 是 JavaEE 规范中的一种，<strong>类比JDBC</strong></p>
</li>
<li><p>很多消息中间件都实现了JMS规范，例如：ActiveMQ。RabbitMQ 官方没有提供 JMS 的实现包，但是开源社区有</p>
</li>
</ul>
<hr>
<h2 id="2-5-RabbitMQ安装和配置"><a href="#2-5-RabbitMQ安装和配置" class="headerlink" title="2.5 RabbitMQ安装和配置"></a>2.5 RabbitMQ安装和配置</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h3><p>RabbitMQ 官方地址：<a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a></p>
<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><p>这里因为是学习，为了和视频同步，就不在官网安装新版的了，等学会了在进行更新</p>
<p>1、上传资料</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820095149576.png" alt="image-20220820095149576"></p>
<p>2、安装Erlang</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820095524147.png" alt="image-20220820095524147"></p>
<p>3、安装RabbitMQ</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>4、开启管理页面及配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启管理界面</span></span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"><span class="comment"># 修改默认配置信息</span></span><br><span class="line">vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app </span><br><span class="line"><span class="comment"># 比如修改密码、配置等等，例如：loopback_users 中的 &lt;&lt;&quot;guest&quot;&gt;&gt;,只保留guest</span></span><br></pre></td></tr></table></figure>

<p>端口：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820100522381.png" alt="image-20220820100522381"></p>
<p>用户名密码：</p>
<p>将这里的&lt;&lt;”guest”&gt;&gt;改为guest</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820103223168.png" alt="image-20220820103223168"></p>
<p><code>注意：这里开放的端口是15672</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">开放指定端口</span><br><span class="line">firewall-cmd --zone=public --add-port=15672/tcp --permanent</span><br><span class="line"></span><br><span class="line">防火墙立即生效</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>



<p>5、启动RabbitMQ</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">service rabbitmq-server start <span class="comment"># 启动服务</span></span><br><span class="line">service rabbitmq-server stop <span class="comment"># 停止服务</span></span><br><span class="line">service rabbitmq-server restart <span class="comment"># 重启服务</span></span><br></pre></td></tr></table></figure>



<p>6、访问</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820102811813.png" alt="image-20220820102811813"></p>
<p>安装依赖环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install build-essential openssl openssl-devel unixODBC unixODBC-devel make gcc gcc-c++ kernel-devel m4 ncurses-devel tk tc xz</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<hr>
<h2 id="2-6-RabbitMQ快速入门"><a href="#2-6-RabbitMQ快速入门" class="headerlink" title="2.6 RabbitMQ快速入门"></a>2.6 RabbitMQ快速入门</h2><p>未完待续</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis面试题整理</title>
    <url>/posts/502339125.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><h3 id="1-1-MyBatis是什么？"><a href="#1-1-MyBatis是什么？" class="headerlink" title="1.1 MyBatis是什么？"></a>1.1 MyBatis是什么？</h3><ul>
<li>MyBatis是一款优秀的持久层框架，是一个半ORM(对象关系映射)框架，它支持定制化SQL、存储过程以及高级映射。</li>
<li>MyBatis避免了几乎所有的JDBC代码和手动设置参数以及获取结果集。</li>
<li>MyBatis可以使用简单的XML或者注解来配置和映射Java中的接口以及实体类作为数据库中的记录。</li>
</ul>
<h3 id="1-2-什么是ORM？"><a href="#1-2-什么是ORM？" class="headerlink" title="1.2  什么是ORM？"></a>1.2  什么是ORM？</h3><p>ORM（Object Relational Mapping），对象关系映射，是一种为了解决关系型数据库数据和简单的Java对象映射关系不匹配的技术。</p>
<p>简单地说，ORM是通过<strong>使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系型数据库中。</strong></p>
<h3 id="1-3-为什么说MyBatis是半自动ORM映射工具？它和全自动的区别在哪？"><a href="#1-3-为什么说MyBatis是半自动ORM映射工具？它和全自动的区别在哪？" class="headerlink" title="1.3 为什么说MyBatis是半自动ORM映射工具？它和全自动的区别在哪？"></a>1.3 为什么说MyBatis是半自动ORM映射工具？它和全自动的区别在哪？</h3><ul>
<li>Hibernate 是自动化的，内部封装了JDBC，连 SQL 语句都封装了，理念是即使开发人员不懂SQL语言也可以进行开发工作，向应用程序提供调用接口，直接调用即可。</li>
<li>Mybatis 是半自动化的，是介于 jdbc 和 Hibernate之间的持久层框架，也是对 JDBC 进行了封装，<strong>不过将SQL的定义工作独立了出来交给用户实现</strong>，负责完成剩下的SQL解析，处理等工作。</li>
</ul>
<h3 id="1-4-传统JDBC开发存在的问题"><a href="#1-4-传统JDBC开发存在的问题" class="headerlink" title="1.4 传统JDBC开发存在的问题"></a>1.4 传统JDBC开发存在的问题</h3><ol>
<li>频繁创建数据库连接对象、释放，容易造成系统资源浪费，影响系统性能。可以使用连接池解决这个问题。但是使用jdbc需要自己实现连接池。</li>
<li>sql语句定义、参数设置、结果集处理存在硬编码。实际项目中sql语句变化的可能性较大，一旦发生变化，需要修改Java代码，系统需要重新编译，重新发布。不好维护。</li>
<li>使用preparedStatement向占有位符号传参数存在硬编码，因为sql语句的where条件不一定，可能多也可能少，修改sql还要修改代码，系统不易维护。</li>
<li>结果集处理存在重复代码，处理麻烦。如果可以映射成Java对象会比较方便。</li>
</ol>
<h3 id="1-5-JDBC编程有哪些不足之处，MyBatis是如何解决这些问题的？"><a href="#1-5-JDBC编程有哪些不足之处，MyBatis是如何解决这些问题的？" class="headerlink" title="1.5 JDBC编程有哪些不足之处，MyBatis是如何解决这些问题的？"></a>1.5 JDBC编程有哪些不足之处，MyBatis是如何解决这些问题的？</h3><ol>
<li><p>数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库连接池可解决此问题。</p>
</li>
<li><ol>
<li>解决：在mybatis-config.xml中配置数据链接池，使用连接池管理数据库连接。</li>
</ol>
</li>
<li><p>Sql语句写在代码中造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码。</p>
</li>
<li><ol>
<li>解决：将Sql语句配置在XXXXmapper.xml文件中与Java代码分离。</li>
</ol>
</li>
<li><p>向sql语句传参数麻烦，因为sql语句的where条件不一定，可能多也可能少，占位符需要和参数一一对应。</p>
</li>
<li><ol>
<li>解决： Mybatis自动将Java对象映射至sql语句。</li>
</ol>
</li>
<li><p>对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成pojo对象解析比较方便。</p>
</li>
<li><ol>
<li>解决：Mybatis自动将sql执行结果映射至java对象。</li>
</ol>
</li>
</ol>
<h3 id="1-6-Mybatis优缺点"><a href="#1-6-Mybatis优缺点" class="headerlink" title="1.6 Mybatis优缺点"></a>1.6 Mybatis优缺点</h3><p><strong>优点：</strong></p>
<p><strong>与传统的数据库访问技术相比，ORM有以下优点：</strong></p>
<ul>
<li><strong>基于SQL语句编程</strong>，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL写在XML里，解除sql与程序代码的耦合，便于统一管理；提供XML标签，支持编写动态SQL语句，并可重用</li>
<li>与JDBC相比，减少了50%以上的代码量，<strong>消除了JDBC大量冗余的代码</strong>，不需要手动开关连接</li>
<li><strong>很好的与各种数据库兼容</strong>（因为MyBatis使用JDBC来连接数据库，所以只要JDBC支持的数据库MyBatis都支持）</li>
<li><strong>提供映射标签</strong>，支持对象与数据库的ORM字段关系映射；提供对象关系映射标签，支持对象关系组件维护</li>
<li><strong>能够与Spring很好的集成</strong></li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li><strong>SQL语句的编写工作量较大</strong>，尤其当字段多、关联表多时，对开发人员编写SQL语句的功底有一定要求。</li>
<li><strong>SQL语句依赖于数据库</strong>，导致数据库移植性差，不能随意更换数据库。</li>
</ul>
<p><a href="https://blog.csdn.net/qq_43061290/article/details/124468306">
</a></p>
<h2 id="2-MyBatis的解析和运行原理"><a href="#2-MyBatis的解析和运行原理" class="headerlink" title="2. MyBatis的解析和运行原理"></a>2. MyBatis的解析和运行原理</h2><h3 id="2-1-MyBatis的编程步骤是什么样的？"><a href="#2-1-MyBatis的编程步骤是什么样的？" class="headerlink" title="2.1 MyBatis的编程步骤是什么样的？"></a>2.1 MyBatis的编程步骤是什么样的？</h3><ol>
<li>创建SqlSessionFactory</li>
<li>通过SqlSessionFactory创建SqlSession</li>
<li>通过sqlsession执行数据库操作</li>
<li>调用session.commit()提交事务</li>
<li>调用session.close()关闭会话</li>
</ol>
<h3 id="2-2-MyBatis的工作原理"><a href="#2-2-MyBatis的工作原理" class="headerlink" title="2.2 MyBatis的工作原理"></a>2.2 MyBatis的工作原理</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657523144175-379d9482-6a01-4a59-99ca-a28d80993b23.png" alt="img"></p>
<ol>
<li>读取 MyBatis 配置文件：mybatis-config.xml 为 MyBatis 的全局配置文件，配置了 MyBatis 的运行环境等信息，例如数据库连接信息。</li>
<li>加载映射文件:映射文件即 SQL 映射文件，该文件中配置了操作数据库的 SQL 语句，需要在 MyBatis 配置文件 mybatis-config.xml 中加载。mybatis-config.xml 文件可以加载多个映射文件，每个文件对应数据库中的一张表。</li>
<li>构造会话工厂：通过 MyBatis 的环境等配置信息构建会话工厂 SqlSessionFactory。</li>
<li>创建会话对象：由会话工厂创建 SqlSession 对象，该对象中包含了执行 SQL 语句的所有方法。</li>
<li>Executor 执行器：MyBatis 底层定义了一个 Executor 接口来操作数据库，它将根据 SqlSession 传递的参数动态地生成需要执行的 SQL 语句，同时负责查询缓存的维护</li>
<li>MappedStatement 对象：在 Executor 接口的执行方法中有一个 MappedStatement 类型的参数，该参数是对映射信息的封装，用于存储要映射的 SQL 语句的 id、参数等信息</li>
<li>输入参数映射：输入参数类型可以是 Map、List 等集合类型，也可以是基本数据类型和 POJO 类型。输入参数映射过程类似于 JDBC 对 preparedStatement 对象设置参数的过程。</li>
<li>输出结果映射：输出结果类型可以是 Map、 List 等集合类型，也可以是基本数据类型和 POJO 类型。输出结果映射过程类似于 JDBC 对结果集的解析过程。</li>
</ol>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis学习</title>
    <url>/posts/784660176.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="一、框架"><a href="#一、框架" class="headerlink" title="一、框架"></a>一、框架</h1><h2 id="1-1-框架概念"><a href="#1-1-框架概念" class="headerlink" title="1.1 框架概念"></a>1.1 框架概念</h2><blockquote>
<p>框架就是软件的半成品，框架完成了软件开发过程中的通用操作，程序猿只需要很少或者不用加工就能够实现特定的功能，从而简化开发人员在软件开发中的步骤，提高开发效率。</p>
</blockquote>
<h2 id="1-2-常用框架"><a href="#1-2-常用框架" class="headerlink" title="1.2 常用框架"></a>1.2 常用框架</h2><ul>
<li>MVC框架：简化了Servlet的开发步骤，负责和前端进行交互<ul>
<li>Struts2</li>
<li><strong>SpringMVC</strong></li>
</ul>
</li>
<li>持久层框架：完成数据库操作的框架，负责和数据库交互<ul>
<li><strong>MyBatis</strong>		</li>
<li>Hibernate 	</li>
<li>胶水框架：<strong>Spring</strong></li>
</ul>
</li>
</ul>
<p><strong>SSM</strong>：Spring + SpringMVC + MyBatis<br><strong>SSH</strong>：Spring + Struts2 + Hibernate</p>
<h1 id="二、MyBatis简介"><a href="#二、MyBatis简介" class="headerlink" title="二、MyBatis简介"></a>二、MyBatis简介</h1><h2 id="2-1-MyBatis介绍"><a href="#2-1-MyBatis介绍" class="headerlink" title="2.1 MyBatis介绍"></a>2.1 MyBatis介绍</h2><blockquote>
<p>MyBatis是一个<strong>半自动</strong>的<strong>ORM</strong>框架<br>ORM（Object Relation Mapping）对象关系映射，将Java中的一个对象和数据表中的一行记录一一对应。<br>ORM框架提供了实体类与数据表的映射关系，通过映射文件的配置，实现了对象的持久化。</p>
</blockquote>
<p>MyBatis特点：</p>
<ul>
<li>支持自定义SQL、存储过程</li>
<li>对原有的JDBC进行了封装，几乎消除了所有JDBC的代码，让开发人员只需要关注SQL语句本身</li>
<li>支持XML和注解配置的方式自动完成ORM操作，实现结果映射</li>
</ul>
<h2 id="2-2-MyBatis部署"><a href="#2-2-MyBatis部署" class="headerlink" title="2.2 MyBatis部署"></a>2.2 MyBatis部署</h2><blockquote>
<p>框架部署就是把框架引入到我们自己的项目里</p>
</blockquote>
<h3 id="2-2-1-创建Maven项目"><a href="#2-2-1-创建Maven项目" class="headerlink" title="2.2.1 创建Maven项目"></a>2.2.1 创建Maven项目</h3><ul>
<li>Java项目</li>
<li>Web项目</li>
</ul>
<h3 id="2-2-2-在项目中添加MyBatis依赖"><a href="#2-2-2-在项目中添加MyBatis依赖" class="headerlink" title="2.2.2 在项目中添加MyBatis依赖"></a>2.2.2 在项目中添加MyBatis依赖</h3><ul>
<li>在 pom.xml 中添加依赖<ul>
<li>mybatis</li>
<li>mysqldriver</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-3-创建MyBatis配置文件"><a href="#2-2-3-创建MyBatis配置文件" class="headerlink" title="2.2.3 创建MyBatis配置文件"></a>2.2.3 创建MyBatis配置文件</h3><ol>
<li>在resources中创建名为<strong>mybatis-config.xml</strong>的文件<br><img src="https://img-blog.csdnimg.cn/7c97aef5f42a46b98d7669fd79f59878.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li>
<li>在mybatis-config.xml文件中配置数据库连接信息</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--在environments中配置数据库连接信息--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--一个environments标签中可以定义而多个environment标签，</span></span><br><span class="line"><span class="comment">    每个environment标签可以定义一套连接配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--default用来指定使用哪一个environment--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--transactionManager标签用于配置数据库的管理方式--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--dataSource标签就是用来配置数据库连接信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/db1?characterEncoding=utf-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-3-MyBatis框架使用"><a href="#2-3-MyBatis框架使用" class="headerlink" title="2.3 MyBatis框架使用"></a>2.3 MyBatis框架使用</h2><blockquote>
<p>案例：学生信息的数据库操作</p>
</blockquote>
<h3 id="2-3-1-创建数据表"><a href="#2-3-1-创建数据表" class="headerlink" title="2.3.1 创建数据表"></a>2.3.1 创建数据表</h3><p><strong>tb_students</strong><br>SQL语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb students(</span><br><span class="line"> sid <span class="type">int</span> <span class="keyword">primary</span> key auto increment,</span><br><span class="line"> stu_num <span class="type">char</span>(<span class="number">5</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>, </span><br><span class="line"> stu_name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line"> stu_gender <span class="type">char</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line"> stu_age <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<h3 id="2-3-2-创建实体类"><a href="#2-3-2-创建实体类" class="headerlink" title="2.3.2 创建实体类"></a>2.3.2 创建实体类</h3><p><img src="https://img-blog.csdnimg.cn/1896cbf31e44483ba88578fb613cb5d9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h3 id="2-3-3-创建DAO接口，定义操作方法"><a href="#2-3-3-创建DAO接口，定义操作方法" class="headerlink" title="2.3.3 创建DAO接口，定义操作方法"></a>2.3.3 创建DAO接口，定义操作方法</h3><p><img src="https://img-blog.csdnimg.cn/13516178f9334cecb72ac926d1fa74f7.png" alt="在这里插入图片描述"></p>
<h3 id="2-3-4-创建DAO接口下的映射文件"><a href="#2-3-4-创建DAO接口下的映射文件" class="headerlink" title="2.3.4 创建DAO接口下的映射文件"></a>2.3.4 创建DAO接口下的映射文件</h3><ul>
<li>在<code>resources</code>目录下，新建名为<code>mappers</code>文件夹</li>
<li>在<code>mappers</code>中新建名为<code>StudentMapper.xml</code>的映射文件（根据模板创建）</li>
<li>在映射文件中对DAO中定义的方法进行实现：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mapper文件相当于DAO接口的‘实现类’，namespace属性要指定`实现`DAO接口的全限定名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qfedu.dao.StudentDAO&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.qfedu.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        insert into tb_student(stu_num,stu_name,stu_gender,stu_age)</span><br><span class="line">        values(#&#123;stuNum&#125;,#&#123;stuName&#125;,#&#123;stuGender&#125;,#&#123;stuAge&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteStudent&quot;</span>&gt;</span></span><br><span class="line">        delete from tb_students where stu_num = #&#123;stuNum&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-5-将映射文件添加到主配置文件"><a href="#2-3-5-将映射文件添加到主配置文件" class="headerlink" title="2.3.5 将映射文件添加到主配置文件"></a>2.3.5 将映射文件添加到主配置文件</h3><p><img src="https://img-blog.csdnimg.cn/bdd91bc0e43c4324b36d781297c05f61.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="2-4-单元测试"><a href="#2-4-单元测试" class="headerlink" title="2.4 单元测试"></a>2.4 单元测试</h2><h3 id="2-4-1-添加单元测试依赖"><a href="#2-4-1-添加单元测试依赖" class="headerlink" title="2.4.1 添加单元测试依赖"></a>2.4.1 添加单元测试依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-4-2-创建单元测试类"><a href="#2-4-2-创建单元测试类" class="headerlink" title="2.4.2 创建单元测试类"></a>2.4.2 创建单元测试类</h3><p>被测试类名后，alt + insert – 选择Test<br><img src="https://img-blog.csdnimg.cn/11a7701928b942ffa73ed37be2d547ab.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ab5da22c476a49c38e0ac643a5d2ea17.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h3 id="2-4-3-测试代码"><a href="#2-4-3-测试代码" class="headerlink" title="2.4.3 测试代码"></a>2.4.3 测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qfedu.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-22 9:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDAOTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载配置文件（连接信息）</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//会话工厂，连接需要连接信息</span></span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//会话（连接）</span></span><br><span class="line">            <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">            <span class="comment">//通过会话获取DAO对象</span></span><br><span class="line">            <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">            <span class="comment">//测试StudentDAO中的方法</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> studentDAO.insertStudent(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">0</span>, <span class="string">&quot;10001&quot;</span>, <span class="string">&quot;飞飞&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">21</span>));</span><br><span class="line">            <span class="comment">//需要手动提交</span></span><br><span class="line">            sqlSession.commit();</span><br><span class="line"></span><br><span class="line">            System.out.println(i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteStudent</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三、MyBatis的CRUD操作"><a href="#三、MyBatis的CRUD操作" class="headerlink" title="三、MyBatis的CRUD操作"></a>三、MyBatis的CRUD操作</h1><blockquote>
<p>案例：学生信息的增删查改</p>
</blockquote>
<h2 id="3-1-添加操作"><a href="#3-1-添加操作" class="headerlink" title="3.1 添加操作"></a>3.1 添加操作</h2><p>略</p>
<h2 id="3-2-删除操作"><a href="#3-2-删除操作" class="headerlink" title="3.2 删除操作"></a>3.2 删除操作</h2><blockquote>
<p>根据学号删除一条学生信息</p>
</blockquote>
<ol>
<li><p>在StudentDAO中定义删除方法<br><img src="https://img-blog.csdnimg.cn/a72c9bc7cf9a4b4eb91de66af568b6b4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
</li>
<li><p>在StudentMapper.xml中对接口方法进行实现<br><img src="https://img-blog.csdnimg.cn/07b69d40512a4496a5f380dce2522791.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
</li>
<li><p>单元测试：在StudentDAO的测试类中添加测试方法</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteStudent</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不能保证文件名一定是正确的，所以可能会抛出异常，需要进行捕获</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            <span class="comment">//SqlSessionFactoryBuilder</span></span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//sqlSessionFactory表示MyBatis的会话工厂</span></span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//sqlSession表示MyBatis与数据库之间的会话：通过工厂方法设计模式</span></span><br><span class="line">            <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过SqlSession对象调用getMapper方法来获取DAO对象</span></span><br><span class="line">            <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">            <span class="comment">//调用被测试方法</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> studentDAO.deleteStudent(<span class="string">&quot;10001&quot;</span>);</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-3-修改操作"><a href="#3-3-修改操作" class="headerlink" title="3.3 修改操作"></a>3.3 修改操作</h2><blockquote>
<p>根据学生学号，修改学生信息</p>
</blockquote>
<ol>
<li><p>在StudentDAO定义修改方法<br><img src="https://img-blog.csdnimg.cn/9e08d87b4efb4fbab24c55371fc3a7bf.png" alt="在这里插入图片描述"></p>
</li>
<li><p>在StudentMapper.xml中对接口方法进行实现<br><img src="https://img-blog.csdnimg.cn/f2007e0bcc814a68b143764f769dc007.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
</li>
<li><p>单元测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateStudent</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不能保证文件名一定是正确的，所以可能会抛出异常，需要进行捕获</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//SqlSessionFactoryBuilder</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sqlSessionFactory表示MyBatis的会话工厂</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sqlSession表示MyBatis与数据库之间的会话：通过工厂方法设计模式</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过SqlSession对象调用getMapper方法来获取DAO对象</span></span><br><span class="line">        <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">        <span class="comment">//调用被测试方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> studentDAO.updateStudent(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">0</span>, <span class="string">&quot;10001&quot;</span>, <span class="string">&quot;佳佳&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">21</span>));</span><br><span class="line">        <span class="comment">//断言</span></span><br><span class="line">        assertEquals(<span class="number">1</span>,i);</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，assertEquals()方法表示断言，如果与期望值不同则会出现断言异常。<br><img src="https://img-blog.csdnimg.cn/ad90352371e74f8fb45f49504b9d022e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="3-4-查询操作-查询所有数据操作"><a href="#3-4-查询操作-查询所有数据操作" class="headerlink" title="3.4 查询操作-查询所有数据操作"></a>3.4 查询操作-查询所有数据操作</h2><ol>
<li><p>在StudentDAO中定义查询所有学生的方法<br><img src="https://img-blog.csdnimg.cn/d38c671da23f46f38afe7c74265ff05e.png" alt="在这里插入图片描述"></p>
</li>
<li><p>在StudentMapper.xml对接口方法进行实现<br> 定义实体类和数据库表的映射关系<img src="https://img-blog.csdnimg.cn/7c0a1891c9c9471b86c1e116bf2364d4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br> 引用实体类和数据库表的映射关系<br> <img src="https://img-blog.csdnimg.cn/0daf24adf26346c29690b2b26030aa95.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
</li>
<li><p>单元测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListStudent</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不能保证文件名一定是正确的，所以可能会抛出异常，需要进行捕获</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//SqlSessionFactoryBuilder</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sqlSessionFactory表示MyBatis的会话工厂</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sqlSession表示MyBatis与数据库之间的会话：通过工厂方法设计模式</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过SqlSession对象调用getMapper方法来获取DAO对象</span></span><br><span class="line">        <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">        <span class="comment">//调用被测试方法</span></span><br><span class="line">        List&lt;Student&gt; students = studentDAO.listStudent();</span><br><span class="line">        <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//断言</span></span><br><span class="line">        assertNotNull(students);</span><br><span class="line">        <span class="comment">//查询操作不需要提交事务，因为不会更改数据库</span></span><br><span class="line">  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-5-查询操作-查询单条记录"><a href="#3-5-查询操作-查询单条记录" class="headerlink" title="3.5 查询操作-查询单条记录"></a>3.5 查询操作-查询单条记录</h2><ol>
<li><p>在StudentDAO中定义查询所有学生的方法<br><img src="https://img-blog.csdnimg.cn/62e16f22cecc45098a9573e5e03edae2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
</li>
<li><p>在StudentMapper.xml对接口方法实现<br><img src="https://img-blog.csdnimg.cn/c3e26c2eef3d492a96391fd222e7bbf4.png" alt="在这里插入图片描述"></p>
</li>
<li><p>单元测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryStudent</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不能保证文件名一定是正确的，所以可能会抛出异常，需要进行捕获</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//SqlSessionFactoryBuilder</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sqlSessionFactory表示MyBatis的会话工厂</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sqlSession表示MyBatis与数据库之间的会话：通过工厂方法设计模式</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过SqlSession对象调用getMapper方法来获取DAO对象</span></span><br><span class="line">        <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">        <span class="comment">//调用被测试方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> studentDAO.queryStudent(<span class="string">&quot;10001&quot;</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">        <span class="comment">//断言</span></span><br><span class="line">        assertNotNull(student);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-6-查询操作-多参数查询"><a href="#3-6-查询操作-多参数查询" class="headerlink" title="3.6 查询操作-多参数查询"></a>3.6 查询操作-多参数查询</h2><p><strong>在MyBatis进行操作时：</strong></p>
<ol>
<li>如果操作方法只有一个简单类型或者字符串类型的参数，在Mapper配置中可以直接通过#{str}直接获取</li>
<li>如果操作方法只有一个对象类型的参数，在Mapper配置中可以直接通过#{attrName}来获取对象的指定属性值</li>
<li>如果操作方法有一个Map类型，在Mapper配置中可以直接通过#{key}获取key对应的value</li>
<li>如果操作方法有多个参数，可以使用<code>@Param</code>注解声明参数的别名</li>
</ol>
<blockquote>
<p>分页查询（参数 start，pageSize）</p>
</blockquote>
<ol>
<li><p>在StudentDAO定义分页查询的方法<br> <img src="https://img-blog.csdnimg.cn/e45ac52b03e443458934089273082020.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
</li>
<li><p>在StudentMapper.xml对接口方法进行实现，，使用<code>#&#123;别名&#125;</code>获取到指定的参数<br><img src="https://img-blog.csdnimg.cn/e53d08f2e2df46b7a406a364a94d1b40.png" alt="在这里插入图片描述"></p>
</li>
<li><p>单元测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListStudentByPage</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不能保证文件名一定是正确的，所以可能会抛出异常，需要进行捕获</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//SqlSessionFactoryBuilder</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sqlSessionFactory表示MyBatis的会话工厂</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sqlSession表示MyBatis与数据库之间的会话：通过工厂方法设计模式</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过SqlSession对象调用getMapper方法来获取DAO对象</span></span><br><span class="line">        <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">        <span class="comment">//调用被测试方法</span></span><br><span class="line">        List&lt;Student&gt; students = studentDAO.listStudentByPage(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//断言</span></span><br><span class="line">        assertNotNull(students);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>注意：</code>如果DAO操作方法没有通过<code>@Param</code>指定参数别名，在SQL中也可以使用<code>arg0,arg1,...</code>或者<code>param1,param2,...</code>的方式来获取参数。</p>
</li>
</ol>
<h2 id="3-7-查询操作-查询总记录数"><a href="#3-7-查询操作-查询总记录数" class="headerlink" title="3.7 查询操作-查询总记录数"></a>3.7 查询操作-查询总记录数</h2><ol>
<li><p>在StudentDAO中定义操作方法<br> <img src="https://img-blog.csdnimg.cn/79cb6aeb2f5047e3add0045695069d24.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
</li>
<li><p>在StudentMapper.xml中实现接口方法，通过resultType指定当前操作的返回类型为int<br><img src="https://img-blog.csdnimg.cn/ad4b42bf78084d4ab3cea0a7ee3a26c0.png" alt="在这里插入图片描述"></p>
</li>
<li><p>单元测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testgetCount</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不能保证文件名一定是正确的，所以可能会抛出异常，需要进行捕获</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//SqlSessionFactoryBuilder</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sqlSessionFactory表示MyBatis的会话工厂</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sqlSession表示MyBatis与数据库之间的会话：通过工厂方法设计模式</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过SqlSession对象调用getMapper方法来获取DAO对象</span></span><br><span class="line">        <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">        <span class="comment">//调用被测试方法</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> studentDAO.getCount();</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-7-添加操作-主键回填"><a href="#3-7-添加操作-主键回填" class="headerlink" title="3.7 添加操作-主键回填"></a>3.7 添加操作-主键回填</h2><ul>
<li>在<code>StudentMapper.xml</code>中添加操作标签–insert</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--useGeneratedKey 表示设置添加操作是否需要回填生成的主键--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--keyProperty 设置回填的主键复制到参数对象中的哪一个属性--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;stuId&quot;</span>&gt;</span></span><br><span class="line">       insert into tb_students(stu_num,stu_name,stu_gender,stu_age)</span><br><span class="line">       values(#&#123;stuNum&#125;,#&#123;stuName&#125;,#&#123;stuGender&#125;,#&#123;stuAge&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="四、工具类封装"><a href="#四、工具类封装" class="headerlink" title="四、工具类封装"></a>四、工具类封装</h1><ul>
<li>MyBatisUtil</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-23 8:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//工具类的目标是对外提供SQLSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="comment">//当我们在创建一个ThreadLocal变量后，每个线程对其进行访问的时候访问的都是线程自己的变量,这样就不会存在线程不安全问题。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SqlSession&gt; local = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;SqlSession&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载MyBatis配置文件</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">            <span class="comment">//工厂是单例的，所以只加载一次就够了</span></span><br><span class="line">            <span class="comment">//不能每做一顿红烧肉就开一家饭店</span></span><br><span class="line">            factory = builder.build(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title function_">getFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> local.get();</span><br><span class="line">        <span class="keyword">if</span> (sqlSession == <span class="literal">null</span>) &#123;</span><br><span class="line">            sqlSession = factory.openSession();</span><br><span class="line">            local.set(sqlSession);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> factory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Object</span>&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; c)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> getSqlSession();</span><br><span class="line">        <span class="keyword">return</span> sqlSession.getMapper(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="五、事务管理"><a href="#五、事务管理" class="headerlink" title="五、事务管理"></a>五、事务管理</h1><ul>
<li>SqlSession功能：</li>
</ul>
<blockquote>
<ol>
<li>getMapper(DAO.class):获取Mapper（DAO对象的实例）</li>
<li>事务管理</li>
</ol>
</blockquote>
<h2 id="5-1-手动提交事务"><a href="#5-1-手动提交事务" class="headerlink" title="5.1 手动提交事务"></a>5.1 手动提交事务</h2><h4 id="测试类中的手动事务管理"><a href="#测试类中的手动事务管理" class="headerlink" title="测试类中的手动事务管理"></a>测试类中的手动事务管理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertStudent</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">//1.当获取SqlSession对象时，就默认开启了事务</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//通过会话获取DAO对象</span></span><br><span class="line">        <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">        <span class="comment">//测试StudentDAO中的方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">5</span>, <span class="string">&quot;10009&quot;</span>, <span class="string">&quot;周杰伦&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">28</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> studentDAO.insertStudent(student);</span><br><span class="line">        <span class="comment">//2.操作成功之后，需要手动提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">//3.操作出现异常，需要对事务进行rollback回滚事务</span></span><br><span class="line">        sqlSession.rollback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-2-自动提交事务"><a href="#5-2-自动提交事务" class="headerlink" title="5.2 自动提交事务"></a>5.2 自动提交事务</h2><blockquote>
<p>通过SqlSessionFactory调用openSession方法获取SQLSession对象时，可以通过参数来设置事务是否自动提交：</p>
<ul>
<li>如果参数设置为true，表示自动事务提交</li>
<li>如果不设置参数或者设置为false，表示手动事务提交</li>
</ul>
</blockquote>
<h4 id="MyBatisUtil优化"><a href="#MyBatisUtil优化" class="headerlink" title="MyBatisUtil优化"></a>MyBatisUtil优化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-23 8:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//工具类的目标是对外提供SQLSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="comment">//当我们在创建一个ThreadLocal变量后，每个线程对其进行访问的时候访问的都是线程自己的变量,这样就不会存在线程不安全问题。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SqlSession&gt; local = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;SqlSession&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载MyBatis配置文件</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">            <span class="comment">//工厂是单例的，所以只加载一次就够了</span></span><br><span class="line">            <span class="comment">//不能每做一顿红烧肉就开一家饭店</span></span><br><span class="line">            factory = builder.build(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title function_">getFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自动提交事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">(<span class="type">boolean</span> isAutoCommit)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> local.get();</span><br><span class="line">        <span class="keyword">if</span> (sqlSession == <span class="literal">null</span>) &#123;</span><br><span class="line">            sqlSession = factory.openSession(isAutoCommit);</span><br><span class="line">            local.set(sqlSession);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手动提交事务,以重载的方式实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自动提交事务</span></span><br><span class="line">    <span class="comment">//直接获取DAO就是不想进行手动事务管理，所以直接设置为自动事务提交</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Object</span>&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; c)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> getSqlSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> sqlSession.getMapper(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="测试操作"><a href="#测试操作" class="headerlink" title="测试操作"></a>测试操作</h4><ol>
<li>手动事务提交<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertStudent</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtil.getSqlSession(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//1.当获取SqlSession对象时，就默认开启了事务</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//通过会话获取DAO对象</span></span><br><span class="line">        <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">        <span class="comment">//测试StudentDAO中的方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">5</span>, <span class="string">&quot;10009&quot;</span>, <span class="string">&quot;周杰伦&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">28</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> studentDAO.insertStudent(student);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作1</span></span><br><span class="line">        <span class="comment">//操作2</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//操作3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果需要使用SqlSession进行多步操作，建议使用手动提交事务</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.操作成功之后，需要手动提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">//3.操作出现异常，需要对事务进行rollback回滚事务</span></span><br><span class="line">        sqlSession.rollback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>自动事务提交</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteStudent</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> MyBatisUtil.getMapper(StudentDAO.class);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> studentDAO.deleteStudent(<span class="string">&quot;10001&quot;</span>);</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="五、MyBatis主配置文件"><a href="#五、MyBatis主配置文件" class="headerlink" title="五、MyBatis主配置文件"></a>五、MyBatis主配置文件</h1><blockquote>
<p>mybatis-config.xml是MyBatis框架的主配置文件，主要用于配置MyBatis数据源以及属性信息</p>
</blockquote>
<h2 id="5-1-properties标签"><a href="#5-1-properties标签" class="headerlink" title="5.1 properties标签"></a>5.1 properties标签</h2><blockquote>
<p>用于设置键值对，或者加载属性文件</p>
</blockquote>
<ul>
<li>在resources目录下创建jdbc.properties文件，配置键值对如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mysql_driver=com.mysql.jdbc.Driver</span><br><span class="line">mysql_url=jdbc:mysql://localhost:3306/db1?useSSL=true</span><br><span class="line">mysql_username=root</span><br><span class="line">mysql_password=123456</span><br></pre></td></tr></table></figure>

<ul>
<li>在mybatis-config.xml中通过properties标签引用jdbc.properties文件；</li>
<li>引入文件之后，在配置environment时可以直接使用jdbc.properties的key来获取对应的value<br><img src="https://img-blog.csdnimg.cn/96935c97d06f4faf994ec64d6be8c55a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu26JC96ZmI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><code>注意</code>：${}是properties文件中的变量占位符，#{}是sql的参数占位符。</li>
</ul>
<h2 id="5-2-setting标签"><a href="#5-2-setting标签" class="headerlink" title="5.2 setting标签"></a>5.2 setting标签</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置mybatis的属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动二级缓存--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动延迟加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="8-3-typeAliases标签"><a href="#8-3-typeAliases标签" class="headerlink" title="8.3 typeAliases标签"></a>8.3 typeAliases标签</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--typeAliases标签用于给实体类取别名，在映射文件中可以直接使用别名来替代实体类的全限定名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.qfedu.pojo.Student&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;Student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.qfedu.pojo.Book&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-4-plugins标签"><a href="#5-4-plugins标签" class="headerlink" title="5.4 plugins标签"></a>5.4 plugins标签</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--plugins标签，用于配置MyBatis插件（分页插件）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-5-environments标签"><a href="#5-5-environments标签" class="headerlink" title="5.5 environments标签"></a>5.5 environments标签</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在environments配置数据库连接信息 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在environments标签中可以定义多个environment标签，每个environment标签可以定义一套连接配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- default属性，用来指定使用哪个environment标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  environment 标签用于配置数据库连接信息  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--transactionManager标签用于配置数据库管理方式</span></span><br><span class="line"><span class="comment">            type=&quot;JDBC&quot;  可以进行事务的提交和回滚操作</span></span><br><span class="line"><span class="comment">            type=&quot;MANAGED&quot; 依赖容器完成事务管理，本身不进行事务的提交和回滚操作 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--dataSource标签就是用来配置数据库连接信息 POOLED|UNPOOLED --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql_driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql_url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql_username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql_password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-6-mappers标签"><a href="#5-6-mappers标签" class="headerlink" title="5.6 mappers标签"></a>5.6 mappers标签</h2><blockquote>
<p>加载映射配置（映射文件、DAO注解）</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mappers标签用于载入映射文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/StudentMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="六、映射文件"><a href="#六、映射文件" class="headerlink" title="六、映射文件"></a>六、映射文件</h2><h2 id="6-1-MyBatis-Mapper初始化"><a href="#6-1-MyBatis-Mapper初始化" class="headerlink" title="6.1 MyBatis Mapper初始化"></a>6.1 MyBatis Mapper初始化</h2><blockquote>
<p>XML文件解析：读取xml文件中的标签配置封装到Java对象中</p>
</blockquote>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-n7eXPOJ3-1648176376717)(imgs&#x2F;1616487875112.png)]</p>
<h2 id="6-2-mapper根标签"><a href="#6-2-mapper根标签" class="headerlink" title="6.2 mapper根标签"></a>6.2 mapper根标签</h2><blockquote>
<p>mapper文件相当于DAO接口的‘实现类’，namespace属性要指定<code>实现</code>DAO接口的全限定名</p>
</blockquote>
<h2 id="6-3-insert标签"><a href="#6-3-insert标签" class="headerlink" title="6.3 insert标签"></a>6.3 insert标签</h2><blockquote>
<p>声明添加操作（sql: insert …）</p>
<p><strong>常用属性</strong></p>
<p>id属性，绑定对应DAO接口中的方法</p>
<p>parameterType属性，用以指定接口中对应方法的参数类型（可省略）</p>
<p>useGeneratedKeys属性， 设置添加操作是否需要回填生成的主键</p>
<p>keyProperty属性，指定回填的id设置到参数对象中的哪个属性</p>
<p>timeout属性，设置此操作的超时时间，如果不设置则一直等待</p>
</blockquote>
<p><strong>主键回填</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;stuId&quot;</span>&gt;</span></span><br><span class="line">    insert into tb_students(stu_num, stu_name, stu_gender, stu_age)</span><br><span class="line">    values (#&#123;stuNum&#125;, #&#123;stuName&#125;, #&#123;stuGender&#125;, #&#123;stuAge&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;stuId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">        select last_insert_id()</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into tb_students(stu_num, stu_name, stu_gender, stu_age)</span><br><span class="line">    values (#&#123;stuNum&#125;, #&#123;stuName&#125;, #&#123;stuGender&#125;, #&#123;stuAge&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-4-delete标签"><a href="#6-4-delete标签" class="headerlink" title="6.4 delete标签"></a>6.4 delete标签</h2><blockquote>
<p>声明删除操作</p>
</blockquote>
<h2 id="6-5-update标签"><a href="#6-5-update标签" class="headerlink" title="6.5 update标签"></a>6.5 update标签</h2><blockquote>
<p>声明修改操作</p>
</blockquote>
<h2 id="6-6-select标签"><a href="#6-6-select标签" class="headerlink" title="6.6 select标签"></a>6.6 select标签</h2><blockquote>
<p>声明查询操作</p>
<ul>
<li><p>id属性， 指定绑定方法的方法名</p>
</li>
<li><p>parameterType属性，设置参数类型</p>
</li>
<li><p>resultType属性，指定当前sql返回数据封装的对象类型（实体类）</p>
</li>
<li><p>resultMap属性，指定从数据表到实体类的字段和属性的对应关系</p>
</li>
<li><p>useCache属性，指定此查询操作是否需要缓存</p>
</li>
<li><p>timeout属性，设置超时时间</p>
</li>
</ul>
</blockquote>
<h2 id="6-7-resultMap标签"><a href="#6-7-resultMap标签" class="headerlink" title="6.7 resultMap标签"></a>6.7 resultMap标签</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- resultMap标签用于定义实体类与数据表的映射关系（ORM） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;stu_num&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuNum&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;stu_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;stu_gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuGender&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;stu_age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuAge&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-8-cache标签"><a href="#6-8-cache标签" class="headerlink" title="6.8 cache标签"></a>6.8 cache标签</h2><blockquote>
<p>设置当前DAO进行数据库操作时的缓存属性设置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span> <span class="attr">size</span>=<span class="string">&quot;&quot;</span> <span class="attr">readOnly</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-9-sql和include"><a href="#6-9-sql和include" class="headerlink" title="6.9 sql和include"></a>6.9 sql和include</h2><blockquote>
<p>SQL片段</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;wanglaoji&quot;</span>&gt;</span>sid , stu_num , stu_name , stu_gender , stu_age<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;wanglaoji&quot;</span>/&gt;</span> from tb_students</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="七、分页插件"><a href="#七、分页插件" class="headerlink" title="七、分页插件"></a>七、分页插件</h2><blockquote>
<p>分页插件是一个独立于MyBatis框架之外的第三方插件;</p>
</blockquote>
<h2 id="7-1-添加分页插件的依赖"><a href="#7-1-添加分页插件的依赖" class="headerlink" title="7.1 添加分页插件的依赖"></a>7.1 添加分页插件的依赖</h2><blockquote>
<p>PageHelper</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- pagehelper分页插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-2-配置插件"><a href="#7-2-配置插件" class="headerlink" title="7.2 配置插件"></a>7.2 配置插件</h2><blockquote>
<p>在mybatis的主配置文件<code>mybatis-config.xml</code>中通过<code>plugins</code>标签进行配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--plugins标签，用于配置MyBatis插件（分页插件）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-3-分页实例"><a href="#7-3-分页实例" class="headerlink" title="7.3 分页实例"></a>7.3 分页实例</h2><blockquote>
<p>对学生信息进行分页查询</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListStudentsByPage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> MyBatisUtil.getMapper(StudentDAO.class); <span class="comment">//sqlSession</span></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">    List&lt;Student&gt; students = studentDAO.listStudents();</span><br><span class="line"></span><br><span class="line">    PageInfo&lt;Student&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;Student&gt;(students);</span><br><span class="line">    <span class="comment">//pageInfo中就包含了数据及分页信息</span></span><br><span class="line">    List&lt;Student&gt; list = pageInfo.getList();</span><br><span class="line">    <span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>带条件分页</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListStudentsByPage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> MyBatisUtil.getMapper(StudentDAO.class);</span><br><span class="line">    PageHelper.startPage(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="comment">//List&lt;Student&gt; students = studentDAO.listStudents();</span></span><br><span class="line">    List&lt;Student&gt; list = studentDAO.listStudentsByGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    PageInfo&lt;Student&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;Student&gt;(list);</span><br><span class="line">    <span class="comment">//pageInfo中就包含了数据及分页信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="八、关联映射"><a href="#八、关联映射" class="headerlink" title="八、关联映射"></a>八、关联映射</h2><h4 id="8-1-实体关系"><a href="#8-1-实体关系" class="headerlink" title="8.1  实体关系"></a>8.1  实体关系</h4><blockquote>
<p>实体——数据实体，实体关系指的就是数据与数据之间的关系</p>
<p>例如：用户和角色、房屋和楼栋、订单和商品</p>
</blockquote>
<p>实体关系分为以下四种：</p>
<p><strong>一对一关联</strong></p>
<p>实例：人和身份证、学生和学生证、用户基本信息和详情</p>
<p>数据表关系：</p>
<ul>
<li><p>主键关联（用户表主键 和详情主键相同时，表示是匹配的数据）</p>
<p><img src="/Mybatis%E5%AD%A6%E4%B9%A0.assets/1616550990633.png" alt="1616550990633"></p>
</li>
<li><p>唯一外键关联</p>
<p><img src="/Mybatis%E5%AD%A6%E4%B9%A0.assets/1616551159843.png" alt="1616551159843"></p>
</li>
</ul>
<p><strong>一对多关联</strong>、<strong>多对一关联</strong></p>
<p>实例：</p>
<ul>
<li>一对多： 班级和学生 、 类别和商品、楼栋和房屋</li>
<li>多对一：学生和班级 、  商品和类别</li>
</ul>
<p>数据表关系：</p>
<ul>
<li>在多的一端添加外键和一的一段进行关联</li>
</ul>
<p><strong>多对多关联</strong></p>
<p>实例：用户和角色、角色和权限、房屋和业主、学生和社团、订单和商品</p>
<p>数据表关系：建立第三张关系表添加两个外键分别与两张表主键进行关联</p>
<p>用户(user_id)           用户角色表(uid,rid)      角色(role_id)</p>
<p>8.2 创建项目，部署MyBatis框架</p>
<ul>
<li>创建web项目（maven）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加web依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>部署MyBatis框架</p>
<ul>
<li>添加依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加MyBatis依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-29 20:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SqlSession&gt; local = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;SqlSession&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            factory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title function_">getSqlSessionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">(<span class="type">boolean</span> isAutoCommit)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> local.get();</span><br><span class="line">        <span class="keyword">if</span> (sqlSession == <span class="literal">null</span>) &#123;</span><br><span class="line">            sqlSession = factory.openSession(isAutoCommit);</span><br><span class="line">            local.set(sqlSession);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Object</span>&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; c)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> getSqlSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> sqlSession.getMapper(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Redis笔记整理</title>
    <url>/posts/2055281999.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="Redis学习"><a href="#Redis学习" class="headerlink" title="Redis学习"></a>Redis学习</h1><h2 id="一、Redis介绍"><a href="#一、Redis介绍" class="headerlink" title="一、Redis介绍"></a>一、Redis介绍</h2><h3 id="1-1-什么是Redis"><a href="#1-1-什么是Redis" class="headerlink" title="1.1 什么是Redis"></a>1.1 什么是Redis</h3><p>Redis是一个基于<strong>内存</strong>的key-value结构数据库。Redis 是互联网技术领域使用最为广泛的存储中间件，它是「<strong>Re</strong>mote <strong>Di</strong>ctionary <strong>S</strong>ervice」的首字母缩写，也就是「远程字典服务」。</p>
<ul>
<li><input disabled="" type="checkbox"> 基于内存存储，读写性能高</li>
<li><input disabled="" type="checkbox"> 适合存储热点数据（热点商品、资讯、新闻）</li>
<li><input disabled="" type="checkbox"> 企业应用广泛</li>
</ul>
<h3 id="1-2-使用Redis能做什么"><a href="#1-2-使用Redis能做什么" class="headerlink" title="1.2 使用Redis能做什么"></a>1.2 使用Redis能做什么</h3><ul>
<li>数据缓存</li>
<li>消息队列</li>
<li>注册中心</li>
<li>发布订阅</li>
</ul>
<h2 id="二、-Redis入门"><a href="#二、-Redis入门" class="headerlink" title="二、 Redis入门"></a>二、 Redis入门</h2><h3 id="2-1-Redis简介"><a href="#2-1-Redis简介" class="headerlink" title="2.1 Redis简介"></a>2.1 Redis简介</h3><p>Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache, and message broker. 翻译为：Redis是一个开源的内存中的数据结构存储系统，它可以用作：数据库、缓存和消息中间件。</p>
<p>官网：<a href="https://redis.io/">https://redis.io</a></p>
<p>Redis是用C语言开发的一个开源的高性能键值对(key-value)数据库，官方提供的数据是可以达到100000+的QPS（每秒内查询次数）。它存储的value类型比较丰富，也被称为结构化的NoSql数据库。</p>
<p>NoSql（Not Only SQL），不仅仅是SQL，泛指<strong>非关系型数据库</strong>。NoSql数据库并不是要取代关系型数据库，而是关系型数据库的补充。</p>
<p>关系型数据库(RDBMS)：</p>
<ul>
<li>Mysql</li>
<li>Oracle</li>
<li>DB2</li>
<li>SQLServer</li>
</ul>
<p>非关系型数据库(NoSql)：</p>
<ul>
<li>Redis</li>
<li>Mongo db</li>
<li>MemCached</li>
</ul>
<h3 id="2-2-Redis下载与安装"><a href="#2-2-Redis下载与安装" class="headerlink" title="2.2 Redis下载与安装"></a>2.2 Redis下载与安装</h3><h4 id="1-Redis下载"><a href="#1-Redis下载" class="headerlink" title="1. Redis下载"></a>1. Redis下载</h4><p>Redis安装包分为windows版和Linux版：</p>
<ul>
<li>Windows版下载地址：<a href="https://github.com/microsoftarchive/redis/releases">https://github.com/microsoftarchive/redis/releases</a></li>
<li>Linux版下载地址： <a href="https://download.redis.io/releases/">https://download.redis.io/releases/</a></li>
</ul>
<p><strong>1）在Linux中安装Redis</strong></p>
<p>在Linux系统安装Redis步骤：</p>
<ol>
<li>将Redis安装包上传到Linux</li>
<li>解压安装包，命令：&#x3D;&#x3D;tar -zxvf redis-4.0.0.tar.gz -C &#x2F;usr&#x2F;local&#x3D;&#x3D;</li>
<li>安装Redis的依赖环境gcc，命令：&#x3D;&#x3D;yum install gcc-c++&#x3D;&#x3D;</li>
<li>进入&#x2F;usr&#x2F;local&#x2F;redis-4.0.0，进行编译，命令：&#x3D;&#x3D;make&#x3D;&#x3D;</li>
<li>进入redis的src目录进行安装，命令：&#x3D;&#x3D;make install&#x3D;&#x3D;</li>
</ol>
<p>安装后重点文件说明：</p>
<blockquote>
<p>&#x2F;usr&#x2F;local&#x2F;redis-4.0.0&#x2F;src&#x2F;redis-server：Redis服务启动脚本</p>
<p>&#x2F;usr&#x2F;local&#x2F;redis-4.0.0&#x2F;src&#x2F;redis-cli：Redis客户端脚本</p>
<p>&#x2F;usr&#x2F;local&#x2F;redis-4.0.0&#x2F;redis.conf：Redis配置文件</p>
</blockquote>
<p><strong>2）在Windows中安装Redis</strong></p>
<p>Redis的Windows版属于绿色软件，直接解压即可使用，解压后目录结构如下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810122717869.png" alt="image-20220810122717869"></p>
<h3 id="2-3-Redis服务启动与停止"><a href="#2-3-Redis服务启动与停止" class="headerlink" title="2.3 Redis服务启动与停止"></a>2.3 Redis服务启动与停止</h3><p><strong>1）Linux系统中启动和停止Redis</strong></p>
<p>执行Redis服务启动脚本文件&#x3D;&#x3D;redis-server&#x3D;&#x3D;：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810124300102.png" alt="image-20220810124300102"></p>
<p>通过启动日志可以看到，Redis默认端口号为&#x3D;&#x3D;6379&#x3D;&#x3D;。</p>
<p>&#x3D;&#x3D;Ctrl + C&#x3D;&#x3D;停止Redis服务</p>
<p>通过&#x3D;&#x3D;redis-cli&#x3D;&#x3D;可以连接到本地的Redis服务，默认情况下不需要认证即可连接成功。</p>
<p>退出客户端可以输入&#x3D;&#x3D;exit&#x3D;&#x3D;或者&#x3D;&#x3D;quit&#x3D;&#x3D;命令。</p>
<p><strong>2）Windows系统中启动和停止Redis</strong></p>
<p>Windows系统中启动Redis，直接双击redis-server.exe即可启动Redis服务，redis服务默认端口号为6379</p>
<p><img src="/assets/image-20210927100421213.png" alt="image-20210927100421213"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810124318033.png" alt="image-20220810124318033"></p>
<p>&#x3D;&#x3D;Ctrl + C&#x3D;&#x3D;停止Redis服务</p>
<p>双击&#x3D;&#x3D;redis-cli.exe&#x3D;&#x3D;即可启动Redis客户端，默认连接的是本地的Redis服务，而且不需要认证即可连接成功。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810124328332.png" alt="image-20220810124328332"></p>
<p>退出客户端可以输入&#x3D;&#x3D;exit&#x3D;&#x3D;或者&#x3D;&#x3D;quit&#x3D;&#x3D;命令。</p>
<h3 id="2-4-Redis配置文件"><a href="#2-4-Redis配置文件" class="headerlink" title="2.4 Redis配置文件"></a>2.4 Redis配置文件</h3><p>前面我们已经启动了Redis服务，默认情况下Redis启动后是在前台运行，而且客户端不需要密码就可以连接到Redis服务。如果我们希望Redis服务启动后是在后台运行，同时希望客户端认证通过后才能连接到Redis服务，应该如果做呢？</p>
<p>此时就需要修改Redis的配置文件：</p>
<ul>
<li>Linux系统中Redis配置文件：REDIS_HOME&#x2F;redis.conf</li>
<li>Windows系统中Redis配置文件：REDIS_HOME&#x2F;redis.windows.conf</li>
</ul>
<p><strong>通过修改Redis配置文件可以进行如下配置：</strong></p>
<p><strong>1）</strong>设置Redis服务后台运行</p>
<p>​	将配置文件中的&#x3D;&#x3D;daemonize&#x3D;&#x3D;配置项改为yes，默认值为no。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810124629917.png" alt="image-20220810124629917"></p>
<p>​	注意：Windows版的Redis不支持后台运行。</p>
<p><strong>2）</strong>设置Redis服务密码</p>
<p>​	将配置文件中的 &#x3D;&#x3D;# requirepass foobared&#x3D;&#x3D; 配置项取消注释，默认为注释状态。foobared为密码，可以根据情况自己指定。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810125540852.png" alt="image-20220810125540852"></p>
<p><strong>3）</strong>设置允许客户端远程连接Redis服务</p>
<p>​	Redis服务默认只能客户端本地连接，不允许客户端远程连接。将配置文件中的 &#x3D;&#x3D;bind 127.0.0.1&#x3D;&#x3D; 配置项注释掉。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810130125958.png" alt="image-20220810130125958"></p>
<p><strong>解释说明：</strong></p>
<blockquote>
<p>Redis配置文件中 &#x3D;&#x3D;#&#x3D;&#x3D; 表示注释</p>
<p>Redis配置文件中的配置项前面不能有空格，需要顶格写</p>
<p>daemonize：用来指定redis是否要用守护线程的方式启动，设置成yes时，代表开启守护进程模式。在该模式下，redis会在后台运行</p>
<p>requirepass：设置Redis的连接密码</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810125214907.png" alt="image-20220810125214907"></p>
<p>bind：如果指定了bind，则说明只允许来自指定网卡的Redis请求。如果没有指定，就说明可以接受来自任意一个网卡的Redis请求。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810130630668.png" alt="image-20220810130630668"></p>
</blockquote>
<p><strong>注意</strong>：修改配置文件后需要重启Redis服务配置才能生效，并且启动Redis服务时需要显示的指定配置文件：</p>
<p>1）Linux中启动Redis服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入Redis安装目录</span><br><span class="line">cd /usr/local/redis-4.0.0</span><br><span class="line"># 启动Redis服务，指定使用的配置文件</span><br><span class="line">./src/redis-server ./redis.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810124834800.png" alt="image-20220810124834800"></p>
<p>2）Windows中启动Redis服务</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810124353605.png" alt="image-20220810124353605"></p>
<p>由于Redis配置文件中开启了认证校验，即客户端连接时需要提供密码，此时客户端连接方式变为：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810124400738.png" alt="image-20220810124400738"></p>
<p><strong>解释说明：</strong></p>
<blockquote>
<p>-h：指定连接的Redis服务的ip地址</p>
<p>-p：指定连接的Redis服务的端口号</p>
<p>-a：指定连接的Redis服务的密码</p>
</blockquote>
<h2 id="三、-Redis数据类型"><a href="#三、-Redis数据类型" class="headerlink" title="三、 Redis数据类型"></a>三、 Redis数据类型</h2><h3 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h3><p>Redis存储的是key-value结构的数据，其中key是字符串类型，value有5种常用的数据类型：</p>
<ul>
<li>字符串 string</li>
<li>哈希 hash</li>
<li>列表 list</li>
<li>集合 set</li>
<li>有序集合 sorted set &#x2F; zset</li>
</ul>
<h3 id="3-2-Redis-5种常用数据类型"><a href="#3-2-Redis-5种常用数据类型" class="headerlink" title="3.2 Redis 5种常用数据类型"></a>3.2 Redis 5种常用数据类型</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810130705059.png" alt="image-20220810130705059"></p>
<p><strong>解释说明：</strong></p>
<blockquote>
<p>字符串(string)：普通字符串，常用</p>
<p>哈希(hash)：适合存储对象</p>
<p>列表(list)：按照插入顺序排序，可以有重复元素</p>
<p>集合(set)：无序集合，没有重复元素</p>
<p>有序集合(sorted set &#x2F; zset)：集合中每个元素关联一个分数（score），根据分数升序排序，没有重复元素</p>
</blockquote>
<h2 id="四、-Redis常用命令"><a href="#四、-Redis常用命令" class="headerlink" title="四、 Redis常用命令"></a>四、 Redis常用命令</h2><h3 id="4-1-字符串string操作命令"><a href="#4-1-字符串string操作命令" class="headerlink" title="4.1 字符串string操作命令"></a>4.1 字符串string操作命令</h3><p>Redis 中字符串类型常用命令：</p>
<ul>
<li><strong>SET</strong> key value 					         设置指定key的值</li>
<li><strong>GET</strong> key                                        获取指定key的值</li>
<li><strong>SETEX</strong> key seconds value         设置指定key的值，并将 key 的过期时间设为 seconds 秒</li>
<li><strong>SETNX</strong> key value 只有在 key    不存在时设置 key 的值</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810135353146.png" alt="image-20220810135353146"></p>
<p>更多命令可以参考Redis中文网：<a href="https://www.redis.net.cn/">https://www.redis.net.cn</a></p>
<h3 id="4-2-哈希hash操作命令"><a href="#4-2-哈希hash操作命令" class="headerlink" title="4.2 哈希hash操作命令"></a>4.2 哈希hash操作命令</h3><p>Redis hash 是一个string类型的 field 和 value 的映射表，hash特别适合用于存储对象，常用命令：</p>
<ul>
<li><strong>HSET</strong> key field value             将哈希表 key 中的字段 field 的值设为 value</li>
<li><strong>HGET</strong> key field                       获取存储在哈希表中指定字段的值</li>
<li><strong>HDEL</strong> key field                       删除存储在哈希表中的指定字段</li>
<li><strong>HKEYS</strong> key                              获取哈希表中所有字段</li>
<li><strong>HVALS</strong> key                              获取哈希表中所有值</li>
<li><strong>HGETALL</strong> key                         获取在哈希表中指定 key 的所有字段和值，已经存在就不进行任何操作</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810130747518.png" alt="image-20220810130747518"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810135808697.png" alt="image-20220810135808697"></p>
<h3 id="4-3-列表list操作命令"><a href="#4-3-列表list操作命令" class="headerlink" title="4.3 列表list操作命令"></a>4.3 列表list操作命令</h3><p>Redis 列表是简单的字符串列表，按照插入顺序排序，常用命令：</p>
<ul>
<li><strong>LPUSH</strong> key value1 [value2]         将一个或多个值插入到列表头部</li>
<li><strong>LRANGE</strong> key start stop                获取列表指定范围内的元素</li>
<li><strong>RPOP</strong> key                                       移除并获取列表最后一个元素</li>
<li><strong>LLEN</strong> key                                        获取列表长度</li>
<li><strong>BRPOP</strong> key1 [key2 ] timeout       移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超    时或发现可弹出元素为止</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810130752164.png" alt="image-20220810130752164"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810140458907.png" alt="image-20220810140458907"></p>
<h3 id="4-4-集合set操作命令"><a href="#4-4-集合set操作命令" class="headerlink" title="4.4 集合set操作命令"></a>4.4 集合set操作命令</h3><p>Redis set 是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据，常用命令：</p>
<ul>
<li><strong>SADD</strong> key member1 [member2]            向集合添加一个或多个成员</li>
<li><strong>SMEMBERS</strong> key                                         返回集合中的所有成员</li>
<li><strong>SCARD</strong> key                                                  获取集合的成员数</li>
<li><strong>SINTER</strong> key1 [key2]                                   返回给定所有集合的交集</li>
<li><strong>SUNION</strong> key1 [key2]                                 返回所有给定集合的并集</li>
<li><strong>SDIFF</strong> key1 [key2]                                      返回给定所有集合的差集</li>
<li><strong>SREM</strong> key member1 [member2]            移除集合中一个或多个成员</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810130806009.png" alt="image-20220810130806009"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810140941237.png" alt="image-20220810140941237"></p>
<h3 id="4-5-有序集合sorted-set操作命令"><a href="#4-5-有序集合sorted-set操作命令" class="headerlink" title="4.5 有序集合sorted set操作命令"></a>4.5 有序集合sorted set操作命令</h3><p>Redis sorted set 有序集合是 string 类型元素的集合，且不允许重复的成员。每个元素都会关联一个double类型的分数(score) 。redis正是通过分数来为集合中的成员进行从小到大排序。有序集合的成员是唯一的，但分数却可以重复。</p>
<p>常用命令：</p>
<ul>
<li><strong>ZADD</strong> key score1 member1 [score2 member2]     向有序集合添加一个或多个成员，或者更新已存在成员的 分数</li>
<li><strong>ZRANGE</strong> key start stop [WITHSCORES]                     通过索引区间返回有序集合中指定区间内的成员</li>
<li><strong>ZINCRBY</strong> key increment member                              有序集合中对指定成员的分数加上增量 increment</li>
<li><strong>ZREM</strong> key member [member …]                                移除有序集合中的一个或多个成员</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810130813179.png" alt="image-20220810130813179"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810141557403.png" alt="image-20220810141557403"></p>
<h3 id="4-6-通用命令"><a href="#4-6-通用命令" class="headerlink" title="4.6 通用命令"></a>4.6 通用命令</h3><p>Redis中的通用命令，主要是针对key进行操作的相关命令：</p>
<ul>
<li><strong>KEYS</strong> pattern  查找所有符合给定模式( pattern)的 key </li>
<li><strong>EXISTS</strong> key  检查给定 key 是否存在</li>
<li><strong>TYPE</strong> key  返回 key 所储存的值的类型</li>
<li><strong>TTL</strong> key  返回给定 key 的剩余生存时间(TTL, time to live)，以秒为单位</li>
<li><strong>DEL</strong> key  该命令用于在 key 存在是删除 key</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810141929557.png" alt="image-20220810141929557"></p>
<h2 id="五、-在Java中操作Redis"><a href="#五、-在Java中操作Redis" class="headerlink" title="五、 在Java中操作Redis"></a>五、 在Java中操作Redis</h2><h3 id="5-1-介绍"><a href="#5-1-介绍" class="headerlink" title="5.1 介绍"></a>5.1 介绍</h3><p>前面我们讲解了Redis的常用命令，这些命令是我们操作Redis的基础，那么我们在java程序中应该如何操作Redis呢？这就需要使用Redis的Java客户端，就如同我们使用JDBC操作MySQL数据库一样。</p>
<p>Redis 的 Java 客户端很多，官方推荐的有三种：</p>
<ul>
<li>Jedis</li>
<li>Lettuce</li>
<li>Redisson</li>
</ul>
<p>Spring 对 Redis 客户端进行了整合，提供了 Spring Data Redis，在Spring Boot项目中还提供了对应的Starter，即 spring-boot-starter-data-redis。</p>
<h3 id="5-2-Jedis"><a href="#5-2-Jedis" class="headerlink" title="5.2 Jedis"></a>5.2 Jedis</h3><p>Jedis 是 Redis 的 Java 版本的客户端实现。</p>
<p>maven坐标：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 Jedis 操作 Redis 的步骤：</p>
<ol>
<li>获取连接</li>
<li>执行操作</li>
<li>关闭连接</li>
</ol>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Jedis操作Redis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-10 14:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRedis</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1 获取连接</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;localhost&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 执行具体的操作</span></span><br><span class="line">        jedis.set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//jedis.del(&quot;username&quot;);</span></span><br><span class="line"></span><br><span class="line">        jedis.hset(<span class="string">&quot;myhash&quot;</span>,<span class="string">&quot;addr&quot;</span>,<span class="string">&quot;bj&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">hValue</span> <span class="operator">=</span> jedis.hget(<span class="string">&quot;myhash&quot;</span>, <span class="string">&quot;addr&quot;</span>);</span><br><span class="line">        System.out.println(hValue);</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-Spring-Data-Redis"><a href="#5-3-Spring-Data-Redis" class="headerlink" title="5.3 Spring Data Redis"></a>5.3 Spring Data Redis</h3><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h4><p>Spring Data Redis 是 Spring 的一部分，提供了在 Spring 应用中通过简单的配置就可以访问 Redis 服务，对 Redis 底层开发包进行了高度封装。在 Spring 项目中，可以使用Spring Data Redis来简化 Redis 操作。</p>
<p>网址：<a href="https://spring.io/projects/spring-data-redis">https://spring.io/projects/spring-data-redis</a></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810143343615.png" alt="image-20220810143343615"></p>
<p>maven坐标：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Spring Boot提供了对应的Starter，maven坐标：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Spring Data Redis中提供了一个高度封装的类：<strong>RedisTemplate</strong>，针对 Jedis 客户端中大量api进行了归类封装,将同一类型操作封装为operation接口，具体分类如下：</p>
<ul>
<li>ValueOperations：简单K-V操作</li>
<li>SetOperations：set类型数据操作</li>
<li>ZSetOperations：zset类型数据操作</li>
<li>HashOperations：针对hash类型的数据操作</li>
<li>ListOperations：针对list类型的数据操作</li>
</ul>
<h4 id="2-使用方式"><a href="#2-使用方式" class="headerlink" title="2. 使用方式"></a>2. 使用方式</h4><h5 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h5><p>创建springboot项目并导入坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810145437417.png" alt="image-20220810145437417"></p>
<h5 id="2-配置application-yml"><a href="#2-配置application-yml" class="headerlink" title="2.配置application.yml"></a>2.配置application.yml</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springdataredis_demo</span></span><br><span class="line">  <span class="comment">#Redis相关配置</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment">#password: 123456</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span> <span class="comment">#操作的是0号数据库</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="comment">#Redis连接池配置</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span> <span class="comment">#最大连接数</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">1ms</span> <span class="comment">#连接池最大阻塞等待时间</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">4</span> <span class="comment">#连接池中的最大空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span> <span class="comment">#连接池中的最小空闲连接</span></span><br></pre></td></tr></table></figure>

<p>解释说明：</p>
<blockquote>
<p>spring.redis.database：指定使用Redis的哪个数据库，Redis服务启动后默认有16个数据库，编号分别是从0到15。</p>
<p>可以通过修改Redis配置文件来指定数据库的数量。</p>
</blockquote>
<h5 id="3-提供配置类"><a href="#3-提供配置类" class="headerlink" title="3.提供配置类"></a>3.提供配置类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.ysu.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-10 14:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span>  <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line"></span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认的Key序列化器为：JdkSerializationRedisSerializer</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line"></span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释说明：</p>
<blockquote>
<p>当前配置类不是必须的，因为 Spring Boot 框架会自动装配 RedisTemplate 对象，但是默认的key序列化器为JdkSerializationRedisSerializer，导致我们存到Redis中后的数据和原始数据有差别</p>
</blockquote>
<h5 id="4-测试类"><a href="#4-测试类" class="headerlink" title="4. 测试类"></a>4. 测试类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-操作字符串类型数据"><a href="#5-操作字符串类型数据" class="headerlink" title="5. 操作字符串类型数据"></a>5. 操作字符串类型数据</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//存值</span></span><br><span class="line">    <span class="type">ValueOperations</span> <span class="variable">valueOperations</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line">    valueOperations.set(<span class="string">&quot;city123&quot;</span>, <span class="string">&quot;shanghai&quot;</span>);</span><br><span class="line">    <span class="comment">//取值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) valueOperations.get(<span class="string">&quot;city123&quot;</span>);</span><br><span class="line">    System.out.println(value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存值，同时设置过期时间</span></span><br><span class="line">    valueOperations.set(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>, <span class="number">10l</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存值，如果存在则不执行任何操作</span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> valueOperations.setIfAbsent(<span class="string">&quot;city1234&quot;</span>, <span class="string">&quot;hangzhou&quot;</span>);</span><br><span class="line">    System.out.println(aBoolean);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的key和value在存入redis中时会使用到相应的序列化器，对于key我们可以使用配置类来设置新的序列化器来方便观察，对于value没必要设置，因为我们读取的时候还会反序列化回来。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810145846709.png" alt="image-20220810145846709"></p>
<h5 id="6-操作哈希类型数据"><a href="#6-操作哈希类型数据" class="headerlink" title="6.操作哈希类型数据"></a>6.操作哈希类型数据</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作Hash类型数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">HashOperations</span> <span class="variable">hashOperations</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存值   key    field    value</span></span><br><span class="line">    hashOperations.put(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">    hashOperations.put(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;20&quot;</span>);</span><br><span class="line">    hashOperations.put(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;address&quot;</span>,<span class="string">&quot;bj&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> (String) hashOperations.get(<span class="string">&quot;002&quot;</span>, <span class="string">&quot;age&quot;</span>);</span><br><span class="line">    System.out.println(age);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得hash结构中的所有字段</span></span><br><span class="line">    <span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> hashOperations.keys(<span class="string">&quot;002&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Object key : keys) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;field:&quot;</span>+key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得hash结构中的所有值</span></span><br><span class="line">    <span class="type">List</span> <span class="variable">values</span> <span class="operator">=</span> hashOperations.values(<span class="string">&quot;002&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Object value : values) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;value:&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-操作列表类型数据"><a href="#7-操作列表类型数据" class="headerlink" title="7.操作列表类型数据"></a>7.操作列表类型数据</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作List类型的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ListOperations</span> <span class="variable">listOperations</span> <span class="operator">=</span> redisTemplate.opsForList();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存值,从左边进</span></span><br><span class="line">    listOperations.leftPush(<span class="string">&quot;mylist&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">    <span class="comment">//一次存入多个值</span></span><br><span class="line">    listOperations.leftPushAll(<span class="string">&quot;mylist&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取值</span></span><br><span class="line">    List&lt;String&gt; mylist = listOperations.range(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (String value : mylist) &#123;</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;============================&quot;</span>);</span><br><span class="line">    <span class="comment">//获取列表长度 llen</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> listOperations.size(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">lSize</span> <span class="operator">=</span> size.intValue();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; lSize; i++) &#123;</span><br><span class="line">        <span class="comment">//出队列，从右侧出，即删除元素</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">element</span> <span class="operator">=</span> (String) listOperations.rightPop(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">        System.out.println(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;============================&quot;</span>);</span><br><span class="line">    <span class="comment">//取值</span></span><br><span class="line">    mylist = listOperations.range(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (String value : mylist) &#123;</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="8-操作集合类型数据"><a href="#8-操作集合类型数据" class="headerlink" title="8.操作集合类型数据"></a>8.操作集合类型数据</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作Set类型的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SetOperations</span> <span class="variable">setOperations</span> <span class="operator">=</span> redisTemplate.opsForSet();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存值</span></span><br><span class="line">    setOperations.add(<span class="string">&quot;myset&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取值</span></span><br><span class="line">    Set&lt;String&gt; myset = setOperations.members(<span class="string">&quot;myset&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String o : myset) &#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除成员</span></span><br><span class="line">    setOperations.remove(<span class="string">&quot;myset&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取值</span></span><br><span class="line">    myset = setOperations.members(<span class="string">&quot;myset&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String o : myset) &#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="9-操作有序集合类型数据"><a href="#9-操作有序集合类型数据" class="headerlink" title="9.操作有序集合类型数据"></a>9.操作有序集合类型数据</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作ZSet类型的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testZset</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ZSetOperations</span> <span class="variable">zSetOperations</span> <span class="operator">=</span> redisTemplate.opsForZSet();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存值</span></span><br><span class="line">    zSetOperations.add(<span class="string">&quot;myZset&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="number">10.0</span>);</span><br><span class="line">    zSetOperations.add(<span class="string">&quot;myZset&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="number">11.0</span>);</span><br><span class="line">    zSetOperations.add(<span class="string">&quot;myZset&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="number">12.0</span>);</span><br><span class="line">    zSetOperations.add(<span class="string">&quot;myZset&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="number">13.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取值</span></span><br><span class="line">    Set&lt;String&gt; myZset = zSetOperations.range(<span class="string">&quot;myZset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (String s : myZset) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改分数</span></span><br><span class="line">    zSetOperations.incrementScore(<span class="string">&quot;myZset&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="number">20.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取值</span></span><br><span class="line">    myZset = zSetOperations.range(<span class="string">&quot;myZset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (String s : myZset) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除成员</span></span><br><span class="line">    zSetOperations.remove(<span class="string">&quot;myZset&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取值</span></span><br><span class="line">    myZset = zSetOperations.range(<span class="string">&quot;myZset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (String s : myZset) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="10-通用操作"><a href="#10-通用操作" class="headerlink" title="10.通用操作"></a>10.通用操作</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用操作，针对不同的数据类型都可以操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCommon</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//获取Redis中所有的key</span></span><br><span class="line">    Set&lt;String&gt; keys = redisTemplate.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">        System.out.println(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断某个key是否存在</span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">itcast</span> <span class="operator">=</span> redisTemplate.hasKey(<span class="string">&quot;wuhu&quot;</span>);</span><br><span class="line">    System.out.println(itcast);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除指定key</span></span><br><span class="line">    redisTemplate.delete(<span class="string">&quot;city123&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取指定key对应的value的数据类型</span></span><br><span class="line">    <span class="type">DataType</span> <span class="variable">dataType</span> <span class="operator">=</span> redisTemplate.type(<span class="string">&quot;myhash&quot;</span>);</span><br><span class="line">    System.out.println(dataType.name());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Redis面试题整理</title>
    <url>/posts/765301926.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="Redis面试题整理"><a href="#Redis面试题整理" class="headerlink" title="Redis面试题整理"></a>Redis面试题整理</h1><h3 id="1-什么是Redis？"><a href="#1-什么是Redis？" class="headerlink" title="1. 什么是Redis？"></a>1. 什么是Redis？</h3><p>Redis是一个使用C语言编写的，开源的高性能非关系型的键值对的数据库。</p>
<p>它可以存储键和五种不同类型的值的映射。</p>
<ul>
<li>键的类型只能是字符串</li>
<li>值支持字符串、列表、集合、散列表、有序集合五种数据类型</li>
</ul>
<p>与传统数据库不同的是Redis的数据是存在内存中的，所以读写速度非常快，因此Redis被广泛应用于缓存方向，每秒可以处理超过十万次读写操作。另外，Redis也经常用来作分布式锁。除此之外，Redis还支持事务、持久化、LUA脚本、LRU驱动事件、多种集群方案。</p>
<h3 id="2-Redis的优点？"><a href="#2-Redis的优点？" class="headerlink" title="2. Redis的优点？"></a>2. Redis的优点？</h3><ol>
<li>读写性能优异，因为数据都存储在内存中。</li>
<li>支持数据持久化，支持AOF和RDB两种持久化方式。</li>
<li>支持事务，Redis的所有操作都是原子性的，同时Redis还支持对几个操作合并后的原子性执行。</li>
<li>数据结构丰富，除了支持字符串类型的value外还支持列表、集合、散列表、有序集合五种数据类型</li>
<li>支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。</li>
</ol>
<h3 id="3-说⼀下-Redis-和-Memcached-的区别和共同点-？"><a href="#3-说⼀下-Redis-和-Memcached-的区别和共同点-？" class="headerlink" title="3. 说⼀下 Redis 和 Memcached 的区别和共同点 ？"></a>3. 说⼀下 Redis 和 Memcached 的区别和共同点 ？</h3><p>现在公司⼀般都是⽤ Redis 来实现缓存，⽽且 Redis ⾃身也越来越强⼤了！不过，了解 Redis 和 Memcached 的区别和共同点，有助于我们在做相应的技术选型的时候，能够做到有理有据！ </p>
<p><strong>共同点</strong> ： </p>
<ol>
<li><p>都是基于内存的数据库，⼀般都⽤来当做缓存使⽤。 </p>
</li>
<li><p>都有过期策略。 </p>
</li>
<li><p>两者的性能都⾮常⾼。</p>
</li>
</ol>
<p><strong>区别</strong> ： </p>
<ol>
<li><strong>Redis</strong> <strong>⽀持更丰富的数据类型（⽀持更复杂的应⽤场景）。</strong>Redis 不仅仅⽀持简单的 k&#x2F;v 类</li>
</ol>
<p>型的数据，同时还提供 list，set，zset，hash 等数据结构的存储。Memcached 只⽀持最简 </p>
<p>单的 k&#x2F;v 数据类型。 </p>
<ol start="2">
<li><p><strong>Redis ⽀持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进⾏使⽤,⽽ Memecache 把数据全部存在内存之中。</strong></p>
</li>
<li><p><strong>Redis</strong> <strong>有灾难恢复机制。</strong> 因为可以把缓存中的数据持久化到磁盘上。 </p>
</li>
<li><p><strong>Redis 在服务器内存使⽤完之后，可以将不⽤的数据放到磁盘上。但是，Memcached在服务器内存使⽤完之后，就会直接报异常。</strong> </p>
</li>
<li><p><strong>Memcached没有原⽣的集群模式，需要依靠客户端来实现往集群中分⽚写⼊数据；但是Redis⽬前是原⽣⽀持cluster模式的。</strong></p>
</li>
<li><p><strong>Memcached</strong> <strong>是多线程，⾮阻塞</strong> <strong>IO</strong> <strong>复⽤的⽹络模型；Redis使⽤单线程的多路</strong> <strong>IO</strong> <strong>复⽤模</strong> 型。 （Redis 6.0 引⼊了多线程 IO ） </p>
</li>
<li><p><strong>Redis</strong> **⽀持发布订阅模型、Lua脚本、事务等功能，⽽ **Memcached不⽀持。并且，Redis⽀持更多的编程语⾔。</p>
</li>
<li><p><strong>Memcached</strong>过期数据的删除策略只⽤了惰性删除，⽽<strong>Redis</strong>同时使⽤了惰性删除与定期删除。</p>
</li>
</ol>
<h3 id="4-缓存数据的处理流程是怎样的？"><a href="#4-缓存数据的处理流程是怎样的？" class="headerlink" title="4.缓存数据的处理流程是怎样的？"></a>4.缓存数据的处理流程是怎样的？</h3><ol>
<li>如果用户请求的数据在缓存中就直接返回。</li>
<li>缓存中不存在的话就看数据库中是否存在。</li>
<li>数据库中存在的话就更新缓存中的数据。</li>
<li>数据库中如果也不存在就返回空数据。</li>
</ol>
<p>如图所示：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/f72ed4332bdb4db69567759526b9f989~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>
<h3 id="5-为什么要用Redis来做缓存？"><a href="#5-为什么要用Redis来做缓存？" class="headerlink" title="5.为什么要用Redis来做缓存？"></a>5.为什么要用Redis来做缓存？</h3><p>从高性能和高并发两点来谈</p>
<ul>
<li><p>高性能：</p>
<ul>
<li>假如⽤户第⼀次访问数据库中的某些数据的话，这个过程是比较慢，毕竟是从硬盘中读取的。</li>
<li>但是，如果说⽤户访问的数据属于<strong>⾼频数据并且不会经常改变</strong>的话，那么我们就可以地将这些数据存在缓存中。</li>
<li><strong>好处：</strong> 那就是保证⽤户下⼀次再访问这些数据的时候就可以直接从缓存中获取了。</li>
</ul>
<p>操作缓存就是直接操作内存，所以速度相当快。</p>
<ul>
<li>不过，要保持数据库和缓存中的数据的⼀致性。 如果数据库中的对应数据改变的之后，同步改变</li>
</ul>
<p>缓存中相应的数据即可</p>
</li>
<li><p>高并发：</p>
<ul>
<li><p>⼀般像 MySQL 这类的数据库的 QPS ⼤概都在 1w 左右（4 核 8g），但是使⽤ Redis 缓存之后</p>
<p>很容易达到 10w+，甚⾄最⾼能达到 30w+（就单机 redis 的情况，redis 集群的话会更⾼）。</p>
<blockquote>
<p>QPS（Query Per Second）：服务器每秒可以执⾏的查询次数。</p>
</blockquote>
</li>
<li><p>所以，直接操作缓存能够承受的数据库请求数量是远远⼤于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样⽤户的⼀部分请求会直接到缓存这⾥⽽不⽤经过数据库。进⽽，我们<strong>也就提⾼的系统整体的并发。</strong></p>
</li>
</ul>
</li>
</ul>
<p>如图所示：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/bbe58dc920a84fcc8c3a63c9012dcde8~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>
<h3 id="6-Redis的五种数据类型"><a href="#6-Redis的五种数据类型" class="headerlink" title="6.Redis的五种数据类型"></a>6.Redis的五种数据类型</h3><ol>
<li><strong>普通字符串</strong></li>
<li><strong>哈希：</strong>适合存储对象</li>
<li><strong>列表：</strong>按照插入元素的顺序，可以有重复元素</li>
<li><strong>集合：</strong>无序，元素不可重复</li>
<li><strong>有序集合：</strong>集合中每个元素都关联一个分数(score)，根据分数进行升序排序，元素不可重复</li>
</ol>
<h3 id="7-Redis持久化机制"><a href="#7-Redis持久化机制" class="headerlink" title="7.Redis持久化机制"></a>7.Redis持久化机制</h3><p>Redis的持久化机制有两种：快照（RDB）和追加文件（AOF）</p>
<ul>
<li><p><strong>RDB：</strong></p>
</li>
<li><ul>
<li>是通过创建快照的方式来获得当前Redis的数据在某个时间点上的副本，并将其保存在磁盘上。</li>
</ul>
</li>
<li><p><strong>AOF（主流）：</strong></p>
</li>
<li><ul>
<li>是在每执行一条会更改Redis中数据的命令，就将该命令写入到磁盘中的AOF文件。</li>
<li><strong>三种写回策略：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>always，同步回写，每当有数据发生修改就立即将日志写入磁盘，严重影响了Redis的性能。</li>
<li>everysec，每个命令执行完，都只是先将日志写到AOF内存缓冲区，然后每隔一秒同步到磁盘。</li>
<li>no：先将日志写入到AOF缓冲区，由操作系统决定何时写入到磁盘中。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Redis 支持同时开启开启两种持久化方式，可以综合使用 AOF 和 RDB 两种持久化机制，<strong>用AOF 来保证数据不丢失，作为数据恢复的第一选择; 用 RDB 来做不同程度的冷备，在 AOF 文件都丢失或损坏不可用的时候，还可以使用 RDB 来进行快速的数据恢复。</strong></p>
<p>参考自：<a href="https://github.com/Snailclimb/JavaGuide-Interview">JavaGuide面试突击版</a></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>Request学习</title>
    <url>/posts/1050141509.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h1><p>一个类型六个属性</p>
<ul>
<li>类型：models.Response</li>
<li>属性：<ul>
<li>r.text：获取网站源码</li>
<li>r.encoding：访问或定制编码方式</li>
<li>r.url：获取请求的url</li>
<li>r.content：获取响应的字节类型</li>
<li>r.status_code：响应的状态码</li>
<li>r.headers：相应的头信息</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://baidu.com/&#x27;</span></span><br><span class="line"></span><br><span class="line">response = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment">#一个类型:Response类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response))</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置响应的编码格式</span></span><br><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以字符串的形式来返回网页的源码</span></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回当前url地址</span></span><br><span class="line"><span class="built_in">print</span>(response.url)</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回二进制的网页数据</span></span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回响应的状态码</span></span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回响应头</span></span><br><span class="line"><span class="built_in">print</span>(response.headers)</span><br></pre></td></tr></table></figure>

<h1 id="2-get请求"><a href="#2-get请求" class="headerlink" title="2. get请求"></a>2. get请求</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s&#x27;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;黑子的篮球&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,params=data,headers=headers)</span><br><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">content = response.text</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<ul>
<li>参数用params传递</li>
<li>参数无需urlencode编码</li>
<li>不需要请求对象的定制</li>
<li>请求资源路径中的<code>?</code>可加可不加</li>
</ul>
<h2 id="3-Post请求"><a href="#3-Post请求" class="headerlink" title="3. Post请求"></a>3. Post请求</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&#x27;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;i&#x27;</span>: <span class="string">&#x27;love&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;AUTO&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;AUTO&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;smartresult&#x27;</span>: <span class="string">&#x27;dict&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;client&#x27;</span>: <span class="string">&#x27;fanyideskweb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;salt&#x27;</span>: <span class="string">&#x27;16494072793394&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sign&#x27;</span>: <span class="string">&#x27;58f09b7d5c54bad3cf13f284d1ad11eb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lts&#x27;</span>: <span class="string">&#x27;1649407279339&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;bv&#x27;</span>: <span class="string">&#x27;cf0f0924f577526ad20c2e2b01510b6f&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;doctype&#x27;</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">2.1</span>,</span><br><span class="line">    <span class="string">&#x27;keyfrom&#x27;</span>: <span class="string">&#x27;fanyi.web&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;FY_BY_REALTlME&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cookie&#x27;</span>:<span class="string">&#x27;OUTFOX_SEARCH_USER_ID=394345011@10.169.0.102; OUTFOX_SEARCH_USER_ID_NCOO=1734306557.6906822; _ntes_nnid=ed414fcfa561a8574af03795d7aacf0f,1645673021070; fanyi-ad-id=305426; fanyi-ad-closed=1; JSESSIONID=aaaaPSk8l2vvngf7zviay; ___rl__test__cookies=1649407279337&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url=url, data=data, headers=headers)</span><br><span class="line"></span><br><span class="line">content = response.text</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure>

<h4 id="get方式和post方式的区别和相同点？"><a href="#get方式和post方式的区别和相同点？" class="headerlink" title="get方式和post方式的区别和相同点？"></a>get方式和post方式的区别和相同点？</h4><ol>
<li>区别：<ol>
<li>get请求方式的参数名字是params，post请求方式的参数的名字是data。</li>
</ol>
</li>
<li>相同点：<ol>
<li>都不需要手动编解码</li>
<li>都不需要请求对象的定制</li>
</ol>
</li>
</ol>
<h2 id="4-代理"><a href="#4-代理" class="headerlink" title="4. 代理"></a>4. 代理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment"># @Time:2022/4/108:14</span></span><br><span class="line"><span class="comment"># @Author:陈 玉 皓</span></span><br><span class="line"><span class="comment"># @File:代理.py</span></span><br><span class="line"><span class="comment"># @Sofeware:PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">proxy定制：</span></span><br><span class="line"><span class="string">        在请求中设置proxies参数</span></span><br><span class="line"><span class="string">        参数类型是一个字典类型</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/s&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;115.218.4.207:9000&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span>: <span class="string">&#x27;ip&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url, headers=headers, params=data, proxies=proxy)</span><br><span class="line"></span><br><span class="line">content = response.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;daili.html&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(content)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5-cookie定制"><a href="#5-cookie定制" class="headerlink" title="5.cookie定制"></a>5.cookie定制</h2><p>案例：登录古诗文网</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment"># @Time:2022/4/108:33</span></span><br><span class="line"><span class="comment"># @Author:陈 玉 皓</span></span><br><span class="line"><span class="comment"># @File:古诗文网登录案例.py</span></span><br><span class="line"><span class="comment"># @Sofeware:PyCharm</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过登录  进入到主页面</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">__VIEWSTATE: 0jT+rlrbIVk5b2Vr9nfiJmkUQYCGOce8pRTotC5+WcuisZmBp0mHcX6f4IDi0J+B4yfNb0ABTvwFnP0r4uNpYGZUFyT51SAOpg9mS/iReKe81zr8fRay9e3aXqM=</span></span><br><span class="line"><span class="string">__VIEWSTATEGENERATOR: C93BE1AE</span></span><br><span class="line"><span class="string">from: http://so.gushiwen.cn/user/collect.aspx</span></span><br><span class="line"><span class="string">email: 1772302265@qq.com</span></span><br><span class="line"><span class="string">pwd: 15632453</span></span><br><span class="line"><span class="string">code: NBAO</span></span><br><span class="line"><span class="string">denglu: 登录</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#一般情况下，看不到的数据都是在页面的源码中</span></span><br><span class="line"><span class="comment"># 观察到__VIEWSTATE __VIEWSTATEGENERATOR 和 code是变化的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 难点：（1）__VIEWSTATE __VIEWSTATEGENERATOR</span></span><br><span class="line">                <span class="comment">#观察到这两个数据在页面的源码中，所以只需要获取页面的源码，然后进行解析就可以获取了</span></span><br><span class="line"><span class="comment">#      （2）验证码code</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment">#登录页面</span></span><br><span class="line">url = <span class="string">&#x27;https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line">content = response.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#解析数据</span></span><br><span class="line">soup = BeautifulSoup(content,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment">#获取viewstate</span></span><br><span class="line">viewstate = soup.select(<span class="string">&#x27;#__VIEWSTATE&#x27;</span>)[<span class="number">0</span>].attrs.get(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取viewstategenerator</span></span><br><span class="line">viewstategenerator = soup.select(<span class="string">&#x27;#__VIEWSTATEGENERATOR&#x27;</span>)[<span class="number">0</span>].attrs.get(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(viewstate)</span><br><span class="line"><span class="built_in">print</span>(viewstategenerator)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取验证码图片</span></span><br><span class="line">code = soup.select(<span class="string">&#x27;#imgCode&#x27;</span>)[<span class="number">0</span>].attrs.get(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证码地址</span></span><br><span class="line">code_url = <span class="string">&#x27;https://so.gushiwen.cn&#x27;</span>+code</span><br><span class="line"><span class="comment">#print(code_url)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#session()方法的返回值可以使请求变成同一个对象</span></span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line"><span class="comment">#验证码的url的内容</span></span><br><span class="line">response_code = session.get(code_url)</span><br><span class="line"><span class="comment"># 注意：此事要使用二进制的形式，因为图片的下载使用的是二进制</span></span><br><span class="line">content_code = response_code.content</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;code.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(content_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取验证码的图片，下载到本地，然后观察验证码，在控制台输入，</span></span><br><span class="line"><span class="comment">#将输入的值传给code的参数就可以进行登录</span></span><br><span class="line">code_name = <span class="built_in">input</span>(<span class="string">&quot;请输入验证码：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#登录</span></span><br><span class="line">url_post = <span class="string">&#x27;https://so.gushiwen.cn/user/login.aspx?from=http%3a%2f%2fso.gushiwen.cn%2fuser%2fcollect.aspx&#x27;</span></span><br><span class="line"></span><br><span class="line">data_post = &#123;</span><br><span class="line"><span class="string">&#x27;__VIEWSTATE&#x27;</span>: viewstate,</span><br><span class="line"><span class="string">&#x27;__VIEWSTATEGENERATOR&#x27;</span>: viewstategenerator,</span><br><span class="line"><span class="string">&#x27;from&#x27;</span>:<span class="string">&#x27; http://so.gushiwen.cn/user/collect.aspx&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;1772302265@qq.com&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pwd&#x27;</span>: <span class="string">&#x27;wodemaa520....&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;code&#x27;</span>: code_name,</span><br><span class="line"><span class="string">&#x27;denglu&#x27;</span>: <span class="string">&#x27;登录&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response_post  = session.post(url=url_post,headers=headers,data=data_post)</span><br><span class="line"></span><br><span class="line">content_post = response_post.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;gushiwen.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(content_post)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM框架视频推荐</title>
    <url>/posts/205311041.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script>]]></content>
      <categories>
        <category>学习视频推荐</category>
      </categories>
  </entry>
  <entry>
    <title>Scrapy学习</title>
    <url>/posts/2114331434.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="1-Scrapy框架介绍"><a href="#1-Scrapy框架介绍" class="headerlink" title="1. Scrapy框架介绍"></a>1. Scrapy框架介绍</h1><p>Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架，是一个基于Twisted的异步处理框架，是纯Python实现的爬虫框架，架构清晰，模块之间的耦合程度低，可扩展性极强，可以灵活的完成各种需求。</p>
<h1 id="2-Scrapy项目的创建以及运行"><a href="#2-Scrapy项目的创建以及运行" class="headerlink" title="2.Scrapy项目的创建以及运行"></a>2.Scrapy项目的创建以及运行</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 创建爬虫的项目  </span><br><span class="line">				   	终端输入：scrapy startproject 项目的名字</span><br><span class="line">                  	注意：项目的名字不允许数字开头，也不能包含中文</span><br><span class="line"></span><br><span class="line">2.项目结构</span><br><span class="line">	    项目名字</span><br><span class="line">        项目名字</span><br><span class="line">                spiders文件夹（存储爬虫文件）</span><br><span class="line">                        init</span><br><span class="line">                        自定义的爬虫文件   是实现爬虫核心功能文件☆☆☆☆☆</span><br><span class="line">                init</span><br><span class="line">                items           定义数据结构的地方，爬取的数据都包含哪些</span><br><span class="line">                middleware      中间件     代理</span><br><span class="line">                pipelines       管道文件，里面只有一个类      用于处理下载的数据</span><br><span class="line">                				默认是300优先级，值越小优先级越高（1-1000）</span><br><span class="line">                setting         配置文件   比如是否遵循robots协议     ua定义等</span><br><span class="line"></span><br><span class="line">3.创建爬虫文件</span><br><span class="line">            （1）跳转到spiders文件夹 cd 目录名字/目录名字/spiders </span><br><span class="line">            		要在spiders文件夹中创建爬虫文件</span><br><span class="line">                    cd  项目的名字\项目的名字\spiders</span><br><span class="line">                    cd  scrapy_baidu\scrapy_baidu\spiders</span><br><span class="line">            </span><br><span class="line">            （2）scrapy genspider 爬虫名字 网页的域名        </span><br><span class="line">                    </span><br><span class="line">                    创建爬虫文件</span><br><span class="line">                    scrapy genspider  爬虫文件的名字  要爬取网页</span><br><span class="line">                    scrapy genspider  baidu          http://baidu.com</span><br><span class="line"></span><br><span class="line">                    一般情况下不需要加http协议  因为start_urls的值是根据allow_domains修改的</span><br><span class="line">                    所以添加了http的话 start_urls就需要手动修改了</span><br><span class="line">3.运行爬虫代码</span><br><span class="line">                    scrapy crawl 爬虫的名字</span><br><span class="line">                    scrapy crawl baidu</span><br></pre></td></tr></table></figure>

<h1 id="3-Scrapy架构"><a href="#3-Scrapy架构" class="headerlink" title="3.Scrapy架构"></a>3.Scrapy架构</h1>

<ul>
<li>Engine：引擎。处理整个系统的数据流处理、触发事务、是整个框架的<strong>核心</strong>，会自动组织所有的请求对象，分发给下载器。</li>
<li>Downloader：下载器。从引擎处获取到请求对象后，下载网页内容，请求数据并将网页内容返回给Spiders蜘蛛。</li>
<li>Spiders：蜘蛛。内部定义了爬取的逻辑和网页的解析规则，主要负责解析响应并生成提取结果和新的请求。换句话说，Spiders就是定义爬取动作以及分析某个或者某些网页的地方。</li>
<li>Scheduler：调度器。接受引擎发过来的请求并将其加入到队列中，在引擎再次请求的时候将请求提供给引擎。</li>
<li>Item Pipeline：项目管道。是最终处理数据的管道，会预留接口供我们存储数据，负责处理由Spiders从网页中抽取的项目，主要任务是负责清洗、验证和存储数据。</li>
</ul>
<h1 id="4-Scrapy工作原理（数据流）"><a href="#4-Scrapy工作原理（数据流）" class="headerlink" title="4. Scrapy工作原理（数据流）"></a>4. Scrapy工作原理（数据流）</h1><p>Scrapy的数据流是引擎控制的，数据流过程如下：</p>
<ol>
<li>Engine首先打开一个网站，找到处理该网站的Spider，并向Spider请求第一个要爬取的url。</li>
<li>Engine将要爬取的url传给调度器Scheduler。</li>
<li>调度器Scheduler将url生成请求对象放入指定的队列中。</li>
<li>从队列中出队一个请求，Engine将请求交给下载器DownLoader进行处理。</li>
<li>下载器Downloader发送请求获取互联网数据。</li>
<li>一旦页面下载完毕，DownLoader生成该页面的Response，返回给Engine。</li>
<li>Engine从下载器中接收到Response，将其给到Spider。</li>
<li>Spider通过xpath进行解析，得到数据或者新的请求url。</li>
<li>Spider将解析得到的数据或者请求返回给Engine。</li>
<li>Engine判断该数据是数据还是请求url，将数据讲给项目管道处理，是url则继续交给调入器重复3-9步骤。</li>
</ol>
<h3 id="Demo-汽车之家宝马价格："><a href="#Demo-汽车之家宝马价格：" class="headerlink" title="Demo 汽车之家宝马价格："></a>Demo 汽车之家宝马价格：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;car&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;https://car.autohome.com.cn/price/brand-15.html&#x27;</span>]</span><br><span class="line">    <span class="comment">#如果请求的接口是html为结尾的，不需要加/</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://car.autohome.com.cn/price/brand-15.html&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="comment">#//div[@class=&quot;main-title&quot;]/a/text()</span></span><br><span class="line"></span><br><span class="line">        name_list = response.xpath(<span class="string">&#x27;//div[@class=&quot;main-title&quot;]/a/text()&#x27;</span>)</span><br><span class="line">        price_list = response.xpath(<span class="string">&#x27;//span[@class=&quot;font-arial&quot;]/text()&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(name_list)):</span><br><span class="line">            name = name_list[i].extract()</span><br><span class="line">            price = price_list[i].extract()</span><br><span class="line">            <span class="built_in">print</span>(name +<span class="string">&#x27;    &#x27;</span>+ price)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
  </entry>
  <entry>
    <title>Selenium学习</title>
    <url>/posts/1340935544.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="1-Selenium"><a href="#1-Selenium" class="headerlink" title="1. Selenium"></a>1. Selenium</h1><h2 id="1-1-什么是selenium？"><a href="#1-1-什么是selenium？" class="headerlink" title="1.1 什么是selenium？"></a>1.1 什么是selenium？</h2><ol>
<li><p>Selenium是一个用于Web应用程序测试的工具。 </p>
</li>
<li><p>Selenium 测试直接运行在浏览器中，就像真正的用户在操作一样。 </p>
</li>
<li><p>支持通过各种driver（FirfoxDriver，IternetExplorerDriver，OperaDriver，ChromeDriver）驱动 真实浏览器完成测试。 </p>
</li>
<li><p>selenium也是支持无界面浏览器操作的。</p>
</li>
</ol>
<h2 id="1-2-为什么使用Selenium"><a href="#1-2-为什么使用Selenium" class="headerlink" title="1.2 为什么使用Selenium?"></a>1.2 为什么使用Selenium?</h2><p>模拟浏览器功能，自动执行网页中的js代码，实现动态加载。</p>
<h2 id="1-3-使用步骤"><a href="#1-3-使用步骤" class="headerlink" title="1.3 使用步骤"></a>1.3 使用步骤</h2><ol>
<li>导包： form selenium import webdriver</li>
<li>创建谷歌浏览器操作对象：<ol>
<li>path &#x3D; 浏览器驱动文件路径</li>
<li>browser &#x3D; webdriver.Chrome(path)</li>
</ol>
</li>
<li>访问网址<ol>
<li>url &#x3D; “所要访问的网址”</li>
<li>browser.get(url)</li>
</ol>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">&#x27;D:\chromedriver\chromedriver.exe&#x27;</span></span><br><span class="line">browser = webdriver.Chrome(path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">browser.get(url)</span><br></pre></td></tr></table></figure>

<h3 id="1-3-1-元素定位"><a href="#1-3-1-元素定位" class="headerlink" title="1.3.1 元素定位"></a>1.3.1 元素定位</h3><p>元素定位：自动化要做的就是模拟鼠标和键盘来操作来操作这些元素，点击、输入等等。操作这些元素前首先 </p>
<p>要找到它们，WebDriver提供很多定位元素的方法。</p>
<p><strong>方法：</strong></p>
<pre><code>1. find_element(By.ID,&#39;标签id&#39;)
1. find_element(By.CLASS_NAME,&#39;标签类名&#39;)
1. find_element(By.TAG_NAME,&#39;标签名&#39;)
1. find_element(By.CSS_SELECTOR,&#39;根据选择器进行定位&#39;)
1. find_element(By.XPATH,&#39;根据XPATH进行定位&#39;)
</code></pre>
<h3 id="1-3-2-访问元素信息"><a href="#1-3-2-访问元素信息" class="headerlink" title="1.3.2 访问元素信息"></a>1.3.2 访问元素信息</h3><ol>
<li>获取元素属性: .get_attribute(‘class’)</li>
<li>获取元素文本：.text</li>
<li>获取标签名：.tag_name</li>
</ol>
<h3 id="1-3-3-交互"><a href="#1-3-3-交互" class="headerlink" title="1.3.3 交互"></a>1.3.3 交互</h3><ul>
<li><p>点击:click() </p>
</li>
<li><p>输入:send_keys() </p>
</li>
<li><p>-后退操作:browser.back() </p>
</li>
<li><p>前进操作:browser.forword() </p>
</li>
<li><p>模拟JS滚动: </p>
<ul>
<li><p>js&#x3D;’document.documentElement.scrollTop&#x3D;100000’ </p>
</li>
<li><p>browser.execute_script(js) 执行js代码</p>
</li>
</ul>
</li>
<li><p>获取网页代码：page_source </p>
</li>
<li><p>退出：browser.quit()</p>
</li>
</ul>
<h1 id="2-Phantomjs-（已废弃）"><a href="#2-Phantomjs-（已废弃）" class="headerlink" title="2.Phantomjs （已废弃）"></a>2.<strong>Phantomjs</strong> （已废弃）</h1><h2 id="2-1-什么是Phantomjs？"><a href="#2-1-什么是Phantomjs？" class="headerlink" title="2.1 什么是Phantomjs？"></a>2.1 什么是Phantomjs？</h2><ol>
<li>是一个无界面的浏览器</li>
<li>支持页面元素查找，js的执行等</li>
<li>由于不进行css和gui渲染，运行效率要比真实的浏览器要快很多</li>
</ol>
<h2 id="2-2-如何使用Phantomjs？"><a href="#2-2-如何使用Phantomjs？" class="headerlink" title="2.2 如何使用Phantomjs？"></a>2.2 如何使用Phantomjs？</h2><ol>
<li>获取PhantomJS.exe文件路径path</li>
<li>browser &#x3D; webdriver.PhantomJS(path)</li>
<li>browser.get(url)</li>
</ol>
<p>扩展：保存屏幕快照:browser.save_screenshot(‘图片.png’) </p>
<h1 id="3-Chrome-handless"><a href="#3-Chrome-handless" class="headerlink" title="3. Chrome handless"></a>3. <strong>Chrome handless</strong></h1><p>Chrome-headless 模式，是Google 针对 Chrome 浏览器 59版 新增加的一种模式，可以让你<strong>不打开UI界面的情况下</strong>使用 Chrome 浏览器，所以运行效果与 Chrome 保持完美一致。</p>
<h2 id="3-1-配置"><a href="#3-1-配置" class="headerlink" title="3.1 配置"></a>3.1 配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;‐‐headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;‐‐disable‐gpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&#x27;&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot;&#x27;</span></span><br><span class="line">chrome_options.binary_location = path</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line"></span><br><span class="line">browser.get(<span class="string">&#x27;http://www.baidu.com/&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-2-配置封装"><a href="#3-2-配置封装" class="headerlink" title="3.2 配置封装"></a>3.2 配置封装</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment">#这个是浏览器自带的 不需要我们再做额外的操作</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">share_browser</span>():</span><br><span class="line"><span class="comment">#初始化</span></span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;‐‐headless&#x27;</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;‐‐disable‐gpu&#x27;</span>)</span><br><span class="line">    <span class="comment">#浏览器的安装路径 打开文件位置</span></span><br><span class="line">    <span class="comment"># #这个路径是你谷歌浏览器的路径</span></span><br><span class="line">    path = <span class="string">r&#x27;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&#x27;</span></span><br><span class="line">    chrome_options.binary_location = path</span><br><span class="line">    browser = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line">    <span class="keyword">return</span> browser</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
  </entry>
  <entry>
    <title>SSM整合笔记</title>
    <url>/posts/1433475599.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="1，SSM整合"><a href="#1，SSM整合" class="headerlink" title="1，SSM整合"></a>1，SSM整合</h2><h3 id="1-1-流程分析"><a href="#1-1-流程分析" class="headerlink" title="1.1 流程分析"></a>1.1 流程分析</h3><p>(1) 创建工程</p>
<ul>
<li>创建一个Maven的web工程</li>
<li>pom.xml添加SSM需要的依赖jar包</li>
<li>编写Web项目的入口配置类，实现<code>AbstractAnnotationConfigDispatcherServletInitializer</code>重写以下方法<ul>
<li>getRootConfigClasses()	：返回Spring的配置类-&gt;需要&#x3D;&#x3D;SpringConfig&#x3D;&#x3D;配置类</li>
<li>getServletConfigClasses() ：返回SpringMVC的配置类-&gt;需要&#x3D;&#x3D;SpringMvcConfig&#x3D;&#x3D;配置类</li>
<li>getServletMappings()      : 设置SpringMVC请求拦截路径规则</li>
<li>getServletFilters()       ：设置过滤器，解决POST请求中文乱码问题</li>
</ul>
</li>
</ul>
<p>(2)SSM整合[&#x3D;&#x3D;重点是各个配置的编写&#x3D;&#x3D;]</p>
<ul>
<li>SpringConfig<ul>
<li>标识该类为配置类 @Configuration</li>
<li>扫描Service所在的包 @ComponentScan</li>
<li>在Service层要管理事务 @EnableTransactionManagement</li>
<li>读取外部的properties配置文件 @PropertySource</li>
<li>整合Mybatis需要引入Mybatis相关配置类 @Import<ul>
<li>第三方数据源配置类 JdbcConfig<ul>
<li>构建DataSource数据源，DruidDataSouroce,需要注入数据库连接四要素， @Bean @Value</li>
<li>构建平台事务管理器，DataSourceTransactionManager,@Bean</li>
</ul>
</li>
<li>Mybatis配置类 MybatisConfig<ul>
<li>构建SqlSessionFactoryBean并设置别名扫描与数据源，@Bean</li>
<li>构建MapperScannerConfigurer并设置DAO层的包扫描</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>SpringMvcConfig<ul>
<li>标识该类为配置类 @Configuration</li>
<li>扫描Controller所在的包 @ComponentScan</li>
<li>开启SpringMVC注解支持 @EnableWebMvc</li>
</ul>
</li>
</ul>
<p>(3)功能模块[与具体的业务模块有关]</p>
<ul>
<li>创建数据库表</li>
<li>根据数据库表创建对应的模型类</li>
<li>通过Dao层完成数据库表的增删改查(接口+自动代理)</li>
<li>编写Service层[Service接口+实现类]<ul>
<li>@Service</li>
<li>@Transactional</li>
<li>整合Junit对业务层进行单元测试<ul>
<li>@RunWith</li>
<li>@ContextConfiguration</li>
<li>@Test</li>
</ul>
</li>
</ul>
</li>
<li>编写Controller层<ul>
<li>接收请求 @RequestMapping @GetMapping @PostMapping @PutMapping @DeleteMapping</li>
<li>接收数据 简单、POJO、嵌套POJO、集合、数组、JSON数据类型<ul>
<li>@RequestParam</li>
<li>@PathVariable</li>
<li>@RequestBody</li>
</ul>
</li>
<li>转发业务层 <ul>
<li>@Autowired</li>
</ul>
</li>
<li>响应结果<ul>
<li>@ResponseBody</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-2-整合配置"><a href="#1-2-整合配置" class="headerlink" title="1.2 整合配置"></a>1.2 整合配置</h3><h4 id="步骤1：创建Maven的web项目"><a href="#步骤1：创建Maven的web项目" class="headerlink" title="步骤1：创建Maven的web项目"></a>步骤1：创建Maven的web项目</h4><p>可以使用Maven的骨架创建</p>
<p><img src="D:\blog\source_posts\pic\1630561266760.png" alt="1630561266760"></p>
<h4 id="步骤2-添加依赖"><a href="#步骤2-添加依赖" class="headerlink" title="步骤2:添加依赖"></a>步骤2:添加依赖</h4><p>pom.xml添加SSM所需要的依赖jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_08_ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="步骤3-创建项目包结构"><a href="#步骤3-创建项目包结构" class="headerlink" title="步骤3:创建项目包结构"></a>步骤3:创建项目包结构</h4><p><img src="D:\blog\source_posts\pic\1630561591931.png" alt="1630561591931"></p>
<ul>
<li>config目录存放的是相关的配置类</li>
<li>controller编写的是Controller类</li>
<li>dao存放的是Dao接口，因为使用的是Mapper接口代理方式，所以没有实现类包</li>
<li>service存的是Service接口，impl存放的是Service实现类</li>
<li>resources:存入的是配置文件，如Jdbc.properties</li>
<li>webapp:目录可以存放静态资源</li>
<li>test&#x2F;java:存放的是测试类</li>
</ul>
<h4 id="步骤4-创建SpringConfig配置类"><a href="#步骤4-创建SpringConfig配置类" class="headerlink" title="步骤4:创建SpringConfig配置类"></a>步骤4:创建SpringConfig配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.service&quot;&#125;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MyBatisConfig.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="步骤5-创建JdbcConfig配置类"><a href="#步骤5-创建JdbcConfig配置类" class="headerlink" title="步骤5:创建JdbcConfig配置类"></a>步骤5:创建JdbcConfig配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        ds.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="步骤6-创建MybatisConfig配置类"><a href="#步骤6-创建MybatisConfig配置类" class="headerlink" title="步骤6:创建MybatisConfig配置类"></a>步骤6:创建MybatisConfig配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        factoryBean.setDataSource(dataSource);</span><br><span class="line">        factoryBean.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="步骤7-创建jdbc-properties"><a href="#步骤7-创建jdbc-properties" class="headerlink" title="步骤7:创建jdbc.properties"></a>步骤7:创建jdbc.properties</h4><p>在resources下提供jdbc.properties,设置数据库连接四要素</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm_db</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<h4 id="步骤8-创建SpringMVC配置类"><a href="#步骤8-创建SpringMVC配置类" class="headerlink" title="步骤8:创建SpringMVC配置类"></a>步骤8:创建SpringMVC配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="步骤9-创建Web项目入口配置类"><a href="#步骤9-创建Web项目入口配置类" class="headerlink" title="步骤9:创建Web项目入口配置类"></a>步骤9:创建Web项目入口配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">//加载Spring配置类</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//加载SpringMVC配置类</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置SpringMVC请求地址拦截规则</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置post请求中文乱码过滤器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>至此SSM整合的环境就已经搭建好了。在这个环境上，我们如何进行功能模块的开发呢?</p>
<h3 id="1-3-功能模块开发"><a href="#1-3-功能模块开发" class="headerlink" title="1.3 功能模块开发"></a>1.3 功能模块开发</h3><blockquote>
<p>需求:对表tbl_book进行新增、修改、删除、根据ID查询和查询所有</p>
</blockquote>
<h4 id="步骤1-创建数据库及表"><a href="#步骤1-创建数据库及表" class="headerlink" title="步骤1:创建数据库及表"></a>步骤1:创建数据库及表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database ssm_db <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">use ssm_db;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_book(</span><br><span class="line">  id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">  type <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  description <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `tbl_book`(`id`,`type`,`name`,`description`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring实战 第五版&#x27;</span>,<span class="string">&#x27;Spring入门经典教程，深入理解Spring原理技术内幕&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring 5核心原理与30个类手写实践&#x27;</span>,<span class="string">&#x27;十年沉淀之作，手写Spring精华思想&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring 5设计模式&#x27;</span>,<span class="string">&#x27;深入Spring源码刨析Spring源码中蕴含的10大设计模式&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring MVC+Mybatis开发从入门到项目实战&#x27;</span>,<span class="string">&#x27;全方位解析面向Web应用的轻量级框架，带你成为Spring MVC开发高手&#x27;</span>),(<span class="number">5</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;轻量级Java Web企业应用实战&#x27;</span>,<span class="string">&#x27;源码级刨析Spring框架，适合已掌握Java基础的读者&#x27;</span>),(<span class="number">6</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Java核心技术 卷Ⅰ 基础知识(原书第11版)&#x27;</span>,<span class="string">&#x27;Core Java第11版，Jolt大奖获奖作品，针对Java SE9、10、11全面更新&#x27;</span>),(<span class="number">7</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;深入理解Java虚拟机&#x27;</span>,<span class="string">&#x27;5个纬度全面刨析JVM,大厂面试知识点全覆盖&#x27;</span>),(<span class="number">8</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Java编程思想(第4版)&#x27;</span>,<span class="string">&#x27;Java学习必读经典，殿堂级著作！赢得了全球程序员的广泛赞誉&#x27;</span>),(<span class="number">9</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;零基础学Java(全彩版)&#x27;</span>,<span class="string">&#x27;零基础自学编程的入门图书，由浅入深，详解Java语言的编程思想和核心技术&#x27;</span>),(<span class="number">10</span>,<span class="string">&#x27;市场营销&#x27;</span>,<span class="string">&#x27;直播就这么做:主播高效沟通实战指南&#x27;</span>,<span class="string">&#x27;李子柒、李佳奇、薇娅成长为网红的秘密都在书中&#x27;</span>),(<span class="number">11</span>,<span class="string">&#x27;市场营销&#x27;</span>,<span class="string">&#x27;直播销讲实战一本通&#x27;</span>,<span class="string">&#x27;和秋叶一起学系列网络营销书籍&#x27;</span>),(<span class="number">12</span>,<span class="string">&#x27;市场营销&#x27;</span>,<span class="string">&#x27;直播带货:淘宝、天猫直播从新手到高手&#x27;</span>,<span class="string">&#x27;一本教你如何玩转直播的书，10堂课轻松实现带货月入3W+&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="步骤2-编写模型类"><a href="#步骤2-编写模型类" class="headerlink" title="步骤2:编写模型类"></a>步骤2:编写模型类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">//getter...setter...toString省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="步骤3-编写Dao接口"><a href="#步骤3-编写Dao接口" class="headerlink" title="步骤3:编写Dao接口"></a>步骤3:编写Dao接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Insert(&quot;insert into tbl_book values(null,#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_book (type,name,description) values(#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_book set type = #&#123;type&#125;, name = #&#123;name&#125;, description = #&#123;description&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="步骤4-编写Service接口和实现类"><a href="#步骤4-编写Service接口和实现类" class="headerlink" title="步骤4:编写Service接口和实现类"></a>步骤4:编写Service接口和实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按id删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按id查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        bookDao.save(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        bookDao.update(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        bookDao.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>说明:</strong></p>
<ul>
<li><p>bookDao在Service中注入的会提示一个红线提示，为什么呢?</p>
<ul>
<li>BookDao是一个接口，没有实现类，接口是不能创建对象的，所以最终注入的应该是代理对象</li>
<li>代理对象是由Spring的IOC容器来创建管理的</li>
<li>IOC容器又是在Web服务器启动的时候才会创建</li>
<li>IDEA在检测依赖关系的时候，没有找到适合的类注入，所以会提示错误提示</li>
<li>但是程序运行的时候，代理对象就会被创建，框架会使用DI进行注入，所以程序运行无影响。</li>
</ul>
</li>
<li><p>如何解决上述问题?</p>
<ul>
<li><p>可以不用理会，因为运行是正常的</p>
</li>
<li><p>设置错误提示级别</p>
<p><img src="D:\blog\source_posts\pic\1630600227357.png"></p>
</li>
</ul>
</li>
</ul>
<h4 id="步骤5-编写Contorller类"><a href="#步骤5-编写Contorller类" class="headerlink" title="步骤5:编写Contorller类"></a>步骤5:编写Contorller类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.update(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于图书模块的增删改查就已经完成了编写，接下来把业务层的代码使用<code>Spring整合Junit</code>的知识点进行单元测试:</p>
<h3 id="1-4-单元测试"><a href="#1-4-单元测试" class="headerlink" title="1.4 单元测试"></a>1.4 单元测试</h3><h4 id="步骤1-新建测试类"><a href="#步骤1-新建测试类" class="headerlink" title="步骤1:新建测试类"></a>步骤1:新建测试类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="步骤2-注入Service类"><a href="#步骤2-注入Service类" class="headerlink" title="步骤2:注入Service类"></a>步骤2:注入Service类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="步骤3-编写测试方法"><a href="#步骤3-编写测试方法" class="headerlink" title="步骤3:编写测试方法"></a>步骤3:编写测试方法</h4><p>我们先来对查询进行单元测试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Book&gt; all = bookService.getAll();</span><br><span class="line">        System.out.println(all);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据ID查询，测试的结果为:</p>
<p><img src="D:\blog\source_posts\pic\1630600844191.png" alt="1630600844191"></p>
<p>查询所有，测试的结果为:</p>
<p><img src="D:\blog\source_posts\pic\1630600927486.png" alt="1630600927486"></p>
<h3 id="1-5-PostMan测试"><a href="#1-5-PostMan测试" class="headerlink" title="1.5 PostMan测试"></a>1.5 PostMan测试</h3><h4 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h4><p><code>http://localhost/books</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;类别测试数据&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;书名测试数据&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;描述测试数据&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="D:\blog\source_posts\pic\1630652582425.png" alt="1630652582425"></p>
<h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p><code>http://localhost/books</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;类别测试数据&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;书名测试数据&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;描述测试数据&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="D:\blog\source_posts\pic\1630652758221.png" alt="1630652758221"></p>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><code>http://localhost/books/14</code></p>
<p><img src="D:\blog\source_posts\pic\1630652796605.png" alt="1630652796605"></p>
<h4 id="查询单个"><a href="#查询单个" class="headerlink" title="查询单个"></a>查询单个</h4><p><code>http://localhost/books/1</code></p>
<p><img src="D:\blog\source_posts\pic\1630652837682.png" alt="1630652837682"></p>
<h4 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h4><p><code>http://localhost/books</code></p>
<p><img src="D:\blog\source_posts\pic\1630652867493.png" alt="1630652867493"></p>
<h2 id="2，统一结果封装"><a href="#2，统一结果封装" class="headerlink" title="2，统一结果封装"></a>2，统一结果封装</h2><h3 id="2-1-表现层与前端数据传输协议定义"><a href="#2-1-表现层与前端数据传输协议定义" class="headerlink" title="2.1 表现层与前端数据传输协议定义"></a>2.1 表现层与前端数据传输协议定义</h3><p>SSM整合以及功能模块开发完成后，接下来，在上述案例的基础上分析下有哪些问题需要我们去解决下。首先第一个问题是:</p>
<ul>
<li><p>在Controller层增删改返回给前端的是boolean类型数据</p>
<p><img src="D:\blog\source_posts\pic\1630653359533.png" alt="1630653359533"></p>
</li>
<li><p>在Controller层查询单个返回给前端的是对象</p>
<p><img src="D:\blog\source_posts\pic\1630653385377.png" alt="1630653385377"></p>
</li>
<li><p>在Controller层查询所有返回给前端的是集合对象</p>
<p><img src="D:\blog\source_posts\pic\1630653468887.png" alt="1630653468887"></p>
</li>
</ul>
<p>目前我们就已经有三种数据类型返回给前端，如果随着业务的增长，我们需要返回的数据类型会越来越多。对于前端开发人员在解析数据的时候就比较凌乱了，所以对于前端来说，如果后台能够返回一个统一的数据结果，前端在解析的时候就可以按照一种方式进行解析。开发就会变得更加简单。</p>
<p>所以我们就想能不能将返回结果的数据进行统一，具体如何来做，大体的思路为:</p>
<ul>
<li>为了封装返回的结果数据:&#x3D;&#x3D;创建结果模型类，封装数据到data属性中&#x3D;&#x3D;</li>
<li>为了封装返回的数据是何种操作及是否操作成功:&#x3D;&#x3D;封装操作结果到code属性中&#x3D;&#x3D;</li>
<li>操作失败后为了封装返回的错误信息:&#x3D;&#x3D;封装特殊消息到message(msg)属性中&#x3D;&#x3D;</li>
</ul>
<p><img src="D:\blog\source_posts\pic\1630654293972.png" alt="1630654293972"></p>
<p>根据分析，我们可以设置统一数据返回结果类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Object data;</span><br><span class="line">	<span class="keyword">private</span> Integer code;</span><br><span class="line">	<span class="keyword">private</span> String msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**注意:**Result类名及类中的字段并不是固定的，可以根据需要自行增减提供若干个构造方法，方便操作。</p>
<h3 id="2-2-表现层与前端数据传输协议实现"><a href="#2-2-表现层与前端数据传输协议实现" class="headerlink" title="2.2 表现层与前端数据传输协议实现"></a>2.2 表现层与前端数据传输协议实现</h3><p>前面我们已经分析了如何封装返回结果数据，具体在项目中该如何实现，我们通过个例子来操作一把</p>
<h4 id="2-2-1-环境准备"><a href="#2-2-1-环境准备" class="headerlink" title="2.2.1 环境准备"></a>2.2.1 环境准备</h4><ul>
<li>创建一个Web的Maven项目</li>
<li>pom.xml添加SSM整合所需jar包</li>
<li>创建对应的配置类</li>
<li>编写Controller、Service接口、Service实现类、Dao接口和模型类</li>
<li>resources下提供jdbc.properties配置文件</li>
</ul>
<p>因为这个项目环境的内容和SSM整合的内容是一致的，所以我们就不在把代码粘出来了，大家在练习的时候可以在前面整合的例子案例环境下，进行本节内容的开发。</p>
<p>最终创建好的项目结构如下:</p>
<p><img src="D:\blog\source_posts\pic\1630654870632.png" alt="1630654870632"></p>
<h4 id="2-2-2-结果封装"><a href="#2-2-2-结果封装" class="headerlink" title="2.2.2 结果封装"></a>2.2.2 结果封装</h4><p>对于结果封装，我们应该是在表现层进行处理，所以我们把结果类放在controller包下，当然你也可以放在domain包，这个都是可以的，具体如何实现结果封装，具体的步骤为:</p>
<h5 id="步骤1-创建Result类"><a href="#步骤1-创建Result类" class="headerlink" title="步骤1:创建Result类"></a>步骤1:创建Result类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="comment">//描述统一格式中的数据</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="comment">//描述统一格式中的编码，用于区分操作，可以简化配置0或1表示成功失败</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">//描述统一格式中的消息，可选属性</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//构造方法是方便对象的创建</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(Integer code,Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//构造方法是方便对象的创建</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(Integer code, Object data, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//setter...getter...省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="步骤2-定义返回码Code类"><a href="#步骤2-定义返回码Code类" class="headerlink" title="步骤2:定义返回码Code类"></a>步骤2:定义返回码Code类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//状态码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SAVE_OK</span> <span class="operator">=</span> <span class="number">20011</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DELETE_OK</span> <span class="operator">=</span> <span class="number">20021</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">UPDATE_OK</span> <span class="operator">=</span> <span class="number">20031</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">GET_OK</span> <span class="operator">=</span> <span class="number">20041</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SAVE_ERR</span> <span class="operator">=</span> <span class="number">20010</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DELETE_ERR</span> <span class="operator">=</span> <span class="number">20020</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">UPDATE_ERR</span> <span class="operator">=</span> <span class="number">20030</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">GET_ERR</span> <span class="operator">=</span> <span class="number">20040</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>**注意:**code类中的常量设计也不是固定的，可以根据需要自行增减，例如将查询再进行细分为GET_OK,GET_ALL_OK,GET_PAGE_OK等。</p>
<h5 id="步骤3-修改Controller类的返回值"><a href="#步骤3-修改Controller类的返回值" class="headerlink" title="步骤3:修改Controller类的返回值"></a>步骤3:修改Controller类的返回值</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统一每一个控制器方法返回值</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> bookService.save(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(flag ? Code.SAVE_OK:Code.SAVE_ERR,flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> bookService.update(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(flag ? Code.UPDATE_OK:Code.UPDATE_ERR,flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> bookService.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(flag ? Code.DELETE_OK:Code.DELETE_ERR,flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(id);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> book != <span class="literal">null</span> ? Code.GET_OK : Code.GET_ERR;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> book != <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;数据查询失败，请重试！&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,book,msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Book&gt; bookList = bookService.getAll();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> bookList != <span class="literal">null</span> ? Code.GET_OK : Code.GET_ERR;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> bookList != <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;数据查询失败，请重试！&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,bookList,msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="步骤4-启动服务测试"><a href="#步骤4-启动服务测试" class="headerlink" title="步骤4:启动服务测试"></a>步骤4:启动服务测试</h5><p><img src="D:\blog\source_posts\pic\1630656326477.png" alt="1630656326477"></p>
<p>至此，我们的返回结果就已经能以一种统一的格式返回给前端。前端根据返回的结果，先从中获取<code>code</code>,根据code判断，如果成功则取<code>data</code>属性的值，如果失败，则取<code>msg</code>中的值做提示。</p>
<h2 id="3，统一异常处理"><a href="#3，统一异常处理" class="headerlink" title="3，统一异常处理"></a>3，统一异常处理</h2><h3 id="3-1-问题描述"><a href="#3-1-问题描述" class="headerlink" title="3.1 问题描述"></a>3.1 问题描述</h3><p>在讲解这一部分知识点之前，我们先来演示个效果，修改BookController类的<code>getById</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">    <span class="comment">//手动添加一个错误信息</span></span><br><span class="line">    <span class="keyword">if</span>(id==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(id);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> book != <span class="literal">null</span> ? Code.GET_OK : Code.GET_ERR;</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> book != <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;数据查询失败，请重试！&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,book,msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重新启动运行项目，使用PostMan发送请求，当传入的id为1，则会出现如下效果：</p>
<p><img src="D:\blog\source_posts\pic\1630656982337.png" alt="1630656982337"></p>
<p>前端接收到这个信息后和之前我们约定的格式不一致，这个问题该如何解决?</p>
<p>在解决问题之前，我们先来看下异常的种类及出现异常的原因:</p>
<ul>
<li>框架内部抛出的异常：因使用不合规导致</li>
<li>数据层抛出的异常：因外部服务器故障导致（例如：服务器访问超时）</li>
<li>业务层抛出的异常：因业务逻辑书写错误导致（例如：遍历业务书写操作，导致索引异常等）</li>
<li>表现层抛出的异常：因数据收集、校验等规则导致（例如：不匹配的数据类型间导致异常）</li>
<li>工具类抛出的异常：因工具类书写不严谨不够健壮导致（例如：必要释放的连接长期未释放等）</li>
</ul>
<p>看完上面这些出现异常的位置，你会发现，在我们开发的任何一个位置都有可能出现异常，而且这些异常是不能避免的。所以我们就得将异常进行处理。</p>
<p><strong>思考</strong></p>
<ol>
<li><p>各个层级均出现异常，异常处理代码书写在哪一层?</p>
<p>&#x3D;&#x3D;所有的异常均抛出到表现层进行处理&#x3D;&#x3D;</p>
</li>
<li><p>异常的种类很多，表现层如何将所有的异常都处理到呢?</p>
<p>&#x3D;&#x3D;异常分类&#x3D;&#x3D;</p>
</li>
<li><p>表现层处理异常，每个方法中单独书写，代码书写量巨大且意义不强，如何解决?</p>
<p>&#x3D;&#x3D;AOP&#x3D;&#x3D;</p>
</li>
</ol>
<p>对于上面这些问题及解决方案，SpringMVC已经为我们提供了一套解决方案:</p>
<ul>
<li><p>异常处理器:</p>
<ul>
<li><p>集中的、统一的处理项目中出现的异常。</p>
<p><img src="D:\blog\source_posts\pic\1630657791653.png" alt="1630657791653"></p>
</li>
</ul>
</li>
</ul>
<h3 id="3-2-异常处理器的使用"><a href="#3-2-异常处理器的使用" class="headerlink" title="3.2 异常处理器的使用"></a>3.2 异常处理器的使用</h3><h4 id="3-2-1-环境准备"><a href="#3-2-1-环境准备" class="headerlink" title="3.2.1 环境准备"></a>3.2.1 环境准备</h4><ul>
<li>创建一个Web的Maven项目</li>
<li>pom.xml添加SSM整合所需jar包</li>
<li>创建对应的配置类</li>
<li>编写Controller、Service接口、Service实现类、Dao接口和模型类</li>
<li>resources下提供jdbc.properties配置文件</li>
</ul>
<p>内容参考前面的项目或者直接使用前面的项目进行本节内容的学习。</p>
<p>最终创建好的项目结构如下:</p>
<p><img src="D:\blog\source_posts\pic\1630657972564.png" alt="1630657972564"></p>
<h4 id="3-2-2-使用步骤"><a href="#3-2-2-使用步骤" class="headerlink" title="3.2.2 使用步骤"></a>3.2.2 使用步骤</h4><h5 id="步骤1-创建异常处理器类"><a href="#步骤1-创建异常处理器类" class="headerlink" title="步骤1:创建异常处理器类"></a>步骤1:创建异常处理器类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@RestControllerAdvice用于标识当前类为REST风格对应的异常处理器</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//除了自定义的异常处理器，保留对Exception类型的异常处理，用于处理非预期的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">      	System.out.println(<span class="string">&quot;嘿嘿,异常你哪里跑！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;确保SpringMvcConfig能够扫描到异常处理器类&#x3D;&#x3D;</p>
<h5 id="步骤2-让程序抛出异常"><a href="#步骤2-让程序抛出异常" class="headerlink" title="步骤2:让程序抛出异常"></a>步骤2:让程序抛出异常</h5><p>修改<code>BookController</code>的getById方法，添加<code>int i = 1/0</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">  	<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(id);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> book != <span class="literal">null</span> ? Code.GET_OK : Code.GET_ERR;</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> book != <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;数据查询失败，请重试！&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,book,msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="步骤3-运行程序，测试"><a href="#步骤3-运行程序，测试" class="headerlink" title="步骤3:运行程序，测试"></a>步骤3:运行程序，测试</h5><p><img src="D:\blog\source_posts\pic\1630658350945.png" alt="1630658350945"></p>
<p>说明异常已经被拦截并执行了<code>doException</code>方法。</p>
<h5 id="异常处理器类返回结果给前端"><a href="#异常处理器类返回结果给前端" class="headerlink" title="异常处理器类返回结果给前端"></a>异常处理器类返回结果给前端</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@RestControllerAdvice用于标识当前类为REST风格对应的异常处理器</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//除了自定义的异常处理器，保留对Exception类型的异常处理，用于处理非预期的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">      	System.out.println(<span class="string">&quot;嘿嘿,异常你哪里跑！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">666</span>,<span class="literal">null</span>,<span class="string">&quot;嘿嘿,异常你哪里跑！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动运行程序，测试</p>
<p><img src="D:\blog\source_posts\pic\1630658606549.png" alt="1630658606549"></p>
<p>至此，就算后台执行的过程中抛出异常，最终也能按照我们和前端约定好的格式返回给前端。</p>
<h4 id="知识点1：-RestControllerAdvice"><a href="#知识点1：-RestControllerAdvice" class="headerlink" title="知识点1：@RestControllerAdvice"></a>知识点1：@RestControllerAdvice</h4><table>
<thead>
<tr>
<th>名称</th>
<th>@RestControllerAdvice</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>&#x3D;&#x3D;类注解&#x3D;&#x3D;</td>
</tr>
<tr>
<td>位置</td>
<td>Rest风格开发的控制器增强类定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>为Rest风格开发的控制器类做增强</td>
</tr>
</tbody></table>
<p>**说明:**此注解自带@ResponseBody注解与@Component注解，具备对应的功能</p>
<p><img src="D:\blog\source_posts\pic\1630659060451.png" alt="1630659060451"></p>
<h4 id="知识点2：-ExceptionHandler"><a href="#知识点2：-ExceptionHandler" class="headerlink" title="知识点2：@ExceptionHandler"></a>知识点2：@ExceptionHandler</h4><table>
<thead>
<tr>
<th>名称</th>
<th>@ExceptionHandler</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>&#x3D;&#x3D;方法注解&#x3D;&#x3D;</td>
</tr>
<tr>
<td>位置</td>
<td>专用于异常处理的控制器方法上方</td>
</tr>
<tr>
<td>作用</td>
<td>设置指定异常的处理方案，功能等同于控制器方法，<br/>出现异常后终止原始控制器执行,并转入当前方法执行</td>
</tr>
</tbody></table>
<p><strong>说明：</strong>此类方法可以根据处理的异常不同，制作多个方法分别处理对应的异常</p>
<h3 id="3-3-项目异常处理方案"><a href="#3-3-项目异常处理方案" class="headerlink" title="3.3 项目异常处理方案"></a>3.3 项目异常处理方案</h3><h4 id="3-3-1-异常分类"><a href="#3-3-1-异常分类" class="headerlink" title="3.3.1 异常分类"></a>3.3.1 异常分类</h4><p>异常处理器我们已经能够使用了，那么在咱们的项目中该如何来处理异常呢?</p>
<p>因为异常的种类有很多，如果每一个异常都对应一个@ExceptionHandler，那得写多少个方法来处理各自的异常，所以我们在处理异常之前，需要对异常进行一个分类:</p>
<ul>
<li><p>业务异常（BusinessException）</p>
<ul>
<li><p>规范的用户行为产生的异常</p>
<ul>
<li><p>用户在页面输入内容的时候未按照指定格式进行数据填写，如在年龄框输入的是字符串</p>
<p><img src="D:\blog\source_posts\pic\1630659599983.png" alt="1630659599983"></p>
</li>
</ul>
</li>
<li><p>不规范的用户行为操作产生的异常</p>
<ul>
<li><p>如用户故意传递错误数据</p>
<p><img src="D:\blog\source_posts\pic\1630659622958.png" alt="1630659622958"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>系统异常（SystemException）</p>
<ul>
<li>项目运行过程中可预计但无法避免的异常<ul>
<li>比如数据库或服务器宕机</li>
</ul>
</li>
</ul>
</li>
<li><p>其他异常（Exception）</p>
<ul>
<li><p>编程人员未预期到的异常，如:用到的文件不存在</p>
<p><img src="D:\blog\source_posts\pic\1630659690341.png" alt="1630659690341"></p>
</li>
</ul>
</li>
</ul>
<p>将异常分类以后，针对不同类型的异常，要提供具体的解决方案:</p>
<h4 id="3-3-2-异常解决方案"><a href="#3-3-2-异常解决方案" class="headerlink" title="3.3.2 异常解决方案"></a>3.3.2 异常解决方案</h4><ul>
<li>业务异常（BusinessException）<ul>
<li>发送对应消息传递给用户，提醒规范操作<ul>
<li>大家常见的就是提示用户名已存在或密码格式不正确等</li>
</ul>
</li>
</ul>
</li>
<li>系统异常（SystemException）<ul>
<li>发送固定消息传递给用户，安抚用户<ul>
<li>系统繁忙，请稍后再试</li>
<li>系统正在维护升级，请稍后再试</li>
<li>系统出问题，请联系系统管理员等</li>
</ul>
</li>
<li>发送特定消息给运维人员，提醒维护<ul>
<li>可以发送短信、邮箱或者是公司内部通信软件</li>
</ul>
</li>
<li>记录日志<ul>
<li>发消息和记录日志对用户来说是不可见的，属于后台程序</li>
</ul>
</li>
</ul>
</li>
<li>其他异常（Exception）<ul>
<li>发送固定消息传递给用户，安抚用户</li>
<li>发送特定消息给编程人员，提醒维护（纳入预期范围内）<ul>
<li>一般是程序没有考虑全，比如未做非空校验等</li>
</ul>
</li>
<li>记录日志</li>
</ul>
</li>
</ul>
<h4 id="3-3-3-异常解决方案的具体实现"><a href="#3-3-3-异常解决方案的具体实现" class="headerlink" title="3.3.3 异常解决方案的具体实现"></a>3.3.3 异常解决方案的具体实现</h4><blockquote>
<p>思路:</p>
<p>1.先通过自定义异常，完成BusinessException和SystemException的定义</p>
<p>2.将其他异常包装成自定义异常类型</p>
<p>3.在异常处理器类中对不同的异常进行处理</p>
</blockquote>
<h5 id="步骤1-自定义异常类"><a href="#步骤1-自定义异常类" class="headerlink" title="步骤1:自定义异常类"></a>步骤1:自定义异常类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义异常处理器，用于封装异常信息，对异常进行分类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Integer code, String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义异常处理器，用于封装异常信息，对异常进行分类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(Integer code, String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>说明:</strong></p>
<ul>
<li>让自定义异常类继承<code>RuntimeException</code>的好处是，后期在抛出这两个异常的时候，就不用在try…catch…或throws了</li>
<li>自定义异常类中添加<code>code</code>属性的原因是为了更好的区分异常是来自哪个业务的</li>
</ul>
<h5 id="步骤2-将其他异常包成自定义异常"><a href="#步骤2-将其他异常包成自定义异常" class="headerlink" title="步骤2:将其他异常包成自定义异常"></a>步骤2:将其他异常包成自定义异常</h5><p>假如在BookServiceImpl的getById方法抛异常了，该如何来包装呢?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="comment">//模拟业务异常，包装成自定义异常</span></span><br><span class="line">    <span class="keyword">if</span>(id == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(Code.BUSINESS_ERR,<span class="string">&quot;请不要使用你的技术挑战我的耐性!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模拟系统异常，将可能出现的异常进行包装，转换成自定义异常</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(Code.SYSTEM_TIMEOUT_ERR,<span class="string">&quot;服务器访问超时，请重试!&quot;</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bookDao.getById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体的包装方式有：</p>
<ul>
<li>方式一:<code>try&#123;&#125;catch()&#123;&#125;</code>在catch中重新throw我们自定义异常即可。</li>
<li>方式二:直接throw自定义异常即可</li>
</ul>
<p>上面为了使<code>code</code>看着更专业些，我们在Code类中再新增需要的属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//状态码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SAVE_OK</span> <span class="operator">=</span> <span class="number">20011</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DELETE_OK</span> <span class="operator">=</span> <span class="number">20021</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">UPDATE_OK</span> <span class="operator">=</span> <span class="number">20031</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">GET_OK</span> <span class="operator">=</span> <span class="number">20041</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SAVE_ERR</span> <span class="operator">=</span> <span class="number">20010</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DELETE_ERR</span> <span class="operator">=</span> <span class="number">20020</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">UPDATE_ERR</span> <span class="operator">=</span> <span class="number">20030</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">GET_ERR</span> <span class="operator">=</span> <span class="number">20040</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SYSTEM_ERR</span> <span class="operator">=</span> <span class="number">50001</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SYSTEM_TIMEOUT_ERR</span> <span class="operator">=</span> <span class="number">50002</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SYSTEM_UNKNOW_ERR</span> <span class="operator">=</span> <span class="number">59999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">BUSINESS_ERR</span> <span class="operator">=</span> <span class="number">60002</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="步骤3-处理器类中处理自定义异常"><a href="#步骤3-处理器类中处理自定义异常" class="headerlink" title="步骤3:处理器类中处理自定义异常"></a>步骤3:处理器类中处理自定义异常</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@RestControllerAdvice用于标识当前类为REST风格对应的异常处理器</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//@ExceptionHandler用于设置当前处理器类对应的异常类型</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SystemException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doSystemException</span><span class="params">(SystemException ex)</span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        <span class="comment">//发送消息给运维</span></span><br><span class="line">        <span class="comment">//发送邮件给开发人员,ex对象发送给开发人员</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(ex.getCode(),<span class="literal">null</span>,ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doBusinessException</span><span class="params">(BusinessException ex)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(ex.getCode(),<span class="literal">null</span>,ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//除了自定义的异常处理器，保留对Exception类型的异常处理，用于处理非预期的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doOtherException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        <span class="comment">//发送消息给运维</span></span><br><span class="line">        <span class="comment">//发送邮件给开发人员,ex对象发送给开发人员</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(Code.SYSTEM_UNKNOW_ERR,<span class="literal">null</span>,<span class="string">&quot;系统繁忙，请稍后再试！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="步骤4-运行程序"><a href="#步骤4-运行程序" class="headerlink" title="步骤4:运行程序"></a>步骤4:运行程序</h5><p>根据ID查询，</p>
<p>如果传入的参数为1，会报<code>BusinessException</code></p>
<p><img src="D:\blog\source_posts\pic\1630661162758.png" alt="1630661162758"></p>
<p>如果传入的是其他参数，会报<code>SystemException</code></p>
<p><img src="D:\blog\source_posts\pic\1630661192383.png" alt="1630661192383"></p>
<p>对于异常我们就已经处理完成了，不管后台哪一层抛出异常，都会以我们与前端约定好的方式进行返回，前端只需要把信息获取到，根据返回的正确与否来展示不同的内容即可。</p>
<p><strong>小结</strong></p>
<p>以后项目中的异常处理方式为:</p>
<p><img src="D:\blog\source_posts\pic\1630658821746.png" alt="1630658821746"></p>
<h2 id="4，前后台协议联调"><a href="#4，前后台协议联调" class="headerlink" title="4，前后台协议联调"></a>4，前后台协议联调</h2><h3 id="4-1-环境准备"><a href="#4-1-环境准备" class="headerlink" title="4.1 环境准备"></a>4.1 环境准备</h3><ul>
<li>创建一个Web的Maven项目</li>
<li>pom.xml添加SSM整合所需jar包</li>
<li>创建对应的配置类</li>
<li>编写Controller、Service接口、Service实现类、Dao接口和模型类</li>
<li>resources下提供jdbc.properties配置文件</li>
</ul>
<p>内容参考前面的项目或者直接使用前面的项目进行本节内容的学习。</p>
<p>最终创建好的项目结构如下:</p>
<p><img src="D:\blog\source_posts\pic\1630661781776.png" alt="1630661781776"></p>
<ol>
<li>将<code>资料\SSM功能页面</code>下面的静态资源拷贝到webapp下。</li>
</ol>
<p><img src="D:\blog\source_posts\pic\1630663662691.png" alt="1630663662691"></p>
<ol start="2">
<li>因为添加了静态资源，SpringMVC会拦截，所有需要在SpringConfig的配置类中将静态资源进行放行。</li>
</ol>
<ul>
<li><p>新建SpringMvcSupport</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/css/**&quot;</span>).addResourceLocations(<span class="string">&quot;/css/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/js/**&quot;</span>).addResourceLocations(<span class="string">&quot;/js/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/plugins/**&quot;</span>).addResourceLocations(<span class="string">&quot;/plugins/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在SpringMvcConfig中扫描SpringMvcSupport</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;,&quot;com.itheima.config&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>接下来我们就需要将所有的列表查询、新增、修改、删除等功能一个个来实现下。</p>
<h3 id="4-2-列表功能"><a href="#4-2-列表功能" class="headerlink" title="4.2 列表功能"></a>4.2 列表功能</h3><p><img src="D:\blog\source_posts\pic\1630670317859.png" alt="1630670317859"></p>
<blockquote>
<p>需求:页面加载完后发送异步请求到后台获取列表数据进行展示。</p>
<p>1.找到页面的钩子函数，<code>created()</code></p>
<p>2.<code>created()</code>方法中调用了<code>this.getAll()</code>方法</p>
<p>3.在getAll()方法中使用axios发送异步请求从后台获取数据</p>
<p>4.访问的路径为<code>http://localhost/books</code></p>
<p>5.返回数据</p>
</blockquote>
<p>返回数据res.data的内容如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机理论&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring实战 第五版&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring入门经典教程，深入理解Spring原理技术内幕&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机理论&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring 5核心原理与30个类手写实践&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;十年沉淀之作，手写Spring精华思想&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span>...</span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">20041</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>发送方式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//发送ajax请求</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="D:\blog\source_posts\pic\1630666787456.png" alt="1630666787456"></p>
<h3 id="4-3-添加功能"><a href="#4-3-添加功能" class="headerlink" title="4.3 添加功能"></a>4.3 添加功能</h3><p><img src="D:\blog\source_posts\pic\1630670332168.png" alt="1630670332168"></p>
<blockquote>
<p>需求:完成图片的新增功能模块</p>
<p>1.找到页面上的<code>新建</code>按钮，按钮上绑定了<code>@click=&quot;handleCreate()&quot;</code>方法</p>
<p>2.在method中找到<code>handleCreate</code>方法，方法中打开新增面板</p>
<p>3.新增面板中找到<code>确定</code>按钮,按钮上绑定了<code>@click=&quot;handleAdd()&quot;</code>方法</p>
<p>4.在method中找到<code>handleAdd</code>方法</p>
<p>5.在方法中发送请求和数据，响应成功后将新增面板关闭并重新查询数据</p>
</blockquote>
<p><code>handleCreate</code>打开新增面板</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><code>handleAdd</code>方法发送异步请求并携带数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handleAdd () &#123;</span><br><span class="line">    <span class="comment">//发送ajax请求</span></span><br><span class="line">    <span class="comment">//this.formData是表单中的数据，最后是一个json数据</span></span><br><span class="line">    axios.<span class="title function_">post</span>(<span class="string">&quot;/books&quot;</span>,<span class="variable language_">this</span>.<span class="property">formData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-添加功能状态处理"><a href="#4-4-添加功能状态处理" class="headerlink" title="4.4 添加功能状态处理"></a>4.4 添加功能状态处理</h3><p>基础的新增功能已经完成，但是还有一些问题需要解决下:</p>
<blockquote>
<p>需求:新增成功是关闭面板，重新查询数据，那么新增失败以后该如何处理?</p>
<p>1.在handlerAdd方法中根据后台返回的数据来进行不同的处理</p>
<p>2.如果后台返回的是成功，则提示成功信息，并关闭面板</p>
<p>3.如果后台返回的是失败，则提示错误信息</p>
</blockquote>
<p>(1)修改前端页面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handleAdd () &#123;</span><br><span class="line">    <span class="comment">//发送ajax请求</span></span><br><span class="line">    axios.<span class="title function_">post</span>(<span class="string">&quot;/books&quot;</span>,<span class="variable language_">this</span>.<span class="property">formData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//如果操作成功，关闭弹层，显示数据</span></span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20011</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20010</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(2)后台返回操作结果，将Dao层的增删改方法返回值从<code>void</code>改成<code>int</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Insert(&quot;insert into tbl_book values(null,#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_book (type,name,description) values(#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">save</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_book set type = #&#123;type&#125;, name = #&#123;name&#125;, description = #&#123;description&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(3)在BookServiceImpl中，增删改方法根据DAO的返回值来决定返回true&#x2F;false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.save(book) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.update(book) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.delete(id) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(id == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(Code.BUSINESS_ERR,<span class="string">&quot;请不要使用你的技术挑战我的耐性!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        //将可能出现的异常进行包装，转换成自定义异常</span></span><br><span class="line"><span class="comment">//        try&#123;</span></span><br><span class="line"><span class="comment">//            int i = 1/0;</span></span><br><span class="line"><span class="comment">//        &#125;catch (Exception e)&#123;</span></span><br><span class="line"><span class="comment">//            throw new SystemException(Code.SYSTEM_TIMEOUT_ERR,&quot;服务器访问超时，请重试!&quot;,e);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">return</span> bookDao.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>(4)测试错误情况，将图书类别长度设置超出范围即可</p>
<p><img src="D:\blog\source_posts\pic\1630668954348.png" alt="1630668954348"></p>
<p>处理完新增后，会发现新增还存在一个问题，</p>
<p>新增成功后，再次点击<code>新增</code>按钮会发现之前的数据还存在，这个时候就需要在新增的时候将表单内容清空。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">resetForm</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">formData</span> = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">handleCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">resetForm</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-5-修改功能"><a href="#4-5-修改功能" class="headerlink" title="4.5 修改功能"></a>4.5 修改功能</h3><p><img src="D:\blog\source_posts\pic\1630670367812.png" alt="1630670367812"></p>
<blockquote>
<p>需求:完成图书信息的修改功能</p>
<p>1.找到页面中的<code>编辑</code>按钮，该按钮绑定了<code>@click=&quot;handleUpdate(scope.row)&quot;</code></p>
<p>2.在method的<code>handleUpdate</code>方法中发送异步请求根据ID查询图书信息</p>
<p>3.根据后台返回的结果，判断是否查询成功</p>
<p>​	如果查询成功打开修改面板回显数据，如果失败提示错误信息</p>
<p>4.修改完成后找到修改面板的<code>确定</code>按钮，该按钮绑定了<code>@click=&quot;handleEdit()&quot;</code></p>
<p>5.在method的<code>handleEdit</code>方法中发送异步请求提交修改数据</p>
<p>6.根据后台返回的结果，判断是否修改成功</p>
<p>​	如果成功提示错误信息，关闭修改面板，重新查询数据，如果失败提示错误信息</p>
</blockquote>
<p>scope.row代表的是当前行的行数据，也就是说,scope.row就是选中行对应的json数据，如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机理论&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring实战 第五版&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring入门经典教程，深入理解Spring原理技术内幕&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>修改<code>handleUpdate</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//弹出编辑窗口</span></span><br><span class="line"><span class="title function_">handleUpdate</span>(<span class="params">row</span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(row);   //row.id 查询条件</span></span><br><span class="line">    <span class="comment">//查询数据，根据id查询</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books/&quot;</span>+row.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20041</span>)&#123;</span><br><span class="line">            <span class="comment">//展示弹层，加载数据</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">formData</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dialogFormVisible4Edit</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改<code>handleEdit</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleEdit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//发送ajax请求</span></span><br><span class="line">    axios.<span class="title function_">put</span>(<span class="string">&quot;/books&quot;</span>,<span class="variable language_">this</span>.<span class="property">formData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//如果操作成功，关闭弹层，显示数据</span></span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20031</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dialogFormVisible4Edit</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20030</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;修改失败&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此修改功能就已经完成。</p>
<h3 id="4-6-删除功能"><a href="#4-6-删除功能" class="headerlink" title="4.6 删除功能"></a>4.6 删除功能</h3><p><img src="D:\blog\source_posts\pic\1630673984385.png" alt="1630673984385"></p>
<blockquote>
<p>需求:完成页面的删除功能。</p>
<p>1.找到页面的删除按钮，按钮上绑定了<code>@click=&quot;handleDelete(scope.row)&quot;</code></p>
<p>2.method的<code>handleDelete</code>方法弹出提示框</p>
<p>3.用户点击取消,提示操作已经被取消。</p>
<p>4.用户点击确定，发送异步请求并携带需要删除数据的主键ID</p>
<p>5.根据后台返回结果做不同的操作</p>
<p>​	如果返回成功，提示成功信息，并重新查询数据</p>
<p>​	如果返回失败，提示错误信息，并重新查询数据</p>
</blockquote>
<p>修改<code>handleDelete</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleDelete</span>(<span class="params">row</span>) &#123;</span><br><span class="line">    <span class="comment">//1.弹出提示框</span></span><br><span class="line">    <span class="variable language_">this</span>.$confirm(<span class="string">&quot;此操作永久删除当前数据，是否继续？&quot;</span>,<span class="string">&quot;提示&quot;</span>,&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&#x27;info&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//2.做删除业务</span></span><br><span class="line">        axios.<span class="title function_">delete</span>(<span class="string">&quot;/books/&quot;</span>+row.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20021</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//3.取消删除</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">info</span>(<span class="string">&quot;取消删除操作&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来，下面是一个完整页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 页面meta --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringMVC案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no&quot;</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 引入样式 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../plugins/elementui/index.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../plugins/font-awesome/css/font-awesome.min.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../css/style.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;hold-transition&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content-header&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>图书管理<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;filter-container&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;图书名称&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pagination.queryString&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;filter-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;getAll()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dalfBut&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">class</span>=<span class="string">&quot;butT&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleCreate()&quot;</span>&gt;</span>新建<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">current-row-key</span>=<span class="string">&quot;id&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;dataList&quot;</span> <span class="attr">stripe</span> <span class="attr">highlight-current-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;index&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">label</span>=<span class="string">&quot;序号&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;type&quot;</span> <span class="attr">label</span>=<span class="string">&quot;图书类别&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;图书名称&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;description&quot;</span> <span class="attr">label</span>=<span class="string">&quot;描述&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleUpdate(scope.row)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleDelete(scope.row)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 新增标签弹层 --&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;add-form&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;新增图书&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogFormVisible&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;dataAddForm&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;formData&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-position</span>=<span class="string">&quot;right&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;图书类别&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;type&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.type&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;图书名称&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.name&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;描述&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.description&quot;</span> <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;dialogFormVisible = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleAdd()&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 编辑标签弹层 --&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;add-form&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;编辑检查项&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogFormVisible4Edit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;dataEditForm&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;formData&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-position</span>=<span class="string">&quot;right&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;图书类别&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;type&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.type&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;图书名称&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.name&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;描述&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.description&quot;</span> <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;dialogFormVisible4Edit = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleEdit()&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入组件库 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../plugins/elementui/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/axios-0.18.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">pagination</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">dataList</span>: [],<span class="comment">//当前页要展示的列表数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">formData</span>: &#123;&#125;,<span class="comment">//表单数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dialogFormVisible</span>: <span class="literal">false</span>,<span class="comment">//控制表单是否可见</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dialogFormVisible4Edit</span>:<span class="literal">false</span>,<span class="comment">//编辑表单是否可见</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">rules</span>: &#123;<span class="comment">//校验规则</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;图书类别为必填项&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;],</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;图书名称为必填项&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;]</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//钩子函数，VUE对象初始化完成后自动执行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//列表</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//发送ajax请求</span></span></span><br><span class="line"><span class="language-javascript">                    axios.<span class="title function_">get</span>(<span class="string">&quot;/books&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//弹出添加窗口</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handleCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">resetForm</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//重置表单</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">resetForm</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">formData</span> = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//添加</span></span></span><br><span class="line"><span class="language-javascript">                handleAdd () &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//发送ajax请求</span></span></span><br><span class="line"><span class="language-javascript">                    axios.<span class="title function_">post</span>(<span class="string">&quot;/books&quot;</span>,<span class="variable language_">this</span>.<span class="property">formData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//如果操作成功，关闭弹层，显示数据</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20011</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;添加成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20010</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;添加失败&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//弹出编辑窗口</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handleUpdate</span>(<span class="params">row</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// console.log(row);   //row.id 查询条件</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//查询数据，根据id查询</span></span></span><br><span class="line"><span class="language-javascript">                    axios.<span class="title function_">get</span>(<span class="string">&quot;/books/&quot;</span>+row.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// console.log(res.data.data);</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20041</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="comment">//展示弹层，加载数据</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">formData</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">dialogFormVisible4Edit</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//编辑</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handleEdit</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//发送ajax请求</span></span></span><br><span class="line"><span class="language-javascript">                    axios.<span class="title function_">put</span>(<span class="string">&quot;/books&quot;</span>,<span class="variable language_">this</span>.<span class="property">formData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//如果操作成功，关闭弹层，显示数据</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20031</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">dialogFormVisible4Edit</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;修改成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20030</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;修改失败&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 删除</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handleDelete</span>(<span class="params">row</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//1.弹出提示框</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.$confirm(<span class="string">&quot;此操作永久删除当前数据，是否继续？&quot;</span>,<span class="string">&quot;提示&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">type</span>:<span class="string">&#x27;info&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//2.做删除业务</span></span></span><br><span class="line"><span class="language-javascript">                        axios.<span class="title function_">delete</span>(<span class="string">&quot;/books/&quot;</span>+row.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20021</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;删除成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;删除失败&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                        &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span></span><br><span class="line"><span class="language-javascript">                        &#125;);</span></span><br><span class="line"><span class="language-javascript">                    &#125;).<span class="title function_">catch</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//3.取消删除</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">info</span>(<span class="string">&quot;取消删除操作&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5，拦截器"><a href="#5，拦截器" class="headerlink" title="5，拦截器"></a>5，拦截器</h2><p>对于拦截器这节的知识，我们需要学习如下内容:</p>
<ul>
<li>拦截器概念</li>
<li>入门案例</li>
<li>拦截器参数</li>
<li>拦截器工作流程分析</li>
</ul>
<h3 id="5-1-拦截器概念"><a href="#5-1-拦截器概念" class="headerlink" title="5.1 拦截器概念"></a>5.1 拦截器概念</h3><p>讲解拦截器的概念之前，我们先看一张图:</p>
<p><img src="D:\blog\source_posts\pic\1630676280170.png" alt="1630676280170"></p>
<p>(1)浏览器发送一个请求会先到Tomcat的web服务器</p>
<p>(2)Tomcat服务器接收到请求以后，会去判断请求的是静态资源还是动态资源</p>
<p>(3)如果是静态资源，会直接到Tomcat的项目部署目录下去直接访问</p>
<p>(4)如果是动态资源，就需要交给项目的后台代码进行处理</p>
<p>(5)在找到具体的方法之前，我们可以去配置过滤器(可以配置多个)，按照顺序进行执行</p>
<p>(6)然后进入到到中央处理器(SpringMVC中的内容)，SpringMVC会根据配置的规则进行拦截</p>
<p>(7)如果满足规则，则进行处理，找到其对应的controller类中的方法进行执行,完成后返回结果</p>
<p>(8)如果不满足规则，则不进行处理</p>
<p>(9)这个时候，如果我们需要在每个Controller方法执行的前后添加业务，具体该如何来实现?</p>
<p>这个就是拦截器要做的事。</p>
<ul>
<li>拦截器（Interceptor）是一种动态拦截方法调用的机制，在SpringMVC中动态拦截控制器方法的执行</li>
<li>作用:<ul>
<li>在指定的方法调用前后执行预先设定的代码</li>
<li>阻止原始方法的执行</li>
<li>总结：拦截器就是用来做增强</li>
</ul>
</li>
</ul>
<p>看完以后，大家会发现</p>
<ul>
<li>拦截器和过滤器在作用和执行顺序上也很相似</li>
</ul>
<p>所以这个时候，就有一个问题需要思考:拦截器和过滤器之间的区别是什么?</p>
<ul>
<li>归属不同：Filter属于Servlet技术，Interceptor属于SpringMVC技术</li>
<li>拦截内容不同：Filter对所有访问进行增强，Interceptor仅针对SpringMVC的访问进行增强</li>
</ul>
<p><img src="D:\blog\source_posts\pic\1630676903190.png" alt="1630676903190"></p>
<h3 id="5-2-拦截器入门案例"><a href="#5-2-拦截器入门案例" class="headerlink" title="5.2 拦截器入门案例"></a>5.2 拦截器入门案例</h3><h4 id="5-2-1-环境准备"><a href="#5-2-1-环境准备" class="headerlink" title="5.2.1 环境准备"></a>5.2.1 环境准备</h4><ul>
<li><p>创建一个Web的Maven项目</p>
</li>
<li><p>pom.xml添加SSM整合所需jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_12_interceptor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建对应的配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//乱码处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建模型类Book</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Book&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;书名=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, 价格=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book save...&quot;</span> + book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book delete...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book update...&quot;</span>+book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book update&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getById...&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book getById&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getAll...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book getAll&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>最终创建好的项目结构如下:</p>
<p><img src="D:\blog\source_posts\pic\1630677370998.png" alt="1630677370998"></p>
<h4 id="5-2-2-拦截器开发"><a href="#5-2-2-拦截器开发" class="headerlink" title="5.2.2 拦截器开发"></a>5.2.2 拦截器开发</h4><h5 id="步骤1-创建拦截器类"><a href="#步骤1-创建拦截器类" class="headerlink" title="步骤1:创建拦截器类"></a>步骤1:创建拦截器类</h5><p>让类实现HandlerInterceptor接口，重写接口中的三个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//定义拦截器类，实现HandlerInterceptor接口</span></span><br><span class="line"><span class="comment">//注意当前类必须受Spring容器控制</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//原始方法调用前执行的内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//原始方法调用后执行的内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//原始方法调用完成后执行的内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**注意:**拦截器类要被SpringMVC容器扫描到。</p>
<h5 id="步骤2-配置拦截器类"><a href="#步骤2-配置拦截器类" class="headerlink" title="步骤2:配置拦截器类"></a>步骤2:配置拦截器类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//配置拦截器</span></span><br><span class="line">        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/books&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="步骤3-SpringMVC添加SpringMvcSupport包扫描"><a href="#步骤3-SpringMVC添加SpringMvcSupport包扫描" class="headerlink" title="步骤3:SpringMVC添加SpringMvcSupport包扫描"></a>步骤3:SpringMVC添加SpringMvcSupport包扫描</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;,&quot;com.itheima.config&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="步骤4-运行程序测试"><a href="#步骤4-运行程序测试" class="headerlink" title="步骤4:运行程序测试"></a>步骤4:运行程序测试</h5><p>使用PostMan发送<code>http://localhost/books</code></p>
<p><img src="D:\blog\source_posts\pic\1630678114224.png" alt="1630678114224"></p>
<p>如果发送<code>http://localhost/books/100</code>会发现拦截器没有被执行，原因是拦截器的<code>addPathPatterns</code>方法配置的拦截路径是<code>/books</code>,我们现在发送的是<code>/books/100</code>，所以没有匹配上，因此没有拦截，拦截器就不会执行。</p>
<h5 id="步骤5-修改拦截器拦截规则"><a href="#步骤5-修改拦截器拦截规则" class="headerlink" title="步骤5:修改拦截器拦截规则"></a>步骤5:修改拦截器拦截规则</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//配置拦截器</span></span><br><span class="line">        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/books&quot;</span>,<span class="string">&quot;/books/*&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个时候，如果再次访问<code>http://localhost/books/100</code>，拦截器就会被执行。</p>
<p>最后说一件事，就是拦截器中的<code>preHandler</code>方法，如果返回true,则代表放行，会执行原始Controller类中要请求的方法，如果返回false，则代表拦截，后面的就不会再执行了。</p>
<h5 id="步骤6-简化SpringMvcSupport的编写"><a href="#步骤6-简化SpringMvcSupport的编写" class="headerlink" title="步骤6:简化SpringMvcSupport的编写"></a>步骤6:简化SpringMvcSupport的编写</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="comment">//实现WebMvcConfigurer接口可以简化开发，但具有一定的侵入性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//配置多拦截器</span></span><br><span class="line">        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/books&quot;</span>,<span class="string">&quot;/books/*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此后咱们就不用再写<code>SpringMvcSupport</code>类了。</p>
<p>最后我们来看下拦截器的执行流程:</p>
<p><img src="D:\blog\source_posts\pic\1630679464294.png" alt="1630679464294"></p>
<p>当有拦截器后，请求会先进入preHandle方法，</p>
<p>​	如果方法返回true，则放行继续执行后面的handle[controller的方法]和后面的方法</p>
<p>​	如果返回false，则直接跳过后面方法的执行。</p>
<h3 id="5-3-拦截器参数"><a href="#5-3-拦截器参数" class="headerlink" title="5.3 拦截器参数"></a>5.3 拦截器参数</h3><h4 id="5-3-1-前置处理方法"><a href="#5-3-1-前置处理方法" class="headerlink" title="5.3.1 前置处理方法"></a>5.3.1 前置处理方法</h4><p>原始方法之前运行preHandle</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                         HttpServletResponse response,</span></span><br><span class="line"><span class="params">                         Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;preHandle&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>request:请求对象</li>
<li>response:响应对象</li>
<li>handler:被调用的处理器对象，本质上是一个方法对象，对反射中的Method对象进行了再包装</li>
</ul>
<p>使用request对象可以获取请求数据中的内容，如获取请求头的<code>Content-Type</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Content-Type&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;preHandle...&quot;</span>+contentType);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用handler参数，可以获取方法的相关信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">HandlerMethod</span> <span class="variable">hm</span> <span class="operator">=</span> (HandlerMethod)handler;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> hm.getMethod().getName();<span class="comment">//可以获取方法的名称</span></span><br><span class="line">    System.out.println(<span class="string">&quot;preHandle...&quot;</span>+methodName);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-3-2-后置处理方法"><a href="#5-3-2-后置处理方法" class="headerlink" title="5.3.2 后置处理方法"></a>5.3.2 后置处理方法</h4><p>原始方法运行后运行，如果原始方法被拦截，则不执行  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                       HttpServletResponse response,</span></span><br><span class="line"><span class="params">                       Object handler,</span></span><br><span class="line"><span class="params">                       ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;postHandle&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前三个参数和上面的是一致的。</p>
<p>modelAndView:如果处理器执行完成具有返回结果，可以读取到对应数据与页面信息，并进行调整</p>
<p>因为咱们现在都是返回json数据，所以该参数的使用率不高。</p>
<h4 id="5-3-3-完成处理方法"><a href="#5-3-3-完成处理方法" class="headerlink" title="5.3.3 完成处理方法"></a>5.3.3 完成处理方法</h4><p>拦截器最后执行的方法，无论原始方法是否执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                            HttpServletResponse response,</span></span><br><span class="line"><span class="params">                            Object handler,</span></span><br><span class="line"><span class="params">                            Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;afterCompletion&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前三个参数与上面的是一致的。</p>
<p>ex:如果处理器执行过程中出现异常对象，可以针对异常情况进行单独处理  </p>
<p>因为我们现在已经有全局异常处理器类，所以该参数的使用率也不高。</p>
<p>这三个方法中，最常用的是&#x3D;&#x3D;preHandle&#x3D;&#x3D;,在这个方法中可以通过返回值来决定是否要进行放行，我们可以把业务逻辑放在该方法中，如果满足业务则返回true放行，不满足则返回false拦截。</p>
<h3 id="5-4-拦截器链配置"><a href="#5-4-拦截器链配置" class="headerlink" title="5.4 拦截器链配置"></a>5.4 拦截器链配置</h3><p>目前，项目中只添加了一个拦截器，如果有多个，该如何配置?配置多个后，执行顺序是什么?</p>
<h4 id="5-4-1-配置多个拦截器"><a href="#5-4-1-配置多个拦截器" class="headerlink" title="5.4.1 配置多个拦截器"></a>5.4.1 配置多个拦截器</h4><h5 id="步骤1-创建拦截器类-1"><a href="#步骤1-创建拦截器类-1" class="headerlink" title="步骤1:创建拦截器类"></a>步骤1:创建拦截器类</h5><p>实现接口，并重写接口中的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectInterceptor2</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle...222&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle...222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion...222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="步骤2-配置拦截器类-1"><a href="#步骤2-配置拦截器类-1" class="headerlink" title="步骤2:配置拦截器类"></a>步骤2:配置拦截器类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="comment">//实现WebMvcConfigurer接口可以简化开发，但具有一定的侵入性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor2 projectInterceptor2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//配置多拦截器</span></span><br><span class="line">        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/books&quot;</span>,<span class="string">&quot;/books/*&quot;</span>);</span><br><span class="line">        registry.addInterceptor(projectInterceptor2).addPathPatterns(<span class="string">&quot;/books&quot;</span>,<span class="string">&quot;/books/*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>步骤3:运行程序，观察顺序</p>
<p><img src="D:\blog\source_posts\pic\1630680435269.png" alt="1630680435269"></p>
<p>拦截器执行的顺序是和配置顺序有关。就和前面所提到的运维人员进入机房的案例，先进后出。</p>
<ul>
<li>当配置多个拦截器时，形成拦截器链</li>
<li>拦截器链的运行顺序参照拦截器添加顺序为准</li>
<li>当拦截器中出现对原始处理器的拦截，后面的拦截器均终止运行</li>
<li>当拦截器运行中断，仅运行配置在前面的拦截器的afterCompletion操作</li>
</ul>
<p><img src="D:\blog\source_posts\pic\1630680579735.png" alt="1630680579735"></p>
<p>preHandle：与配置顺序相同，必定运行</p>
<p>postHandle:与配置顺序相反，可能不运行</p>
<p>afterCompletion:与配置顺序相反，可能不运行。</p>
<p>这个顺序不太好记，最终只需要把握住一个原则即可:&#x3D;&#x3D;以最终的运行结果为准&#x3D;&#x3D;</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Servlet小结</title>
    <url>/posts/1296656255.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="黑马Servlet学习笔记"><a href="#黑马Servlet学习笔记" class="headerlink" title="黑马Servlet学习笔记"></a>黑马Servlet学习笔记</h2><h3 id="1、Servlet-简介"><a href="#1、Servlet-简介" class="headerlink" title="1、Servlet 简介"></a>1、Servlet 简介</h3><p><img src="D:\blog\source_posts\pic\1627234763207.png" alt="1627234763207"></p>
<ul>
<li><p>Servlet是JavaWeb最为<code>核心</code>的内容，它是Java提供的一门&#x3D;&#x3D;动态&#x3D;&#x3D;web资源开发技术。</p>
</li>
<li><p>使用Servlet就可以实现，根据不同的登录用户在页面上动态显示不同内容。</p>
</li>
<li><p>Servlet是JavaEE规范之一，规范对应的就是接口，我们需要定义Servlet类来实现Servlet接口，并由web服务器运行Servlet。</p>
</li>
</ul>
<h3 id="2、-快速入门"><a href="#2、-快速入门" class="headerlink" title="2、 快速入门"></a>2、 快速入门</h3><ol>
<li>创建Web项目<code>web-demo</code>，导入Servlet依赖坐标</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      此处为什么需要添加该标签?</span></span><br><span class="line"><span class="comment">      provided指的是在编译和测试过程中有效,最后生成的war包时不会加入</span></span><br><span class="line"><span class="comment">       因为Tomcat的lib目录中已经有servlet-api这个jar包，如果在生成war包的时候生效就会和Tomcat中的jar包冲突，导致报错</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建:定义一个类，实现Servlet接口，并重写接口中所有方法，并在service方法中输入一句话</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo1</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet hello world~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置:在类上使用@WebServlet注解，配置该Servlet的访问路径</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo1&quot;)</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>访问:启动Tomcat,浏览器中输入URL地址访问该Servlet</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/web-demo/demo1</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>浏览器访问该Servlet后，控制台会打印出<code>servlet hello world~</code> ，说明servlet程序已经成功运行。</li>
</ol>
<h3 id="3、Servlet执行流程"><a href="#3、Servlet执行流程" class="headerlink" title="3、Servlet执行流程"></a>3、Servlet执行流程</h3><p><img src="D:\blog\source_posts\pic\1627236923139.png" alt="1627236923139"></p>
<ul>
<li>浏览器发出<code>http://localhost:8080/web-demo/demo1</code>请求，从请求中可以解析出三部分内容，分别是<code>localhost:8080</code>、<code>web-demo</code>、<code>demo1</code><ul>
<li>根据<code>localhost:8080</code>可以找到要访问的Tomcat Web服务器</li>
<li>根据<code>web-demo</code>可以找到部署在Tomcat服务器上的web-demo项目</li>
<li>根据<code>demo1</code>可以找到要访问的是项目中的哪个Servlet类，根据<code>@WebServlet</code>后面的值进行匹配</li>
</ul>
</li>
<li>找到<code>ServletDemo1</code>这个类后，Tomcat Web服务器就会为ServletDemo1这个类创建一个对象，然后调用对象中的service方法<ul>
<li><code>ServletDemo1</code>实现了Servlet接口，所以类中必然会重写service方法供Tomcat Web服务器进行调用</li>
<li><code>service</code>方法中有<code>ServletRequest</code>和<code>ServletResponse</code>两个参数，<code>ServletRequest</code>封装的是请求数据，<code>ServletResponse</code>封装的是响应数据，这两个参数是用来实现前后端之间的数据交互的</li>
</ul>
</li>
</ul>
<p><strong>小结</strong></p>
<ol>
<li>Servlet由谁创建?Servlet方法由谁调用?</li>
</ol>
<blockquote>
<p>Servlet由<code>web服务器</code>创建，Servlet方法由<code>web服务器调用</code></p>
</blockquote>
<ol start="2">
<li>服务器怎么知道Servlet中一定有service方法?</li>
</ol>
<blockquote>
<p>因为我们自定义的Servlet,必须实现Servlet接口并复写其方法，而Servlet接口中有service方法</p>
</blockquote>
<h3 id="4、-Servlet生命周期"><a href="#4、-Servlet生命周期" class="headerlink" title="4、 Servlet生命周期"></a>4、 Servlet生命周期</h3><p><strong>生命周期:</strong> 对象的生命周期指一个对象从被创建到被销毁的整个过程。</p>
<ul>
<li><p>Servlet运行在Servlet容器(web服务器)中，其生命周期由容器来管理，分为4个阶段：</p>
<ol>
<li>&#x3D;&#x3D;加载和实例化&#x3D;&#x3D;：默认情况下，当Servlet第一次被访问时，由容器创建Servlet对象</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">默认情况，Servlet会在第一次访问被容器创建，但是如果创建Servlet比较耗时的话，那么第一个访问的人等待的时间就比较长，用户的体验就比较差，那么我们能不能把Servlet的创建放到服务器启动的时候来创建，具体如何来配置?</span><br><span class="line"></span><br><span class="line">@WebServlet(urlPatterns = &quot;/demo1&quot;,loadOnStartup = 1)</span><br><span class="line">loadOnstartup的取值有两类情况</span><br><span class="line">	（1）负整数:第一次访问时创建Servlet对象</span><br><span class="line">	（2）0或正整数:服务器启动时创建Servlet对象，数字越小优先级越高</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>&#x3D;&#x3D;初始化&#x3D;&#x3D;：在Servlet实例化之后，容器将调用Servlet的&#x3D;&#x3D;init()&#x3D;&#x3D;方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只&#x3D;&#x3D;调用一次&#x3D;&#x3D;</li>
<li>&#x3D;&#x3D;请求处理&#x3D;&#x3D;：&#x3D;&#x3D;每次&#x3D;&#x3D;请求Servlet时，Servlet容器都会调用Servlet的&#x3D;&#x3D;service()&#x3D;&#x3D;方法对请求进行处理。</li>
<li>&#x3D;&#x3D;服务终止&#x3D;&#x3D;：当需要释放内存或者容器关闭时，容器就会调用Servlet实例的&#x3D;&#x3D;destroy()&#x3D;&#x3D;方法完成资源的释放。在destroy()方法调用之后，容器会释放这个Servlet实例，该实例随后会被Java的垃圾收集器所回收。</li>
</ol>
</li>
<li><p>案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Servlet生命周期方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/demo2&quot;,loadOnStartup = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo2</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  初始化方法</span></span><br><span class="line"><span class="comment">     *  1.调用时机：默认情况下，Servlet被第一次访问时，调用</span></span><br><span class="line"><span class="comment">     *      * loadOnStartup: 默认为-1，修改为0或者正整数，则会在服务器启动的时候，调用</span></span><br><span class="line"><span class="comment">     *  2.调用次数: 1次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供服务</span></span><br><span class="line"><span class="comment">     * 1.调用时机:每一次Servlet被访问时，调用</span></span><br><span class="line"><span class="comment">     * 2.调用次数: 多次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet hello world~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁方法</span></span><br><span class="line"><span class="comment">     * 1.调用时机：内存释放或者服务器关闭的时候，Servlet对象会被销毁，调用</span></span><br><span class="line"><span class="comment">     * 2.调用次数: 1次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>小结</strong></p>
<ol>
<li>Servlet对象在什么时候被创建的?</li>
</ol>
<blockquote>
<p>默认是第一次访问的时候被创建，可以使用@WebServlet(urlPatterns &#x3D; “&#x2F;demo2”,loadOnStartup &#x3D; 1)的loadOnStartup 修改成在服务器启动的时候创建。</p>
</blockquote>
<ol start="2">
<li>Servlet生命周期中涉及到的三个方法，这三个方法是什么?什么时候被调用?调用几次?</li>
</ol>
<blockquote>
<p>涉及到三个方法，分别是 init()、service()、destroy()</p>
<p>init方法在Servlet对象被创建的时候执行，只执行1次</p>
<p>service方法在Servlet被访问的时候调用，每访问1次就调用1次</p>
<p>destroy方法在Servlet对象被销毁的时候调用，只执行1次</p>
</blockquote>
<h3 id="5、-方法介绍"><a href="#5、-方法介绍" class="headerlink" title="5、 方法介绍"></a>5、 方法介绍</h3><p><strong>Servlet中总共有5个方法:</strong></p>
<ul>
<li>初始化方法，在Servlet被创建时执行，只执行一次</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> </span><br></pre></td></tr></table></figure>

<ul>
<li>提供服务方法， 每次Servlet被访问，都会调用该方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>销毁方法，当Servlet被销毁时，调用该方法。在内存释放或服务器关闭时销毁Servlet</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> </span><br></pre></td></tr></table></figure>

<ul>
<li>获取Servlet信息</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">getServletInfo</span><span class="params">()</span> </span><br><span class="line"><span class="comment">//该方法用来返回Servlet的相关信息，没有什么太大的用处，一般我们返回一个空字符串即可</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>获取ServletConfig对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<p>ServletConfig对象，在init方法的参数中有，而Tomcat Web服务器在创建Servlet对象的时候会调用init方法，必定会传入一个ServletConfig对象，我们<strong>只需要将服务器传过来的ServletConfig进行返回即可</strong>。</p>
<p>具体如何操作?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet方法介绍</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/demo3&quot;,loadOnStartup = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo3</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServletConfig servletConfig;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  初始化方法</span></span><br><span class="line"><span class="comment">     *  1.调用时机：默认情况下，Servlet被第一次访问时，调用</span></span><br><span class="line"><span class="comment">     *      * loadOnStartup: 默认为-1，修改为0或者正整数，则会在服务器启动的时候，调用</span></span><br><span class="line"><span class="comment">     *  2.调用次数: 1次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="built_in">this</span>.servletConfig = config;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> servletConfig;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供服务</span></span><br><span class="line"><span class="comment">     * 1.调用时机:每一次Servlet被访问时，调用</span></span><br><span class="line"><span class="comment">     * 2.调用次数: 多次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet hello world~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁方法</span></span><br><span class="line"><span class="comment">     * 1.调用时机：内存释放或者服务器关闭的时候，Servlet对象会被销毁，调用</span></span><br><span class="line"><span class="comment">     * 2.调用次数: 1次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>getServletInfo()和getServletConfig()这两个方法使用的不是很多，直到有这俩方法即可。</p>
<h3 id="6、-体系结构"><a href="#6、-体系结构" class="headerlink" title="6、 体系结构"></a>6、 体系结构</h3><p>Servlet的体系结构图:</p>
<p><img src="D:\blog\source_posts\pic\1627240593506.png" alt="1627240593506"></p>
<p>因为我们将来开发B&#x2F;S架构的web项目，都是针对HTTP协议的，所以我们自定义的Servlet一般通过继承&#x3D;&#x3D;HttpServlet&#x3D;&#x3D;的方式创建。</p>
<p>代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo4</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// GET 请求方式处理逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// Post 请求方式处理逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;post...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>要想发送一个GET请求，请求该Servlet，只需要通过浏览器发送<code>http://localhost:8080/web-demo/demo4</code>,就能看到doGet方法被执行了</li>
<li>要想发送一个POST请求，请求该Servlet，单单通过浏览器是无法实现的，这个时候就需要编写一个form表单来发送请求，在webapp下创建一个<code>a.html</code>页面，内容如下:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/web-demo/demo4&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动测试，即可看到doPost方法被执行了。</p>
<p>Servlet的简化编写就介绍完了，接着需要思考两个问题:</p>
<ol>
<li>HttpServlet中为什么要根据请求方式的不同，调用不同的方法?</li>
<li>如何调用?</li>
</ol>
<p>针对问题一，我们需要回顾之前的知识点&#x3D;&#x3D;前端发送GET和POST请求的时候，参数的位置不一致，GET请求参数在请求行中，POST请求参数在请求体中&#x3D;&#x3D;，为了能处理不同的请求方式，我们得在service方法中进行判断，然后写不同的业务处理，这样能实现，但是每个Servlet类中都将有相似的代码，针对这个问题，有什么可以优化的策略么?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo5</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//如何调用?</span></span><br><span class="line">        <span class="comment">//获取请求方式，根据不同的请求方式进行不同的业务处理</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)req;</span><br><span class="line">       <span class="comment">//1. 获取请求方式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">        <span class="comment">//2. 判断</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;GET&quot;</span>.equals(method))&#123;</span><br><span class="line">            <span class="comment">// get方式的处理逻辑</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;POST&quot;</span>.equals(method))&#123;</span><br><span class="line">            <span class="comment">// post方式的处理逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>要解决上述问题，我们可以对Servlet接口进行继承封装，来简化代码开发。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHttpServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)req;</span><br><span class="line">        <span class="comment">//1. 获取请求方式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">        <span class="comment">//2. 判断</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;GET&quot;</span>.equals(method))&#123;</span><br><span class="line">            <span class="comment">// get方式的处理逻辑</span></span><br><span class="line">            doGet(req,res);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;POST&quot;</span>.equals(method))&#123;</span><br><span class="line">            <span class="comment">// post方式的处理逻辑</span></span><br><span class="line">            doPost(req,res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>有了MyHttpServlet这个类，以后我们再编写Servlet类的时候，只需要继承MyHttpServlet，重写父类中的doGet和doPost方法，就可以用来处理GET和POST请求的业务逻辑。接下来，可以把ServletDemo5代码进行改造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo5</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;post...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将来页面发送的是GET请求，则会进入到doGet方法中进行执行，如果是POST请求，则进入到doPost方法。这样代码在编写的时候就相对来说更加简单快捷。</p>
<p>类似MyHttpServlet这样的类Servlet中已经为我们提供好了，就是HttpServlet,翻开源码，大家可以搜索<code>service()</code>方法，你会发现HttpServlet做的事更多，不仅可以处理GET和POST还可以处理其他五种请求方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> req.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> getLastModified(req);</span><br><span class="line">            <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// servlet doesn&#x27;t support if-modified-since, no reason</span></span><br><span class="line">                <span class="comment">// to go through further expensive logic</span></span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">ifModifiedSince</span> <span class="operator">=</span> req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">                <span class="keyword">if</span> (ifModifiedSince &lt; lastModified) &#123;</span><br><span class="line">                    <span class="comment">// If the servlet mod time is later, call doGet()</span></span><br><span class="line">                    <span class="comment">// Round down to the nearest second for a proper compare</span></span><br><span class="line">                    <span class="comment">// A ifModifiedSince of -1 will always be less</span></span><br><span class="line">                    maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    doGet(req, resp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> getLastModified(req);</span><br><span class="line">            maybeSetLastModified(resp, lastModified);</span><br><span class="line">            doHead(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">            doPost(req, resp);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">            doPut(req, resp);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">            doDelete(req, resp);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">            doOptions(req,resp);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">            doTrace(req,resp);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// Note that this means NO servlet supports whatever</span></span><br><span class="line">            <span class="comment">// method was requested, anywhere on this server.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">errMsg</span> <span class="operator">=</span> lStrings.getString(<span class="string">&quot;http.method_not_implemented&quot;</span>);</span><br><span class="line">            Object[] errArgs = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">1</span>];</span><br><span class="line">            errArgs[<span class="number">0</span>] = method;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line">            </span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>小结</strong></p>
<ol>
<li>HttpServlet的使用步骤</li>
</ol>
<blockquote>
<p>继承HttpServlet</p>
<p>重写doGet和doPost方法</p>
</blockquote>
<ol start="2">
<li>HttpServlet原理</li>
</ol>
<blockquote>
<p>获取请求方式，并根据不同的请求方式，调用不同的doXxx方法</p>
</blockquote>
<h3 id="7、-urlPattern配置"><a href="#7、-urlPattern配置" class="headerlink" title="7、 urlPattern配置"></a>7、 urlPattern配置</h3><p>Servlet类编写好后，要想被访问到，就需要配置其访问路径（&#x3D;&#x3D;urlPattern&#x3D;&#x3D;）</p>
<ul>
<li><p>一个Servlet,可以配置多个urlPattern</p>
<p><img src="D:\blog\source_posts\pic\1627272805178.png" alt="1627272805178"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* urlPattern: 一个Servlet可以配置多个访问路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &#123;&quot;/demo7&quot;,&quot;/demo8&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo7</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;demo7 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在浏览器上输入<code>http://localhost:8080/web-demo/demo7</code>,<code>http://localhost:8080/web-demo/demo8</code>这两个地址都能访问到ServletDemo7的doGet方法。</p>
</li>
<li><p>&#x3D;&#x3D;urlPattern配置规则&#x3D;&#x3D;</p>
<ul>
<li><p>精确匹配</p>
<p><img src="D:\blog\source_posts\pic\1627273174144.png" alt="1627273174144"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UrlPattern:</span></span><br><span class="line"><span class="comment"> * * 精确匹配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/user/select&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo8</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;demo8 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问路径<code>http://localhost:8080/web-demo/user/select</code></p>
</li>
<li><p>目录匹配</p>
<p><img src="D:\blog\source_posts\pic\1627273184095.png" alt="1627273184095"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UrlPattern:</span></span><br><span class="line"><span class="comment"> * * 目录匹配: /user/*</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/user/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo9</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;demo9 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问路径<code>http://localhost:8080/web-demo/user/任意</code></p>
<p>&#x3D;&#x3D;思考:&#x3D;&#x3D;</p>
<ol>
<li>访问路径<code>http://localhost:8080/web-demo/user</code>是否能访问到demo9的doGet方法?</li>
<li>访问路径<code>http://localhost:8080/web-demo/user/a/b</code>是否能访问到demo9的doGet方法?</li>
<li>访问路径<code>http://localhost:8080/web-demo/user/select</code>是否能访问到demo9还是demo8的doGet方法?</li>
</ol>
<p>答案是: 能、能、demo8，进而我们可以得到的结论是<code>/user/*</code>中的<code>/*</code>代表的是零或多个层级访问目录同时精确匹配优先级要高于目录匹配。</p>
</li>
<li><p>扩展名匹配</p>
<p><img src="D:\blog\source_posts\pic\1627273194118.png" alt="1627273194118"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UrlPattern:</span></span><br><span class="line"><span class="comment"> * * 扩展名匹配: *.do</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;*.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo10</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;demo10 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问路径<code>http://localhost:8080/web-demo/任意.do</code></p>
<p>&#x3D;&#x3D;注意&#x3D;&#x3D;:</p>
<ol>
<li>如果路径配置的不是扩展名，那么在路径的前面就必须要加<code>/</code>否则会报错</li>
</ol>
<p><img src="D:\blog\source_posts\pic\1627274483755.png" alt="1627274483755"></p>
<ol start="2">
<li>如果路径配置的是<code>*.do</code>,那么在*.do的前面不能加<code>/</code>,否则会报错</li>
</ol>
<p><img src="D:\blog\source_posts\pic\1627274368245.png" alt="1627274368245"></p>
</li>
<li><p>任意匹配</p>
<p><img src="D:\blog\source_posts\pic\1627273201370.png" alt="1627273201370"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UrlPattern:</span></span><br><span class="line"><span class="comment"> * * 任意匹配： /</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo11</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;demo11 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问路径<code>http://localhost:8080/demo-web/任意</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UrlPattern:</span></span><br><span class="line"><span class="comment"> * * 任意匹配： /*</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo12</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;demo12 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>访问路径&#96;<a href="http://localhost:8080/demo-web/%E4%BB%BB%E6%84%8F">http://localhost:8080/demo-web/任意</a></p>
<p>&#x3D;&#x3D;注意:&#x3D;&#x3D;<code>/</code>和<code>/*</code>的区别?</p>
<ol>
<li><p>当我们的项目中的Servlet配置了 “&#x2F;“,会覆盖掉tomcat中的DefaultServlet,当其他的url-pattern都匹配不上时都会走这个Servlet</p>
</li>
<li><p>当我们的项目中配置了”&#x2F;*”,意味着匹配任意访问路径</p>
</li>
<li><p>DefaultServlet是用来处理静态资源，如果配置了”&#x2F;“会把默认的覆盖掉，就会引发请求静态资源的时候没有走默认的而是走了自定义的Servlet类，最终导致静态资源不能被访问</p>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<p><strong>小结</strong></p>
<ol>
<li><p>urlPattern总共有四种配置方式，分别是精确匹配、目录匹配、扩展名匹配、任意匹配</p>
</li>
<li><p>五种配置的优先级为 精确匹配 &gt; 目录匹配&gt; 扩展名匹配 &gt; &#x2F;* &gt; &#x2F; ,无需记，以最终运行结果为准。</p>
</li>
</ol>
<h3 id="8、-XML配置"><a href="#8、-XML配置" class="headerlink" title="8、 XML配置"></a>8、 XML配置</h3><p>前面对应Servlet的配置，我们都使用的是@WebServlet,这个是Servlet从3.0版本后开始支持注解配置，3.0版本前只支持XML配置文件的配置方法。</p>
<p>对于XML的配置步骤有两步:</p>
<ul>
<li>编写Servlet类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo13</span> <span class="keyword">extends</span> <span class="title class_">MyHttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;demo13 get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在web.xml中配置该Servlet</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        Servlet 全类名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- servlet的名称，名字任意--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo13<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet的类全名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.itheima.web.ServletDemo13<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        Servlet 访问路径</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- servlet的名称，要和上面的名称一致--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo13<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- servlet的访问路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo13<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这种配置方式和注解比起来，确认麻烦很多，所以建议大家使用注解来开发。但是大家要认识上面这种配置方式，因为并不是所有的项目都是基于注解开发的。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security学习笔记</title>
    <url>/posts/3250038541.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="1-认证和授权概念"><a href="#1-认证和授权概念" class="headerlink" title="1.认证和授权概念"></a>1.认证和授权概念</h1><ul>
<li><p><strong>认证：</strong>系统提供的用于识别用户身份的功能，通常提供用户名和密码进行登录其实就是在进行认证，认证的目的是让系统知道你是谁。</p>
</li>
<li><p><strong>授权：</strong>用户认证成功后，需要为用户授权，其实就是指定当前用户可以操作哪些功能。</p>
</li>
</ul>
<h1 id="2-Spring-Security简介"><a href="#2-Spring-Security简介" class="headerlink" title="2.Spring Security简介"></a>2.Spring Security简介</h1><p>Spring Security是 Spring提供的安全认证服务的框架。 使用Spring Security可以帮助我们来简化认证和授权的过程。官网：<a href="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security</a></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659325088536-abb88c19-5084-458f-8357-7ca0c1c81c73.png" alt="img"></p>
<p>对应的maven坐标：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>常用的权限框架除了Spring Security，还有Apache的shiro框架。</p>
<h1 id="3-Spring-Security入门案例"><a href="#3-Spring-Security入门案例" class="headerlink" title="3.Spring Security入门案例"></a>3.Spring Security入门案例</h1><h2 id="3-1-工程搭建"><a href="#3-1-工程搭建" class="headerlink" title="3.1 工程搭建"></a>3.1 工程搭建</h2><p>创建maven工程，打包方式为war，为了方便起见我们可以让入门案例工程依赖health_interface，这样相关的依赖都继承过来了。</p>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="string"><span class="tag">                             http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springsecuritydemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>springsecuritydemo Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>health_interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 指定端口 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>85<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 请求路径 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>提供index.html页面，内容为hello Spring Security!!</p>
<h2 id="3-2-配置web-xml"><a href="#3-2-配置web-xml" class="headerlink" title="3.2 配置web.xml"></a>3.2 配置web.xml</h2><p>在web.xml中主要配置SpringMVC的DispatcherServlet和用于整合第三方框架的DelegatingFilterProxy，用于整合Spring Security。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">web-app</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      DelegatingFilterProxy用于整合第三方框架</span></span><br><span class="line"><span class="comment">      整合Spring Security时过滤器的名称必须为springSecurityFilterChain，</span></span><br><span class="line"><span class="comment">	  否则会抛出NoSuchBeanDefinitionException异常</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定加载的配置文件 ，通过参数contextConfigLocation加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-security.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-配置spring-security-xml"><a href="#3-3-配置spring-security-xml" class="headerlink" title="3.3 配置spring-security.xml"></a>3.3 配置spring-security.xml</h2><p>在spring-security.xml中主要配置Spring Security的拦截规则和认证管理器。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:security</span>=<span class="string">&quot;http://www.springframework.org/schema/security&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">						http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">						http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">						http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">						http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="string"><span class="tag">						http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">						http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">						http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                          http://www.springframework.org/schema/security</span></span></span><br><span class="line"><span class="string"><span class="tag">                          http://www.springframework.org/schema/security/spring-security.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        http：用于定义相关权限控制</span></span><br><span class="line"><span class="comment">        auto-config：是否自动配置</span></span><br><span class="line"><span class="comment">                        设置为true时框架会提供默认的一些配置，例如提供默认的登录页面、登出处理等</span></span><br><span class="line"><span class="comment">                        设置为false时需要显示提供登录表单配置，否则会报错</span></span><br><span class="line"><span class="comment">        use-expressions：用于指定intercept-url中的access属性是否使用表达式</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:http</span> <span class="attr">auto-config</span>=<span class="string">&quot;true&quot;</span> <span class="attr">use-expressions</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            intercept-url：定义一个拦截规则</span></span><br><span class="line"><span class="comment">            pattern：对哪些url进行权限控制</span></span><br><span class="line"><span class="comment">            access：在请求对应的URL时需要什么权限，默认配置时它应该是一个以逗号分隔的角色列表，</span></span><br><span class="line"><span class="comment">				  请求的用户只需拥有其中的一个角色就能成功访问对应的URL</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">security:intercept-url</span> <span class="attr">pattern</span>=<span class="string">&quot;/**&quot;</span>  <span class="attr">access</span>=<span class="string">&quot;hasRole(&#x27;ROLE_ADMIN&#x27;)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">security:http</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        authentication-manager：认证管理器，用于处理认证操作</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:authentication-manager</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            authentication-provider：认证提供者，执行具体的认证逻辑</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">security:authentication-provider</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                user-service：用于获取用户信息，提供给authentication-provider进行认证</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">security:user-service</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                    user：定义用户信息，可以指定用户名、密码、角色，后期可以改为从数据库查询用户信息</span></span><br><span class="line"><span class="comment">				  &#123;noop&#125;：表示当前使用的密码为明文</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">security:user</span> <span class="attr">name</span>=<span class="string">&quot;admin&quot;</span> </span></span><br><span class="line"><span class="tag">                               <span class="attr">password</span>=<span class="string">&quot;&#123;noop&#125;admin&quot;</span> </span></span><br><span class="line"><span class="tag">                               <span class="attr">authorities</span>=<span class="string">&quot;ROLE_ADMIN&quot;</span>&gt;</span></span><br><span class="line">              	<span class="tag">&lt;/<span class="name">security:user</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">security:user-service</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">security:authentication-provider</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">security:authentication-manager</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-4-对入门案例改进"><a href="#3-4-对入门案例改进" class="headerlink" title="3.4 对入门案例改进"></a>3.4 对入门案例改进</h2><p>前面我们已经完成了Spring Security的入门案例，通过入门案例我们可以看到，Spring Security将我们项目中的所有资源都保护了起来，要访问这些资源必须要完成认证而且需要具有ROLE_ADMIN角色。</p>
<p>但是入门案例中的使用方法离我们真实生产环境还差很远，还存在如下一些问题：</p>
<p>1、项目中我们将所有的资源（所有请求URL）都保护起来，实际环境下往往有一些资源不需要认证也可以访问，也就是可以匿名访问。</p>
<p>2、登录页面是由框架生成的，而我们的项目往往会使用自己的登录页面。</p>
<p>3、直接将用户名和密码配置在了配置文件中，而真实生产环境下的用户名和密码往往保存在数据库中。</p>
<p>4、在配置文件中配置的密码使用明文，这非常不安全，而真实生产环境下密码需要进行加密。</p>
<p>本章节需要对这些问题进行改进。</p>
<h3 id="1-配置可匿名访问的资源"><a href="#1-配置可匿名访问的资源" class="headerlink" title="1 配置可匿名访问的资源"></a>1 配置可匿名访问的资源</h3><p>第一步：在项目中创建pages目录，在pages目录中创建a.html和b.html</p>
<p>第二步：在spring-security.xml文件中配置，指定哪些资源可以匿名访问</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  http：用于定义相关权限控制</span></span><br><span class="line"><span class="comment">  指定哪些资源不需要进行权限校验，可以使用通配符</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:http</span> <span class="attr">security</span>=<span class="string">&quot;none&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;/pages/a.html&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:http</span> <span class="attr">security</span>=<span class="string">&quot;none&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;/paegs/b.html&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:http</span> <span class="attr">security</span>=<span class="string">&quot;none&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;/pages/**&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">security:http</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过上面的配置可以发现，pages目录下的文件可以在没有认证的情况下任意访问。</p>
<h3 id="2-使用指定的登录页面"><a href="#2-使用指定的登录页面" class="headerlink" title="2 使用指定的登录页面"></a>2 使用指定的登录页面</h3><p>第一步：提供login.html作为项目的登录页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login.do&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        username：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        password：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二步：修改spring-security.xml文件，指定login.html页面可以匿名访问</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">security:http</span> <span class="attr">security</span>=<span class="string">&quot;none&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;/login.html&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>第三步：修改spring-security.xml文件，加入表单登录信息的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  form-login：定义表单登录信息</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:form-login</span> <span class="attr">login-page</span>=<span class="string">&quot;/login.html&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">username-parameter</span>=<span class="string">&quot;username&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">password-parameter</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">login-processing-url</span>=<span class="string">&quot;/login.do&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">default-target-url</span>=<span class="string">&quot;/index.html&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">authentication-failure-url</span>=<span class="string">&quot;/login.html&quot;</span></span></span><br><span class="line"><span class="tag">                     /&gt;</span></span><br></pre></td></tr></table></figure>

<p>第四步：修改spring-security.xml文件，关闭CsrfFilter过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  csrf：对应CsrfFilter过滤器</span></span><br><span class="line"><span class="comment">  disabled：是否启用CsrfFilter过滤器，如果使用自定义登录页面需要关闭此项，否则登录操作会被禁用（403）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:csrf</span> <span class="attr">disabled</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">security:csrf</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-从数据库查询用户信息"><a href="#3-从数据库查询用户信息" class="headerlink" title="3 从数据库查询用户信息"></a>3 从数据库查询用户信息</h3><p>如果我们要从数据库动态查询用户信息，就必须按照spring security框架的要求提供一个实现UserDetailsService接口的实现类，并按照框架的要求进行配置即可。框架会自动调用实现类中的方法并自动进行密码校验。</p>
<p>实现类代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="comment">//模拟数据库中的用户数据</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  Map&lt;String, com.itheima.pojo.User&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        com.itheima.pojo.<span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.itheima.pojo.User();</span><br><span class="line">        user1.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        user1.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        com.itheima.pojo.<span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.itheima.pojo.User();</span><br><span class="line">        user2.setUsername(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">        user2.setPassword(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line"></span><br><span class="line">        map.put(user1.getUsername(),user1);</span><br><span class="line">        map.put(user2.getUsername(),user2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名加载用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UsernameNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;username:&quot;</span> + username);</span><br><span class="line">        com.itheima.pojo.<span class="type">User</span> <span class="variable">userInDb</span> <span class="operator">=</span> map.get(username);<span class="comment">//模拟根据用户名查询数据库</span></span><br><span class="line">        <span class="keyword">if</span>(userInDb == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//根据用户名没有查询到用户</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟数据库中的密码，后期需要查询数据库</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">passwordInDb</span> <span class="operator">=</span> <span class="string">&quot;&#123;noop&#125;&quot;</span> + userInDb.getPassword();</span><br><span class="line"></span><br><span class="line">        List&lt;GrantedAuthority&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//授权，后期需要改为查询数据库动态获得用户拥有的权限和角色</span></span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;add&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;delete&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;ROLE_ADMIN&quot;</span>));</span><br><span class="line">      	</span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(username,passwordInDb,list);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>spring-security.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  authentication-manager：认证管理器，用于处理认证操作</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:authentication-manager</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    authentication-provider：认证提供者，执行具体的认证逻辑</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">security:authentication-provider</span> <span class="attr">user-service-ref</span>=<span class="string">&quot;userService&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">security:authentication-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">security:authentication-manager</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.security.UserService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>本章节我们提供了UserService实现类，并且按照框架的要求实现了UserDetailsService接口。在spring配置文件中注册UserService，指定其作为认证过程中根据用户名查询用户信息的处理类。当我们进行登录操作时，spring security框架会调用UserService的loadUserByUsername方法查询用户信息，并根据此方法中提供的密码和用户页面输入的密码进行比对来实现认证操作。</p>
<h3 id="4-对密码进行加密"><a href="#4-对密码进行加密" class="headerlink" title="4 对密码进行加密"></a>4 对密码进行加密</h3><p>前面我们使用的密码都是明文的，这是非常不安全的。一般情况下用户的密码需要进行加密后再保存到数据库中。</p>
<p>常见的密码加密方式有：</p>
<p>3DES、AES、DES：使用对称加密算法，可以通过解密来还原出原始密码</p>
<p>MD5、SHA1：使用单向HASH算法，无法通过计算还原出原始密码，但是可以建立彩虹表进行查表破解</p>
<p>bcrypt：将salt随机并混入最终加密后的密码，验证时也无需单独提供之前的salt，从而无需单独处理salt问题</p>
<p>加密后的格式一般为：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">$2a$10$/bTVvqqlH9UiE0ZJZ7N2Me3RIgUCdgMheyTgV0B4cMCSokPa.6oCa</span></span><br></pre></td></tr></table></figure>

<p>加密后字符串的长度为固定的60位。其中：$是分割符，无意义；2a是bcrypt加密版本号；10是cost的值；而后的前22位是salt值；再然后的字符串就是密码的密文了。</p>
<p>实现步骤：</p>
<p>第一步：在spring-security.xml文件中指定密码加密对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置密码加密对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;passwordEncoder&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--认证管理器，用于处理认证操作--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:authentication-manager</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--认证提供者，执行具体的认证逻辑--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">security:authentication-provider</span> <span class="attr">user-service-ref</span>=<span class="string">&quot;userService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定密码加密策略--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:password-encoder</span> <span class="attr">ref</span>=<span class="string">&quot;passwordEncoder&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">security:authentication-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">security:authentication-manager</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启spring注解使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="name">context:annotation-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二步：修改UserService实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BCryptPasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  Map&lt;String, com.itheima.pojo.User&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//模拟数据库中的用户数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initData</span><span class="params">()</span>&#123;</span><br><span class="line">        com.itheima.pojo.<span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.itheima.pojo.User();</span><br><span class="line">        user1.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        user1.setPassword(passwordEncoder.encode(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line"></span><br><span class="line">        com.itheima.pojo.<span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.itheima.pojo.User();</span><br><span class="line">        user2.setUsername(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">        user2.setPassword(passwordEncoder.encode(<span class="string">&quot;1234&quot;</span>));</span><br><span class="line"></span><br><span class="line">        map.put(user1.getUsername(),user1);</span><br><span class="line">        map.put(user2.getUsername(),user2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名加载用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UsernameNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        initData();</span><br><span class="line">        System.out.println(<span class="string">&quot;username:&quot;</span> + username);</span><br><span class="line">        com.itheima.pojo.<span class="type">User</span> <span class="variable">userInDb</span> <span class="operator">=</span> map.get(username);<span class="comment">//模拟根据用户名查询数据库</span></span><br><span class="line">        <span class="keyword">if</span>(userInDb == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//根据用户名没有查询到用户</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">passwordInDb</span> <span class="operator">=</span> userInDb.getPassword();<span class="comment">//模拟数据库中的密码，后期需要查询数据库</span></span><br><span class="line"></span><br><span class="line">        List&lt;GrantedAuthority&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//授权，后期需要改为查询数据库动态获得用户拥有的权限和角色</span></span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;add&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;delete&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;ROLE_ADMIN&quot;</span>));</span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(username,passwordInDb,list);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-配置多种校验规则"><a href="#5-配置多种校验规则" class="headerlink" title="5 配置多种校验规则"></a>5 配置多种校验规则</h3><p>为了测试方便，首先在项目中创建a.html、b.html、c.html、d.html几个页面</p>
<p>修改spring-security.xml文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--只要认证通过就可以访问--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:intercept-url</span> <span class="attr">pattern</span>=<span class="string">&quot;/index.jsp&quot;</span>  <span class="attr">access</span>=<span class="string">&quot;isAuthenticated()&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:intercept-url</span> <span class="attr">pattern</span>=<span class="string">&quot;/a.html&quot;</span>  <span class="attr">access</span>=<span class="string">&quot;isAuthenticated()&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--拥有add权限就可以访问b.html页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:intercept-url</span> <span class="attr">pattern</span>=<span class="string">&quot;/b.html&quot;</span>  <span class="attr">access</span>=<span class="string">&quot;hasAuthority(&#x27;add&#x27;)&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--拥有ROLE_ADMIN角色就可以访问c.html页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:intercept-url</span> <span class="attr">pattern</span>=<span class="string">&quot;/c.html&quot;</span>  <span class="attr">access</span>=<span class="string">&quot;hasRole(&#x27;ROLE_ADMIN&#x27;)&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--拥有ROLE_ADMIN角色就可以访问d.html页面，</span></span><br><span class="line"><span class="comment">	注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:intercept-url</span> <span class="attr">pattern</span>=<span class="string">&quot;/d.html&quot;</span>  <span class="attr">access</span>=<span class="string">&quot;hasRole(&#x27;ADMIN&#x27;)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-注解方式权限控制"><a href="#6-注解方式权限控制" class="headerlink" title="6 注解方式权限控制"></a>6 注解方式权限控制</h3><p>Spring Security除了可以在配置文件中配置权限校验规则，还可以使用注解方式控制类中方法的调用。例如Controller中的某个方法要求必须具有某个权限才可以访问，此时就可以使用Spring Security框架提供的注解方式进行控制。</p>
<p>实现步骤：</p>
<p>第一步：在spring-security.xml文件中配置组件扫描，用于扫描Controller</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二步：在spring-security.xml文件中开启权限注解支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启注解方式权限控制--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:global-method-security</span> <span class="attr">pre-post-annotations</span>=<span class="string">&quot;enabled&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>第三步：创建Controller类并在Controller的方法上加入注解进行权限控制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;add&#x27;)&quot;)</span><span class="comment">//表示用户必须拥有add权限才能调用当前方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ROLE_ADMIN&#x27;)&quot;)</span><span class="comment">//表示用户必须拥有ROLE_ADMIN角色才能调用当前方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;delete...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-退出登录"><a href="#7-退出登录" class="headerlink" title="7 退出登录"></a>7 退出登录</h3><p>用户完成登录后Spring Security框架会记录当前用户认证状态为已认证状态，即表示用户登录成功了。那用户如何退出登录呢？我们可以在spring-security.xml文件中进行如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  logout：退出登录</span></span><br><span class="line"><span class="comment">  logout-url：退出登录操作对应的请求路径</span></span><br><span class="line"><span class="comment">  logout-success-url：退出登录后的跳转页面</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:logout</span> <span class="attr">logout-url</span>=<span class="string">&quot;/logout.do&quot;</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">logout-success-url</span>=<span class="string">&quot;/login.html&quot;</span> <span class="attr">invalidate-session</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">       </span><br></pre></td></tr></table></figure>

<p>通过上面的配置可以发现，如果用户要退出登录，只需要请求&#x2F;logout.do这个URL地址就可以，同时会将当前session失效，最后页面会跳转到login.html页面。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot学习</title>
    <url>/posts/3537957105.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><h2 id="1-SpringBoot简介"><a href="#1-SpringBoot简介" class="headerlink" title="1.SpringBoot简介"></a>1.SpringBoot简介</h2><p><code>SpringBoot</code> 是由 <code>Pivotal</code> 团队提供的全新框架，其设计目的是用来&#x3D;&#x3D;简化&#x3D;&#x3D; <code>Spring</code> 应用的&#x3D;&#x3D;初始搭建&#x3D;&#x3D;以及&#x3D;&#x3D;开发过程&#x3D;&#x3D;。</p>
<p>使用了 <code>Spring</code> 框架后已经简化了我们的开发。而 <code>SpringBoot</code> 又是对 <code>Spring</code> 开发进行简化的，可想而知 <code>SpringBoot</code> 使用的简单及广泛性。既然 <code>SpringBoot</code> 是用来简化 <code>Spring</code> 开发的，那我们就先回顾一下，以 <code>SpringMVC</code> 开发为例：</p>
<ol>
<li><strong>创建工程，并在 <code>pom.xml</code> 配置文件中配置所依赖的坐标</strong></li>
</ol>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911132335452.png" alt="image-20210911132335452" style="zoom:50%;" />

<ol start="2">
<li><p><strong>编写 <code>web3.0</code> 的配置类</strong></p>
<p>作为 <code>web</code> 程序，<code>web3.0</code> 的配置类不能缺少，而这个配置类还是比较麻烦的，代码如下</p>
</li>
</ol>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911133112602.png" alt="image-20210911133112602" style="zoom:50%;" />

<ol start="3">
<li><strong>编写 <code>SpringMVC</code> 的配置类</strong></li>
</ol>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911133219847.png" alt="image-20210911133219847" style="zoom:50%;" />

<p>​	做到这只是将工程的架子搭起来。要想被外界访问，最起码还需要提供一个 <code>Controller</code> 类，在该类中提供一个方法。</p>
<ol start="4">
<li><strong>编写 <code>Controller</code> 类</strong></li>
</ol>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911133532151.png" alt="image-20210911133532151" style="zoom:50%;" />

<p>从上面的 <code>SpringMVC</code> 程序开发可以看到，前三步都是在搭建环境，而且这三步基本都是固定的。<code>SpringBoot</code> 就是对这三步进行简化了。接下来我们通过一个入门案例来体现 <code>SpingBoot</code> 简化 <code>Spring</code> 开发。</p>
<h3 id="1-1-SpringBoot快速入门"><a href="#1-1-SpringBoot快速入门" class="headerlink" title="1.1  SpringBoot快速入门"></a>1.1  SpringBoot快速入门</h3><h4 id="1-1-1-开发步骤"><a href="#1-1-1-开发步骤" class="headerlink" title="1.1.1  开发步骤"></a>1.1.1  开发步骤</h4><p><code>SpringBoot</code> 开发起来特别简单，分为如下几步：</p>
<ul>
<li>创建新模块，选择Spring初始化，并配置模块相关基础信息</li>
<li>选择当前模块需要使用的技术集</li>
<li>开发控制器类</li>
<li>运行自动生成的Application类</li>
</ul>
<p>知道了 <code>SpringBoot</code> 的开发步骤后，接下来我们进行具体的操作</p>
<h5 id="1-1-1-1-创建新模块"><a href="#1-1-1-1-创建新模块" class="headerlink" title="1.1.1.1  创建新模块"></a>1.1.1.1  创建新模块</h5><ul>
<li>点击 <code>+</code> 选择 <code>New Module</code> 创建新模块</li>
</ul>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911155135008.png" alt="image-20210911155135008" style="zoom:60%;" />

<ul>
<li><p>选择 <code>Spring Initializr</code> ，用来创建 <code>SpringBoot</code> 工程</p>
<p>以前我们选择的是 <code>Maven</code> ，今天选择 <code>Spring Initializr</code> 来快速构建 <code>SpringBoot</code> 工程。而在 <code>Module SDK</code> 这一项选择我们安装的 <code>JDK</code> 版本。</p>
</li>
</ul>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911155249493.png" alt="image-20210911155249493" style="zoom:60%;" />

<ul>
<li><p>对 <code>SpringBoot</code> 工程进行相关的设置</p>
<p>我们使用这种方式构建的 <code>SpringBoot</code> 工程其实也是 <code>Maven</code> 工程，而该方式只是一种快速构建的方式而已。</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911155916899.png" alt="image-20210911155916899" style="zoom:67%;" />

<blockquote>
<p>&#x3D;&#x3D;注意：打包方式这里需要设置为 <code>Jar</code>&#x3D;&#x3D;</p>
</blockquote>
</li>
<li><p>选中 <code>Web</code>，然后勾选 <code>Spring Web</code></p>
<p>由于我们需要开发一个 <code>web</code> 程序，使用到了 <code>SpringMVC</code> 技术，所以按照下图红框进行勾选</p>
</li>
</ul>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911160040328.png" alt="image-20210911160040328" style="zoom:60%;" />

<ul>
<li>下图界面不需要任何修改，直接点击 <code>Finish</code> 完成 <code>SpringBoot</code> 工程的构建</li>
</ul>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911160353534.png" alt="image-20210911160353534" style="zoom:70%;" />

<p>经过以上步骤后就创建了如下结构的模块，它会帮我们自动生成一个 <code>Application</code> 类，而该类一会再启动服务器时会用到</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911160541833.png" alt="image-20210911160541833" style="zoom:80%;" />

<blockquote>
<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p>
<ol>
<li><p>在创建好的工程中不需要创建配置类</p>
</li>
<li><p>创建好的项目会自动生成其他的一些文件，而这些文件目前对我们来说没有任何作用，所以可以将这些文件删除。</p>
<p>可以删除的目录和文件如下：</p>
<ul>
<li><code>.mvn</code>	</li>
<li><code>.gitignore</code></li>
<li><code>HELP.md</code></li>
<li><code>mvnw</code></li>
<li><code>mvnw.cmd</code></li>
</ul>
</li>
</ol>
</blockquote>
<h5 id="1-1-1-2-创建-Controller"><a href="#1-1-1-2-创建-Controller" class="headerlink" title="1.1.1.2  创建 Controller"></a>1.1.1.2  创建 <code>Controller</code></h5><p>在  <code>com.itheima.controller</code> 包下创建 <code>BookController</code> ，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id ==&gt; &quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-1-1-3-启动服务器"><a href="#1-1-1-3-启动服务器" class="headerlink" title="1.1.1.3  启动服务器"></a>1.1.1.3  启动服务器</h5><p>运行 <code>SpringBoot</code> 工程不需要使用本地的 <code>Tomcat</code> 和 插件，只运行项目 <code>com.itheima</code> 包下的 <code>Application</code> 类，我们就可以在控制台看出如下信息</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911165642280.png" alt="image-20210911165642280"></p>
<h5 id="1-1-1-4-进行测试"><a href="#1-1-1-4-进行测试" class="headerlink" title="1.1.1.4  进行测试"></a>1.1.1.4  进行测试</h5><p>使用 <code>Postman</code> 工具来测试我们的程序</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911160850121.png" alt="image-20210911160850121"></p>
<p>通过上面的入门案例我们可以看到使用 <code>SpringBoot</code> 进行开发，使整个开发变得很简单，那它是如何做到的呢？</p>
<p>要研究这个问题，我们需要看看 <code>Application</code> 类和 <code>pom.xml</code> 都书写了什么。先看看 <code>Applicaion</code> 类，该类内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个类中的东西很简单，就在类上添加了一个 <code>@SpringBootApplication</code> 注解，而在主方法中就一行代码。我们在启动服务器时就是执行的该类中的主方法。</p>
<p>再看看 <code>pom.xml</code> 配置文件中的内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--指定了一个父工程，父工程中的东西在该工程中可以继承过来使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot_01_quickstart<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--JDK 的版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该依赖就是我们在创建 SpringBoot 工程勾选的那个 Spring Web 产生的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--这个是单元测试的依赖，我们现在没有进行单元测试，所以这个依赖现在可以没有--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这个插件是在打包时需要的，而这里暂时还没有用到--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们代码之所以能简化，就是因为指定的父工程和 <code>Spring Web</code> 依赖实现的。具体的我们后面在聊。</p>
<h4 id="1-1-2-对比"><a href="#1-1-2-对比" class="headerlink" title="1.1.2  对比"></a>1.1.2  对比</h4><p>做完 <code>SpringBoot</code> 的入门案例后，接下来对比一下 <code>Spring</code> 程序和 <code>SpringBoot</code> 程序。如下图</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911172200292.png" alt="image-20210911172200292" style="zoom:60%;" />

<ul>
<li><p><strong>坐标</strong></p>
<p><code>Spring</code> 程序中的坐标需要自己编写，而且坐标非常多</p>
<p><code>SpringBoot</code> 程序中的坐标是我们在创建工程时进行勾选自动生成的</p>
</li>
<li><p><strong>web3.0配置类</strong></p>
<p><code>Spring</code> 程序需要自己编写这个配置类。这个配置类大家之前编写过，肯定感觉很复杂</p>
<p><code>SpringBoot</code> 程序不需要我们自己书写</p>
</li>
<li><p><strong>配置类</strong></p>
<p><code>Spring/SpringMVC</code> 程序的配置类需要自己书写。而 <code>SpringBoot</code>  程序则不需要书写。</p>
</li>
</ul>
<blockquote>
<p>&#x3D;&#x3D;注意：基于Idea的 <code>Spring Initializr</code> 快速构建 <code>SpringBoot</code> 工程时需要联网。&#x3D;&#x3D; </p>
</blockquote>
<h4 id="1-1-3-官网构建工程"><a href="#1-1-3-官网构建工程" class="headerlink" title="1.1.3  官网构建工程"></a>1.1.3  官网构建工程</h4><p>在入门案例中之所以能快速构建 <code>SpringBoot</code> 工程，是因为 <code>Idea</code> 使用了官网提供了快速构建 <code>SpringBoot</code> 工程的组件实现的。那如何在官网进行工程构建呢？通过如下步骤构建</p>
<h5 id="1-1-3-1-进入SpringBoot官网"><a href="#1-1-3-1-进入SpringBoot官网" class="headerlink" title="1.1.3.1  进入SpringBoot官网"></a>1.1.3.1  进入SpringBoot官网</h5><p>官网地址如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://spring.io/projects/spring-boot</span><br></pre></td></tr></table></figure>

<p>进入到 <code>SpringBoot</code> 官网后拖到最下方就可以看到如下内容</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911173712014.png" alt="image-20210911173712014" style="zoom:60%;" />

<p>然后点击 <code>Spring Initializr</code> 超链接就会跳转到如下页面</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911174110687.png" alt="image-20210911174110687"></p>
<p>这个页面内容是不是感觉很眼熟的，这和我们使用 <code>Idea</code> 快速构建 <code>SpringBoot</code> 工程的界面基本相同。在上面页面输入对应的信息</p>
<h5 id="1-1-3-2-选择依赖"><a href="#1-1-3-2-选择依赖" class="headerlink" title="1.1.3.2  选择依赖"></a>1.1.3.2  选择依赖</h5><p>选择 <code>Spring Web</code> 可以点击上图右上角的 <code>ADD DEPENDENCIES... CTRL + B</code> 按钮，就会出现如下界面</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911174650679.png" alt="image-20210911174650679"></p>
<h5 id="1-1-3-3-生成工程"><a href="#1-1-3-3-生成工程" class="headerlink" title="1.1.3.3  生成工程"></a>1.1.3.3  生成工程</h5><p>以上步骤完成后就可以生成 <code>SpringBoot</code> 工程了。在页面的最下方点击 <code>GENERATE CTRL + 回车</code> 按钮生成工程并下载到本地，如下图所示</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911175222857.png" alt="image-20210911175222857"></p>
<p>打开下载好的压缩包可以看到工程结构和使用 <code>Idea</code> 生成的一模一样，如下图</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911175502834.png" alt="image-20210911175502834" style="zoom:80%;" />

<p>而打开 <code>pom.xml</code> 文件，里面也包含了父工程和 <code>Spring Web</code> 的依赖。</p>
<p>通过上面官网的操作，我们知道 <code>Idea</code> 中快速构建 <code>SpringBoot</code> 工程其实就是使用的官网的快速构建组件，那以后即使没有 <code>Idea</code> 也可以使用官网的方式构建 <code>SpringBoot</code> 工程。</p>
<h4 id="1-1-4-SpringBoot工程快速启动"><a href="#1-1-4-SpringBoot工程快速启动" class="headerlink" title="1.1.4  SpringBoot工程快速启动"></a>1.1.4  SpringBoot工程快速启动</h4><h5 id="1-1-4-1-问题导入"><a href="#1-1-4-1-问题导入" class="headerlink" title="1.1.4.1  问题导入"></a>1.1.4.1  问题导入</h5><img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911180828611.png" alt="image-20210911180828611" style="zoom:50%;" />

<p>以后我们和前端开发人员协同开发，而前端开发人员需要测试前端程序就需要后端开启服务器，这就受制于后端开发人员。为了摆脱这个受制，前端开发人员尝试着在自己电脑上安装 <code>Tomcat</code> 和 <code>Idea</code> ，在自己电脑上启动后端程序，这显然不现实。</p>
<p>我们后端可以将 <code>SpringBoot</code> 工程打成 <code>jar</code> 包，该 <code>jar</code> 包运行不依赖于 <code>Tomcat</code> 和 <code>Idea</code> 这些工具也可以正常运行，只是这个 <code>jar</code> 包在运行过程中连接和我们自己程序相同的 <code>Mysql</code> 数据库即可。这样就可以解决这个问题，如下图</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911181714437.png" alt="image-20210911181714437" style="zoom:50%;" />

<p>那现在问题是如何打包呢？</p>
<h5 id="1-1-4-2-打包"><a href="#1-1-4-2-打包" class="headerlink" title="1.1.4.2  打包"></a>1.1.4.2  打包</h5><p>由于我们在构建 <code>SpringBoot</code> 工程时已经在 <code>pom.xml</code> 中配置了如下插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所以我们只需要使用 <code>Maven</code> 的 <code>package</code> 指令打包就会在 <code>target</code> 目录下生成对应的 <code>Jar</code> 包。</p>
<blockquote>
<p>&#x3D;&#x3D;注意：该插件必须配置，不然打好的 <code>jar</code> 包也是有问题的。&#x3D;&#x3D;</p>
</blockquote>
<h5 id="1-1-4-3-启动"><a href="#1-1-4-3-启动" class="headerlink" title="1.1.4.3  启动"></a>1.1.4.3  启动</h5><p>进入 <code>jar</code> 包所在位置，在 <code>命令提示符</code> 中输入如下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jar -jar springboot_01_quickstart-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p>执行上述命令就可以看到 <code>SpringBoot</code> 运行的日志信息</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210911182956629.png" alt="image-20210911182956629" style="zoom:60%;" />

<h3 id="1-2-SpringBoot概述"><a href="#1-2-SpringBoot概述" class="headerlink" title="1.2  SpringBoot概述"></a>1.2  SpringBoot概述</h3><p><code>SpringBoot</code> 是由Pivotal团队提供的全新框架，其设计目的是用来&#x3D;&#x3D;简化&#x3D;&#x3D;Spring应用的&#x3D;&#x3D;初始搭建&#x3D;&#x3D;以及&#x3D;&#x3D;开发过程&#x3D;&#x3D;。</p>
<p>大家已经感受了 <code>SpringBoot</code> 程序，回过头看看 <code>SpringBoot</code> 主要作用是什么，就是简化 <code>Spring</code> 的搭建过程和开发过程。</p>
<p>原始 <code>Spring</code> 环境搭建和开发存在以下问题：</p>
<ul>
<li>配置繁琐</li>
<li>依赖设置繁琐</li>
</ul>
<p><code>SpringBoot</code> 程序优点恰巧就是针对 <code>Spring</code> 的缺点</p>
<ul>
<li>自动配置。这个是用来解决 <code>Spring</code> 程序配置繁琐的问题</li>
<li>起步依赖。这个是用来解决 <code>Spring</code> 程序依赖设置繁琐的问题</li>
<li>辅助功能（内置服务器,…）。我们在启动 <code>SpringBoot</code> 程序时既没有使用本地的 <code>tomcat</code> 也没有使用 <code>tomcat</code> 插件，而是使用 <code>SpringBoot</code> 内置的服务器。</li>
</ul>
<p>接下来我们来说一下 <code>SpringBoot</code> 的起步依赖</p>
<h4 id="1-2-1-起步依赖"><a href="#1-2-1-起步依赖" class="headerlink" title="1.2.1  起步依赖"></a>1.2.1  起步依赖</h4><p>我们使用 <code>Spring Initializr</code>  方式创建的 <code>Maven</code> 工程的的 <code>pom.xml</code> 配置文件中自动生成了很多包含 <code>starter</code> 的依赖，如下图</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210918220338109.png" alt="image-20210918220338109" style="zoom:70%;" />

<p>这些依赖就是&#x3D;&#x3D;启动依赖&#x3D;&#x3D;，接下来我们探究一下他是如何实现的。</p>
<h5 id="1-2-1-1-探索父工程"><a href="#1-2-1-1-探索父工程" class="headerlink" title="1.2.1.1  探索父工程"></a>1.2.1.1  探索父工程</h5><p>从上面的文件中可以看到指定了一个父工程，我们进入到父工程，发现父工程中又指定了一个父工程，如下图所示</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210918220855024.png" alt="image-20210918220855024" style="zoom:80%;" />

<p>再进入到该父工程中，在该工程中我们可以看到配置内容结构如下图所示</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210918221042947.png" alt="image-20210918221042947" style="zoom:80%;" />

<p>上图中的 <code>properties</code> 标签中定义了各个技术软件依赖的版本，避免了我们在使用不同软件技术时考虑版本的兼容问题。在 <code>properties</code> 中我们找 <code>servlet</code>  和 <code>mysql</code> 的版本如下图</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210918221511249.png" alt="image-20210918221511249" style="zoom:80%;" />

<p><code>dependencyManagement</code> 标签是进行依赖版本锁定，但是并没有导入对应的依赖；如果我们工程需要那个依赖只需要引入依赖的 <code>groupid</code> 和 <code>artifactId</code> 不需要定义 <code>version</code>。</p>
<p>而 <code>build</code> 标签中也对插件的版本进行了锁定，如下图</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210918221942453.png" alt="image-20210918221942453" style="zoom:80%;" />

<p>看完了父工程中 <code>pom.xml</code> 的配置后不难理解我们工程的的依赖为什么都没有配置 <code>version</code>。</p>
<h5 id="1-2-1-2-探索依赖"><a href="#1-2-1-2-探索依赖" class="headerlink" title="1.2.1.2  探索依赖"></a>1.2.1.2  探索依赖</h5><p>在我们创建的工程中的 <code>pom.xml</code> 中配置了如下依赖</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210918222321402.png" alt="image-20210918222321402" style="zoom:80%;" />

<p>进入到该依赖，查看 <code>pom.xml</code> 的依赖会发现它引入了如下的依赖</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210918222607469.png" alt="image-20210918222607469" style="zoom:80%;" />

<p>里面的引入了 <code>spring-web</code> 和 <code>spring-webmvc</code> 的依赖，这就是为什么我们的工程中没有依赖这两个包还能正常使用 <code>springMVC</code> 中的注解的原因。</p>
<p>而依赖 <code>spring-boot-starter-tomcat</code> ，从名字基本能确认内部依赖了 <code>tomcat</code>，所以我们的工程才能正常启动。</p>
<p>&#x3D;&#x3D;结论：以后需要使用技术，只需要引入该技术对应的起步依赖即可&#x3D;&#x3D;</p>
<h5 id="1-2-1-3-小结"><a href="#1-2-1-3-小结" class="headerlink" title="1.2.1.3  小结"></a>1.2.1.3  小结</h5><p><strong>starter</strong></p>
<ul>
<li><code>SpringBoot</code> 中常见项目名称，定义了当前项目使用的所有项目坐标，以达到减少依赖配置的目的</li>
</ul>
<p><strong>parent</strong></p>
<ul>
<li><p>所有 <code>SpringBoot</code> 项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的</p>
</li>
<li><p><code>spring-boot-starter-parent</code>（2.5.0）与 <code>spring-boot-starter-parent</code>（2.4.6）共计57处坐标版本不同</p>
</li>
</ul>
<p><strong>实际开发</strong></p>
<ul>
<li><p>使用任意坐标时，仅书写GAV中的G和A，V由SpringBoot提供</p>
<blockquote>
<p>G：groupid</p>
<p>A：artifactId</p>
<p>V：version</p>
</blockquote>
</li>
<li><p>如发生坐标错误，再指定version（要小心版本冲突）</p>
</li>
</ul>
<h4 id="1-2-2-程序启动"><a href="#1-2-2-程序启动" class="headerlink" title="1.2.2  程序启动"></a>1.2.2  程序启动</h4><p>创建的每一个 <code>SpringBoot</code> 程序时都包含一个类似于下面的类，我们将这个类称作引导类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot01QuickstartApplication</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot01QuickstartApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p>
<ul>
<li><p><code>SpringBoot</code> 在创建项目时，采用jar的打包方式</p>
</li>
<li><p><code>SpringBoot</code> 的引导类是项目的入口，运行 <code>main</code> 方法就可以启动项目</p>
<p>因为我们在 <code>pom.xml</code> 中配置了 <code>spring-boot-starter-web</code> 依赖，而该依赖通过前面的学习知道它依赖 <code>tomcat</code> ，所以运行 <code>main</code> 方法就可以使用 <code>tomcat</code> 启动咱们的工程。</p>
</li>
</ul>
<h4 id="1-2-3-切换web服务器"><a href="#1-2-3-切换web服务器" class="headerlink" title="1.2.3  切换web服务器"></a>1.2.3  切换web服务器</h4><p>现在我们启动工程使用的是 <code>tomcat</code> 服务器，那能不能不使用 <code>tomcat</code> 而使用 <code>jetty</code> 服务器，<code>jetty</code> 在我们 <code>maven</code> 高级时讲 <code>maven</code> 私服使用的服务器。而要切换 <code>web</code> 服务器就需要将默认的 <code>tomcat</code> 服务器给排除掉，怎么排除呢？使用 <code>exclusion</code> 标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在我们运行引导类可以吗？运行一下试试，打印的日志信息如下</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210918232512707.png" alt="image-20210918232512707"></p>
<p>程序直接停止了，为什么呢？那是因为排除了 <code>tomcat</code> 服务器，程序中就没有服务器了。所以此时不光要排除 <code>tomcat</code> 服务器，还要引入 <code>jetty</code> 服务器。在 <code>pom.xml</code> 中因为 <code>jetty</code> 的起步依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来再次运行引导类，在日志信息中就可以看到使用的是 <code>jetty</code> 服务器</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210918232904623.png" alt="image-20210918232904623"></p>
<p><strong>小结：</strong></p>
<p>通过切换服务器，我们不难发现在使用 <code>SpringBoot</code> 换技术时只需要导入该技术的起步依赖即可。</p>
<h2 id="2，配置文件"><a href="#2，配置文件" class="headerlink" title="2，配置文件"></a>2，配置文件</h2><h3 id="2-1-配置文件格式"><a href="#2-1-配置文件格式" class="headerlink" title="2.1  配置文件格式"></a>2.1  配置文件格式</h3><p>我们现在启动服务器默认的端口号是 <code>8080</code>，访问路径可以书写为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/books/1</span><br></pre></td></tr></table></figure>

<p>在线上环境我们还是希望将端口号改为 <code>80</code>，这样在访问的时候就可以不写端口号了，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/books/1</span><br></pre></td></tr></table></figure>

<p>而 <code>SpringBoot</code> 程序如何修改呢？<code>SpringBoot</code> 提供了多种属性配置方式</p>
<ul>
<li><p><code>application.properties</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.port=80</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>application.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>application.yaml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>&#x3D;&#x3D;注意：<code>SpringBoot</code> 程序的配置文件名必须是 <code>application</code> ，只是后缀名不同而已。&#x3D;&#x3D;</p>
</blockquote>
<h4 id="2-1-1-环境准备"><a href="#2-1-1-环境准备" class="headerlink" title="2.1.1  环境准备"></a>2.1.1  环境准备</h4><p>创建一个新工程 <code>springboot_02_base_config</code> 用来演示不同的配置文件，工程环境和入门案例一模一样，结构如下：</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917151314753.png" alt="image-20210917151314753" style="zoom:80%;" />

<p>在该工程中的 <code>com.itheima.controller</code> 包下创建一个名为 <code>BookController</code> 的控制器。内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id ==&gt; &quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-1-2-不同配置文件演示"><a href="#2-1-2-不同配置文件演示" class="headerlink" title="2.1.2  不同配置文件演示"></a>2.1.2  不同配置文件演示</h4><ul>
<li><strong>application.properties配置文件</strong></li>
</ul>
<p>现在需要进行配置，配合文件必须放在 <code>resources</code> 目录下，而该目录下有一个名为 <code>application.properties</code> 的配置文件，我们就可以在该配置文件中修改端口号，在该配置文件中书写 <code>port</code> ，<code>Idea</code> 就会提示，如下</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917161422535.png" alt="image-20210917161422535" style="zoom:80%;" />

<p><code>application.properties</code> 配置文件内容如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure>

<p>启动服务，会在控制台打印出日志信息，从日志信息中可以看到绑定的端口号已经修改了</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917161720855.png" alt="image-20210917161720855" style="zoom:80%;" />

<ul>
<li><strong>application.yml配置文件</strong></li>
</ul>
<p>删除 <code>application.properties</code> 配置文件中的内容。在 <code>resources</code> 下创建一个名为 <code>application.yml</code> 的配置文件，在该文件中书写端口号的配置项，格式如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>&#x3D;&#x3D;注意： 在<code>:</code>后，数据前一定要加空格。&#x3D;&#x3D;</p>
</blockquote>
<p>而在 <code>yml</code> 配置文件中也是有提示功能的，我们也可以在该文件中书写 <code>port</code> ，然后 <code>idea</code> 就会提示并书写成上面的格式</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917162512646.png" alt="image-20210917162512646" style="zoom:80%;" />

<p>启动服务，可以在控制台看到绑定的端口号是 <code>81</code></p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917162700711.png" alt="image-20210917162700711"></p>
<ul>
<li><strong>application.yaml配置文件</strong></li>
</ul>
<p>删除 <code>application.yml</code> 配置文件和 <code>application.properties</code> 配置文件内容，然后在 <code>resources</code> 下创建名为 <code>application.yaml</code> 的配置文件，配置内容和后缀名为 <code>yml</code> 的配置文件中的内容相同，只是使用了不同的后缀名而已</p>
<p><code>application.yaml</code> 配置文件内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">83</span></span><br></pre></td></tr></table></figure>

<p>启动服务，在控制台可以看到绑定的端口号</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917163335913.png" alt="image-20210917163335913"></p>
<p>&#x3D;&#x3D;注意：在配合文件中如果没有提示，可以使用一下方式解决&#x3D;&#x3D;</p>
<ul>
<li>点击 <code>File</code> 选中 <code>Project Structure</code></li>
</ul>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917163557071.png" alt="image-20210917163557071" style="zoom:80%;" />

<ul>
<li>弹出如下窗口，按图中标记红框进行选择</li>
</ul>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917163736458.png" alt="image-20210917163736458" style="zoom:70%;" />

<ul>
<li>通过上述操作，会弹出如下窗口</li>
</ul>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917163818051.png" alt="image-20210917163818051" style="zoom:80%;" />

<ul>
<li>点击上图的 <code>+</code> 号，弹出选择该模块的配置文件</li>
</ul>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917163828518.png" alt="image-20210917163828518" style="zoom:80%;" />

<ul>
<li>通过上述几步后，就可以看到如下界面。<code>properties</code> 类型的配合文件有一个，<code>ymal</code> 类型的配置文件有两个</li>
</ul>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917163846243.png" alt="image-20210917163846243" style="zoom:80%;" />

<h4 id="2-1-3-三种配合文件的优先级"><a href="#2-1-3-三种配合文件的优先级" class="headerlink" title="2.1.3  三种配合文件的优先级"></a>2.1.3  三种配合文件的优先级</h4><p>在三种配合文件中分别配置不同的端口号，启动服务查看绑定的端口号。用这种方式就可以看到哪个配置文件的优先级更高一些</p>
<p><code>application.properties</code> 文件内容如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure>

<p><code>application.yml</code> 文件内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure>

<p><code>application.yaml</code> 文件内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure>

<p>启动服务，在控制台可以看到使用的端口号是 <code>80</code>。说明 <code>application.properties</code> 的优先级最高</p>
<p>注释掉 <code>application.properties</code> 配置文件内容。再次启动服务，在控制台可以看到使用的端口号是 <code>81</code>，说明 <code>application.yml</code> 配置文件为第二优先级。</p>
<p>从上述的验证结果可以确定三种配置文件的优先级是：</p>
<p>&#x3D;&#x3D;<code>application.properties</code>  &gt;  <code>application.yml</code>   &gt;  <code>application.yaml</code>&#x3D;&#x3D;</p>
<blockquote>
<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p>
<ul>
<li><p><code>SpringBoot</code> 核心配置文件名为 <code>application</code></p>
</li>
<li><p><code>SpringBoot</code> 内置属性过多，且所有属性集中在一起修改，在使用时，通过提示键+关键字修改属性</p>
<p>例如要设置日志的级别时，可以在配置文件中书写 <code>logging</code>，就会提示出来。配置内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure></li>
</ul>
</blockquote>
<h3 id="2-2-yaml格式"><a href="#2-2-yaml格式" class="headerlink" title="2.2  yaml格式"></a>2.2  yaml格式</h3><p>上面讲了三种不同类型的配置文件，而 <code>properties</code> 类型的配合文件之前我们学习过，接下来我们重点学习 <code>yaml</code> 类型的配置文件。</p>
<p><strong>YAML（YAML Ain’t Markup Language），一种数据序列化格式。</strong>这种格式的配置文件在近些年已经占有主导地位，那么这种配置文件和前期使用的配置文件是有一些优势的，我们先看之前使用的配置文件。</p>
<p>最开始我们使用的是 <code>xml</code> ，格式如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">enterprise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>16<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tel</span>&gt;</span>4006184000<span class="tag">&lt;/<span class="name">tel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">enterprise</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而 <code>properties</code> 类型的配置文件如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">enterprise.name</span>=<span class="string">itcast</span></span><br><span class="line"><span class="attr">enterprise.age</span>=<span class="string">16</span></span><br><span class="line"><span class="attr">enterprise.tel</span>=<span class="string">4006184000</span></span><br></pre></td></tr></table></figure>

<p><code>yaml</code> 类型的配置文件内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">	<span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">	<span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">	<span class="attr">tel:</span> <span class="number">4006184000</span></span><br></pre></td></tr></table></figure>

<p><strong>优点：</strong></p>
<ul>
<li><p>容易阅读</p>
<p><code>yaml</code> 类型的配置文件比 <code>xml</code> 类型的配置文件更容易阅读，结构更加清晰</p>
</li>
<li><p>容易与脚本语言交互</p>
</li>
<li><p>以数据为核心，重数据轻格式</p>
<p><code>yaml</code> 更注重数据，而 <code>xml</code> 更注重格式</p>
</li>
</ul>
<p><strong>YAML 文件扩展名：</strong></p>
<ul>
<li><code>.yml</code> (主流)</li>
<li><code>.yaml</code></li>
</ul>
<p>上面两种后缀名都可以，以后使用更多的还是 <code>yml</code> 的。</p>
<h4 id="2-2-1-语法规则"><a href="#2-2-1-语法规则" class="headerlink" title="2.2.1  语法规则"></a>2.2.1  语法规则</h4><ul>
<li><p>大小写敏感</p>
</li>
<li><p>属性层级关系使用多行描述，每行结尾使用冒号结束</p>
</li>
<li><p>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</p>
<p>空格的个数并不重要，只要保证同层级的左侧对齐即可。</p>
</li>
<li><p>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</p>
</li>
<li><p># 表示注释</p>
</li>
</ul>
<p>&#x3D;&#x3D;核心规则：数据前面要加空格与冒号隔开&#x3D;&#x3D;</p>
<p>数组数据在数据书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔，例如</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">  <span class="attr">tel:</span> <span class="number">4006184000</span></span><br><span class="line">  <span class="attr">subject:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">大数据</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-yaml配置文件数据读取"><a href="#2-3-yaml配置文件数据读取" class="headerlink" title="2.3  yaml配置文件数据读取"></a>2.3  yaml配置文件数据读取</h3><h4 id="2-3-1-环境准备"><a href="#2-3-1-环境准备" class="headerlink" title="2.3.1  环境准备"></a>2.3.1  环境准备</h4><p>新创建一个名为 <code>springboot_03_read_data</code> 的 <code>SpringBoot</code> 工程，目录结构如下</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917172736484.png" alt="image-20210917172736484" style="zoom:80%;" />

<p>在 <code>com.itheima.controller</code> 包写创建名为 <code>BookController</code> 的控制器，内容如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id ==&gt; &quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>com.itheima.domain</code> 包下创建一个名为 <code>Enterprise</code> 的实体类等会用来封装数据，内容如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enterprise</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> String[] subject;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//setter and getter</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>resources</code> 下创建一个名为 <code>application.yml</code> 的配置文件，里面配置了不同的数据，内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">lesson:</span> <span class="string">SpringBoot</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">  <span class="attr">tel:</span> <span class="number">4006184000</span></span><br><span class="line">  <span class="attr">subject:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">大数据</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-2-读取配置数据"><a href="#2-3-2-读取配置数据" class="headerlink" title="2.3.2  读取配置数据"></a>2.3.2  读取配置数据</h4><h5 id="2-3-2-1-使用-Value注解"><a href="#2-3-2-1-使用-Value注解" class="headerlink" title="2.3.2.1  使用 @Value注解"></a>2.3.2.1  使用 @Value注解</h5><p>使用 <code>@Value(&quot;表达式&quot;)</code> 注解可以从配合文件中读取数据，注解中用于读取属性名引用方式是：<code>$&#123;一级属性名.二级属性名……&#125;</code></p>
<p>我们可以在 <code>BookController</code> 中使用 <code>@Value</code>  注解读取配合文件数据，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;lesson&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lesson;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;enterprise.subject[0]&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String subject_00;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(lesson);</span><br><span class="line">        System.out.println(port);</span><br><span class="line">        System.out.println(subject_00);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-2-2-Environment对象"><a href="#2-3-2-2-Environment对象" class="headerlink" title="2.3.2.2  Environment对象"></a>2.3.2.2  Environment对象</h5><p>上面方式读取到的数据特别零散，<code>SpringBoot</code> 还可以使用 <code>@Autowired</code> 注解注入 <code>Environment</code> 对象的方式读取数据。这种方式 <code>SpringBoot</code> 会将配置文件中所有的数据封装到 <code>Environment</code> 对象中，如果需要使用哪个数据只需要通过调用 <code>Environment</code> 对象的 <code>getProperty(String name)</code> 方法获取。具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;lesson&quot;</span>));</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;enterprise.name&quot;</span>));</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;enterprise.subject[0]&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>&#x3D;&#x3D;注意：这种方式，框架内容大量数据，而在开发中我们很少使用。&#x3D;&#x3D;</p>
</blockquote>
<h5 id="2-3-2-3-自定义对象"><a href="#2-3-2-3-自定义对象" class="headerlink" title="2.3.2.3  自定义对象"></a>2.3.2.3  自定义对象</h5><p><code>SpringBoot</code> 还提供了将配置文件中的数据封装到我们自定义的实体类对象中的方式。具体操作如下：</p>
<ul>
<li><p>将实体类 <code>bean</code> 的创建交给 <code>Spring</code> 管理。</p>
<p>在类上添加 <code>@Component</code> 注解</p>
</li>
<li><p>使用 <code>@ConfigurationProperties</code> 注解表示加载配置文件</p>
<p>在该注解中也可以使用 <code>prefix</code> 属性指定只加载指定前缀的数据</p>
</li>
<li><p>在 <code>BookController</code> 中进行注入</p>
</li>
</ul>
<p><strong>具体代码如下：</strong></p>
<p><code>Enterprise</code> 实体类内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;enterprise&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enterprise</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> String[] subject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTel</span><span class="params">(String tel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tel = tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getSubject() &#123;</span><br><span class="line">        <span class="keyword">return</span> subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSubject</span><span class="params">(String[] subject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Enterprise&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, tel=&#x27;&quot;</span> + tel + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, subject=&quot;</span> + Arrays.toString(subject) +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>BookController</code> 内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Enterprise enterprise;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(enterprise.getName());</span><br><span class="line">        System.out.println(enterprise.getAge());</span><br><span class="line">        System.out.println(enterprise.getSubject());</span><br><span class="line">        System.out.println(enterprise.getTel());</span><br><span class="line">        System.out.println(enterprise.getSubject()[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p>
<p>使用第三种方式，在实体类上有如下警告提示</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917180919390.png" alt="image-20210917180919390" style="zoom:70%;" />

<p>这个警告提示解决是在 <code>pom.xml</code> 中添加如下依赖即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-多环境配置"><a href="#2-4-多环境配置" class="headerlink" title="2.4  多环境配置"></a>2.4  多环境配置</h3><p>以后在工作中，对于开发环境、测试环境、生产环境的配置肯定都不相同，比如我们开发阶段会在自己的电脑上安装 <code>mysql</code> ，连接自己电脑上的 <code>mysql</code> 即可，但是项目开发完毕后要上线就需要该配置，将环境的配置改为线上环境的。</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917185253557.png" alt="image-20210917185253557" style="zoom:60%;" />

<p>来回的修改配置会很麻烦，而 <code>SpringBoot</code> 给开发者提供了多环境的快捷配置，需要切换环境时只需要改一个配置即可。不同类型的配置文件多环境开发的配置都不相同，接下来对不同类型的配置文件进行说明</p>
<h4 id="2-4-1-yaml文件"><a href="#2-4-1-yaml文件" class="headerlink" title="2.4.1  yaml文件"></a>2.4.1  yaml文件</h4><p>在 <code>application.yml</code> 中使用 <code>---</code> 来分割不同的配置，内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开发</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span> <span class="comment">#给开发环境起的名字</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#生产</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span> <span class="comment">#给生产环境起的名字</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span> <span class="comment">#给测试环境起的名字</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>上面配置中 <code>spring.profiles</code> 是用来给不同的配置起名字的。而如何告知 <code>SpringBoot</code> 使用哪段配置呢？可以使用如下配置来启用都一段配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置启用的环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span>  <span class="comment">#表示使用的是开发环境的配置</span></span><br></pre></td></tr></table></figure>

<p>综上所述，<code>application.yml</code> 配置文件内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置启用的环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#开发</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#生产</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p>
<p>在上面配置中给不同配置起名字的 <code>spring.profiles</code> 配置项已经过时。最新用来起名字的配置项是 </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开发</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-2-properties文件"><a href="#2-4-2-properties文件" class="headerlink" title="2.4.2  properties文件"></a>2.4.2  properties文件</h4><p><code>properties</code> 类型的配置文件配置多环境需要定义不同的配置文件</p>
<ul>
<li><p><code>application-dev.properties</code> 是开发环境的配置文件。我们在该文件中配置端口号为 <code>80</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>application-test.properties</code> 是测试环境的配置文件。我们在该文件中配置端口号为 <code>81</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">81</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>application-pro.properties</code> 是生产环境的配置文件。我们在该文件中配置端口号为 <code>82</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">82</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><code>SpringBoot</code> 只会默认加载名为 <code>application.properties</code> 的配置文件，所以需要在 <code>application.properties</code> 配置文件中设置启用哪个配置文件，配置如下:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">pro</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-3-命令行启动参数设置"><a href="#2-4-3-命令行启动参数设置" class="headerlink" title="2.4.3  命令行启动参数设置"></a>2.4.3  命令行启动参数设置</h4><p>使用 <code>SpringBoot</code> 开发的程序以后都是打成 <code>jar</code> 包，通过 <code>java -jar xxx.jar</code> 的方式启动服务的。那么就存在一个问题，如何切换环境呢？因为配置文件打到的jar包中了。</p>
<p>我们知道 <code>jar</code> 包其实就是一个压缩包，可以解压缩，然后修改配置，最后再打成jar包就可以了。这种方式显然有点麻烦，而 <code>SpringBoot</code> 提供了在运行 <code>jar</code> 时设置开启指定的环境的方式，如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java –jar xxx.jar –-spring.profiles.active=test</span><br></pre></td></tr></table></figure>

<p>那么这种方式能不能临时修改端口号呢？也是可以的，可以通过如下方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java –jar xxx.jar –-server.port=88</span><br></pre></td></tr></table></figure>

<p>当然也可以同时设置多个配置，比如即指定启用哪个环境配置，又临时指定端口，如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java –jar springboot.jar –-server.port=88 –-spring.profiles.active=test</span><br></pre></td></tr></table></figure>

<p>大家进行测试后就会发现命令行设置的端口号优先级高（也就是使用的是命令行设置的端口号），配置的优先级其实 <code>SpringBoot</code> 官网已经进行了说明，参见 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config</span><br></pre></td></tr></table></figure>

<p>进入上面网站后会看到如下页面</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917193910191.png" alt="image-20210917193910191"></p>
<p>如果使用了多种方式配合同一个配置项，优先级高的生效。</p>
<h3 id="2-5-配置文件分类"><a href="#2-5-配置文件分类" class="headerlink" title="2.5  配置文件分类"></a>2.5  配置文件分类</h3><img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917194941597.png" alt="image-20210917194941597" style="zoom:70%;" />

<p>有这样的场景，我们开发完毕后需要测试人员进行测试，由于测试环境和开发环境的很多配置都不相同，所以测试人员在运行我们的工程时需要临时修改很多配置，如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java –jar springboot.jar –-spring.profiles.active=test --server.port=85 --server.servlet.context-path=/heima --server.tomcat.connection-timeout=-1 …… …… …… …… ……</span><br></pre></td></tr></table></figure>

<p>针对这种情况，<code>SpringBoot</code> 定义了配置文件不同的放置的位置；而放在不同位置的优先级时不同的。</p>
<p><code>SpringBoot</code> 中4级配置文件放置位置：</p>
<ul>
<li>1级：classpath：application.yml  </li>
<li>2级：classpath：config&#x2F;application.yml</li>
<li>3级：file ：application.yml</li>
<li>4级：file ：config&#x2F;application.yml</li>
</ul>
<blockquote>
<p>&#x3D;&#x3D;说明：&#x3D;&#x3D;级别越高优先级越高</p>
</blockquote>
<h4 id="2-5-1-代码演示"><a href="#2-5-1-代码演示" class="headerlink" title="2.5.1  代码演示"></a>2.5.1  代码演示</h4><p>在这里我们只演示不同级别配置文件放置位置的优先级。</p>
<h5 id="2-5-1-1-环境准备"><a href="#2-5-1-1-环境准备" class="headerlink" title="2.5.1.1  环境准备"></a>2.5.1.1  环境准备</h5><p>创建一个名为 <code>springboot_06_config_file</code> 的 <code>SpringBoot</code> 工程，目录结构如下</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917200241282.png" alt="image-20210917200241282" style="zoom:80%;" />

<p>在 <code>resources</code> 下创建一个名为 <code>config</code> 的目录，在该目录中创建 <code>application.yml</code> 配置文件，而在该配置文件中将端口号设置为 <code>81</code>，内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure>

<p>而在 <code>resources</code> 下创建的 <code>application.yml</code> 配置文件中并将端口号设置为 <code>80</code>，内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<h5 id="2-5-1-2-验证1级和2级的优先级"><a href="#2-5-1-2-验证1级和2级的优先级" class="headerlink" title="2.5.1.2  验证1级和2级的优先级"></a>2.5.1.2  验证1级和2级的优先级</h5><p>运行启动引导类，可以在控制台看到如下日志信息</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917200805389.png" alt="image-20210917200805389"></p>
<p>通过这个结果可以得出&#x3D;&#x3D;类路径下的 <code>config</code> 下的配置文件优先于类路径下的配置文件。&#x3D;&#x3D;</p>
<h5 id="2-5-1-3-验证2级和4级的优先级"><a href="#2-5-1-3-验证2级和4级的优先级" class="headerlink" title="2.5.1.3  验证2级和4级的优先级"></a>2.5.1.3  验证2级和4级的优先级</h5><p>要验证4级，按照以下步骤完成</p>
<ul>
<li><p>将工程打成 <code>jar</code> 包</p>
<p>点击工程的 <code>package</code> 来打 <code>jar</code> 包</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917201243721.png" alt="image-20210917201243721" style="zoom:80%;" />
</li>
<li><p>在硬盘上找到 <code>jar</code> 包所在位置</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917201523669.png" alt="image-20210917201523669" style="zoom:70%;" />
</li>
<li><p>在 <code>jar</code> 包所在位置创建 <code>config</code> 文件夹，在该文件夹下创建 <code>application.yml</code> 配置文件，而在该配合文件中将端口号设置为 <code>82</code> </p>
</li>
<li><p>在命令行使用以下命令运行程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar springboot_06_config_file-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p>运行后日志信息如下</p>
<p><img src="/../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917201922831.png" alt="image-20210917201922831"></p>
<p>通过这个结果可以得出&#x3D;&#x3D;file： <code>config</code> 下的配置文件优先于类路径下的配置文件。&#x3D;&#x3D;</p>
</li>
</ul>
<blockquote>
<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p>
<p>SpringBoot 2.5.0版本存在一个bug，我们在使用这个版本时，需要在 <code>jar</code> 所在位置的 <code>config</code> 目录下创建一个任意名称的文件夹</p>
</blockquote>
<h2 id="3，SpringBoot整合junit"><a href="#3，SpringBoot整合junit" class="headerlink" title="3，SpringBoot整合junit"></a>3，SpringBoot整合junit</h2><p>回顾 <code>Spring</code> 整合 <code>junit</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>@RunWith</code> 注解指定运行器，使用 <code>@ContextConfiguration</code> 注解来指定配置类或者配置文件。而 <code>SpringBoot</code> 整合 <code>junit</code> 特别简单，分为以下三步完成</p>
<ul>
<li>在测试类上添加 <code>SpringBootTest</code> 注解</li>
<li>使用 <code>@Autowired</code> 注入要测试的资源</li>
<li>定义测试方法进行测试</li>
</ul>
<h3 id="3-1-环境准备"><a href="#3-1-环境准备" class="headerlink" title="3.1  环境准备"></a>3.1  环境准备</h3><p>创建一个名为 <code>springboot_07_test</code> 的 <code>SpringBoot</code> 工程，工程目录结构如下</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917213556673.png" alt="image-20210917213556673" style="zoom:80%;" />

<p>在 <code>com.itheima.service</code> 下创建 <code>BookService</code> 接口，内容如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>com.itheima.service.impl</code> 包写创建一个 <code>BookServiceImpl</code> 类，使其实现 <code>BookService</code> 接口，内容如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service is running ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-编写测试类"><a href="#3-2-编写测试类" class="headerlink" title="3.2  编写测试类"></a>3.2  编写测试类</h3><p>在 <code>test/java</code> 下创建 <code>com.itheima</code> 包，在该包下创建测试类，将 <code>BookService</code> 注入到该测试类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot07TestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;这里的引导类所在包必须是测试类所在包及其子包。</p>
<p>例如：</p>
<ul>
<li>引导类所在包是 <code>com.itheima</code></li>
<li>测试类所在包是 <code>com.itheima</code></li>
</ul>
<p>如果不满足这个要求的话，就需要在使用 <code>@SpringBootTest</code> 注解时，使用 <code>classes</code> 属性指定引导类的字节码对象。如 <code>@SpringBootTest(classes = Springboot07TestApplication.class)</code></p>
</blockquote>
<h2 id="4，SpringBoot整合mybatis"><a href="#4，SpringBoot整合mybatis" class="headerlink" title="4，SpringBoot整合mybatis"></a>4，SpringBoot整合mybatis</h2><h3 id="4-1-回顾Spring整合Mybatis"><a href="#4-1-回顾Spring整合Mybatis" class="headerlink" title="4.1  回顾Spring整合Mybatis"></a>4.1  回顾Spring整合Mybatis</h3><p><code>Spring</code> 整合 <code>Mybatis</code> 需要定义很多配置类</p>
<ul>
<li><p><code>SpringConfig</code> 配置类</p>
<ul>
<li><p>导入 <code>JdbcConfig</code> 配置类</p>
</li>
<li><p>导入 <code>MybatisConfig</code> 配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MyBatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>JdbcConfig</code> 配置类</p>
<ul>
<li><p>定义数据源（加载properties配置项：driver、url、username、password）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>MybatisConfig</code> 配置类</p>
<ul>
<li><p>定义 <code>SqlSessionFactoryBean</code></p>
</li>
<li><p>定义映射配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">getMapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">    msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> msc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">getSqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">    <span class="type">SqlSessionFactoryBean</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">    ssfb.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">    ssfb.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">return</span> ssfb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="4-2-SpringBoot整合mybatis"><a href="#4-2-SpringBoot整合mybatis" class="headerlink" title="4.2  SpringBoot整合mybatis"></a>4.2  SpringBoot整合mybatis</h3><h4 id="4-2-1-创建模块"><a href="#4-2-1-创建模块" class="headerlink" title="4.2.1  创建模块"></a>4.2.1  创建模块</h4><ul>
<li>创建新模块，选择 <code>Spring Initializr</code>，并配置模块相关基础信息</li>
</ul>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917215913779.png" alt="image-20210917215913779" style="zoom:80%;" />

<ul>
<li><p>选择当前模块需要使用的技术集（MyBatis、MySQL）</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917215958091.png" alt="image-20210917215958091" style="zoom:80%;" /></li>
</ul>
<h4 id="4-2-2-定义实体类"><a href="#4-2-2-定义实体类" class="headerlink" title="4.2.2  定义实体类"></a>4.2.2  定义实体类</h4><p>在 <code>com.itheima.domain</code> 包下定义实体类 <code>Book</code>，内容如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//setter and  getter</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-3-定义dao接口"><a href="#4-2-3-定义dao接口" class="headerlink" title="4.2.3  定义dao接口"></a>4.2.3  定义dao接口</h4><p>在 <code>com.itheima.dao</code> 包下定义 <code>BookDao</code> 接口，内容如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-4-定义测试类"><a href="#4-2-4-定义测试类" class="headerlink" title="4.2.4  定义测试类"></a>4.2.4  定义测试类</h4><p>在 <code>test/java</code> 下定义包 <code>com.itheima</code> ，在该包下测试类，内容如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot08MybatisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookDao.getById(<span class="number">1</span>);</span><br><span class="line">		System.out.println(book);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-5-编写配置"><a href="#4-2-5-编写配置" class="headerlink" title="4.2.5  编写配置"></a>4.2.5  编写配置</h4><p>我们代码中并没有指定连接哪儿个数据库，用户名是什么，密码是什么。所以这部分需要在 <code>SpringBoot</code> 的配置文件中进行配合。</p>
<p>在 <code>application.yml</code> 配置文件中配置如下内容</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-6-测试"><a href="#4-2-6-测试" class="headerlink" title="4.2.6  测试"></a>4.2.6  测试</h4><p>运行测试方法，我们会看到如下错误信息</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917221427930.png" alt="image-20210917221427930" style="zoom:70%;" />

<p>错误信息显示在 <code>Spring</code> 容器中没有 <code>BookDao</code> 类型的 <code>bean</code>。为什么会出现这种情况呢？</p>
<p>原因是 <code>Mybatis</code> 会扫描接口并创建接口的代码对象交给 <code>Spring</code> 管理，但是现在并没有告诉 <code>Mybatis</code> 哪个是 <code>dao</code> 接口。而我们要解决这个问题需要在<code>BookDao</code> 接口上使用 <code>@Mapper</code> ，<code>BookDao</code> 接口改进为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p>
<p><code>SpringBoot</code> 版本低于2.4.3(不含)，Mysql驱动版本大于8.0时，需要在url连接串中配置时区 <code>jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</code>，或在MySQL数据库端配置时区解决此问题</p>
</blockquote>
<h4 id="4-2-7-使用Druid数据源"><a href="#4-2-7-使用Druid数据源" class="headerlink" title="4.2.7  使用Druid数据源"></a>4.2.7  使用Druid数据源</h4><p>现在我们并没有指定数据源，<code>SpringBoot</code> 有默认的数据源，我们也可以指定使用 <code>Druid</code> 数据源，按照以下步骤实现</p>
<ul>
<li><p>导入 <code>Druid</code> 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>application.yml</code> 配置文件配置</p>
<p>可以通过 <code>spring.datasource.type</code> 来配置使用什么数据源。配置文件内容可以改进为</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5，案例"><a href="#5，案例" class="headerlink" title="5，案例"></a>5，案例</h2><p><code>SpringBoot</code> 到这就已经学习完毕，接下来我们将学习 <code>SSM</code> 时做的三大框架整合的案例用 <code>SpringBoot</code> 来实现一下。我们完成这个案例基本是将之前做的拷贝过来，修改成 <code>SpringBoot</code> 的即可，主要从以下几部分完成</p>
<ol>
<li><p>pom.xml</p>
<p>配置起步依赖，必要的资源坐标(druid)</p>
</li>
<li><p>application.yml</p>
<p>设置数据源、端口等</p>
</li>
<li><p>配置类</p>
<p>全部删除</p>
</li>
<li><p>dao</p>
<p>设置@Mapper</p>
</li>
<li><p>测试类</p>
</li>
<li><p>页面</p>
<p>放置在resources目录下的static目录中</p>
</li>
</ol>
<h3 id="5-1-创建工程"><a href="#5-1-创建工程" class="headerlink" title="5.1  创建工程"></a>5.1  创建工程</h3><p>创建 <code>SpringBoot</code> 工程，在创建工程时需要勾选 <code>web</code>、<code>mysql</code>、<code>mybatis</code>，工程目录结构如下</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917225019868.png" alt="image-20210917225019868" style="zoom:80%;" />

<p>由于我们工程中使用到了 <code>Druid</code> ，所以需要导入 <code>Druid</code> 的坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-代码拷贝"><a href="#5-2-代码拷贝" class="headerlink" title="5.2  代码拷贝"></a>5.2  代码拷贝</h3><p>将 <code>springmvc_11_page</code> 工程中的 <code>java</code> 代码及测试代码连同包拷贝到 <code>springboot_09_ssm</code> 工程，按照下图进行拷贝</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917225715519.png" alt="image-20210917225715519" style="zoom:70%;" />

<p>需要修改的内容如下：</p>
<ul>
<li><p><code>Springmvc_11_page</code> 中 <code>config</code> 包下的是配置类，而 <code>SpringBoot</code> 工程不需要这些配置类，所以这些可以直接删除</p>
</li>
<li><p><code>dao</code> 包下的接口上在拷贝到 <code>springboot_09-ssm</code> 工程中需要在接口中添加 <code>@Mapper</code> 注解</p>
</li>
<li><p><code>BookServiceTest</code> 测试需要改成 <code>SpringBoot</code> 整合 <code>junit</code> 的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(<span class="number">2</span>);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Book&gt; all = bookService.getAll();</span><br><span class="line">        System.out.println(all);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-3-配置文件"><a href="#5-3-配置文件" class="headerlink" title="5.3  配置文件"></a>5.3  配置文件</h3><p>在 <code>application.yml</code> 配置文件中需要配置如下内容</p>
<ul>
<li>服务的端口号</li>
<li>连接数据库的信息</li>
<li>数据源</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db</span> <span class="comment">#?servierTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>

<h3 id="5-4-静态资源"><a href="#5-4-静态资源" class="headerlink" title="5.4  静态资源"></a>5.4  静态资源</h3><p>在 <code>SpringBoot</code> 程序中是没有 <code>webapp</code> 目录的，那么在 <code>SpringBoot</code> 程序中静态资源需要放在什么位置呢？</p>
<p>静态资源需要放在 <code>resources</code> 下的 <code>static</code> 下，如下图所示</p>
<img src="../../../BaiduNetdiskDownload/SSM%25E8%25B5%2584%25E6%2596%2599/%25E8%25AF%25BE%25E7%25A8%258B%25E7%25AC%2594%25E8%25AE%25B0/%25E5%259F%25BA%25E7%25A1%2580%25E6%25A1%2586%25E6%259E%25B68%25E7%25AC%2594%25E8%25AE%25B0/SpringBoot%25E7%25AC%2594%25E8%25AE%25B0/assets/image-20210917230702072.png" alt="image-20210917230702072" style="zoom:80%;" />



]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot框架视频推荐</title>
    <url>/posts/2298513912.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script>]]></content>
      <categories>
        <category>学习视频推荐</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot练手项目推荐-瑞吉外卖</title>
    <url>/posts/4136667450.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script>]]></content>
      <categories>
        <category>学习视频推荐</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC面试题整理</title>
    <url>/posts/1822365459.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="1-概述："><a href="#1-概述：" class="headerlink" title="1. 概述："></a>1. 概述：</h2><h3 id="1-1-什么是SpringMVC？简单介绍下你对SpringMVC的理解？"><a href="#1-1-什么是SpringMVC？简单介绍下你对SpringMVC的理解？" class="headerlink" title="1.1 什么是SpringMVC？简单介绍下你对SpringMVC的理解？"></a>1.1 什么是SpringMVC？简单介绍下你对SpringMVC的理解？</h3><p>Spring MVC 是一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，通过把模型-视图-控制器分离，将复杂的web应用分为了清晰的几部分，Service层（处理业务）、DAO层（数据库操作）、Entity（实体类）和Controller层（控制层，返回数据给前台页面）。简化了开发，方便了组内开发人员之间的配合。</p>
<h3 id="1-2-SpringMVC的特点？"><a href="#1-2-SpringMVC的特点？" class="headerlink" title="1.2 SpringMVC的特点？"></a>1.2 SpringMVC的特点？</h3><ol>
<li><p>可以支持各种视图技术，而不仅仅局限于JSP；</p>
</li>
<li><p>与Spring框架天然集成（如IOC和AOP）；</p>
</li>
<li><p>清晰的角色分配：</p>
</li>
<li><ol>
<li>前端控制器(dispatchServlet)</li>
<li>请求到处理器映射(handlerMapping)</li>
<li>处理器适配器(HandlerAdapter)</li>
<li>视图解析器(ViewResoler)</li>
</ol>
</li>
<li><p>支持各种请求资源的映射策略。</p>
</li>
</ol>
<h2 id="2-核心组件"><a href="#2-核心组件" class="headerlink" title="2.核心组件"></a>2.核心组件</h2><h3 id="2-1-SpringMVC的主要组件？"><a href="#2-1-SpringMVC的主要组件？" class="headerlink" title="2.1 SpringMVC的主要组件？"></a>2.1 SpringMVC的主要组件？</h3><ol>
<li><p>前端控制器DispatcherServlet</p>
</li>
<li><ol>
<li>作用：接受请求，响应结果，相当于转发器，有了DispatcherServlet就减少了其他组件之间的耦合度。</li>
</ol>
</li>
<li><p>处理器映射器(HandlerMapping)</p>
</li>
<li><ol>
<li>作用：根据请求的URL来<strong>查找处理器handler</strong></li>
</ol>
</li>
<li><p>处理器适配器(HandlerAdapter)</p>
</li>
<li><ol>
<li>作用：负责执行Handler，返回视图ModelandView对象</li>
</ol>
</li>
<li><p>处理器Handler**(需要程序员开发)**</p>
</li>
<li><p>视图解析器(ViewResolver)</p>
</li>
<li><ol>
<li>作用：进行视图的解析，根据视图的逻辑名解析成真正的视图</li>
</ol>
</li>
<li><p>视图(View)<strong>(需要程序员开发)</strong></p>
</li>
<li><ol>
<li>View是一个接口，它的实现类支持不同的视图类型(比如JSP，Freemarker等等)</li>
</ol>
</li>
</ol>
<h3 id="2-2-什么是DispatcherServlet？"><a href="#2-2-什么是DispatcherServlet？" class="headerlink" title="2.2 什么是DispatcherServlet？"></a>2.2 什么是DispatcherServlet？</h3><p>Spring的MVC框架是围绕DispatcherServlet来设计的，它用来<strong>处理所有的HTTP请求和响应。</strong></p>
<h3 id="2-3-什么是SpringMVC的控制器？"><a href="#2-3-什么是SpringMVC的控制器？" class="headerlink" title="2.3 什么是SpringMVC的控制器？"></a>2.3 什么是SpringMVC的控制器？</h3><ul>
<li>控制器提供了一个访问应用程序的行为，这个行为时通过服务接口实现的。</li>
</ul>
<h3 id="2-4-SpringMVC的控制器是不是单例模式，如果是，有什么问题？"><a href="#2-4-SpringMVC的控制器是不是单例模式，如果是，有什么问题？" class="headerlink" title="2.4 SpringMVC的控制器是不是单例模式，如果是，有什么问题？"></a>2.4 SpringMVC的控制器是不是单例模式，如果是，有什么问题？</h3><p>是单例模式，所以在多线程访问的时候有线程安全问题，不要用同步，会影响性能。</p>
<h2 id="3-工作原理"><a href="#3-工作原理" class="headerlink" title="3. 工作原理"></a>3. 工作原理</h2><ol>
<li>客户端发送请求，直接请求到前端控制器DispatcherServlet。</li>
<li>DispatcherServlet根据请求信息调用HandlerMapping，解析请求对应的Handler。</li>
<li>解析到对应的Handler(也就是我们平常说得Controller控制器)之后，开始由HandlerAdapter处理器适配器进行处理。</li>
<li>处理器适配器会根据解析到的Handler来调用真正的处理器来处理请求，并处理相应的业务逻辑。</li>
<li>处理器处理完毕后，会返回一个ModelAndView对象，Model是返回的数据对象，View是个逻辑上的View。</li>
<li>ViewResolver是根据逻辑View来查找实际具体的View。</li>
<li>DispatcherServlet把返回的Model传给View，进行视图渲染，即把模型数据填充到视图中。</li>
<li>DispatcherServlet将View返回给客户端。</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1657507962076-b74072c6-b42f-4240-a42d-439facb06d57.png" alt="img"></p>
<h2 id="4-常用注解"><a href="#4-常用注解" class="headerlink" title="4.常用注解"></a>4.常用注解</h2><h3 id="4-1-SpringMVC常用的注解有哪些？"><a href="#4-1-SpringMVC常用的注解有哪些？" class="headerlink" title="4.1 SpringMVC常用的注解有哪些？"></a>4.1 SpringMVC常用的注解有哪些？</h3><ul>
<li><strong>@RequestMapping：</strong>用于处理请求url映射的注解，可用于类上或者方法上。用于类上表示类中所有响应请求的方法都是以该地址作为父路径。</li>
<li><strong>@RequestBody：</strong>注解实现接收http请求的json数据，将json转换为java对象。</li>
<li><strong>@ResponseBody：</strong>注解实现将conreoller方法返回对象转化为json对象响应给客户。</li>
</ul>
<h3 id="4-2-SpringMVC中的控制器注解一般用哪个？"><a href="#4-2-SpringMVC中的控制器注解一般用哪个？" class="headerlink" title="4.2 SpringMVC中的控制器注解一般用哪个？"></a>4.2 SpringMVC中的控制器注解一般用哪个？</h3><p>一般用**@Controller<strong>注解,也可以使用</strong>@RestController<strong>，</strong>@RestController<strong>注解相当于</strong>@ResponseBody+@Controller**。</p>
<h3 id="4-3-PathVariable和-RequestParam的区别？"><a href="#4-3-PathVariable和-RequestParam的区别？" class="headerlink" title="4.3 @PathVariable和@RequestParam的区别？"></a>4.3 @PathVariable和@RequestParam的区别？</h3><ul>
<li>@PathVariable是从Url路径中获取变量</li>
<li>@RequestParam是从请求中获取参数</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC常用注解</title>
    <url>/posts/2032571236.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>老忘，记录一下。</p>
<h3 id="1-Controller"><a href="#1-Controller" class="headerlink" title="1.@Controller"></a>1.@Controller</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@Controller</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>类注解</td>
</tr>
<tr>
<td>位置</td>
<td>SpringMVC控制器类定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>设定SpringMVC的核心控制器bean</td>
</tr>
</tbody></table>
<h3 id="2-RequestMapping"><a href="#2-RequestMapping" class="headerlink" title="2.@RequestMapping"></a>2.@RequestMapping</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@RequestMapping</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>类注解或方法注解</td>
</tr>
<tr>
<td>位置</td>
<td>SpringMVC控制器类或方法定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>设置当前控制器方法请求访问路径</td>
</tr>
<tr>
<td>相关属性</td>
<td>value(默认)，请求访问路径</td>
</tr>
</tbody></table>
<h3 id="3-ResponseBody"><a href="#3-ResponseBody" class="headerlink" title="3.@ResponseBody"></a>3.@ResponseBody</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@ResponseBody</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>类注解或方法注解</td>
</tr>
<tr>
<td>位置</td>
<td>SpringMVC控制器类或方法定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>设置当前控制器方法响应内容为当前返回值，无需解析</td>
</tr>
</tbody></table>
<h3 id="4-ComponentScan"><a href="#4-ComponentScan" class="headerlink" title="4.@ComponentScan"></a>4.@ComponentScan</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@ComponentScan</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>类注解</td>
</tr>
<tr>
<td>位置</td>
<td>类定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>设置spring配置类扫描路径，用于加载使用注解格式定义的bean</td>
</tr>
<tr>
<td>相关属性</td>
<td>excludeFilters:排除扫描路径中加载的bean,需要指定类别(type)和具体项(classes)<br/>includeFilters:加载指定的bean，需要指定类别(type)和具体项(classes)</td>
</tr>
</tbody></table>
<h3 id="5-RequestParam"><a href="#5-RequestParam" class="headerlink" title="5.@RequestParam"></a>5.@RequestParam</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@RequestParam</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>形参注解</td>
</tr>
<tr>
<td>位置</td>
<td>SpringMVC控制器方法形参定义前面</td>
</tr>
<tr>
<td>作用</td>
<td>绑定请求参数与处理器方法形参间的关系</td>
</tr>
<tr>
<td>相关参数</td>
<td>required：是否为必传参数 <br/>defaultValue：参数默认值</td>
</tr>
</tbody></table>
<h3 id="6-EnableWebMvc"><a href="#6-EnableWebMvc" class="headerlink" title="6.@EnableWebMvc"></a>6.@EnableWebMvc</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@EnableWebMvc</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>&#x3D;&#x3D;配置类注解&#x3D;&#x3D;</td>
</tr>
<tr>
<td>位置</td>
<td>SpringMVC配置类定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>开启SpringMVC多项辅助功能</td>
</tr>
</tbody></table>
<h3 id="7-RequestBody"><a href="#7-RequestBody" class="headerlink" title="7.@RequestBody"></a>7.@RequestBody</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@RequestBody</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>&#x3D;&#x3D;形参注解&#x3D;&#x3D;</td>
</tr>
<tr>
<td>位置</td>
<td>SpringMVC控制器方法形参定义前面</td>
</tr>
<tr>
<td>作用</td>
<td>将请求中请求体所包含的数据传递给请求参数，此注解一个处理器方法只能使用一次</td>
</tr>
</tbody></table>
<h4 id="RequestBody与-RequestParam区别"><a href="#RequestBody与-RequestParam区别" class="headerlink" title="@RequestBody与@RequestParam区别"></a>@RequestBody与@RequestParam区别</h4><ul>
<li><p>区别</p>
<ul>
<li>@RequestParam用于接收url地址传参，表单传参【application&#x2F;x-www-form-urlencoded】</li>
<li>@RequestBody用于接收json数据【application&#x2F;json】</li>
</ul>
</li>
<li><p>应用</p>
<ul>
<li>后期开发中，发送json格式数据为主，@RequestBody应用较广</li>
<li>如果发送非json格式数据，选用@RequestParam接收请求参数</li>
</ul>
</li>
</ul>
<h3 id="8-RestController"><a href="#8-RestController" class="headerlink" title="8.@RestController"></a>8.@RestController</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@RestController</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>&#x3D;&#x3D;类注解&#x3D;&#x3D;</td>
</tr>
<tr>
<td>位置</td>
<td>基于SpringMVC的RESTful开发控制器类定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>设置当前控制器类为RESTful风格，<br/>等同于@Controller与@ResponseBody两个注解组合功能</td>
</tr>
</tbody></table>
<h3 id="9-GetMapping-PostMapping-PutMapping-DeleteMapping"><a href="#9-GetMapping-PostMapping-PutMapping-DeleteMapping" class="headerlink" title="9.@GetMapping @PostMapping @PutMapping @DeleteMapping"></a>9.@GetMapping @PostMapping @PutMapping @DeleteMapping</h3><table>
<thead>
<tr>
<th>名称</th>
<th>@GetMapping @PostMapping @PutMapping @DeleteMapping</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>&#x3D;&#x3D;方法注解&#x3D;&#x3D;</td>
</tr>
<tr>
<td>位置</td>
<td>基于SpringMVC的RESTful开发控制器方法定义上方</td>
</tr>
<tr>
<td>作用</td>
<td>设置当前控制器方法请求访问路径与请求动作，每种对应一个请求动作，<br/>例如@GetMapping对应GET请求</td>
</tr>
<tr>
<td>相关属性</td>
<td>value（默认）：请求访问路径</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC学习笔记</title>
    <url>/posts/832315883.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="一、SpringMVC概述"><a href="#一、SpringMVC概述" class="headerlink" title="一、SpringMVC概述"></a>一、SpringMVC概述</h1><blockquote>
<p>Spring MVC 是由Spring官方提供的基于MVC设计理念的web框架。</p>
<p>SpringMVC是基于Servlet封装的用于实现MVC控制的框架，实现前端和服务端的交互。</p>
</blockquote>
<h2 id="1-1、SpringMVC优势"><a href="#1-1、SpringMVC优势" class="headerlink" title="1.1、SpringMVC优势"></a>1.1、SpringMVC优势</h2><ul>
<li>严格遵守了MVC分层思想</li>
<li>采用了松耦合、插件式结构</li>
<li>SpringMVC在基于Spring的扩展、提供了一套完善的MVC注解</li>
<li>SpringMVC在数据绑定、视图解析都提供了多种处理方式，可灵活配置</li>
<li>SpringMVC对RESFUL URL设计方法提供了良好的支持</li>
</ul>
<h2 id="1-2、SpringMVC本质工作"><a href="#1-2、SpringMVC本质工作" class="headerlink" title="1.2、SpringMVC本质工作"></a>1.2、SpringMVC本质工作</h2><ul>
<li>接收并解析请求</li>
<li>处理请求</li>
<li>数据渲染、响应请求</li>
</ul>
<h1 id="二、SpringMVC框架部署"><a href="#二、SpringMVC框架部署" class="headerlink" title="二、SpringMVC框架部署"></a>二、SpringMVC框架部署</h1><h2 id="2-1、基于Maven创建一个web工程"><a href="#2-1、基于Maven创建一个web工程" class="headerlink" title="2.1、基于Maven创建一个web工程"></a>2.1、基于Maven创建一个web工程</h2><ul>
<li>SpringMVC是一个web框架，应用在web工程中</li>
</ul>
<h2 id="2-2、-添加SpringMVC依赖"><a href="#2-2、-添加SpringMVC依赖" class="headerlink" title="2.2、 添加SpringMVC依赖"></a>2.2、 添加SpringMVC依赖</h2><ul>
<li>spring-context</li>
<li>spring-aspects</li>
<li>spring-jdbc</li>
<li>spring-test</li>
<li>spring-web</li>
<li>spring-webmvc</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qfedu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc-demo2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-3-创建SpringMVC配置文件"><a href="#2-3-创建SpringMVC配置文件" class="headerlink" title="2.3 创建SpringMVC配置文件"></a>2.3 创建SpringMVC配置文件</h2><ul>
<li>在resource目录下创建名为spring-servlet.xml的文件</li>
<li>添加MVC命名空间</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--IoC采用注解配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.qfedu&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  声明MVC使用注解驱动  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-4、在web-xml中配置SpringMVC的前端控制器"><a href="#2-4、在web-xml中配置SpringMVC的前端控制器" class="headerlink" title="2.4、在web.xml中配置SpringMVC的前端控制器"></a>2.4、在web.xml中配置SpringMVC的前端控制器</h2><blockquote>
<p>SpringMVC提供了一个名为DispatcherServlet的类(SpringMVC前端控制器)，用于拦截用户请求交由SpringMVC处理</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="三、Spring-MVC框架的使用"><a href="#三、Spring-MVC框架的使用" class="headerlink" title="三、Spring MVC框架的使用"></a>三、Spring MVC框架的使用</h1><blockquote>
<p>在SpringMVC中，把接受请求、处理请求的类称为Controller（控制器）</p>
</blockquote>
<h2 id="3-1-创建控制器"><a href="#3-1-创建控制器" class="headerlink" title="3.1 创建控制器"></a>3.1 创建控制器</h2><h3 id="1-创建控制器类"><a href="#1-创建控制器类" class="headerlink" title="1. 创建控制器类"></a>1. 创建控制器类</h3><ul>
<li>创建一个名为<code>com.qfedu.controlllers</code>的包(包需要在Spring注解扫描的范围内)</li>
<li>创建一个类(无需做任何的继承和实现)</li>
<li>在类上添加<code>@Controller</code>注解声明该类是SpringMVC的控制器</li>
<li>在类上添加<code>@RequestMapping(&quot;url&quot;)</code>声明此控制器类的请求url</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">//声明该请求的路径</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-在控制器类中定义处理请求的方法"><a href="#2-在控制器类中定义处理请求的方法" class="headerlink" title="2.在控制器类中定义处理请求的方法"></a>2.在控制器类中定义处理请求的方法</h3><ul>
<li>在一个控制器类中可以定义多个方法来处理不同的请求】</li>
<li>在每个方法上添加@RequestMapping(“url”)用于声明当前方法请求的url</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">//声明该请求的路径</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book====add&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book====list&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-访问"><a href="#3-访问" class="headerlink" title="3.访问"></a>3.访问</h3><ul>
<li><a href="http://localhost:10086/springmvc_demo2/book/add">http://localhost:10086/springmvc_demo2/book/add</a></li>
<li><a href="http://localhost:10086/springmvc_demo2/book/list">http://localhost:10086/springmvc_demo2/book/list</a></li>
</ul>
<h2 id="3-2-静态资源配置"><a href="#3-2-静态资源配置" class="headerlink" title="3.2 静态资源配置"></a>3.2 静态资源配置</h2><blockquote>
<p>静态资源：指项目中的HTML、css、js、图片、字体等</p>
</blockquote>
<h3 id="1-x2F-和-x2F-的区别"><a href="#1-x2F-和-x2F-的区别" class="headerlink" title="1. &#x2F;* 和 &#x2F;的区别"></a>1. &#x2F;* 和 &#x2F;的区别</h3><ul>
<li>&#x2F;*拦截所有的HTTP请求，包括.jsp的请求，都作为控制器类的请求路径来处理</li>
<li>&#x2F;拦截所有的HTTP请求，但不包括.jsp的请求，不会放行静态资源的请求(html&#x2F;css&#x2F;js&#x2F;图片)</li>
</ul>
<h3 id="2-配置静态资源放行"><a href="#2-配置静态资源放行" class="headerlink" title="2. 配置静态资源放行"></a>2. 配置静态资源放行</h3><ul>
<li><p>在SpringMVC的配置文件，添加如下静态资源放行的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置静态资源放行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/css/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/imgs/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/imgs/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/pages/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/pages/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-3-前端提交数据到控制器"><a href="#3-3-前端提交数据到控制器" class="headerlink" title="3.3 前端提交数据到控制器"></a>3.3 前端提交数据到控制器</h2><h3 id="1-表单提交"><a href="#1-表单提交" class="headerlink" title="1.表单提交"></a>1.表单提交</h3><ul>
<li>表单提交：输入框需要提供name属性，SpringMVC控制器是通过name属性取值的</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>添加图书<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/book/add&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>图书名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>图书作者：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>图书价格：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-URL提交"><a href="#2-URL提交" class="headerlink" title="2.URL提交"></a>2.URL提交</h3><ul>
<li>url提交</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>超链接提交<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/book/add?bookName=Java&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-AJAX提交"><a href="#3-AJAX提交" class="headerlink" title="3.AJAX提交"></a>3.AJAX提交</h3><ul>
<li>AJAX提交：请求行、请求头、请求体都可以用来传值</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>AJAX提交<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ajax提交&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> obj = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">        obj.<span class="property">bookName</span> = <span class="string">&quot;Java&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        obj.<span class="property">bookAuthor</span> = <span class="string">&quot;张三&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        obj.<span class="property">bookPrice</span> = <span class="number">88.88</span>;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;book/add&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">headers</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">contentType</span>:<span class="string">&quot;application/json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:obj,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-4-控制器接收前端提交的数据"><a href="#3-4-控制器接收前端提交的数据" class="headerlink" title="3.4 控制器接收前端提交的数据"></a>3.4 控制器接收前端提交的数据</h2><h6 id="3-4-1-RequestParam-接收请求行传值"><a href="#3-4-1-RequestParam-接收请求行传值" class="headerlink" title="3.4.1 @RequestParam 接收请求行传值"></a>3.4.1 @RequestParam 接收请求行传值</h6><ul>
<li>表单提交</li>
<li>URL提交</li>
<li>$.ajax()请求的url传值</li>
<li>$.post()&#x2F;$.get()中的{}传值</li>
</ul>
<p>**<code>@RequestParam</code>**注解用于接收请求行传递的数据</p>
<ul>
<li><p>前端提交数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;book/add&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>图书名称:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>图书作者:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>图书价格:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>控制器接收数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*接收请求行数据*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String a,</span></span><br><span class="line"><span class="params">                    <span class="meta">@RequestParam(&quot;author&quot;)</span> String b,</span></span><br><span class="line"><span class="params">                    <span class="meta">@RequestParam(&quot;price&quot;)</span> <span class="type">double</span> c)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---book add&quot;</span>);</span><br><span class="line">    System.out.println(a);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><code>注意</code><strong>如果控制器方法中接收数据的参数名与请求行传值的key一致，则@RequestParam注解可省略</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">(String name,String author, <span class="type">double</span> price)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---book add&quot;</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    System.out.println(author);</span><br><span class="line">    System.out.println(price);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="3-4-2-RequestHeader接收请求头传值"><a href="#3-4-2-RequestHeader接收请求头传值" class="headerlink" title="3.4.2 @RequestHeader接收请求头传值"></a>3.4.2 @RequestHeader接收请求头传值</h6><ul>
<li><p>ajax封装请求头数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    ...,</span><br><span class="line">    <span class="attr">headers</span>:&#123;</span><br><span class="line">       </span><br><span class="line">	&#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>**<code>@RequestHeader</code>**注解用于接收请求行头传递的数据</p>
<ul>
<li><p>前端</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;ajax提交&quot;</span> id=<span class="string">&quot;btn1&quot;</span>/&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $.<span class="title function_">ajax</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">url</span>:<span class="string">&quot;book/list&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">type</span>:<span class="string">&quot;post&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">headers</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">token</span>:<span class="string">&quot;wahahaawahaha&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listBooks</span><span class="params">(<span class="meta">@RequestHeader(&quot;token&quot;)</span> String token)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---book list&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="3-4-3-RequestBody接收请求体传值"><a href="#3-4-3-RequestBody接收请求体传值" class="headerlink" title="3.4.3 @RequestBody接收请求体传值"></a>3.4.3 @RequestBody接收请求体传值</h6><ul>
<li><p>ajax封装请求体数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    ...,</span><br><span class="line">    <span class="attr">contentType</span>:<span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:obj,,</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>**<code>@RequestBody</code>**注解用于接收请求行头传递的数据</p>
<ul>
<li><p>前端</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ajax提交&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> obj = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">            obj.<span class="property">bookName</span> = <span class="string">&quot;Python&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            obj.<span class="property">bookAuthor</span>=<span class="string">&quot;杰哥&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            obj.<span class="property">bookPrice</span> = <span class="number">2.22</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> s = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj); <span class="comment">//将对象转换成JSON格式</span></span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>:<span class="string">&quot;book/update&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">contentType</span>:<span class="string">&quot;application/json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>:s,   <span class="comment">//如果data的值为json格式字符串，contentType必须设置为&quot;application/json&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>@RquestBody 将前端请求体提交的JSON格式数据转换成Java对象，依赖jackson包</p>
</blockquote>
<ul>
<li><p>导入jackson的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---book update&quot;</span>);</span><br><span class="line">    System.out.println(book);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-5-控制器响应前端请求"><a href="#3-5-控制器响应前端请求" class="headerlink" title="3.5 控制器响应前端请求"></a>3.5 控制器响应前端请求</h2><h6 id="3-5-1-控制器响应同步请求"><a href="#3-5-1-控制器响应同步请求" class="headerlink" title="3.5.1 控制器响应同步请求"></a>3.5.1 控制器响应同步请求</h6><blockquote>
<p>同步请求：form、超链接</p>
<p>处理同步请求的方法的返回类型定义为String或者ModelAndView，以实现页面的跳转</p>
</blockquote>
<ul>
<li><p>返回类型为String</p>
<p><strong>转发</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addBook</span><span class="params">(String name, String author, <span class="type">double</span> price)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---book add&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/tips.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>重定向</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addBook</span><span class="params">(String name, String author, <span class="type">double</span> price)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---book add&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/tips.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>返回类型为 ModelAndView</p>
<p><strong>转发</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">addBook</span><span class="params">(String name, String author, <span class="type">double</span> price)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---book add&quot;</span>);</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;/tips.jsp&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>重定向</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">addBook</span><span class="params">(String name, String author, <span class="type">double</span> price)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---book add&quot;</span>);</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;redirect:/tips.jsp&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="3-5-2-控制器响应异步请求"><a href="#3-5-2-控制器响应异步请求" class="headerlink" title="3.5.2 控制器响应异步请求"></a>3.5.2 控制器响应异步请求</h6><blockquote>
<p> 异步请求：ajax请求</p>
</blockquote>
<p><strong>使用response中的输出流进行响应</strong></p>
<ul>
<li>控制器方法的返回类型为<code>void</code></li>
<li>控制器方法添加 <code>HttpServletResponse response</code>参数</li>
<li>在方法中通过response获取输出流，使用流响应ajax请求</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---book update&quot;</span>);</span><br><span class="line">    System.out.println(book);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用ObjectMapper将对象转换成JSON格式字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(book);</span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">    out.println(s);</span><br><span class="line">    out.flush();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>直接在控制器方法返回响应的对象</strong></p>
<ul>
<li>控制器方法的返回类型设置为响应给ajax请求的对象类型</li>
<li>在控制器方法前添加<code>@ResponseBody</code>注解，将返回的对象转换成JSON响应给ajax请求</li>
<li>如果一个控制器类中的所有方法都是响应ajax请求，则可以直接在控制器类前添加<code>@ResponseBody</code>注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/update&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---book update&quot;</span>);</span><br><span class="line">    List&lt;Book&gt; books = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Book&gt;();</span><br><span class="line">    books.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">1</span>,<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;老张&quot;</span>,<span class="number">2.22</span>));</span><br><span class="line">    books.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">2</span>,<span class="string">&quot;C++&quot;</span>,<span class="string">&quot;老李&quot;</span>,<span class="number">3.22</span>));</span><br><span class="line">    <span class="keyword">return</span> books;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="3-5-3-控制器响应同步请求的数据传递"><a href="#3-5-3-控制器响应同步请求的数据传递" class="headerlink" title="3.5.3 控制器响应同步请求的数据传递"></a>3.5.3 控制器响应同步请求的数据传递</h6><blockquote>
<p>对于同步请求的转发响应，我们可以传递参数到转发的页面</p>
</blockquote>
<ul>
<li><p>返回类型为String:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.在控制器方法中定义一个Model类型的参数</span></span><br><span class="line"><span class="comment">//2.在return页面之前，向model中添加键值对，添加的键值对就会被传递到转发的页面</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addBook</span><span class="params">(String name, String author, <span class="type">double</span> price,Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;book&quot;</span>,<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">1</span>,<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;老张&quot;</span>,<span class="number">2.22</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/tips.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//除了使用Model对象传值外，还可以直接使用HttpServletRequest对象</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addBook</span><span class="params">(String name, String author, <span class="type">double</span> price,HttpServletRequest request)</span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;book&quot;</span>,<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">1</span>,<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;老张&quot;</span>,<span class="number">2.22</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/tips.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回类型ModelAndView:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/add2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">addBook2</span><span class="params">(String name, String author, <span class="type">double</span> price)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;/tips.jsp&quot;</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;book&quot;</span>,<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">1</span>,<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;老张&quot;</span>,<span class="number">2.22</span>));</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-6-解决中文乱码问题"><a href="#3-6-解决中文乱码问题" class="headerlink" title="3.6 解决中文乱码问题"></a>3.6 解决中文乱码问题</h2><h6 id="3-6-1-前端编码"><a href="#3-6-1-前端编码" class="headerlink" title="3.6.1 前端编码"></a>3.6.1 前端编码</h6><ul>
<li><p>JSP页面：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>HTML页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="3-6-2-服务器编码"><a href="#3-6-2-服务器编码" class="headerlink" title="3.6.2 服务器编码"></a>3.6.2 服务器编码</h6><ul>
<li><p>tomcat&#x2F;conf&#x2F;server.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span>  <span class="attr">URIEncoding</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="3-6-3-设置SpringMVC的编码方式"><a href="#3-6-3-设置SpringMVC的编码方式" class="headerlink" title="3.6.3 设置SpringMVC的编码方式"></a>3.6.3 设置SpringMVC的编码方式</h6><ul>
<li><p>在web.xml中配置SpringMVC编码过滤器的编码方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="四、SpringMVC的请求处理流程"><a href="#四、SpringMVC的请求处理流程" class="headerlink" title="四、SpringMVC的请求处理流程"></a>四、SpringMVC的请求处理流程</h2><h4 id="4-1-请求处理流程"><a href="#4-1-请求处理流程" class="headerlink" title="4.1 请求处理流程"></a>4.1 请求处理流程</h4><blockquote>
<p>SpringMVC通过前端控制器（DispatcherServlet）拦截并处理用户请求的</p>
</blockquote>
<p><img src="/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1617257389694.png" alt="1617257389694"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">① 前端发送请求被前端控制器DispatcherServlet拦截</span><br><span class="line">② 前端控制器调用处理器映射器HandlerMapping对请求URL进行解析，解析之后返回调用给前端控制器</span><br><span class="line">③ 前端控制器调用处理器适配器处理调用链</span><br><span class="line">④ 处理器适配器基于反射通过适配器设计模式完成处理器(控制器)的调用处理用户请求</span><br><span class="line">⑤ 处理器适配器将控制器返回的视图和数据信息封装成ModelAndView响应给前端控制器</span><br><span class="line">⑥ 前端控制器调用视图解析器ViewResolver对ModelAndView进行解析，将解析结果（视图资源和数据）响应给前端控制器</span><br><span class="line">⑦ 前端控制器调用视图view组件将数据进行渲染，将渲染结果（静态视图）响应给前端控制器</span><br><span class="line">⑧ 前端控制器响应用户请求</span><br></pre></td></tr></table></figure>

<h4 id="4-2-SpringMVC的核心组件"><a href="#4-2-SpringMVC的核心组件" class="headerlink" title="4.2 SpringMVC的核心组件"></a>4.2 SpringMVC的核心组件</h4><ul>
<li><p><code>DispatcherServlet</code> 前端控制器、总控制器</p>
<ul>
<li>作用：接收请求，协同各组件工作、响应请求</li>
</ul>
</li>
<li><p><code>HandlerMapping</code> 处理器映射</p>
<ul>
<li>作用：负责根据用户请求的URL找到对应的Handler</li>
<li><strong>可配置</strong> SpringMVC提供多个处理器映射的实现，可以根据需要进行配置</li>
</ul>
</li>
<li><p><code>HandlerAdapter</code> 处理器适配器</p>
<ul>
<li>作用：按照处理器映射器解析的用户请求的调用链，通过适配器模式完成Handler的调用</li>
</ul>
</li>
<li><p><code>Handler</code> 处理器&#x2F;控制器</p>
<ul>
<li>由工程师根据业务的需求进行开发</li>
<li>作用：处理请求</li>
</ul>
</li>
<li><p><code>ModelAndView</code> 视图模型</p>
<ul>
<li>作用：用于封装处理器返回的数据以及相应的视图</li>
<li>ModelAndView &#x3D; Model + View</li>
</ul>
</li>
<li><p><code>ViewResolver</code> 视图解析器</p>
<ul>
<li>作用：对ModelAndView进行解析</li>
<li><strong>可配置</strong> SpringMVC提供多个视图解析器的实现，可以根据需要进行配置</li>
</ul>
</li>
<li><p><code>View</code> 视图</p>
<ul>
<li>作用：完成数据渲染</li>
</ul>
</li>
</ul>
<h4 id="4-3-处理器映射器"><a href="#4-3-处理器映射器" class="headerlink" title="4.3  处理器映射器"></a>4.3  处理器映射器</h4><blockquote>
<p>不同的处理器映射器对URL处理的方式也不相同，使用对应的处理器映射器之后我们的前端请求规则也需要发生相应的变化</p>
<p>SpringMVC提供的处理器映射器：</p>
<ul>
<li>BeanNameUrlHandlerMapping  根据控制器的ID访问控制器</li>
<li>SimpleUrlHandlerMapping 根据控制器配置的URL访问（默认）</li>
</ul>
</blockquote>
<p>配置处理器映射器：</p>
<ul>
<li><p>在SpringMVC的配置文件中通过bean标签声明处理器映射器</p>
</li>
<li><p>配置BeanNameUrlHandlerMapping  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置SimpleUrlHandlerMapping</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;/aaa&quot;</span>&gt;</span>bookController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;/bbb&quot;</span>&gt;</span>studentController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-4-视图解析器"><a href="#4-4-视图解析器" class="headerlink" title="4.4  视图解析器"></a>4.4  视图解析器</h4><blockquote>
<p>Spring提供了多个视图解析器：</p>
<ul>
<li>UrlBasedViewResolver</li>
<li>InternalResourceViewResolver</li>
</ul>
</blockquote>
<ul>
<li><p>UrlBasedViewResolver 需要依赖jstl</p>
<ul>
<li>添加JSTL的依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>配置视图解析器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.UrlBasedViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>InternalResourceViewResolver</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="五、日期格式处理"><a href="#五、日期格式处理" class="headerlink" title="五、日期格式处理"></a>五、日期格式处理</h2><h4 id="5-1-在控制器中使用对象接收数据"><a href="#5-1-在控制器中使用对象接收数据" class="headerlink" title="5.1 在控制器中使用对象接收数据"></a>5.1 在控制器中使用对象接收数据</h4><ul>
<li><p>前端：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;test/add&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;图书名称:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookName&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;图书作者:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookAuthor&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;图书价格:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookPrice&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>后端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="comment">//表单提交的多个数据，在控制器方法中可以使用对象接收</span></span><br><span class="line">    <span class="comment">//但是提交的数据的key必须要与对象的属性名一致</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addBook</span><span class="params">(Book book)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/tips.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-2-日期格式处理"><a href="#5-2-日期格式处理" class="headerlink" title="5.2 日期格式处理"></a>5.2 日期格式处理</h4><blockquote>
<p>如果前端需要输入日期数据，在控制器中转换成Date对象，SpringMVC要求前端输入的日期格式必须为<code>yyyy/MM/dd</code></p>
<p>如果甲方要求日期格式必须为指定的格式，而这个指定格式SpringMVC不接受，该如何处理呢？</p>
<ul>
<li>自定义日期转换器</li>
</ul>
</blockquote>
<h6 id="5-2-1-创建自定义日期转换器"><a href="#5-2-1-创建自定义日期转换器" class="headerlink" title="5.2.1 创建自定义日期转换器"></a>5.2.1 创建自定义日期转换器</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 1.创建一个类实现Converter接口，泛型指定从什么类型转换为什么类型</span></span><br><span class="line"><span class="comment"> * 2.实现convert转换方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDateConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, Date&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">convert</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = sdf.parse(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="5-2-2-配置自定义转换器"><a href="#5-2-2-配置自定义转换器" class="headerlink" title="5.2.2 配置自定义转换器"></a>5.2.2 配置自定义转换器</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  声明MVC使用注解驱动  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;converterFactory&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;converterFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.utils.MyDateConverter&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="六、文件上传下载"><a href="#六、文件上传下载" class="headerlink" title="六、文件上传下载"></a>六、文件上传下载</h2><h4 id="6-1-SpringMVC框架部署"><a href="#6-1-SpringMVC框架部署" class="headerlink" title="6.1 SpringMVC框架部署"></a>6.1 SpringMVC框架部署</h4><ul>
<li><p>基于Maven创建web工程</p>
</li>
<li><p>添加SpringMVC所需的依赖</p>
<ul>
<li>Spring:context aspects jdbc  test web webmvc  jackson</li>
</ul>
</li>
<li><p>创建SpringMVC配置文件</p>
</li>
<li><p>在web.xml中配置SpringMVC的前端控制器</p>
</li>
<li><p>在web.xml中配置SpringMVC的编码过滤器</p>
</li>
<li><p>配置springmvc静态资源处理策略</p>
</li>
</ul>
<h4 id="6-2-文件上传"><a href="#6-2-文件上传" class="headerlink" title="6.2 文件上传"></a>6.2 文件上传</h4><blockquote>
<p>案例：添加图书，同时提交图书的封面图片</p>
</blockquote>
<h6 id="6-2-1-前端提交文件"><a href="#6-2-1-前端提交文件" class="headerlink" title="6.2.1 前端提交文件"></a>6.2.1 前端提交文件</h6><ul>
<li>表单提示方式必须为post</li>
<li>表单enctype属性设置为<code>multipart/form-data</code></li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;book/add&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;图书名称:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookName&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;图书作者:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookAuthor&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;图书价格:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookPrice&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;图书封面:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;imgFile&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h6 id="6-2-2-控制器接收数据和文件"><a href="#6-2-2-控制器接收数据和文件" class="headerlink" title="6.2.2 控制器接收数据和文件"></a>6.2.2 控制器接收数据和文件</h6><blockquote>
<p>SpringMVC处理上传文件需要借助于CommonsMultipartResolver文件解析器</p>
</blockquote>
<ul>
<li><p>添加依赖：commons-io  commons-fileupload</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在spring-servlet.xml中配置文件解析器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10240000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;102400&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>控制器接收文件</p>
<ul>
<li>在处理文件上传的方法中定义一个MultiPartFile类型的对象，就可以接受图片了</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addBook</span><span class="params">(Book book, MultipartFile imgFile, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------add&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//imgFile就表示上传的图片</span></span><br><span class="line">        <span class="comment">//1.截取上传文件的后缀名,生成新的文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> imgFile.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ext</span> <span class="operator">=</span> originalFilename.substring( originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>) ); </span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> System.currentTimeMillis()+ext;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取imgs目录在服务器的路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;imgs&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">savePath</span> <span class="operator">=</span> dir+<span class="string">&quot;/&quot;</span>+fileName; </span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.保存文件</span></span><br><span class="line">        imgFile.transferTo( <span class="keyword">new</span> <span class="title class_">File</span>(savePath));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.将图片的访问路径设置到book对象</span></span><br><span class="line">        book.setBookImg(<span class="string">&quot;imgs/&quot;</span>+fileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.调用service保存book到数据库</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/tips.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="6-3-文件下载"><a href="#6-3-文件下载" class="headerlink" title="6.3 文件下载"></a>6.3 文件下载</h4><h6 id="6-3-1-显示文件列表"><a href="#6-3-1-显示文件列表" class="headerlink" title="6.3.1 显示文件列表"></a>6.3.1 显示文件列表</h6><ul>
<li><p>list.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span> integrity=<span class="string">&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot;</span> crossorigin=<span class="string">&quot;anonymous&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 可选的 Bootstrap 主题文件（一般不用引入） --&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap-theme.min.css&quot;</span> integrity=<span class="string">&quot;sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp&quot;</span> crossorigin=<span class="string">&quot;anonymous&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js&quot;</span> integrity=<span class="string">&quot;sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa&quot;</span> crossorigin=<span class="string">&quot;anonymous&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h4&gt;文件列表&lt;/h4&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">&quot;row&quot;</span> id=<span class="string">&quot;container&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        $.get(<span class="string">&quot;book/list&quot;</span>,function(res)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">                <span class="type">var</span> <span class="variable">fn</span> <span class="operator">=</span> res[i];</span><br><span class="line">                <span class="type">var</span> <span class="variable">htmlStr</span> <span class="operator">=</span> <span class="string">&quot;&lt;div class=&#x27;col-lg-2  col-md-3 col-sm-4 col-xs-6&#x27;&gt;&lt;div class=&#x27;thumbnail&#x27;&gt;&lt;img src=&#x27;imgs/&quot;</span>+fn+<span class="string">&quot;&#x27; alt=&#x27;...&#x27;&gt; &lt;div class=&#x27;caption&#x27;&gt;&lt;p&gt;&lt;a href=&#x27;#&#x27; class=&#x27;btn btn-primary&#x27; role=&#x27;button&#x27;&gt;下载&lt;/a&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&quot;</span>;</span><br><span class="line">                $(<span class="string">&quot;#container&quot;</span>).append(htmlStr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;json&quot;</span>);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>BookController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String[] listImgs(HttpServletRequest request)&#123;</span><br><span class="line">    <span class="comment">//从imgs目录下获取所有的图片信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;imgs&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">imgDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir);</span><br><span class="line">    String[] fileNames = imgDir.list();</span><br><span class="line">    <span class="keyword">return</span> fileNames;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="6-3-2-实现文件下载"><a href="#6-3-2-实现文件下载" class="headerlink" title="6.3.2 实现文件下载"></a>6.3.2 实现文件下载</h6><ul>
<li><p>list.jsp</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> htmlStr = <span class="string">&quot;&lt;div class=&#x27;col-lg-2  col-md-3 col-sm-4 col-xs-6&#x27;&gt;&lt;div class=&#x27;thumbnail&#x27;&gt;&lt;img src=&#x27;imgs/&quot;</span>+fn+<span class="string">&quot;&#x27; alt=&#x27;...&#x27;&gt; &lt;div class=&#x27;caption&#x27;&gt;&lt;p&gt;&lt;a href=&#x27;book/download?fname=&quot;</span>+fn+<span class="string">&quot;&#x27; class=&#x27;btn btn-primary&#x27; role=&#x27;button&#x27;&gt;下载&lt;/a&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>BookController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadImg</span><span class="params">(String fname, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//从imgs目录找到当前文件</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;imgs&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> dir+<span class="string">&quot;/&quot;</span>+fname;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line"></span><br><span class="line">    response.setContentType(<span class="string">&quot;application/exe&quot;</span>);</span><br><span class="line">    response.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+fname);</span><br><span class="line"></span><br><span class="line">    IOUtils.copy(fileInputStream, response.getOutputStream());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="七、统一异常处理"><a href="#七、统一异常处理" class="headerlink" title="七、统一异常处理"></a>七、统一异常处理</h2><blockquote>
<p>在我们的应用系统运行的过程中，可能由于运行环境、用户操作、资源不足等各方面的原因导致系统出现异常（HTTP状态异常、Exception）；如果系统出现了异常，这些异常将会通过浏览器呈现给用户，而这种异常的显示是没有必要，因此我们可以在服务器进行特定的处理——当系统出现异常之后，呈现给用户一个统一的、可读的的异常提示页面。</p>
</blockquote>
<h4 id="7-1-HTTP异常状态统一处理"><a href="#7-1-HTTP异常状态统一处理" class="headerlink" title="7.1 HTTP异常状态统一处理"></a>7.1 HTTP异常状态统一处理</h4><blockquote>
<p><strong>HTTP Status 404</strong></p>
</blockquote>
<ul>
<li><p>创建一个用于进行异常提示的页面：404.jsp</p>
</li>
<li><p>在web.xml中进行配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="7-2-Java代码异常的统一处理"><a href="#7-2-Java代码异常的统一处理" class="headerlink" title="7.2 Java代码异常的统一处理"></a>7.2 Java代码异常的统一处理</h4><h6 id="7-2-1-基于Servlet-api的处理"><a href="#7-2-1-基于Servlet-api的处理" class="headerlink" title="7.2.1 基于Servlet-api的处理"></a>7.2.1 基于Servlet-api的处理</h6><ul>
<li><p>创建异常提示页面：err.jsp</p>
</li>
<li><p>在web.xml中进行配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.NumberFormatException<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/err.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="7-2-2-SpringMVC处理"><a href="#7-2-2-SpringMVC处理" class="headerlink" title="7.2.2 SpringMVC处理"></a>7.2.2 SpringMVC处理</h6><ul>
<li><p>使用异常处理类进行统一处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(NullPointerException.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">nullHandler</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/err1.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(NumberFormatException.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">formatHandler</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/err2.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="八、拦截器"><a href="#八、拦截器" class="headerlink" title="八、拦截器"></a>八、拦截器</h2><h4 id="8-1-拦截器介绍"><a href="#8-1-拦截器介绍" class="headerlink" title="8.1 拦截器介绍"></a>8.1 拦截器介绍</h4><blockquote>
<p>SpringMVC提供的拦截器就类似于Servlet-api中的过滤器，可以对控制器的请求进行拦截实现相关的预处理和后处理。</p>
</blockquote>
<ul>
<li>过滤器<ul>
<li>是Servlet规范的一部分，所有的web项目都可以使用</li>
<li>过滤器在web.xml配置（可以使用注解），能够拦截所有web请求</li>
</ul>
</li>
<li>拦截器<ul>
<li>是SpringMVC框架的实现，只有在SpringMVC框架中才能使用</li>
<li>拦截器在SpringMVC配置文件进行配置，不会拦截SpringMVC放行的资源（jsp\html\css..）</li>
</ul>
</li>
</ul>
<h4 id="8-2-自定义拦截器"><a href="#8-2-自定义拦截器" class="headerlink" title="8.2 自定义拦截器"></a>8.2 自定义拦截器</h4><h6 id="8-2-1-创建拦截器"><a href="#8-2-1-创建拦截器" class="headerlink" title="8.2.1 创建拦截器"></a>8.2.1 创建拦截器</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//预处理方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------预处理&quot;</span>);</span><br><span class="line">        Enumeration&lt;String&gt; keys = request.getParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (keys.hasMoreElements())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keys.nextElement();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;bookId&quot;</span>.equals(key))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        response.setStatus(<span class="number">400</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后处理方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;tips&quot;</span>,<span class="string">&quot;这是通过拦截器的后处理添加的数据&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------后处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="8-2-2-配置拦截器"><a href="#8-2-2-配置拦截器" class="headerlink" title="8.2.2 配置拦截器"></a>8.2.2 配置拦截器</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/book/query&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/book/add&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/student/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/student/add&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.utils.MyInterceptor1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="8-3-拦截器链"><a href="#8-3-拦截器链" class="headerlink" title="8.3 拦截器链"></a>8.3 拦截器链</h4><blockquote>
<p>将多个拦截器按照一定的顺序构成一个执行链</p>
</blockquote>
<p><img src="/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1617334128888.png" alt="1617334128888"></p>
<h2 id="九、SSM整合"><a href="#九、SSM整合" class="headerlink" title="九、SSM整合"></a>九、SSM整合</h2><h4 id="9-1-创建web项目"><a href="#9-1-创建web项目" class="headerlink" title="9.1 创建web项目"></a>9.1 创建web项目</h4><ul>
<li><p>创建maven工程</p>
</li>
<li><p>修改pom文件 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>完成maven工程web项目结构</p>
</li>
<li><p>添加web项目依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置服务器运行环境</p>
</li>
</ul>
<h4 id="9-2-部署MyBatis"><a href="#9-2-部署MyBatis" class="headerlink" title="9.2 部署MyBatis"></a>9.2 部署MyBatis</h4><ul>
<li><p>添加MyBatis依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mybatis依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建MyBatis配置文件<code>mybatis-config.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-3-部署Spring、SpringMVC"><a href="#9-3-部署Spring、SpringMVC" class="headerlink" title="9.3 部署Spring、SpringMVC"></a>9.3 部署Spring、SpringMVC</h4><h6 id="9-3-1-添加依赖"><a href="#9-3-1-添加依赖" class="headerlink" title="9.3.1 添加依赖"></a>9.3.1 添加依赖</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--context--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--aspects--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jdbc--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--test--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--webmvc--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jackson-databind--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="9-3-2-创建Spring配置"><a href="#9-3-2-创建Spring配置" class="headerlink" title="9.3.2 创建Spring配置"></a>9.3.2 创建Spring配置</h6><ul>
<li><p>多配置文件分开配置</p>
<ul>
<li><p>spring-context.xml    只配置注解声明、以及类的管理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明使用注解配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明Spring工厂注解的扫描范围 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.qfedu&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>spring-mvc.xml   进行mvc相关的配置，例如静态资源配置、拦截器配置等</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明MVC使用注解配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>spring-mybatis.xml  进行Spring与MyBatis整合相关的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h6 id="9-3-3-配置SpringMVC前端控制器"><a href="#9-3-3-配置SpringMVC前端控制器" class="headerlink" title="9.3.3 配置SpringMVC前端控制器"></a>9.3.3 配置SpringMVC前端控制器</h6><ul>
<li>在web.xml进行配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="9-4-整合配置-IoC"><a href="#9-4-整合配置-IoC" class="headerlink" title="9.4 整合配置(IoC)"></a>9.4 整合配置(IoC)</h4><h6 id="9-4-1-导入mybatis-spring依赖"><a href="#9-4-1-导入mybatis-spring依赖" class="headerlink" title="9.4.1 导入mybatis-spring依赖"></a>9.4.1 导入mybatis-spring依赖</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="9-4-2-配置druid连接池"><a href="#9-4-2-配置druid连接池" class="headerlink" title="9.4.2 配置druid连接池"></a>9.4.2 配置druid连接池</h6><ul>
<li><p>添加druid依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建druid.properties,并配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">druid.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">druid.url</span>=<span class="string">jdbc:mysql://localhost:3306/db_2010_mybatis?characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">druid.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">druid.password</span>=<span class="string">admin123</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## 连接池参数</span></span><br><span class="line"><span class="attr">druid.pool.init</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">druid.pool.minIdle</span>=<span class="string">3</span></span><br><span class="line"><span class="attr">druid.pool.maxActive</span>=<span class="string">20</span></span><br><span class="line"><span class="attr">druid.pool.timeout</span>=<span class="string">30000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在spring-mybatis.xml配置数据源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:druid.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.init&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.minIdle&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.maxActive&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxWait&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.timeout&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="9-4-3-配置SqlSessionFactory"><a href="#9-4-3-配置SqlSessionFactory" class="headerlink" title="9.4.3 配置SqlSessionFactory"></a>9.4.3 配置SqlSessionFactory</h6><ul>
<li><p>在spring-mybatis.xml配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mappers/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.qfedu.bean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="9-4-4-配置MapperScannerConfigurer"><a href="#9-4-4-配置MapperScannerConfigurer" class="headerlink" title="9.4.4 配置MapperScannerConfigurer"></a>9.4.4 配置MapperScannerConfigurer</h6><ul>
<li><p>在spring-mybatis.xml配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.qfedu.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-5-整合配置（AOP）"><a href="#9-5-整合配置（AOP）" class="headerlink" title="9.5 整合配置（AOP）"></a>9.5 整合配置（AOP）</h4><blockquote>
<p>使用Spring提供的事务管理完成DAO操作的事务管理</p>
<p>基于注解的事务管理配置：</p>
</blockquote>
<ul>
<li><p>将Spring提供的事务管理切面类配置到Spring容器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-6-整合测试"><a href="#9-6-整合测试" class="headerlink" title="9.6 整合测试"></a>9.6 整合测试</h4><h6 id="9-6-1-完成User的查询操作"><a href="#9-6-1-完成User的查询操作" class="headerlink" title="9.6.1 完成User的查询操作"></a>9.6.1 完成User的查询操作</h6><ul>
<li><p>创建实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userPwd;</span><br><span class="line">    <span class="keyword">private</span> String userRealname;</span><br><span class="line">    <span class="keyword">private</span> String userImg;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在DAO包中创建接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDAO</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserByName</span><span class="params">(String name)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在mappers目录下创建映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qfedu.dao.UserDAO&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userPwd&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_realname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userRealname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_img&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userImg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByName&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        select user_id,user_name,user_pwd,user_realname,user_img</span><br><span class="line">        from users</span><br><span class="line">        where user_name=#&#123;userName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="9-6-2-对DAO单元测试"><a href="#9-6-2-对DAO单元测试" class="headerlink" title="9.6.2 对DAO单元测试"></a>9.6.2 对DAO单元测试</h6><ul>
<li><p>添加junit、spring-test依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&#123;&quot;classpath:spring-context.xml&quot;,&quot;classpath:spring-mvc.xml&quot;,&quot;classpath:spring-mybatis.xml&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDAOTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryUserByName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDAO.queryUserByName(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Spring面试题整理</title>
    <url>/posts/3476439073.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="1-Spring是什么？"><a href="#1-Spring是什么？" class="headerlink" title="1.Spring是什么？"></a>1.Spring是什么？</h2><p>Spring是一个轻量级的IoC和AOP容器框架。是为Java应用程序提供基础性服务的一套框架，目的是为了简化企业应用程序的开发，使开发者只需要关注业务需求。</p>
<p>常见的配置方式有两种：</p>
<ol>
<li>基于XML文件的配置方式</li>
<li>基于注解的配置方式</li>
</ol>
<p>主要由以下七个模块组成：</p>
<ul>
<li>Spring Core：核心类库，可以说Spring其他所有的功能都需要依赖这个类库。主要提供IoC服务。</li>
<li>Spring AOP：提供了面向切面的编程实现。</li>
<li>Spring JDBC：提供了Java连接数据库的实现</li>
<li>Spring ORM：对现有的ORM框架的支持，比如Hibernate。</li>
<li>Spring Web：为创建Web应用程序提供了支持。</li>
<li>SpringMVC：提供了面向WEB应用的Model-View-Controller的实现。</li>
<li>Spring Test:提供了对JUnit测试的支持。</li>
</ul>
<h2 id="2-Spring的优点？"><a href="#2-Spring的优点？" class="headerlink" title="2.Spring的优点？"></a>2.Spring的优点？</h2><ol>
<li><p>方便解耦，简化开发</p>
</li>
<li><ol>
<li>Spring就是一个大工厂，可以将所有对象的创建和依赖关系的维护，交给Spring管理。</li>
</ol>
</li>
<li><p>AOP编程的支持</p>
</li>
<li><ol>
<li>Spring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能。</li>
</ol>
</li>
<li><p>声明式事务的支持</p>
</li>
<li><ol>
<li>只需要通过配置就可以完成对事务的管理，而无需手动编程。</li>
</ol>
</li>
<li><p>方便程序的测试</p>
</li>
<li><ol>
<li>Spring对Junit4支持，可以通过注解方便的测试Spring程序。</li>
</ol>
</li>
<li><p>方便集成各种优秀框架</p>
</li>
<li><ol>
<li>Spring内部提供了对各种优秀框架的直接支持（如：Struts、Hibernate、MyBatis等）。</li>
</ol>
</li>
<li><p>降低JavaEE API的使用难度</p>
</li>
<li><ol>
<li>Spring对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低。</li>
</ol>
</li>
</ol>
<h2 id="3-谈谈你对Spring-IoC的理解？"><a href="#3-谈谈你对Spring-IoC的理解？" class="headerlink" title="3.谈谈你对Spring IoC的理解？"></a>3.谈谈你对Spring IoC的理解？</h2><ol>
<li>IoC就是控制反转，是一种<strong>设计思想</strong>。是指转移创建对象的控制权，就是<strong>原本在程序中需要手动创建对象的控制权现在交由Spring框架来管理。</strong>并由容器根据配置文件去创建实例和管理各个实例之间的依赖关系，也利于功能的复用。</li>
<li><strong>IoC容器是Spring用来实现IoC的载体，IoC容器实际上就是个Map，Map中存放的是各种对象。</strong></li>
<li>DI依赖注入，和控制反转是同一个概念的不同角度的描述，即 <strong>应用程序在运行时依赖IoC容器来动态注入对象需要的外部资源。</strong></li>
<li>将对象之间的相互依赖关系交由IoC容器来管理，并由IoC容器完成对象的注入。这样可以很大程度上简化开发，把应用从复杂得依赖关系中解放出来。</li>
<li><strong>IoC容器就像一个工厂，当我们要创建一个对象的时候，只需要配置好配置文件或者注解即可，完全不用考虑对象时怎么创建出来的。</strong></li>
<li>Spring的IoC注入方式有<strong>三种</strong>：构造器注入、Setter方法注入、根据注解注入。</li>
</ol>
<h2 id="4-谈谈你对Spring-AOP的理解？"><a href="#4-谈谈你对Spring-AOP的理解？" class="headerlink" title="4.谈谈你对Spring AOP的理解？"></a>4.谈谈你对Spring AOP的理解？</h2><h3 id="AOP理解："><a href="#AOP理解：" class="headerlink" title="AOP理解："></a>AOP理解：</h3><p>AOP是指面向切面编程，是面向对象的一种补充，能够将那些<strong>与业务无关，但是能对多个业务产生影响的共同行为和逻辑</strong>，<strong>抽取并封装为一个可重用的模块，</strong>这个模块就被命名为“切面”，<strong>便于减少系统中重复的代码，降低了模块间的耦合度，同时提高了系统的可扩展性和可维护性。</strong>可用于权限认证、日志和事务处理。</p>
<h3 id="SpringAOP和-AspectJ-Aop的区别："><a href="#SpringAOP和-AspectJ-Aop的区别：" class="headerlink" title="SpringAOP和 AspectJ Aop的区别："></a>SpringAOP和 AspectJ Aop的区别：</h3><p>AOP的实现主要在于<strong>代理模式</strong>，而AOP代理主要分为静态代理和动态代理。<strong>静态代理的代表是AspectJ；动态代理的代表是Spring AOP。</strong></p>
<ul>
<li>静态代理，就是指AOP在<strong>编译阶段生成AOP代理类</strong>，因此也被称为编译时增强，他会在编译阶段将切面织入到Java字节码中，运行时就是已经增强之后的AOP对象。</li>
<li>动态代理时输入运行时增强，是<strong>在每次运行时在内存中临时为方法生成一个AOP对象</strong>，这个AOP对象包含目标对象的全部方法，并且在特定的切点上做增强处理，然后回调原对象的方法。</li>
<li>如果切面较少，两者性能差异不大，<strong>但是如果切面太多，最好选择AspjectJ，因为它比SpringAOP快很多。</strong></li>
</ul>
<h3 id="SpringAOP动态代理的两种方式："><a href="#SpringAOP动态代理的两种方式：" class="headerlink" title="SpringAOP动态代理的两种方式："></a>SpringAOP动态代理的两种方式：</h3><p><strong>JDK动态代理和CGLIB动态代理：</strong></p>
<ul>
<li>JDK动态代理<strong>只提供接口的代理，不支持类的代理。</strong></li>
<li>所以要代理的对象如果实现了某个接口，SpringAOP就会使用JDK动态代理去创建代理对象；</li>
<li>对于没有实现接口的对象，会使用CGLIB动态代理去创建代理对象。</li>
</ul>
<h2 id="5-BeanFactory和ApplicationContext有什么区别？"><a href="#5-BeanFactory和ApplicationContext有什么区别？" class="headerlink" title="5.BeanFactory和ApplicationContext有什么区别？"></a>5.BeanFactory和ApplicationContext有什么区别？</h2><p>​        BeanFactory和ApplicationContext是Spring的两大核心接口，<strong>都可以当做Spring的容器。</strong></p>
<ul>
<li><p>但是BeanFactory 才是 Spring 容器中的顶层接口。<br>ApplicationContext 是它的子接口。</p>
</li>
<li><p>其次是创建对象的时间点不一样。</p>
</li>
<li><ul>
<li>ApplicationContext，它是在<strong>容器启动时，一次性创建了所有的Bean。</strong>这样，在容器启动时，我们就可以发现Spring中存在的配置错误，这样有利于检查所依赖属性是否注入。 </li>
<li>BeanFactroy采用的是<strong>延迟加载形式</strong>来注入Bean的，即<strong>只有在使用到某个Bean时(调用getBean())，才对该Bean进行加载实例化。</strong>这样，我们就不能发现一些存在的Spring的配置问题。</li>
<li>相对于基本的BeanFactory，ApplicationContext 唯一的不足是占用内存空间。当应用程序配置Bean较多时，程序启动较慢。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>org.springframework.beans.factory.BeanCreationException解决方法</title>
    <url>/posts/1965663023.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220713205014200.png" alt="image-20220713205014200"></p>
<p>今天运行Springboot项目的时候发现启动不起来了，因为我把target目录删了重新装了一次，然后就一直出现这个错误，在网上搜了好多解决方案，还重启了好多次，还是不行，最后没办法，一行一行的看，最后发现是我用插件生成的<code>Mapper</code>文件里面的<code>namespace</code>没有改成我自己的，废了我一下午时间，电脑都差点砸了。</p>
<p>这是插件生成的：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220713205316853.png" alt="image-20220713205316853"></p>
<p>而我的目录是这样的：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220713205352603.png" alt="image-20220713205352603"></p>
<p>将文件目录改对：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220713205454998.png" alt="image-20220713205454998"></p>
<p>问题就完美解决了！</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220713205610392.png" alt="image-20220713205610392"></p>
<p>以后可不能犯这种小错误，差点把自己气死！[○･｀Д´･ ○]</p>
]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
  </entry>
  <entry>
    <title>创建Springboot超时问题</title>
    <url>/posts/3557858762.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220706091502635.png" alt="image-20220706091502635"></p>
<p>在创建springboot项目的时候，可能会出现下图这种连接超时的问题，因为创建boot项目的本质是从官网下载项目导入本地，一般国内访问国外的网站就会有超时问题。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/20210717123020896.png" alt="img"></p>
<p><strong>解决方案：</strong></p>
<p>不选择默认的Default，选用Custom，并使用阿里云的镜像节点来创建Springboot项目：<a href="http://start.aliyun.com/">http://start.aliyun.com</a></p>
<p>如下图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220706092015509.png" alt="image-20220706092015509"></p>
]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
  </entry>
  <entry>
    <title>Spring学习笔记</title>
    <url>/posts/1387956724.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="一、Spring"><a href="#一、Spring" class="headerlink" title="一、Spring"></a>一、Spring</h1><h2 id="1-1-Web项目开发中的耦合度的问题"><a href="#1-1-Web项目开发中的耦合度的问题" class="headerlink" title="1.1 Web项目开发中的耦合度的问题"></a>1.1 Web项目开发中的耦合度的问题</h2><ul>
<li>在Servlet中调用service的方法，则需要在Servlet类中通过new关键字来创建Service的实例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductService</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">listProducts</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl1</span> <span class="keyword">implements</span> <span class="title class_">ProductService</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">listProducts</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//查询热销商品</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl2</span> <span class="keyword">implements</span> <span class="title class_">ProductService</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">listProducts</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//查询好评商品</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductListServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在servlet中使用new关键字创建ProductServiceImpl1对象，增加了servlet和service的耦合度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ProductService</span> <span class="variable">productService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductServiceImpl1</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span>&#123;</span><br><span class="line">        doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span>&#123;</span><br><span class="line">        productService.listProducts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在service实现类中需要调用DAO中的方法，也需要在servcie实现类通过new关键字创建DAO实现类对象</li>
<li>如果使用new关键字创建对象：<ul>
<li>失去了面向接口编程的灵活性</li>
<li>代码的侵入性增强（<strong>增加了耦合度</strong>）、降低了代码的灵活性</li>
<li>增强项目的扩展性</li>
</ul>
</li>
</ul>
<h2 id="1-2-面向接口编程"><a href="#1-2-面向接口编程" class="headerlink" title="1.2 面向接口编程"></a>1.2 面向接口编程</h2><table>
<thead>
<tr>
<th>面向接口编程</th>
</tr>
</thead>
<tbody><tr>
<td></td>
</tr>
</tbody></table>
<p><code>解决方案</code>：在Servlet中定义Service接口的对象变量，不使用new关键字创建实现类对象，在servlet的实例化的时候，通过反射动态的给Service对象变量赋值。</p>
<p><code>如何实现</code>：Spring可以做到！！！</p>
<h2 id="1-3-Spring简介"><a href="#1-3-Spring简介" class="headerlink" title="1.3 Spring简介"></a>1.3 Spring简介</h2><blockquote>
<p>Spring是一个<code>轻量级的控制反转和面向切面的容器</code>框架，用来解决企业项目开发的复杂度问题—解耦</p>
</blockquote>
<ul>
<li>轻量级：体积小，对代码没有侵入性</li>
<li>控制反转：IoC（Inverse of Control）,把创建对象的工作交由Spring完成，Spring在创建对象的时候同时可以完成对象属性赋值（DI）</li>
<li>面向切面：AOP（Aspect Oriented Programming）面向切面编程，可以在不改变原有业务逻辑的情况下实现对业务的增强</li>
<li>容器：实例的容器，管理创建的对象</li>
</ul>
<h2 id="1-4-Spring架构"><a href="#1-4-Spring架构" class="headerlink" title="1.4 Spring架构"></a>1.4 Spring架构</h2><ul>
<li><p>官网 <a href="https://spring.io/">https://spring.io/</a></p>

</li>
<li><p>Spring架构图</p>
<ul>
<li>Spring Framework是Spring生态圈最基础的项目，是其他项目的基础</li>
</ul>
</li>
</ul>
<h6 id="1-Core-Container"><a href="#1-Core-Container" class="headerlink" title="1. Core Container"></a>1. Core Container</h6><blockquote>
<p>Spring核心容器组件，用于完成实例的创建和管理</p>
<ul>
<li>core</li>
<li>beans   实例管理</li>
<li>context 容器上下文</li>
</ul>
</blockquote>
<h6 id="2-AOP、Aspects"><a href="#2-AOP、Aspects" class="headerlink" title="2. AOP、Aspects"></a>2. AOP、Aspects</h6><blockquote>
<p>Spring AOP组件，实现面向切面编程</p>
<ul>
<li>aop</li>
<li>aspects</li>
</ul>
</blockquote>
<h6 id="3-web"><a href="#3-web" class="headerlink" title="3. web"></a>3. web</h6><blockquote>
<p>Spring web组件实际指的是SpringMVC框架，实现web项目的MVC控制</p>
<ul>
<li>web (Spring对web项目的支持)</li>
<li>webmvc (SpringMVC组件)</li>
</ul>
</blockquote>
<h6 id="4-Data-Access"><a href="#4-Data-Access" class="headerlink" title="4. Data Access"></a>4. Data Access</h6><blockquote>
<p>Spring数据访问组件，也是一个基于JDBC封装的持久层框架（即使没有mybatis，Spring也可以完成持久化操作）</p>
<ul>
<li>Data Access：数据访问</li>
<li>Data Integeration：数据集成</li>
</ul>
</blockquote>
<h6 id="5-Test"><a href="#5-Test" class="headerlink" title="5. Test"></a>5. Test</h6><blockquote>
<p>Spring的单元测试组件，提供了Spring环境下的单元测试支持</p>
<ul>
<li>test</li>
</ul>
</blockquote>
<h2 id="1-5-Spring-Framework学习路线"><a href="#1-5-Spring-Framework学习路线" class="headerlink" title="1.5 Spring Framework学习路线"></a>1.5 Spring Framework学习路线</h2><ol>
<li>核心容器<ol>
<li>核心概念（IOC、DI）</li>
<li>容器基本操作</li>
</ol>
</li>
<li>整合<ol>
<li>整合MyBatis</li>
</ol>
</li>
<li>AOP<ol>
<li>核心概念</li>
<li>AOP基础操作</li>
<li>AOP使用开发</li>
</ol>
</li>
<li>事务<ol>
<li>事务实用开发</li>
</ol>
</li>
<li>家族<ol>
<li>SpringMVC</li>
<li>SpringBoot</li>
<li>SpringCloud</li>
</ol>
</li>
</ol>
<h1 id="二、Spring-IoC-—-基于XML"><a href="#二、Spring-IoC-—-基于XML" class="headerlink" title="二、Spring IoC — 基于XML"></a>二、Spring IoC — 基于XML</h1><h2 id="2-1-Spring框架部署（Ioc）"><a href="#2-1-Spring框架部署（Ioc）" class="headerlink" title="2.1 Spring框架部署（Ioc）"></a>2.1 Spring框架部署（Ioc）</h2><blockquote>
<p>SpringIoC容器组件，可以完成对象的创建、对象属性的赋值、对象管理</p>
</blockquote>
<h3 id="1-创建Maven工程"><a href="#1-创建Maven工程" class="headerlink" title="1.创建Maven工程"></a>1.创建Maven工程</h3><ul>
<li>Java</li>
<li>Web</li>
</ul>
<h3 id="2-添加SpringIoC依赖"><a href="#2-添加SpringIoC依赖" class="headerlink" title="2. 添加SpringIoC依赖"></a>2. 添加SpringIoC依赖</h3><ul>
<li>core</li>
<li>beans</li>
<li>aop</li>
<li>context</li>
<li>expression</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-beans --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-创建Spring配置文件"><a href="#3-创建Spring配置文件" class="headerlink" title="3. 创建Spring配置文件"></a>3. 创建Spring配置文件</h3><blockquote>
<p>通过配置文件“告诉”Spring容器创建什么对象，给对象属性赋什么值</p>
</blockquote>
<ul>
<li>在resources目录下创建名为<code>applicationContext.xml</code>的文件（文件名可以自定义，但是约定俗成通用使用这个）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  对于一个xml文件如果作为框架的配置文件，需要遵守框架的配置规则  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  通常一个框架为了让开发者能够正确的配置，都会提供xml的规范文件（dtd\xsd）  --&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-1-如何定制配置文件模板"><a href="#3-1-如何定制配置文件模板" class="headerlink" title="3.1 如何定制配置文件模板"></a>3.1 如何定制配置文件模板</h4>



<h2 id="2-2-SpringIOC使用"><a href="#2-2-SpringIOC使用" class="headerlink" title="2.2 SpringIOC使用"></a>2.2 SpringIOC使用</h2><blockquote>
<p>使用SpringIOC组件创建并管理对象</p>
</blockquote>
<h3 id="1-创建一个实体类"><a href="#1-创建一个实体类" class="headerlink" title="1.创建一个实体类"></a>1.创建一个实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String stuNum;</span><br><span class="line">    <span class="keyword">private</span> String stuName;</span><br><span class="line">    <span class="keyword">private</span> String stuGender;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> stuAge;</span><br><span class="line">    <span class="keyword">private</span> Date enterenceTime;<span class="comment">//入学日期</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStuNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stuNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStuNum</span><span class="params">(String stuNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stuNum = stuNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStuName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stuName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStuName</span><span class="params">(String stuName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stuName = stuName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;stuNum=&#x27;&quot;</span> + stuNum + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, stuName=&#x27;&quot;</span> + stuName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, stuGender=&#x27;&quot;</span> + stuGender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, stuAge=&quot;</span> + stuAge +</span><br><span class="line">                <span class="string">&quot;, enterenceTime=&quot;</span> + enterenceTime +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStuGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stuGender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStuGender</span><span class="params">(String stuGender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stuGender = stuGender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStuAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stuAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStuAge</span><span class="params">(<span class="type">int</span> stuAge)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stuAge = stuAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getEnterenceTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> enterenceTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnterenceTime</span><span class="params">(Date enterenceTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.enterenceTime = enterenceTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-在Spring配置文件中配置实体类"><a href="#2-在Spring配置文件中配置实体类" class="headerlink" title="2.在Spring配置文件中配置实体类"></a>2.在Spring配置文件中配置实体类</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--通过bean标签将实体类配置给Spring进行管理,id表示实体类的唯一标识--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10002&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;水中月&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuGender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuAge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-初始化Spring对象工厂，获取对象"><a href="#3-初始化Spring对象工厂，获取对象" class="headerlink" title="3.初始化Spring对象工厂，获取对象"></a>3.初始化Spring对象工厂，获取对象</h3><ul>
<li>ClassPathXMLApplicationContext</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过Spring容器创建对象</span></span><br><span class="line"><span class="comment">//1.初始化Spring容器,加载Spring配置文件，可以把context理解为Spring容器</span></span><br><span class="line"><span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">//2.通过Spring容器获取Student对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> (Student) context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(student2);</span><br></pre></td></tr></table></figure>

<h2 id="2-3-IoC和DI"><a href="#2-3-IoC和DI" class="headerlink" title="2.3 IoC和DI"></a>2.3 IoC和DI</h2><ul>
<li>IoC（Inverse of Control）控制反转，通过Spring对象工厂完成对象的创建</li>
<li>DI（Dependency Injection）依赖注入，在Spring完成对象创建的统一依赖Spring容器完成对对象属性的赋值</li>
</ul>
<h3 id="1-IoC"><a href="#1-IoC" class="headerlink" title="1. IoC"></a>1. IoC</h3><blockquote>
<p>当我们需要通过Spring对象工厂创建某个类的对象的时候，需要将这个对象交给Spring管理–通过bean标签配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过bean将实体类配置给Spring进行管理,id表示实体类的唯一表示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-DI"><a href="#2-DI" class="headerlink" title="2. DI"></a>2. DI</h3><blockquote>
<p>通过Spring容器给对象的属性进行赋值</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过bean标签将实体类配置给Spring进行管理,id表示实体类的唯一标识--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10002&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;水中月&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuGender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuAge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enterenceTime&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-4-DI依赖注入"><a href="#2-4-DI依赖注入" class="headerlink" title="2.4 DI依赖注入"></a>2.4 DI依赖注入</h2><h3 id="1-依赖注入的三种方式"><a href="#1-依赖注入的三种方式" class="headerlink" title="1.依赖注入的三种方式"></a>1.依赖注入的三种方式</h3><blockquote>
<p>Spring容器加载配置文件之后通过<code>反射</code>创建类的对象，并给属性赋值；</p>
<p>Spring容器通过反射实现属性注入有三种方式：</p>
<ul>
<li>set方法助注入</li>
<li>构造器注入</li>
<li>接口注入(不常用)</li>
</ul>
</blockquote>
<h3 id="2-set方法注入"><a href="#2-set方法注入" class="headerlink" title="2. set方法注入"></a>2. set方法注入</h3><blockquote>
<p>在bean标签中通过配置property标签给对象属性赋值，实际上就是通过反射调用set方法完成属性的注入</p>
</blockquote>
<p><strong>简单类型及字符串</strong></p>
<ul>
<li>直接通过property标签的value属性赋值</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过bean标签将实体类配置给Spring进行管理,id表示实体类的唯一标识--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--字符串类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10007&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--简单类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuAge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wight&quot;</span> <span class="attr">value</span>=<span class="string">&quot;74.56&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>日期类型</strong></p>
<ul>
<li>方式1：在<code>property</code>标签中通过<code>ref</code>引用Spring容器中的对象</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过bean标签将实体类配置给Spring进行管理,id表示实体类的唯一标识--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日期类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enterenceTime&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;year&quot;</span> <span class="attr">value</span>=<span class="string">&quot;121&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;month&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>方式2：在<code>property</code>标签中添加字标签<code>bean</code>来指定对象</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日期类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enterenceTime&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>自定义类对象属性</strong></p>
<ul>
<li>方式1：在<code>property</code>标签中通过<code>ref</code>引用Spring容器中的对象</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自定义类对象类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cla&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cla&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2020&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;className&quot;</span> <span class="attr">value</span>=<span class="string">&quot;计算机技术一班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>方式2：在<code>property</code>标签中添加字标签<code>bean</code>来指定对象</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自定义类对象类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cla&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2020&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;className&quot;</span> <span class="attr">value</span>=<span class="string">&quot;计算机技术一班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>集合类型</strong></p>
<ul>
<li><p>List</p>
<ul>
<li>List<String> List中的元素是字符串类型或者简单类型的封装类时</li>
<li>采用如下两种写法</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--写法1--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;旅游,电影,游泳&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--写法2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>旅游<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>打游戏<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>List<Object>List中的元素是对象类型时</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--写法1 bean标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--写法2 引用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>Set</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sets&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--和List元素注入方式相同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Map</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>key1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>key2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Properties：properties继承自<code>Hashtable类</code>可以直接给键值对，因为properties里面的键<strong>值对只能是字符串类型</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k1&quot;</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k2&quot;</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-构造器注入"><a href="#3-构造器注入" class="headerlink" title="3.构造器注入"></a>3.构造器注入</h3><p><strong>简单类型、字符串、Object类型</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;stuNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10008&quot;</span>/&gt;</span>  <span class="comment">&lt;!--字符串类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;stuGender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;焰灵姬&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;stuAge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span>           <span class="comment">&lt;!--简单类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;wight&quot;</span> <span class="attr">value</span>=<span class="string">&quot;46.53&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;enterenceTime&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;date&quot;</span>/&gt;</span>           <span class="comment">&lt;!--对象类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span>&gt;</span>                       <span class="comment">&lt;!--对象类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>集合类型属性</strong></p>
<p>类代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; sets;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(List&lt;String&gt; hobbies, Set&lt;String&gt; sets, Map&lt;String, Object&gt; maps, Properties properties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hobbies = hobbies;</span><br><span class="line">        <span class="built_in">this</span>.sets = sets;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">        <span class="built_in">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>11<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>22<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>33<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>cc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>key1<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>value1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>key2<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>value2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k1&quot;</span>&gt;</span>v1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k2&quot;</span>&gt;</span>v2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-5-Bean的作用域"><a href="#2-5-Bean的作用域" class="headerlink" title="2.5 Bean的作用域"></a>2.5 Bean的作用域</h2><blockquote>
<p>在bean标签可以通过scope属性指定对象的的作用域</p>
<ul>
<li>scope&#x3D;”singleton”  表示当前bean是单例模式（默认饿汉模式，Spring容器初始化阶段就会完成此对象的创建；当在bean标签中设置 lazy-init&#x3D;”true”变为懒汉模式）</li>
<li>scope&#x3D;”prototype” 表示当前bean为非单例模式，每次通过Spring容器获取此bean的对象时都会创建一个新的对象</li>
</ul>
</blockquote>
<ul>
<li>单例</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>多例</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-6-Bean的生命周期方法"><a href="#2-6-Bean的生命周期方法" class="headerlink" title="2.6 Bean的生命周期方法"></a>2.6 Bean的生命周期方法</h2><ul>
<li>Bean类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bookId;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//初始化方法：在创建当前类对象时调用的方法，进行一些资源准备工作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Init.....&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.bookId = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">this</span>.bookName = <span class="string">&quot;初始值：三国演义&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//销毁方法：在Spring容器销毁对象时调用此方法，进行一些资源回收性的工作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Spring配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在bean标签中通过init-method属性指定当前bean的初始化方法，初始化方法在构造器执行之后执行--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在bean标签中通过destory-method属性指定当前bean的销毁方法，销毁方法在对象销毁之前执行--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-7-自动装配"><a href="#2-7-自动装配" class="headerlink" title="2.7 自动装配"></a>2.7 自动装配</h2><blockquote>
<p>自动装配：Spring在实例化当前bean的时候从Spring容器中找到匹配的实例赋值给当前bean的属性</p>
<p>自动装配策略有两种：</p>
<ul>
<li>byName  根据当前Bean的属性名在Spring容器中寻找匹配的对象 ，如果根据name找打了bean但是类型不匹配则抛出异常</li>
<li>byType  根据当前Bean的属性类型在Spring容器中寻找匹配的对象，如果根据类型找到了多个bean也会抛出异常</li>
</ul>
</blockquote>
<ul>
<li>byName</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--byName   根据当前bean的属性名在Spring容器中寻找匹配的对象，如果根据name找到了bean但是类型不匹配则会抛出异常--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>byType</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--byName   根据当前bean的属性名在Spring容器中寻找匹配的对象，如果根据name找到了bean但是类型不匹配则会抛出异常--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazz2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Clazz&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.ioc.bean.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-8-SpringIoC工作原理"><a href="#2-8-SpringIoC工作原理" class="headerlink" title="2.8 SpringIoC工作原理"></a>2.8 SpringIoC工作原理</h2><p><img src="/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220415090803104.png" alt="image-20220415090803104"></p>
<h1 id="三、Spring-IoC-基于注解"><a href="#三、Spring-IoC-基于注解" class="headerlink" title="三、Spring IoC-基于注解"></a>三、Spring IoC-基于注解</h1><blockquote>
<p>SpringIoC的使用，需要通过xml将类声明给Spring容器进行管理，进而通过Spring工厂完成对象的创建以及属性值的注入；</p>
<p>Spring除了提供基于xml的配置方式，同时还提供了注解的配置：直接在实体类中添加注解声明给Spring容器管理，以简化开发步骤。</p>
</blockquote>
<h2 id="3-1-Spring-框架部署"><a href="#3-1-Spring-框架部署" class="headerlink" title="3.1 Spring 框架部署"></a>3.1 Spring 框架部署</h2><h3 id="1-创建Maven项目"><a href="#1-创建Maven项目" class="headerlink" title="1.创建Maven项目"></a>1.创建Maven项目</h3><p>略</p>
<h3 id="2-添加SpringIoC依赖-1"><a href="#2-添加SpringIoC依赖-1" class="headerlink" title="2.添加SpringIoC依赖"></a>2.添加SpringIoC依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-创建Spring配置文件-1"><a href="#3-创建Spring配置文件-1" class="headerlink" title="3.创建Spring配置文件"></a>3.创建Spring配置文件</h3><ul>
<li>Spring容器初始化时，只会加载applicationContext.xml文件，在实体类中添加的注解不会被Spring扫描，所以需要在<code>applicationContext.xml声明Spring的扫描范围</code>，以达到Spring初始化扫描带有注解的实体类并完成初始化工作。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  对于一个xml文件如果作为框架的配置文件，需要遵守框架的配置规则  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  通常一个框架为了让开发者能够正确的配置，都会提供xml的规范文件（dtd\xsd）  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明使用注解配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明Spring工厂注解的扫描范围--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.qfedu.beans&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-2-SpringIoC常用注解"><a href="#3-2-SpringIoC常用注解" class="headerlink" title="3.2 SpringIoC常用注解"></a>3.2 SpringIoC常用注解</h2><h3 id="1-Component"><a href="#1-Component" class="headerlink" title="1. @Component"></a>1. <code>@Component</code></h3><ul>
<li>类注解，声明此实体类被Spring容器进行管理，相当于bean标签的作用</li>
<li><code>@Component(value = &quot;stu&quot;)</code>:value属性用于指定当前bean的id，相当于bean标签的id属性；value属性可以忽略不写，如果省略则当前bean的id默认为类名的首字母小写</li>
<li>除了<code>@Component</code>之外，<code>@Service</code>、<code>@Controller</code>、<code>@Repository</code>这三个注解也可以将类声明给Spring管理，但是有语义上的区别:<ul>
<li><code>@Controller</code> 注解主要声明将控制器类配置给Spring管理，例如Servlet</li>
<li><code>@Service</code> 注解主要声明业务处理类配置Spring管理，Service接口的实现类</li>
<li><code>@Repository</code> 直接主要声明持久化类配置给Spring管理，DAO接口</li>
<li><code>@Component</code> 除了控制器、servcie和DAO之外的类一律使用此注解声明</li>
</ul>
</li>
</ul>
<h3 id="2-Scope"><a href="#2-Scope" class="headerlink" title="2. @Scope"></a>2. <code>@Scope</code></h3><ul>
<li>类注解，用于声明当前类单例模式还是 非单例模式，相当于bean标签的scope属性</li>
<li>@Scope(“prototype”) 表示声明当前类为非单例模式（默认单例模式）</li>
</ul>
<h3 id="3-Lazy"><a href="#3-Lazy" class="headerlink" title="3. @Lazy"></a>3. <code>@Lazy</code></h3><ul>
<li>类注解，用于声明一个单例模式的Bean是否为懒汉模式</li>
<li>@Lazy(true) 表示声明为懒汉模式，默认为饿汉模式</li>
</ul>
<h3 id="4-PostConstruct"><a href="#4-PostConstruct" class="headerlink" title="4. @PostConstruct"></a>4. <code>@PostConstruct</code></h3><ul>
<li>方法注解，声明一个方法为当前类的初始化方法（在构造器之后执行），相当于bean标签的init-method属性</li>
</ul>
<h3 id="5-PreDestroy"><a href="#5-PreDestroy" class="headerlink" title="5. @PreDestroy"></a>5. <code>@PreDestroy</code></h3><ul>
<li>方法注解，声明一个方法为当前类的销毁方法（在对象从容器中释放之前执行），相当于bean标签的destory-method属性</li>
</ul>
<h3 id="6-Autowired"><a href="#6-Autowired" class="headerlink" title="6. @Autowired"></a>6. <code>@Autowired</code></h3><ul>
<li><p>属性注解、方法注解(set方法)，声明当前属性为自动装配，默认是byType</p>
</li>
<li><p><code>@Autowired(required = false)</code>通过<code>required</code>属性来设置当前自动装配是否是必须的（默认为必须–如果在Spring容器中没有找到与属性类型相匹配的bean会抛出异常），自动装配的两种方式：</p>
<ul>
<li>byType</li>
<li>ref引用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClazz</span><span class="params">(<span class="meta">@Qualifier(&quot;c1&quot;)</span> Clazz clazz)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-Resource"><a href="#7-Resource" class="headerlink" title="7.@Resource"></a>7.<code>@Resource</code></h3><ul>
<li>属性注解，也用于声明属性自动装配</li>
<li>默认装配方式为byName，如果根据byName没有找到对应的bean，则继续根据byType继续寻找对应的bean，根据byType也没有找到对应的bean或者找到了不止一个类型匹配的bean，则抛出异常。</li>
</ul>
<h1 id="四、代理设计模式"><a href="#四、代理设计模式" class="headerlink" title="四、代理设计模式"></a>四、代理设计模式</h1><h2 id="4-1-生活中的代理"><a href="#4-1-生活中的代理" class="headerlink" title="4.1 生活中的代理"></a>4.1 生活中的代理</h2><p><img src="/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1616999162162.png" alt="1616999162162"></p>
<p>代理设计模式的优点：将通用性的工作都交给代理对象完成，被代理对象只需专注自己的核心业务。</p>
<h2 id="4-2-静态代理"><a href="#4-2-静态代理" class="headerlink" title="4.2 静态代理"></a>4.2 静态代理</h2><blockquote>
<p>静态代理，代理类只能够为特定的类生产代理对象，不能代理任意类</p>
</blockquote>
<p><img src="/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1617001027208.png" alt="1617001027208"></p>
<p><strong>使用代理的好处：</strong></p>
<ol>
<li>被代理类中只需要关注核心业务的实现，将通用的管理型逻辑（事务处理、日志管理等操作）和业务逻辑分离</li>
<li>将通用的代码放在代理类中实现，提供了代码的复用性</li>
<li>通过在代理类中添加代码业务逻辑，实现对原有业务逻辑的扩展增强</li>
</ol>
<h2 id="4-3-动态代理"><a href="#4-3-动态代理" class="headerlink" title="4.3 动态代理"></a>4.3 动态代理</h2><blockquote>
<p>动态代理，几乎可以为所有的类产生代理对象</p>
<p>实现方式有两种：</p>
<ul>
<li>JDK动态代理</li>
<li>CGLib动态代理</li>
</ul>
</blockquote>
<h3 id="1-JDK动态代理"><a href="#1-JDK动态代理" class="headerlink" title="1. JDK动态代理"></a>1. JDK动态代理</h3><ul>
<li>JDK动态代理类实现:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-18 8:53</span></span><br><span class="line"><span class="comment"> * JDk动态代理:使用过被代理对象实现的接口产生其代理对象的</span></span><br><span class="line"><span class="comment"> * 只能为实现了接口的类产生代理对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      1.创建一个类，实现InvocationHandler接口，重写invoke方法</span></span><br><span class="line"><span class="comment"> *      2.在类中定义一个Object类型的变量，并提供这个变量的有参构造器，用于将被代理对象传递进来</span></span><br><span class="line"><span class="comment"> *      3.定义getProxy方法，用于创建并返回代理对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDKDynamicProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理对象</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过构造器传入被代理对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JDKDynamicProxy</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//产生并返回代理对象</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取被代理对象的类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> obj.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//2.获取被代理对象的类实现的接口</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = obj.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">//3.产生代理对象(通过被代理对象的类加载器及实现的接口)</span></span><br><span class="line">        <span class="comment">//第一个参数：被代理对象的类加载器</span></span><br><span class="line">        <span class="comment">//第二个参数：被代理对象实现的接口</span></span><br><span class="line">        <span class="comment">//第三个参数：使用产生的代理对象，调用方法时，用于拦截方法执行的拦截器</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> Proxy.newProxyInstance(classLoader, interfaces, <span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        begin();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">returnVal</span> <span class="operator">=</span> method.invoke(obj,args);<span class="comment">//执行method方法(insert)</span></span><br><span class="line">        commit();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> returnVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======开启事务=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======提交事务=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDynamicProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建被代理对象</span></span><br><span class="line">        <span class="type">BookDAOImpl</span> <span class="variable">bookDAO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookDAOImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建动态代理对象，并将被代理对象传递到代理类中,赋值给obj</span></span><br><span class="line">        <span class="type">JDKDynamicProxy</span> <span class="variable">jdkDynamicProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JDKDynamicProxy</span>(bookDAO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//proxy就是产生的代理对象,产生的代理对象可以强制转换成被代理对象实现的接口类型</span></span><br><span class="line">        <span class="type">GenaralDao</span> <span class="variable">proxy</span> <span class="operator">=</span> (GenaralDao) jdkDynamicProxy.getProxy();</span><br><span class="line">        <span class="comment">//使用代理对象调用方法，并不会执行调用的方法，而是进入到创建代理对象时指定InvocationHandler类中的invoke方法</span></span><br><span class="line">        <span class="comment">//调用的方法作为一个参数，传递给了invoke方法</span></span><br><span class="line">        proxy.delete();</span><br><span class="line"><span class="comment">//        bookDAO.delete();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-CGLib动态代理"><a href="#2-CGLib动态代理" class="headerlink" title="2. CGLib动态代理"></a>2. CGLib动态代理</h3><blockquote>
<p>由于JDK动态代理是通过被代理类实现的接口来创建代理对象的，因此JDK动态代理只能代理实现了接口的类的对象。如果一个类没有实现任何接口，该如何产生代理对象呢？</p>
<p>CGLib动态代理，是通过创建被代理类的子类来创建代理对象的，因此即使没有实现任何接口的类也可以通过CGLib产生代理对象</p>
<p><code>注：</code>CGLib动态代理不能为final类创建代理对象，因为被final关键字修饰的类不能被继承</p>
</blockquote>
<ul>
<li>添加CGlib的依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>CGLib动态代理类实现：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-18 9:51</span></span><br><span class="line"><span class="comment"> * 1.添加CGLib依赖</span></span><br><span class="line"><span class="comment"> * 2.创建一个类，实现MethodInterceptor，同时实现接口中的intercept方法</span></span><br><span class="line"><span class="comment"> * 3.在类中定义一个Object类型的变量，并提供这个变量的you参构造器，用于传递被代理对象</span></span><br><span class="line"><span class="comment"> * 4.定义getProxy方法创建并返回代理对象（代理对象是通过创建被代理类的子类来创建的）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CGLibDynamicProxy</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CGLibDynamicProxy</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        enhancer.setSuperclass(obj.getClass());</span><br><span class="line">        enhancer.setCallback(<span class="built_in">this</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> enhancer.create();</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        begin();</span><br><span class="line">        <span class="comment">//通过反射调用被代理类中的方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">returnVal</span> <span class="operator">=</span> method.invoke(obj,objects);</span><br><span class="line">        commit();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> returnVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======开启事务=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======提交事务=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDynamicProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建被代理对象</span></span><br><span class="line">        <span class="type">BookDAOImpl</span> <span class="variable">bookDAO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookDAOImpl</span>();</span><br><span class="line">		<span class="comment">//2.通过CGLib动态代理类创建代理对象</span></span><br><span class="line">        <span class="type">CGLibDynamicProxy</span> <span class="variable">cgLibDynamicProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CGLibDynamicProxy</span>(bookDAO);</span><br><span class="line">        <span class="comment">//3.代理对象实际上是被代理对象的子类，因此代理对象可以强转为被代理类类型</span></span><br><span class="line">        <span class="type">BookDAOImpl</span> <span class="variable">proxy</span> <span class="operator">=</span> (BookDAOImpl) cgLibDynamicProxy.getProxy();</span><br><span class="line">        <span class="comment">//4.使用代理对象调用方法，实际上并没有执行这个方法，而是执行了代理类中的intercept方法，将当前调用的方法以及方法中的</span></span><br><span class="line">        <span class="comment">//参数传递到intercept方法中</span></span><br><span class="line">        proxy.update();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、-Spring-AOP"><a href="#五、-Spring-AOP" class="headerlink" title="五、 Spring AOP"></a>五、 Spring AOP</h1><h2 id="5-1-AOP概念"><a href="#5-1-AOP概念" class="headerlink" title="5.1 AOP概念"></a>5.1 AOP概念</h2><blockquote>
<p>Aspect Oriented Programming ，面向切面编程，是一种利用”横切”的技术（底层实现就是动态代理），对原有的业务逻辑进行拦截，并且可以在这个拦截的横切面上添加特定的业务逻辑，对原有的业务进行增强。</p>
<p>基于动态代理的实现可以在不改变原有业务的情况下对业务进行增强。</p>
</blockquote>
<p><img src="/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220415184022329.png" alt="image-20220415184022329"></p>
<h2 id="5-2-Spring-AOP框架部署"><a href="#5-2-Spring-AOP框架部署" class="headerlink" title="5.2 Spring AOP框架部署"></a>5.2 Spring AOP框架部署</h2><h3 id="1-创建Maven项目-1"><a href="#1-创建Maven项目-1" class="headerlink" title="1. 创建Maven项目"></a>1. 创建Maven项目</h3><p>略</p>
<h3 id="2-添加依赖"><a href="#2-添加依赖" class="headerlink" title="2. 添加依赖"></a>2. 添加依赖</h3><ul>
<li>context</li>
<li>aspect</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-创建Spring配置文件-2"><a href="#3-创建Spring配置文件-2" class="headerlink" title="3.创建Spring配置文件"></a>3.创建Spring配置文件</h3><ul>
<li>引入aop的命名空间</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-3-AOP配置-语句XML"><a href="#5-3-AOP配置-语句XML" class="headerlink" title="5.3 AOP配置- 语句XML"></a>5.3 AOP配置- 语句XML</h2><blockquote>
<p>给DAO的方法添加开启事务和提交事务的逻辑</p>
</blockquote>
<h3 id="1-创建一个类，定义要添加的业务逻辑"><a href="#1-创建一个类，定义要添加的业务逻辑" class="headerlink" title="1.创建一个类，定义要添加的业务逻辑"></a>1.创建一个类，定义要添加的业务逻辑</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxManager</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开启事务&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;提交事务&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-配置AOP"><a href="#2-配置AOP" class="headerlink" title="2. 配置AOP"></a>2. 配置AOP</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  对于一个xml文件如果作为框架的配置文件，需要遵守框架的配置规则  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  通常一个框架为了让开发者能够正确的配置，都会提供xml的规范文件（dtd\xsd）  --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDAO&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.dao.BookDAOImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;txManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.dao.utils.TxManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--声明切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book_all&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.qfedu.dao.BookDAOImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--声明txManager为切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;txManager&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--增强--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;begin&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_all&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;commit&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_all&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>AOP开发步骤：</code></p>
<ol>
<li>创建切面类，在切面类定义切点方法</li>
<li>将切面类配置给Spring容器</li>
<li>声明切入点</li>
<li>配置AOP的通知策略</li>
</ol>
<h2 id="5-4-切入点的声明"><a href="#5-4-切入点的声明" class="headerlink" title="5.4 切入点的声明"></a>5.4 切入点的声明</h2><h3 id="1-各种切入点声明方式"><a href="#1-各种切入点声明方式" class="headerlink" title="1. 各种切入点声明方式"></a>1. 各种切入点声明方式</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用aop：pointcut标签声明切入点：切入点可以是一个方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book_insert&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.qfedu.dao.BookDAOImpl.insert())&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--BookDAOImpl类中所有无参数无返回值的方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book_pc1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(void com..qfedu.dao.BookDAOImpl.*())&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--BookDAOImpl类中所有无返回值的方法，对参数有没有没有限制--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book_pc2&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(void com..qfedu.dao.BookDAOImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--BookDAOImpl类中所有无参数的方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book_pc3&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com..qfedu.dao.BookDAOImpl.*())&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--BookDAOImpl类中所有的方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book_pc4&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com..qfedu.dao.BookDAOImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--dao包中所有类中所有的方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc5&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com..qfedu.dao.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--dao包中所有类中所有的方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc6&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com..qfedu.dao.*.insert(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--所有包下的所有类的所有方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc7&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* *(..))&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-AOP使用注意事项"><a href="#2-AOP使用注意事项" class="headerlink" title="2. AOP使用注意事项"></a>2. AOP使用注意事项</h3><ul>
<li>如果使用Spring AOP面向切面编程，调用切入点方法的对象必须通过Spring容器获取</li>
<li>如果一个类中的方法被声明为切入点并且织入了切点之后，通过Spring容器获取到的该类对象其实获取到的是一个该类的代理对象</li>
<li>如果一个类中的方法没有声明为切入点，通过Spring容器获取的就是这个类真实创建的对象</li>
</ul>
<h2 id="5-5-AOP通知策略"><a href="#5-5-AOP通知策略" class="headerlink" title="5.5 AOP通知策略"></a>5.5 AOP通知策略</h2><blockquote>
<p>AOP通知策略：就是声明将切面类中的切点方法如何织入到切入点</p>
<ul>
<li>before</li>
<li>after-returning</li>
<li>after-throwing</li>
<li>around</li>
<li>after</li>
</ul>
</blockquote>
<h3 id="1-定义切面类"><a href="#1-定义切面类" class="headerlink" title="1.定义切面类"></a>1.定义切面类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.dao.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-19 9:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知的切点方法，必须准守如下的定义规则：</span></span><br><span class="line">    <span class="comment">//1.必须带有一个ProceedingJoinPoint类型的参数</span></span><br><span class="line">    <span class="comment">//2.必须有Object类型的返回值</span></span><br><span class="line">    <span class="comment">//3.在前后增强的业务逻辑之间执行Object v = point.proceed();</span></span><br><span class="line">    <span class="comment">//4.方法最后返回v</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">method5</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method5-before&quot;</span>);</span><br><span class="line">        <span class="comment">//此代码的执行，就表示切入点方法的执行</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">v</span> <span class="operator">=</span> point.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;method5-after&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-配置切面类"><a href="#2-配置切面类" class="headerlink" title="2. 配置切面类"></a>2. 配置切面类</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aop:before  用于配置前置通知，切入到指定切入点之前执行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;method1&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_insert&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--aop:after-throwing  用于配置异常通知，切入点方法抛出异常后执行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;method3&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_insert&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--aop:after-returning 用于配置后置通知，切入到指定切入点之后执行。</span></span><br><span class="line"><span class="comment">    对于一个Java方法而言，return返回值也是方法的一部分</span></span><br><span class="line"><span class="comment">    因此“方法返回值返回之后”和“方法执行结束”是同一个时间点，所以after和after-returning是根据</span></span><br><span class="line"><span class="comment">    配置的顺序决定执行顺序--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;method4&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_insert&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--环绕通知  用于配置环绕通知。指定增强的方法在切入点方法之前和之后都执行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;method5&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_insert&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--aop:after  用于配置最终通知。无论增强方式时候执行是否有异常都会执行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;method2&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_insert&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="六、Spring-AOP注解配置"><a href="#六、Spring-AOP注解配置" class="headerlink" title="六、Spring AOP注解配置"></a>六、Spring AOP注解配置</h1><h2 id="6-1-Spring-AOP注解配置框架部署"><a href="#6-1-Spring-AOP注解配置框架部署" class="headerlink" title="6.1 Spring AOP注解配置框架部署"></a>6.1 Spring AOP注解配置框架部署</h2><h4 id="1-创建Maven工程-1"><a href="#1-创建Maven工程-1" class="headerlink" title="1.创建Maven工程"></a>1.创建Maven工程</h4><p>略</p>
<h4 id="2-添加Spring依赖"><a href="#2-添加Spring依赖" class="headerlink" title="2.添加Spring依赖"></a>2.添加Spring依赖</h4><ul>
<li>context</li>
<li>aspects</li>
</ul>
<h4 id="3-Spring配置文件"><a href="#3-Spring配置文件" class="headerlink" title="3.Spring配置文件"></a>3.Spring配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="name">context:annotation-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.qfedu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--基于注解配置的aop代理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-2-AOP注解配置案例"><a href="#6-2-AOP注解配置案例" class="headerlink" title="6.2 AOP注解配置案例"></a>6.2 AOP注解配置案例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-19 14:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.qfedu.dao.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pc1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pc1()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开启事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pc1()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;提交事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pc1()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">printExecuteTime</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">time1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">v</span> <span class="operator">=</span> point.proceed();</span><br><span class="line">            <span class="type">long</span> <span class="variable">time2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;方法执行时间:&quot;</span> + (time2 - time1));</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>注意：</code>注解使用虽然方便，但是只能在源码上添加注解，因此我们的自定义类提倡使用注解配置；但如果使用到第三方提供的类则需要通过xml配置形式完成配置。</p>
<h1 id="七、Spring整合MyBatis"><a href="#七、Spring整合MyBatis" class="headerlink" title="七、Spring整合MyBatis"></a>七、Spring整合MyBatis</h1><blockquote>
<p>Spring 两大核心思想：IoC 和AOP</p>
<p>IoC：控制反转，Spring容器可以完成对象的创建、属性注入、对象管理等工作</p>
<p>AOP：面向切面，在不修改原有业务逻辑的情况下，实现原有业务的增强</p>
</blockquote>
<h2 id="7-1-Spring可以对MyBatis提供哪些支持"><a href="#7-1-Spring可以对MyBatis提供哪些支持" class="headerlink" title="7.1 Spring可以对MyBatis提供哪些支持"></a>7.1 Spring可以对MyBatis提供哪些支持</h2><ul>
<li><strong>IoC支持：</strong>SpringIoC可以为MyBatis完成DataSource、SQLSessionFactory、SQLSession以及DAO对象的创建。</li>
<li><strong>AOP支持：</strong>使用Spring提供的事务管理切面类完成对MyBatis数据库操作中的事务管理</li>
</ul>
<h2 id="7-2-Spring整合MyBatis准备工作"><a href="#7-2-Spring整合MyBatis准备工作" class="headerlink" title="7.2 Spring整合MyBatis准备工作"></a>7.2 Spring整合MyBatis准备工作</h2><h3 id="1-创建Maven工程-2"><a href="#1-创建Maven工程-2" class="headerlink" title="1.创建Maven工程"></a>1.创建Maven工程</h3><p>略</p>
<h3 id="2-部署MyBatis框架"><a href="#2-部署MyBatis框架" class="headerlink" title="2.部署MyBatis框架"></a>2.部署MyBatis框架</h3><ul>
<li><p>添加依赖</p>
<ul>
<li>MySQL驱动</li>
<li>MyBatis</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建MyBatis配置文件mybatis-config.xml(创建配置文件之后无需进行任何配置)</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-部署Spring框架"><a href="#3-部署Spring框架" class="headerlink" title="3.部署Spring框架"></a>3.部署Spring框架</h3><ul>
<li>添加依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建Spring配置文件：applicationContext.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-添加Spring整合MyBatis的依赖"><a href="#4-添加Spring整合MyBatis的依赖" class="headerlink" title="4.添加Spring整合MyBatis的依赖"></a>4.添加Spring整合MyBatis的依赖</h3><ul>
<li>mybatis-spring  就是mybatis提供的兼容Spring的补丁</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-3-Spring整合MyBatis整合IoC配置"><a href="#7-3-Spring整合MyBatis整合IoC配置" class="headerlink" title="7.3 Spring整合MyBatis整合IoC配置"></a>7.3 Spring整合MyBatis整合IoC配置</h2><h3 id="1-整合Druid连接池"><a href="#1-整合Druid连接池" class="headerlink" title="1.整合Druid连接池"></a>1.整合Druid连接池</h3><ul>
<li>添加druid的依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--druid的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建druid.properties属性文件</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">druid.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">druid.url</span>=<span class="string">jdbc:mysql://localhost:3306/db1?characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">druid.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">druid.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## 连接池参数</span></span><br><span class="line"><span class="comment">#初始化连接数</span></span><br><span class="line"><span class="attr">druid.pool.init</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">#初始化连接数</span></span><br><span class="line"><span class="attr">druid.pool.minIdle</span>=<span class="string">3</span></span><br><span class="line"><span class="attr">druid.pool.maxActive</span>=<span class="string">20</span></span><br><span class="line"><span class="attr">druid.pool.timeout</span>=<span class="string">30000</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在applicationContext.xml中配置DruidDataSource</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载durid.properties属性文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:druid.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--依赖Spring容器完成数据源DataSource的创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.init&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.minIdle&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.maxActive&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxWait&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.timeout&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-整合MyBatis-创建SQLSessionFactory"><a href="#2-整合MyBatis-创建SQLSessionFactory" class="headerlink" title="2.整合MyBatis-创建SQLSessionFactory"></a>2.整合MyBatis-创建SQLSessionFactory</h3><blockquote>
<p>依赖Spring容器创建MyBatis的SQLSessionFactory对象</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖Spring容器完成MyBatis的SQLSessionFactory对象的创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置mapper映射文件的路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mappers/*Mapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置需要定义别名的实体类的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliases&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.qfedu.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可选：配置MyBatis的主配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-整合MyBatis-创建Mapper"><a href="#3-整合MyBatis-创建Mapper" class="headerlink" title="3. 整合MyBatis-创建Mapper"></a>3. 整合MyBatis-创建Mapper</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载dao包中的所有DAO接口，通过sqlSessionFactory获取SQLSession，然后创建所有的DAO接口对象</span></span><br><span class="line"><span class="comment">存储在Spring容器中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.qfedu.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-4-Spring整合MyBatis整合AOP配置"><a href="#7-4-Spring整合MyBatis整合AOP配置" class="headerlink" title="7.4 Spring整合MyBatis整合AOP配置"></a>7.4 Spring整合MyBatis整合AOP配置</h2><blockquote>
<p>使用Spring提供的事务管理切面类，完成DAO中增删改操作的事务管理</p>
</blockquote>
<h3 id="1-事务的隔离级别"><a href="#1-事务的隔离级别" class="headerlink" title="1.事务的隔离级别"></a>1.事务的隔离级别</h3>]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>删除有序数组中的重复项</title>
    <url>/posts/2497860528.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="Leecode-26-删除有序数组中的重复项"><a href="#Leecode-26-删除有序数组中的重复项" class="headerlink" title="Leecode 26. 删除有序数组中的重复项"></a>Leecode 26. 删除有序数组中的重复项</h2><p>给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。</p>
<p>由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。</p>
<p>将最终结果插入 nums 的前 k 个位置后返回 k 。</p>
<p>不要使用额外的空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p>
<p>示例 1：</p>
<blockquote>
<p>输入：nums &#x3D; [1,1,2]<br>输出：2, nums &#x3D; [1,2,_]<br>解释：函数应该返回新的长度 2 ，并且原数组 nums的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</p>
</blockquote>
<p>示例 2：</p>
<blockquote>
<p>输入：nums &#x3D; [0,0,1,1,1,2,2,3,3,4]<br>输出：5, nums &#x3D; [0,1,2,3,4]<br>解释：函数应该返回新的长度5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</p>
</blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>0 &lt;&#x3D; nums.length &lt;&#x3D; 3 * 104</li>
<li>-104 &lt;&#x3D; nums[i] &lt;&#x3D; 104</li>
<li>nums 已按 升序 排列</li>
</ul>
<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">点我跳转题目</a></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><strong>双指针解法</strong><br><strong>数组中删除元素即为将有效元素覆盖无效元素。</strong><br>因为数组有序且存在重复元素，所以重复元素在数组中一定相邻，使用快慢指针。<br><strong>算法流程：</strong><br>比较两指针指向的元素是否相同<br>若nums[fast] &#x3D;&#x3D; nums[slow]，则继续移动快指针，直到找到有效元素。<br>若nums[fast] !&#x3D; nums[slow]，则将fast位置上的有效元素覆盖到slow后一位，然后更新慢指针位置，继续指向有效元素的最后一位。<br>最终返回slow + 1，即为有效元素的数量。</p>
<h2 id="算法代码"><a href="#算法代码" class="headerlink" title="算法代码"></a>算法代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>,fast = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span> &amp;&amp; nums == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;fast &lt; nums.length;fast++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[fast] != nums[slow])&#123;</span><br><span class="line">            nums[++slow] = nums[fast];   </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ++slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>时间复杂度：O(N)</strong></li>
<li><strong>空间复杂度：O(1)</strong></li>
</ul>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>剑指Offer 22 链表中环的入口节点</title>
    <url>/posts/2001264122.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="剑指-Offer-II-022-链表中环的入口节点"><a href="#剑指-Offer-II-022-链表中环的入口节点" class="headerlink" title="剑指 Offer II 022. 链表中环的入口节点"></a><a href="https://leetcode.cn/problems/c32eOV/">剑指 Offer II 022. 链表中环的入口节点</a></h4><p>给定一个链表，返回链表开始入环的第一个节点。 从链表的头节点开始沿着 <code>next</code> 指针进入环的第一个节点为环的入口节点。如果链表无环，则返回 <code>null</code>。</p>
<p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意，<code>pos</code> 仅仅是用于标识环的情况，并不会作为参数传递到函数中。</strong></p>
<p><strong>说明：</strong>不允许修改给定的链表。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/circularlinkedlist.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：返回索引为 1 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/circularlinkedlist_test2.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：返回索引为 0 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/circularlinkedlist_test3.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：返回 null</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表中节点的数目范围在范围 <code>[0, 104]</code> 内</li>
<li><code>-105 &lt;= Node.val &lt;= 105</code></li>
<li><code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li>
</ul>
<h4 id="思路1：集合"><a href="#思路1：集合" class="headerlink" title="思路1：集合"></a>思路1：集合</h4><p>从头到尾遍历链表，如果集合中没有该节点就将其存入，如果集合中有该节点，证明该节点就是环的开始节点，即环的入口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    HashSet&lt;ListNode&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(set.contains(cur))&#123;</span><br><span class="line">            <span class="keyword">return</span> cur;</span><br><span class="line">        &#125;</span><br><span class="line">        set.add(cur);</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="思路2：快慢指针骚操作"><a href="#思路2：快慢指针骚操作" class="headerlink" title="思路2：快慢指针骚操作"></a>思路2：快慢指针骚操作</h4><p>不会快慢指针检测链表环的可以看看这篇文章：<a href="https://www.kdy.icu/posts/3986127795.html">Leecode 141 环形链表</a></p>
<ol>
<li>开始节点到环入口的距离我们设为A </li>
<li>从环入口节点到快慢指针重合的距离我们设置为B</li>
<li>从重合点到环入口的距离我们设为C</li>
</ol>
<p>假设在快慢指针相遇之前快指针已经走了m圈，慢指针走了n圈，则相遇时快指针一共走了A + m(B + C ) + B步，慢指针一共走了A + n(B + C ) + B步，快指针每次比慢指针多走一个节点，即速度是慢指针的二倍，所以路程也是慢指针的二倍，所以可以得到：A + m(B + C ) + B &#x3D; 2(A + n(B + C ) + B)，经过换算，可以得到A+ B &#x3D; (m-2n)(B+C)。</p>
<p>这就说明我们<strong>从头结点到快慢指针重合节点的距离等于整数倍的快慢指针重合节点的距离到链表环入口节点的距离。</strong></p>
<p>可以试着看着图动手画画理解一下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220818195624379.png" alt="image-20220818195624379"></p>
<p>那既然这样的话，如果我们找到了快慢两指针相遇的节点，我们将快指针放在头结点，慢指针仍旧在原来的位置，这样我们两指针同速移动，下一次相遇是不是就是环的入口节点了呢，即都减去了B这段距离。</p>
<p>代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//快指针</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="comment">//慢指针</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        <span class="comment">//找到了快慢指针重合点</span></span><br><span class="line">        <span class="keyword">if</span> (fast == slow) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果快指针指向的是null，则不存在环</span></span><br><span class="line">    <span class="keyword">if</span> (fast == <span class="literal">null</span> || fast.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将快指针放置在头结点，慢指针在原位置</span></span><br><span class="line">    <span class="comment">//同速移动</span></span><br><span class="line">    fast = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != slow) &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fast;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>剑指Offer 27 回文链表</title>
    <url>/posts/4088816420.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="剑指-Offer-II-027-回文链表"><a href="#剑指-Offer-II-027-回文链表" class="headerlink" title="剑指 Offer II 027. 回文链表"></a><a href="https://leetcode.cn/problems/aMhZSa/">剑指 Offer II 027. 回文链表</a></h4><p>给定一个链表的 <strong>头节点</strong> <code>head</code> <strong>，</strong>请判断其是否为回文链表。</p>
<p>如果一个链表是回文，那么链表节点序列从前往后看和从后往前看是相同的。</p>
<p><strong>示例 1：</strong></p>
<p><strong><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1626421737-LjXceN-image.png" alt="img"></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: head = [1,2,3,3,2,1]</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><strong><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1626422231-wgvnWh-image.png" alt="img"></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: head = [1,2]</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表 L 的长度范围为 <code>[1, 105]</code></li>
<li><code>0 &lt;= node.val &lt;= 9</code></li>
</ul>
<h4 id="思路1：借助数组，然后判断数组是否回文"><a href="#思路1：借助数组，然后判断数组是否回文" class="headerlink" title="思路1：借助数组，然后判断数组是否回文"></a>思路1：借助数组，然后判断数组是否回文</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">        list.add(cur.val);</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isPalindrome(list,<span class="number">0</span>,list.size()-<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(List&lt;Integer&gt; list,<span class="type">int</span> left,<span class="type">int</span> right)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(list.get(left) != list.get(right))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="思路2：双指针-反转链表"><a href="#思路2：双指针-反转链表" class="headerlink" title="思路2：双指针+反转链表"></a>思路2：双指针+反转链表</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//快慢指针</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//快指针走两步，慢指针走一步，快指针走到链表末尾，慢指针走到链表中心</span></span><br><span class="line">    <span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这里需要判断一下链表的奇偶性，因为我们只能比较两条长度相同的链表</span></span><br><span class="line">    <span class="keyword">if</span>(fast != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//fast不为空证明链表长度为奇数，可以画图感受一下</span></span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">newHead</span> <span class="operator">=</span> reverLinkedList(slow);</span><br><span class="line">    <span class="comment">//这里也可以用slow和fast接受，为了便于理解，使用两个新指针</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur1</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur2</span> <span class="operator">=</span> newHead;</span><br><span class="line">    <span class="comment">//这里要用反转之后的链表头结点作为判断依据</span></span><br><span class="line">    <span class="comment">//因为如果链表为奇数的话，前半段链表会比后半段多一个节点</span></span><br><span class="line">    <span class="comment">//会报空指针</span></span><br><span class="line">    <span class="keyword">while</span>(cur2 != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur1.val != cur2.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur1 = cur1.next;</span><br><span class="line">        cur2 = cur2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">ListNode <span class="title function_">reverLinkedList</span> <span class="params">(ListNode head)</span>&#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">        temp = cur.next;</span><br><span class="line">        cur.next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>剑指Offer 25 链表中的两数相加</title>
    <url>/posts/4258720867.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="剑指-Offer-II-025-链表中的两数相加"><a href="#剑指-Offer-II-025-链表中的两数相加" class="headerlink" title="剑指 Offer II 025. 链表中的两数相加"></a><a href="https://leetcode.cn/problems/lMSNwu/">剑指 Offer II 025. 链表中的两数相加</a></h4><p>给定两个 <strong>非空链表</strong> <code>l1</code>和 <code>l2</code> 来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。</p>
<p>可以假设除了数字 0 之外，这两个数字都不会以零开头。</p>
<p><strong>示例1：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1626420025-fZfzMX-image.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [7,2,4,3], l2 = [5,6,4]</span><br><span class="line">输出：[7,8,0,7]</span><br></pre></td></tr></table></figure>

<p><strong>示例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [2,4,3], l2 = [5,6,4]</span><br><span class="line">输出：[8,0,7]</span><br></pre></td></tr></table></figure>

<p><strong>示例3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [0], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表的长度范围为<code> [1, 100]</code></li>
<li><code>0 &lt;= node.val &lt;= 9</code></li>
<li>输入数据保证链表代表的数字无前导 0</li>
</ul>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>按照平常加法的思路都是从个位相加，有进位则进到十位然后十位相加，以此类推。</p>
<p>对于链表也可以如此操作，但是我们没法对单链表从尾结点进行此种操作，所以需要对链表进行反转，然后相加即可。</p>
<h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol>
<li>反转两个链表</li>
<li>将短链表后面进行补充值为0的节点至两链表长度相同</li>
<li>链表相加，针对进位需要设置进位标志位</li>
<li>最后一个节点需要单独判断，因为它的大小关乎着是否需要新增节点</li>
<li>将加和完的链表进行反转</li>
</ol>
<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode head1, ListNode head2)</span> &#123;</span><br><span class="line">    <span class="comment">//1.反转两链表</span></span><br><span class="line">    head1 = reverse(head1);</span><br><span class="line">    head2 = reverse(head2);</span><br><span class="line">    <span class="comment">//2.链表补零</span></span><br><span class="line">    addZero(head1,head2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.设置进位，链表相加</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//当前两节点值之和</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">curSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//标识头结点，因为head1和head2要用于遍历节点</span></span><br><span class="line">    <span class="comment">//用head1标识最后相加完之后的链表</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> head1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只遍历到倒数第二位</span></span><br><span class="line">    <span class="keyword">while</span>(head1.next != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//相加时要加上进位</span></span><br><span class="line">        curSum = head1.val + head2.val + carry;</span><br><span class="line">        <span class="comment">//每次进位后要置零</span></span><br><span class="line">        <span class="keyword">if</span>(carry == <span class="number">1</span>)&#123;</span><br><span class="line">            carry = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当前两个值之和大于等于时，有进位</span></span><br><span class="line">        <span class="keyword">if</span>(curSum &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">            head1.val = curSum%<span class="number">10</span>;</span><br><span class="line">            carry =<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            head1.val = curSum;</span><br><span class="line">        &#125;</span><br><span class="line">        head1 = head1.next;</span><br><span class="line">        head2 = head2.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后一位的相加要单独计算时候大于10，如果大于需要添加节点</span></span><br><span class="line"></span><br><span class="line">    curSum = head1.val + head2.val + carry;</span><br><span class="line">    <span class="comment">//有进位，新添加节点</span></span><br><span class="line">    <span class="keyword">if</span>(curSum &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">        head1.val = curSum%<span class="number">10</span>;</span><br><span class="line">        head1.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">        head1.next.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        head1.val = curSum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.翻转链表，将链表返回</span></span><br><span class="line">    <span class="keyword">return</span> reverse(head);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addZero</span><span class="params">(ListNode head1,ListNode head2)</span>&#123;</span><br><span class="line">    <span class="comment">//先遍历到短链表结束的地方</span></span><br><span class="line">    <span class="keyword">while</span>(head1.next!= <span class="literal">null</span> &amp;&amp; head2.next != <span class="literal">null</span>)&#123;</span><br><span class="line">        head1 = head1.next;</span><br><span class="line">        head2 = head2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将短链表进行补零操作</span></span><br><span class="line">    <span class="keyword">if</span>(head1.next != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(head1.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            head2.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">            head2.next.next = <span class="literal">null</span>;</span><br><span class="line">            head2 = head2.next;</span><br><span class="line">            head1 = head1.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(head2.next != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(head2.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            head1.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">            head1.next.next = <span class="literal">null</span>;</span><br><span class="line">            head1 = head1.next;</span><br><span class="line">            head2 = head2.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//链表反转</span></span><br><span class="line">ListNode <span class="title function_">reverse</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">    <span class="type">ListNode</span>  <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">        temp = cur.next;</span><br><span class="line">        cur.next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = temp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>剑指Offer 28 对称的二叉树</title>
    <url>/posts/633931403.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="剑指-Offer-28-对称的二叉树"><a href="#剑指-Offer-28-对称的二叉树" class="headerlink" title="剑指 Offer 28. 对称的二叉树"></a><a href="https://leetcode.cn/problems/dui-cheng-de-er-cha-shu-lcof/">剑指 Offer 28. 对称的二叉树</a></h4><p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p>
<p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</p>
<p><code>  1  / \ 2  2 / \ / \3  4 4  3</code><br>但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1  / \ 2  2  \  \  3   3</span><br></pre></td></tr></table></figure>

<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2,2,3,4,4,3]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2,2,null,3,null,3]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p><strong>限制：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 &lt;= 节点个数 &lt;= 1000</span><br></pre></td></tr></table></figure>

<h4 id="解题思路：（递归）"><a href="#解题思路：（递归）" class="headerlink" title="解题思路：（递归）"></a>解题思路：（递归）</h4><p>前序遍历的遍历顺序为根 -&gt; 左 -&gt;右，只要左子树使用根左右遍历，右子树使用根 -&gt; 右 -&gt;左遍历，然后进行比对，如果都相等就为对称二叉树</p>
<ul>
<li>递归出口：两节点都为空</li>
<li>判断：有一个子节点为空或者两个子节点的值不同，则直接返回false</li>
<li>因为是镜像对称，所以要递归判断第一个节点的左子树和第二个节点的右子树，第一个节点的右子树和第二个节点的左子树</li>
</ul>
<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> recursion(root.left,root.right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">recursion</span><span class="params">(TreeNode root1,TreeNode root2)</span>&#123;</span><br><span class="line">    <span class="comment">//递归出口，两节点为空</span></span><br><span class="line">    <span class="keyword">if</span>(root1 == <span class="literal">null</span> &amp;&amp; root2 == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//有一个节点为空或者两者的值不相同，则不对称，直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(root1 == <span class="literal">null</span> || root2 == <span class="literal">null</span> || root1.val != root2.val)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归遍历子节点，注意是镜像对称，所以传入的节点应该也是镜像的</span></span><br><span class="line">    <span class="keyword">return</span> recursion(root1.left,root2.right) &amp;&amp; recursion(root1.right,root2.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>剑指Offer 04 二维数组中的查找</title>
    <url>/posts/3300997432.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="剑指-Offer-04-二维数组中的查找"><a href="#剑指-Offer-04-二维数组中的查找" class="headerlink" title="剑指 Offer 04. 二维数组中的查找"></a><a href="https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">剑指 Offer 04. 二维数组中的查找</a></h4><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<p><strong>示例:</strong></p>
<p>现有矩阵 matrix 如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [1,   4,  7, 11, 15],</span><br><span class="line">  [2,   5,  8, 12, 19],</span><br><span class="line">  [3,   6,  9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>给定 target &#x3D; <code>5</code>，返回 <code>true</code>。</p>
<p>给定 target &#x3D; <code>20</code>，返回 <code>false</code>。</p>
<p><strong>限制：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 &lt;= n &lt;= 1000</span><br><span class="line">0 &lt;= m &lt;= 1000</span><br></pre></td></tr></table></figure>



<h4 id="解法1：暴力双循环"><a href="#解法1：暴力双循环" class="headerlink" title="解法1：暴力双循环"></a>解法1：暴力双循环</h4><p>略</p>
<h4 id="解法2：按行二分查找"><a href="#解法2：按行二分查找" class="headerlink" title="解法2：按行二分查找"></a>解法2：按行二分查找</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findNumberIn2DArray</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//对每一行进行二分查找</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span>[] nums : matrix)&#123;</span><br><span class="line">        flag = binarySearch(nums,target);</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二分查找</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) /<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)&#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="解法3：线性搜索"><a href="#解法3：线性搜索" class="headerlink" title="解法3：线性搜索"></a>解法3：线性搜索</h4><p>由于二维数组按行按列递增，所以对于在二维数组中的每个元素都有如下性质</p>
<ul>
<li>该元素上边的元素都比他小</li>
<li>该元素右边的元素都比他大</li>
</ul>
<p>所以可以从数组左下角开始搜索</p>
<ul>
<li>如果当前数字大于target则向上搜索</li>
<li>如果当前数字小于target则向右搜索</li>
<li>如果查找到该元素则返回</li>
<li>如果数组越界，则返回false</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">Find</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span> [][] array)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">rowBound</span> <span class="operator">=</span> array.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">colBound</span> <span class="operator">=</span> array[<span class="number">0</span>].length;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定位元素在左下角</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> rowBound - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(row &gt;= <span class="number">0</span> &amp;&amp; col &lt; colBound)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[row][col];</span><br><span class="line">        <span class="keyword">if</span>(temp == target)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//当前值小于目标值，向右移动</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp &lt; target)&#123;</span><br><span class="line">            col++;</span><br><span class="line">            <span class="comment">//当前值大于目标值，向上移动</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            row--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>剑指Offer 34 二叉树中和为某一值的路径</title>
    <url>/posts/3998390943.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="剑指-Offer-34-二叉树中和为某一值的路径"><a href="#剑指-Offer-34-二叉树中和为某一值的路径" class="headerlink" title="剑指 Offer 34. 二叉树中和为某一值的路径"></a><a href="https://leetcode.cn/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/">剑指 Offer 34. 二叉树中和为某一值的路径</a></h4><p>给你二叉树的根节点 <code>root</code> 和一个整数目标和 <code>targetSum</code> ，找出所有 <strong>从根节点到叶子节点</strong> 路径总和等于给定目标和的路径。</p>
<p><strong>叶子节点</strong> 是指没有子节点的节点。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/pathsumii1.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22</span><br><span class="line">输出：[[5,4,11,2],[5,8,4,5]]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/pathsum2.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2,3], targetSum = 5</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2], targetSum = 0</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点总数在范围 <code>[0, 5000]</code> 内</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
<li><code>-1000 &lt;= targetSum &lt;= 1000</code></li>
</ul>
<h4 id="思路：（DFS-回溯）"><a href="#思路：（DFS-回溯）" class="headerlink" title="思路：（DFS+回溯）"></a>思路：（DFS+回溯）</h4><ul>
<li>递归出口：叶子结点，<code>root == null</code></li>
<li>递归步骤：<ul>
<li>将当前值加入路径path</li>
<li>更新目标值target</li>
<li>记录满足条件的路径</li>
<li>递归调用左右子树</li>
<li>回溯</li>
</ul>
</li>
</ul>
<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">Deque&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">pathSum</span><span class="params">(TreeNode root, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    dfs(root, target);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//深度优先遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="comment">//递归出口</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将当前节点值加入到路径中</span></span><br><span class="line">    path.offerLast(root.val);</span><br><span class="line">    <span class="comment">//更新target的值</span></span><br><span class="line">    target = target - root.val;</span><br><span class="line">    <span class="comment">//找到了一条和为target的路径</span></span><br><span class="line">    <span class="keyword">if</span> (target == <span class="number">0</span> &amp;&amp; root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;(path));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归遍历左右子树</span></span><br><span class="line">    dfs(root.left, target);</span><br><span class="line">    dfs(root.right, target);</span><br><span class="line">    <span class="comment">//回溯</span></span><br><span class="line">    path.pollLast();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>剑指Offer 52 两个链表的第一个公共节点</title>
    <url>/posts/3185659260.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="剑指-Offer-52-两个链表的第一个公共节点"><a href="#剑指-Offer-52-两个链表的第一个公共节点" class="headerlink" title="剑指 Offer 52. 两个链表的第一个公共节点"></a><a href="https://leetcode.cn/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/">剑指 Offer 52. 两个链表的第一个公共节点</a></h4><p>输入两个链表，找出它们的第一个公共节点。</p>
<p>如下面的两个链表<strong>：</strong></p>
<p><a href="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png"><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/160_statement.png" alt="img"></a></p>
<p>在节点 c1 开始相交。</p>
<p><strong>示例 1：</strong></p>
<p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png"><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/160_example_1.png" alt="img"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3</span><br><span class="line">输出：Reference of the node with value = 8</span><br><span class="line">输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png"><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/160_example_2.png" alt="img"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1</span><br><span class="line">输出：Reference of the node with value = 2</span><br><span class="line">输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png"><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/160_example_3.png" alt="img"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2</span><br><span class="line">输出：null</span><br><span class="line">输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。</span><br><span class="line">解释：这两个链表不相交，因此返回 null。</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li>如果两个链表没有交点，返回 <code>null</code>.</li>
<li>在返回结果后，两个链表仍须保持原有的结构。</li>
<li>可假定整个链表结构中没有循环。</li>
<li>程序尽量满足 O(<em>n</em>) 时间复杂度，且仅用 O(<em>1</em>) 内存。</li>
</ul>
<h4 id="算法思路1：双指针"><a href="#算法思路1：双指针" class="headerlink" title="算法思路1：双指针"></a>算法思路1：双指针</h4><p>假如两条链表之间有公共节点，公共部分长度为z，链表A除去公共长度的长度为x，链表B除去公共长度的长度为y</p>
<ul>
<li>用cur1来标识链表A的当前节点</li>
<li>用cur2来标识链表B的当前节点</li>
</ul>
<p>将两指针从各自的头结点开始移动，移动完整条链表后，cur1走了x + z，cur2走了y+z，然后跳到对方链表的头结点，继续移动，这样在cur1和cur2走到相遇时，就是公共节点。因为距离都是x + y + z。</p>
<p>如果两链表没有公共节点，两个节点不会相遇，都会指向null。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur1</span> <span class="operator">=</span> headA;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur2</span> <span class="operator">=</span> headB;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(cur1!=cur2)&#123;</span><br><span class="line">        cur1 = cur1==<span class="literal">null</span> ? headB : cur1.next;</span><br><span class="line">        cur2 = cur2== <span class="literal">null</span> ? headA :cur2.next;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="算法指针2：Set集合"><a href="#算法指针2：Set集合" class="headerlink" title="算法指针2：Set集合"></a>算法指针2：Set集合</h4><ul>
<li>遍历链表A ，将链表A中的所有节点存入集合</li>
<li>遍历链表B，如果集合中已经有链表B的节点，则该节点就是公共节点</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">    HashSet&lt;ListNode&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">	<span class="type">ListNode</span> <span class="variable">cur1</span> <span class="operator">=</span> headA;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur2</span> <span class="operator">=</span> headB;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(cur1 != <span class="literal">null</span>)&#123;</span><br><span class="line">        set.add(cur1);</span><br><span class="line">        cur1= cur1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(cur2 != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(set.contains(cur2))&#123;</span><br><span class="line">            <span class="keyword">return</span> cur2;</span><br><span class="line">        &#125;</span><br><span class="line">        cur2 = cur2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>剑指Offer 77 链表排序</title>
    <url>/posts/3384583930.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="剑指-Offer-II-077-链表排序"><a href="#剑指-Offer-II-077-链表排序" class="headerlink" title="剑指 Offer II 077. 链表排序"></a><a href="https://leetcode.cn/problems/7WHec2/">剑指 Offer II 077. 链表排序</a></h4><p>给定链表的头结点 <code>head</code> ，请将其按 <strong>升序</strong> 排列并返回 <strong>排序后的链表</strong> 。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/sort_list_1.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [4,2,1,3]</span><br><span class="line">输出：[1,2,3,4]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/sort_list_2.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [-1,5,3,4,0]</span><br><span class="line">输出：[-1,0,3,4,5]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表中节点的数目在范围 <code>[0, 5 * 104]</code> 内</li>
<li><code>-105 &lt;= Node.val &lt;= 105</code></li>
</ul>
<h4 id="解法1：借助数组"><a href="#解法1：借助数组" class="headerlink" title="解法1：借助数组"></a>解法1：借助数组</h4><h5 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h5><ol>
<li>遍历链表将链表中的元素存入数组</li>
<li>对数组排序</li>
<li>再次遍历链表和数组，将排好序的元素存入链表中</li>
</ol>
<h5 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">sortList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="comment">//辅助数组</span></span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="comment">//遍历链表，把各个节点的值存入数组</span></span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">        list.add(cur.val);</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//数组排序</span></span><br><span class="line">    Collections.sort(list);</span><br><span class="line">    cur = head;</span><br><span class="line">    <span class="comment">//重新赋值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; list.size();i++)&#123;</span><br><span class="line">        cur.val = list.get(i);</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="解法2：归并排序"><a href="#解法2：归并排序" class="headerlink" title="解法2：归并排序"></a>解法2：归并排序</h4><h5 id="流程：-1"><a href="#流程：-1" class="headerlink" title="流程："></a>流程：</h5><ol>
<li>通过快慢指针找到当前链表的中心节点，在此处将链表断开</li>
<li>递归对两边链表进行排序</li>
<li>归并合并两个有序链表(<a href="https://www.kdy.icu/posts/424623171.html">合并两个有序链表</a>)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">sortList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">      <span class="comment">//递归中止条件</span></span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head;<span class="comment">// write code here</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//快慢指针,这里将快指针调快一个是为了使慢指针能位于中心节点或中心节点前一节点，方便断链</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head.next;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//快慢指针找出链表中心</span></span><br><span class="line">    <span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//标识后半条链</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> slow.next;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//断链</span></span><br><span class="line">    slow.next = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//递归对两条子链进行排序</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">left</span> <span class="operator">=</span> sortList(head);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">right</span> <span class="operator">=</span> sortList(temp);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//dummy用于标识新链表头部</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//cur用来标识当前插入到了哪个节点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummy;</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">while</span>(left != <span class="literal">null</span> &amp;&amp; right != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(left.val &lt;= right.val)&#123;</span><br><span class="line">            cur.next = left;</span><br><span class="line">            left = left.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur.next = right;</span><br><span class="line">            right = right.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将剩余链表连接上</span></span><br><span class="line">    cur.next = left == <span class="literal">null</span> ? right:left;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>多线程笔记</title>
    <url>/posts/318688148.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="1-线程相关概念"><a href="#1-线程相关概念" class="headerlink" title="1.线程相关概念"></a>1.线程相关概念</h1><ul>
<li><p>程序：是为了完成特定任务、用某种语言编写的一组指令的集合。</p>
</li>
<li><p>进程：</p>
</li>
<li><ul>
<li>进程是<strong>程序的一次执行过程</strong>，或者说是<strong>正在运行的一个程序，</strong>比如我们使用QQ，就启动了一个进程，操作系统会为该进程分配内存空间。是一个动态过程，有产生、存在、消亡的过程。</li>
</ul>
</li>
<li><p>线程：</p>
</li>
<li><ul>
<li><strong>概念：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>线程是由进程创建出来的，是进程的一个实体</li>
<li>一个进程可以拥有多个线程，比如迅雷同时下载多个文件，QQ打开多个聊天窗口，可将这些看为进程里的线程</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>单线程：</strong>同一时刻，只允许执行一个线程</li>
<li><strong>多线程：</strong>同一时刻，可以执行多个线程</li>
<li><strong>并发：</strong>同一时刻，多个任务交替执行，造成一种“貌似同时进行”的错觉，单核cpu实现的多任务就是并发，就像人一心多用做好几件事，就是并发。</li>
<li><strong>并行：</strong>同一时刻，多个任务同时进行，只有多核CPU才可以实现并行，正在并行中的CPU也可以单独实现并发，两者可同时存在。</li>
</ul>
</li>
</ul>
<h1 id="2-线程基本使用"><a href="#2-线程基本使用" class="headerlink" title="2.线程基本使用"></a>2.线程基本使用</h1><h2 id="2-1-创建线程的两种方式"><a href="#2-1-创建线程的两种方式" class="headerlink" title="2.1 创建线程的两种方式"></a>2.1 创建线程的两种方式</h2><p>在Java中线程的使用有两种方法：</p>
<ol>
<li>继承Thread类，重写run方法</li>
<li>实现Runnable接口，重写run方法</li>
</ol>
<h2 id="2-2-线程创建方式1-继承Thread类"><a href="#2-2-线程创建方式1-继承Thread类" class="headerlink" title="2.2 线程创建方式1-继承Thread类"></a>2.2 线程创建方式1-继承Thread类</h2><p><strong>案例：开启一个线程，该线程每隔一秒，在控制台输出“喵喵，我是小猫咪”，当输出80次时结束该线程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        cat.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;喵喵，我是小猫咪&quot;</span> + (++count));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">80</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>注意：</code>Java 中实现真正的多线程是 start 中的 start0() 方法，run() 方法只是一个普通的方法。start0() 是本地方法，是 JVM 调用, 底层是用 c&#x2F;c++实现的，真正实现多线程的效果， 是 start0()，而不是 run。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/v2-37db4576bf6cf193c716ec5f4acb8dba_720w.jpg" alt="img"></p>
<h2 id="2-3-线程创建方式2-实现Runnable接口"><a href="#2-3-线程创建方式2-实现Runnable接口" class="headerlink" title="2.3 线程创建方式2-实现Runnable接口"></a>2.3 线程创建方式2-实现Runnable接口</h2><ol>
<li>Java是单继承，所以在某些情况下一个类可能已经继承了了某个父类，这时就没办法再用Thread类方法来创建线程。</li>
<li>所以Java设计者提供了另一个方式来创建线程，就是实现Runnable接口来创建线程。</li>
</ol>
<p><strong>案例：开启一个线程，该线程每隔一秒，在控制台输出“小狗汪汪叫:旺旺旺~”，当输出10次时结束该线程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过实现Runnable接口来开发线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-07-08 14:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建了Thread对象，把dog对象放入Thread</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(dog);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;<span class="comment">//普通方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小狗汪汪叫:旺旺旺~&quot;</span> + (++count) + Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">10</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-继承Thread类和实现Runnable的区别"><a href="#2-4-继承Thread类和实现Runnable的区别" class="headerlink" title="2.4 继承Thread类和实现Runnable的区别"></a>2.4 继承Thread类和实现Runnable的区别</h2><ol>
<li>从Java的设计上来看，通过继承Thread类或者实现Runnable接口来创建线程本质上没有区别，并且Thread类本身就实现了Runnable接口。</li>
<li>实现Runnable接口的方式更适合多个线程共享一个资源的情况，并且避免了单继承的限制，建议使用Runnable。</li>
</ol>
<h2 id="2-5案例："><a href="#2-5案例：" class="headerlink" title="2.5案例："></a>2.5案例：</h2><p><strong>编辑模拟三个窗口售票100张分别使用继承Thread类和实现Runnable接口来实现，并分析有什么问题。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.ysu.ticket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-07-08 15:37</span></span><br><span class="line"><span class="comment"> * 使用多线程，模拟三个窗口同时售票</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicket</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        SellTicket01 sellTicket01 = new SellTicket01();</span></span><br><span class="line"><span class="comment">//        SellTicket01 sellTicket02 = new SellTicket01();</span></span><br><span class="line"><span class="comment">//        SellTicket01 sellTicket03 = new SellTicket01();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        sellTicket01.start();</span></span><br><span class="line"><span class="comment">//        sellTicket02.start();</span></span><br><span class="line"><span class="comment">//        sellTicket03.start();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">SellTicket02</span> <span class="variable">sellTicket02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket02</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket02);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket02);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread03</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket02);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        thread01.start();</span><br><span class="line">        thread02.start();</span><br><span class="line">        thread03.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SellTicket01</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="comment">//让多个线程共享Num</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticketNum</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;售票结束。。。。。。&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//休眠50ms</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;窗口:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;售出一张票&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;剩余票数:&quot;</span> + (ticketNum--));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SellTicket02</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//让多个线程共享Num</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticketNum</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;售票结束。。。。。。&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//休眠50ms</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;窗口:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;售出一张票&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;剩余票数:&quot;</span> + (ticketNum--));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-线程终止"><a href="#3-线程终止" class="headerlink" title="3.线程终止"></a>3.线程终止</h1><h2 id="3-1-基本说明"><a href="#3-1-基本说明" class="headerlink" title="3.1 基本说明"></a>3.1 基本说明</h2><ol>
<li>当线程完成任务后，会自动退出。</li>
<li>也可以通过<strong>使用变量</strong>的方式来控制run方法退出的方式来停止线程，即<strong>通知方式</strong>。</li>
</ol>
<h2 id="3-2-案例："><a href="#3-2-案例：" class="headerlink" title="3.2 案例："></a>3.2 案例：</h2><p><strong>启动一个线程T，在main线程中停止T线程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.ysu.exit_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-07-08 15:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadExit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//希望main线程去控制t1线程的终止，必须可以修改loop</span></span><br><span class="line">        <span class="comment">//让t1 退出run方法，从而终止t1线程  - &gt; 通知方式</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程休眠10s&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">        t1.setLoop(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置一个控制变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//为loop变量添加set方法来保证主线程可以对该变量进行修改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoop</span><span class="params">(<span class="type">boolean</span> loop)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loop = loop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;线程T运行中。。。。。。&quot;</span> + (++count));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-线程常用方法"><a href="#4-线程常用方法" class="headerlink" title="4.线程常用方法"></a>4.线程常用方法</h1><h2 id="4-1-常用方法第一组"><a href="#4-1-常用方法第一组" class="headerlink" title="4.1 常用方法第一组"></a>4.1 常用方法第一组</h2><ol>
<li>setName &#x2F;&#x2F;设置线程名称，使之与参数name相同</li>
<li>getName &#x2F;&#x2F;返回该线程的名称</li>
<li>start &#x2F;&#x2F;使该线程开始执行，Java虚拟机底层调用该线程的start0方法</li>
<li>run &#x2F;&#x2F;调用线程对象的run方法</li>
<li>setPriority &#x2F;&#x2F;更改线程的优先级</li>
<li>getPriority &#x2F;&#x2F;获取线程的优先级</li>
<li>sleep &#x2F;&#x2F;在指定的毫秒数内让当前正在执行的线程休眠(暂停执行)</li>
</ol>
<h2 id="4-2-注意事项和细节"><a href="#4-2-注意事项和细节" class="headerlink" title="4.2 注意事项和细节"></a>4.2 注意事项和细节</h2><ol>
<li>start方法的底层才会创建新的线程调用run，而run方法只是一个简单的方法调用，不会启动新线程</li>
<li>线程优先级的范围</li>
<li>interrupt，中断线程，但是没有结束线程，所以一般用于中断正在休眠的线程</li>
<li>sleep：线程的静态方法，使当前线程休眠</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMethod1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadDemo1</span> <span class="variable">td1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadDemo1</span>();</span><br><span class="line">        <span class="comment">//给线程起名字</span></span><br><span class="line">        td1.setName(<span class="string">&quot;刘亦菲&quot;</span>);</span><br><span class="line">        <span class="comment">//给线程设置优先级</span></span><br><span class="line">        td1.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">        <span class="comment">//启动子线程</span></span><br><span class="line">        td1.start();</span><br><span class="line">        <span class="comment">//测试优先级</span></span><br><span class="line">        System.out.println(<span class="string">&quot;默认优先级：&quot;</span> + Thread.currentThread().getPriority());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//interrupt测试</span></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        <span class="comment">//程序执行到这里就会中断td1线程的休眠</span></span><br><span class="line">        td1.interrupt();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadDemo1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//Thread.currentThread().getName() 获取当前线程的名称</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在吃包子&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在休眠&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">//当该线程指定到一个interrupt方法时，就会catch一个异常</span></span><br><span class="line">            <span class="comment">//InterruptedException 是指捕获到一个中断异常</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;被中断了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-3-常用方法第二组"><a href="#4-3-常用方法第二组" class="headerlink" title="4.3 常用方法第二组"></a>4.3 常用方法第二组</h2><ol>
<li><strong>yield</strong>：线程礼让。让出CPU，让其他线程执行，但礼让的时间不确定，所以也不一定礼让成功。<strong>yield是将线程从运行态，转为就绪态，然后与其他线程重新竞争。</strong></li>
<li><strong>join：</strong>线程插队。插队的线程一旦插队成功，则<strong>会先执行完插入线程的所有任务。</strong></li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220709081348581.png" alt="image-20220709081348581"></p>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.ysu.method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-07-09 8:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMethod02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">T2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T2</span>();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;=<span class="number">20</span> ; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程 吃了&quot;</span> + i+ <span class="string">&quot;个汉堡&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">5</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;主线程让子线程先吃&quot;</span>);</span><br><span class="line">                <span class="comment">//join线程插队</span></span><br><span class="line">                <span class="comment">//相当于让t2线程先执行完毕</span></span><br><span class="line"><span class="comment">//                t2.join();</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//yield线程礼让</span></span><br><span class="line">                t2.yield();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程 吃了&quot;</span> + i+ <span class="string">&quot;个汉堡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-4守护线程"><a href="#4-4守护线程" class="headerlink" title="4.4守护线程"></a>4.4守护线程</h2><p>用户线程和守护线程</p>
<ol>
<li>用户线程：也叫工作线程，当线程的任务执行完或通知方式结束。</li>
<li>守护线程：一般视为工作线程服务的，当所有工作线程结束，守护线程自动结束</li>
<li>常见的守护线程：垃圾回收机制</li>
</ol>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.ysu.method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-07-09 8:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMethod03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">MyDaemonThread</span> <span class="variable">myDaemonThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDaemonThread</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果我们希望当主线程结束，子线程可以自动结束</span></span><br><span class="line">        <span class="comment">//只需将子线程设置为守护线程即可</span></span><br><span class="line">        myDaemonThread.setDaemon(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        myDaemonThread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;老板在办公室摸鱼&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;老板出来视察，我结束摸鱼，认真工作（假装）&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDaemonThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在愉快地摸鱼&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-线程的生命周期"><a href="#5-线程的生命周期" class="headerlink" title="5.线程的生命周期"></a>5.线程的生命周期</h1><h2 id="5-1-JDK-中用-Thread-State-枚举表示了线程的几种状态"><a href="#5-1-JDK-中用-Thread-State-枚举表示了线程的几种状态" class="headerlink" title="5.1 JDK 中用 Thread.State 枚举表示了线程的几种状态"></a>5.1 JDK 中用 Thread.State 枚举表示了线程的几种状态</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220709084024884.png" alt="image-20220709084024884"></p>
<h2 id="5-2-线程状态转换图"><a href="#5-2-线程状态转换图" class="headerlink" title="5.2 线程状态转换图"></a>5.2 线程状态转换图</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220709084122133.png"></p>
<p>Runnable状态只是代表可以运行了，但是否运行取决于线程调度器。</p>
<h2 id="5-3-案例"><a href="#5-3-案例" class="headerlink" title="5.3 案例"></a>5.3 案例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.ysu.state_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-07-09 9:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadState_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot;状态为：&quot;</span> + t.getState());</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只要线程状态不是终止状态，就打印线程t的状态</span></span><br><span class="line">        <span class="keyword">while</span> (Thread.State.TERMINATED != t.getState()) &#123;</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot;状态为：&quot;</span> + t.getState());</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot;状态为：&quot;</span> + t.getState());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-线程同步"><a href="#6-线程同步" class="headerlink" title="6. 线程同步"></a>6. 线程同步</h1><h2 id="6-1-Synchronized"><a href="#6-1-Synchronized" class="headerlink" title="6.1 Synchronized"></a>6.1 Synchronized</h2><h3 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h3><ol>
<li>在多线程编程中，一些敏感数据不允许被多个线程同时访问，此时就使用同步访问技术，保证数据在任何同一时刻，最多有一个线程访问，以保证数据的完整性。</li>
<li>线程同步：即当有一个线程对内存进行操作时，其他线程都不可以对这个内存地址进行操作，知道该线程完成操作，其他县城才能对该线程地址进行操作。</li>
</ol>
<h3 id="线程同步具体的实现方法Synchronized"><a href="#线程同步具体的实现方法Synchronized" class="headerlink" title="线程同步具体的实现方法Synchronized"></a>线程同步具体的实现方法Synchronized</h3><p>案例：卖票增强</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.ysu.synchronized_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-07-08 15:37</span></span><br><span class="line"><span class="comment"> * 使用多线程，模拟三个窗口同时售票</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicket</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SellTicket03</span> <span class="variable">sellTicket02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket03</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket02);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket02);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread03</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket02);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        thread01.start();</span><br><span class="line">        thread02.start();</span><br><span class="line">        thread03.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现接口方式，使用synchronized实现线程同步</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SellTicket03</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//让多个线程共享ticketNum</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticketNum</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        sell();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;<span class="comment">//同步方法，在同一时刻，只能有一个线程来执行run方法</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;售票结束。。。。。。&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//休眠50ms</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;窗口:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;售出一张票&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;剩余票数:&quot;</span> + (ticketNum--));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="同步原理分析"><a href="#同步原理分析" class="headerlink" title="同步原理分析"></a>同步原理分析</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220709095517528.png" alt="image-20220709095517528"></p>
<p>三个线程争夺一把锁（对象锁），谁抢到谁就执行run方法中的代码，其余线程会被挡在外面，执行完毕后释放锁，然后三个线程继续争夺。</p>
<h2 id="6-2-互斥锁"><a href="#6-2-互斥锁" class="headerlink" title="6.2 互斥锁"></a>6.2 互斥锁</h2><h3 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h3><ol>
<li>Java语言中引入了对象互斥锁的概念，来保证共享数据操作的完整性。</li>
<li>每个对象都对应一个可以被称为“<strong>互斥锁</strong>”的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象。</li>
<li>关键字synchronized来与对象互斥锁联系。当某个对象用synchronized修饰时，表名该对象在任一时刻只能由一个线程访问。</li>
<li>同步的局限性：导致程序的执行效率会降低（相当于多个车排队经过一个收费站）</li>
<li>同步方法(非静态)的锁可以是this，也可以是其他对象(要求是同一对象)。</li>
<li>同步方法(静态的)的锁为当前类本身。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. public synchronized void sell() &#123;&#125; 就是一个同步方法，此时的锁在this对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;<span class="comment">//同步方法，在同一时刻，只能有一个线程来执行run方法</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;售票结束。。。。。。&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//休眠50ms</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;窗口:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;售出一张票&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;剩余票数:&quot;</span> + (ticketNum--));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//2. 也可以在代码块上写synchronized ，同步代码块，互斥锁还是在this对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;<span class="comment">//同步方法，在同一时刻，只能有一个线程来执行run方法</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;售票结束。。。。。。&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//休眠50ms</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;窗口:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;售出一张票&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;剩余票数:&quot;</span> + (ticketNum--));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 同步方法(非静态)的锁可以是this，也可以是其他对象(要求是同一对象)。</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;<span class="comment">//同步方法，在同一时刻，只能有一个线程来执行run方法</span></span><br><span class="line">        <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;售票结束。。。。。。&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//休眠50ms</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;窗口:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;售出一张票&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;剩余票数:&quot;</span> + (ticketNum--));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.同步方法(静态的)的锁为当前类本身。</span></span><br><span class="line">    <span class="comment">//m1的锁是加在SellTicket03这个类上的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(SellTicket03.class)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;m2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="注意事项和细节："><a href="#注意事项和细节：" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h3><ol>
<li>如果同步方法没有使用static修饰：默认锁对象是this</li>
<li>如果同步方法使用static进行修饰：默认锁对象是当前类.class</li>
<li>实现的步骤<ol>
<li>先分析需要进行上锁的代码</li>
<li>选择<strong>同步代码块</strong>或者同步方法，建议同步代码块，因为这样可以使得上锁的代码更少，效率相对更高一些。</li>
<li>要求多个线程的锁对象为同一个即可。</li>
</ol>
</li>
</ol>
<h2 id="6-3-线程死锁"><a href="#6-3-线程死锁" class="headerlink" title="6.3 线程死锁"></a>6.3 线程死锁</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>多个线程都互相占用了对方的锁资源，但不肯相让，导致了死锁，编程时要避免死锁的发生。</p>
<h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//模拟死锁现象</span></span><br><span class="line">        <span class="type">DeadLockDemo</span> <span class="variable">A</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>(<span class="literal">true</span>);</span><br><span class="line">        A.setName(<span class="string">&quot;A线程&quot;</span>);</span><br><span class="line">        <span class="type">DeadLockDemo</span> <span class="variable">B</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>(<span class="literal">false</span>);</span><br><span class="line">        B.setName(<span class="string">&quot;B线程&quot;</span>);</span><br><span class="line">        A.start();</span><br><span class="line">        B.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DeadLockDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">// 保证多线程，共享一个对象,这里使用static</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="type">boolean</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeadLockDemo</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面业务逻辑的分析</span></span><br><span class="line">        <span class="comment">//1. 如果flag 为 T, 线程A 就会先得到/持有 o1 对象锁, 然后尝试去获取 o2 对象锁</span></span><br><span class="line">        <span class="comment">//2. 如果线程A 得不到 o2 对象锁，就会Blocked</span></span><br><span class="line">        <span class="comment">//3. 如果flag 为 F, 线程B 就会先得到/持有 o2 对象锁, 然后尝试去获取 o1 对象锁</span></span><br><span class="line">        <span class="comment">//4. 如果线程B 得不到 o1 对象锁，就会Blocked</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o1) &#123;<span class="comment">//对象互斥锁, 下面就是同步代码</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入1&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (o2) &#123; <span class="comment">// 这里获得li对象的监视权</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入3&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (o1) &#123; <span class="comment">// 这里获得li对象的监视权</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入4&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220709104944597.png" alt="image-20220709104944597"></p>
<p>两线程死锁，程序卡死。</p>
<h2 id="6-4-释放锁"><a href="#6-4-释放锁" class="headerlink" title="6.4 释放锁"></a>6.4 释放锁</h2><h3 id="会释放锁的操作"><a href="#会释放锁的操作" class="headerlink" title="会释放锁的操作"></a>会释放锁的操作</h3><ol>
<li>当前线程的同步方法、同步代码块执行结束<ul>
<li>案例：上厕所，上完厕所出来</li>
</ul>
</li>
<li>当前线程在同步代码块、同步方法中遇到break、return<ul>
<li>案例：没有正常的完事，经理叫他修改bug，不得已中断上厕所</li>
</ul>
</li>
<li>当前线程在同步代码块、同步方法中出现了未处理的Error或者Exception，导致异常结束<ul>
<li>没有正常的完事，发现忘带纸，不得已出来</li>
</ul>
</li>
<li>当前线程在同步代码块、同步方法中执行了线程对象的wait()方法，当前线程暂停，并释放锁。<ul>
<li>案例：没有正常完事，觉得需要酝酿一下，先出来，等会再进去</li>
</ul>
</li>
</ol>
<h3 id="不会释放锁的操作"><a href="#不会释放锁的操作" class="headerlink" title="不会释放锁的操作"></a>不会释放锁的操作</h3><ol>
<li>线程执行同步代码块或同步方法时，程序调用Thread.sleep()、Thread.yield()方法暂停当前线程的执行，不会释放锁。<ul>
<li>案例：上厕所，太困了，坐马桶上睡一会</li>
</ul>
</li>
<li>线程执行同步代码块或同步方法时，其他线程调用了该线程的suspend()方法将该线程挂起，该线程不会释放锁。<ul>
<li>提示：应该尽量避免suspend()和resume()来控制线程，方法不在推荐使用</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>尚硅谷爬虫学习笔记</title>
    <url>/posts/2317822155.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="一、Urllib"><a href="#一、Urllib" class="headerlink" title="一、Urllib"></a>一、Urllib</h1><h2 id="1-什么是互联网爬虫？"><a href="#1-什么是互联网爬虫？" class="headerlink" title="1.什么是互联网爬虫？"></a>1.什么是互联网爬虫？</h2><p>如果我们把互联网比作一张大的蜘蛛网，那一台计算机上的数据便是蜘蛛网上的一个猎物，而爬虫程序就是一只小蜘蛛，沿着蜘蛛网抓取自己想要的数据。</p>
<p>即通过一个程序来模拟浏览器，去向服务器发送请求，根据Url进行爬取网页，获取所需要的有用信息 </p>
<h2 id="2-爬虫核心"><a href="#2-爬虫核心" class="headerlink" title="2.爬虫核心"></a>2.爬虫核心</h2><ol>
<li><p>爬取网页：爬取整个网页 包含了网页中所有得内容 </p>
</li>
<li><p>解析数据：将网页中你得到的数据 进行解析 </p>
</li>
<li><p>难点：<strong>爬虫和反爬虫之间的博弈</strong></p>
</li>
</ol>
<h2 id="3-爬虫的用途"><a href="#3-爬虫的用途" class="headerlink" title="3.爬虫的用途"></a>3.爬虫的用途</h2><ul>
<li><p>数据分析&#x2F;人工数据集 </p>
</li>
<li><p>社交软件冷启动 </p>
</li>
<li><p>舆情监控 </p>
</li>
<li><p>竞争对手监控</p>
</li>
</ul>
<h2 id="4-爬虫分类"><a href="#4-爬虫分类" class="headerlink" title="4.爬虫分类"></a>4.爬虫分类</h2><ul>
<li>通用爬虫：<ul>
<li>功能：访问网页‐&gt;抓取数据‐&gt;数据存储‐&gt;数据处理‐&gt;提供检索服务 </li>
<li>robots协议：</li>
<li>一个约定俗成的协议，添加robots.txt文件，来说明本网站哪些内容不可以被抓取，起不到限制作用，自己写的爬虫无需遵守</li>
<li>缺点：<ul>
<li>抓取的数据大多是无用的 </li>
<li>不能根据用户的需求来精准获取数据</li>
</ul>
</li>
</ul>
</li>
<li><strong>聚焦爬虫</strong>：<ul>
<li>功能：根据需求，实现爬虫程序，抓取需要的数据</li>
<li>设计思路：<ul>
<li>确定要爬取的url</li>
<li>模拟浏览器通过http协议访问url，获取服务器返回的html代码 </li>
<li>解析html字符串（根据一定规则提取需要的数据）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="5-反爬手段"><a href="#5-反爬手段" class="headerlink" title="5.反爬手段"></a>5.反爬手段</h2><ol>
<li><p>User‐Agent：</p>
<ol>
<li><p>User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版 </p>
<p>本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。</p>
</li>
</ol>
</li>
<li><p>代理IP </p>
<ol>
<li>西次代理 </li>
<li>快代理 </li>
<li>什么是高匿名、匿名和透明代理？它们有什么区别？ <ol>
<li>使用透明代理，对方服务器可以知道你使用了代理，并且也知道你的真实IP。 </li>
<li>使用匿名代理，对方服务器可以知道你使用了代理，但不知道你的真实IP。 </li>
<li>使用高匿名代理，对方服务器不知道你使用了代理，更不知道你的真实IP。</li>
</ol>
</li>
</ol>
</li>
<li><p>验证码访问</p>
<ol>
<li>打码平台</li>
<li>云打码平台 </li>
<li>超级🦅</li>
</ol>
</li>
<li><p>动态加载网页 网站返回的是js数据 并不是网页的真实数据 </p>
<ol>
<li>selenium驱动真实的浏览器发送请求</li>
</ol>
</li>
<li><p>数据加密 </p>
<ol>
<li>分析js代码</li>
</ol>
</li>
</ol>
<h2 id="6-urllib库使用"><a href="#6-urllib库使用" class="headerlink" title="6.urllib库使用"></a>6.urllib库使用</h2><h3 id="6-1-urllib的基本使用"><a href="#6-1-urllib的基本使用" class="headerlink" title="6.1  urllib的基本使用"></a>6.1  urllib的基本使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用urllib来获取百度首页的源码</span></span><br><span class="line"><span class="comment">#(0) 导包</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment">#(1) 定义url</span></span><br><span class="line">url = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#(2) 模拟浏览器向服务器发送请求并获取响应</span></span><br><span class="line">response = urllib.request.urlopen(url)</span><br><span class="line"></span><br><span class="line"><span class="comment">#(3) 获取响应中的页面的源码</span></span><br><span class="line"><span class="comment">#read方法  返回的字节形式的二进制数据</span></span><br><span class="line"><span class="comment">#将二进制数据转换为字符串</span></span><br><span class="line"><span class="comment">#解码 decode(&#x27;编码的格式&#x27;)</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#(4) 打印数据</span></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure>



<h3 id="6-2-一个类型和六个方法"><a href="#6-2-一个类型和六个方法" class="headerlink" title="6.2 一个类型和六个方法"></a>6.2 一个类型和六个方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一个类型 HTTPResponse</span></span><br><span class="line"><span class="comment">#六个方法 read readline readlines getcode geturl getheaders</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(url)\</span><br><span class="line"></span><br><span class="line"><span class="comment">#一个类型和六个方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#response是HTTPResponse类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response))</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照一个字节一个字节的读数据</span></span><br><span class="line"><span class="comment"># content = response.read()</span></span><br><span class="line"><span class="comment"># print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#返回多少个字节,5代表返回5个字节</span></span><br><span class="line"><span class="comment"># content = response.read(5)</span></span><br><span class="line"><span class="comment"># print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取一行</span></span><br><span class="line"><span class="comment"># content = response.readline()</span></span><br><span class="line"><span class="comment"># print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取多行</span></span><br><span class="line"><span class="comment"># content = response.readlines()</span></span><br><span class="line"><span class="comment"># print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#返回状态码</span></span><br><span class="line"><span class="built_in">print</span>(response.getcode())</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回的是url地址</span></span><br><span class="line"><span class="built_in">print</span>(response.geturl())</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取状态信息</span></span><br><span class="line"><span class="built_in">print</span>(response.getheaders())</span><br></pre></td></tr></table></figure>

<h3 id="6-3-下载-网页、图片、视频"><a href="#6-3-下载-网页、图片、视频" class="headerlink" title="6.3 下载   网页、图片、视频"></a>6.3 下载   网页、图片、视频</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url_page = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载网页</span></span><br><span class="line"><span class="comment">#url代表的是下载的路径，filename代表文件的名字</span></span><br><span class="line"><span class="comment"># urllib.request.urlretrieve(url=url_page,filename=&#x27;baidu.html&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载图片</span></span><br><span class="line">url_img = <span class="string">&#x27;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fup.enterdesk.com%2Fedpic%2F2d%2F98%2F4e%2F2d984eafff42a790cbdc463b35e7e1ab.jpg&amp;refer=http%3A%2F%2Fup.enterdesk.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1651026550&amp;t=31e18a817719f780dee95ef36e2666c5&#x27;</span></span><br><span class="line"><span class="comment"># urllib.request.urlretrieve(url_img,&#x27;lisa.jpg&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载视频</span></span><br><span class="line">url_video = <span class="string">&#x27;https://vd3.bdstatic.com/mda-kjtx64epufgk8zw5/sc/cae_h264_nowatermark/1604104149/mda-kjtx64epufgk8zw5.mp4?v_from_s=hkapp-haokan-nanjing&amp;amp;auth_key=1648436966-0-0-c4052b4fdee46ddac2e5399be644e0ee&amp;amp;bcevod_channel=searchbox_feed&amp;amp;pd=1&amp;amp;cd=0&amp;amp;pt=3&amp;amp;logid=2366050261&amp;amp;vid=6647036806223333961&amp;amp;abtest=100815_1-101130_1-17451_1-3000221_7&amp;amp;klogid=2366050261&#x27;</span></span><br><span class="line"></span><br><span class="line">urllib.request.urlretrieve(url_video,<span class="string">&#x27;Lisa.mp4&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="7-请求对象的定制"><a href="#7-请求对象的定制" class="headerlink" title="7.请求对象的定制"></a>7.请求对象的定制</h2><h3 id="7-1-url的组成"><a href="#7-1-url的组成" class="headerlink" title="7.1 url的组成"></a>7.1 url的组成</h3><p>http&#x2F;https		<a href="http://www.baidu.com/">www.baidu.com</a>		80&#x2F;443			s			wd &#x3D; Lisa		#</p>
<p>协议					主机					  端口号		路径		参数				锚点</p>
<p>常见的端口：</p>
<ul>
<li>http 80</li>
<li>https 443</li>
<li>mysql 3306</li>
<li>redis 6379</li>
<li>Tomcat 8080</li>
</ul>
<h3 id="7-2-UA介绍："><a href="#7-2-UA介绍：" class="headerlink" title="7.2 UA介绍："></a>7.2 UA介绍：</h3><p>UA介绍：User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本。浏览器内核、浏览器渲染引擎、浏览器语言、浏览器插件等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com/&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#因为urlopen方法中不能存储字典，所以headers不能传递进去</span></span><br><span class="line"><span class="comment">#所以需要进行请求对象的定制</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure>

<h2 id="8-编解码"><a href="#8-编解码" class="headerlink" title="8.编解码"></a>8.编解码</h2><h3 id="8-1-编解码的演变"><a href="#8-1-编解码的演变" class="headerlink" title="8.1 编解码的演变"></a>8.1 编解码的演变</h3><blockquote>
<p>由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号， </p>
<p>这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。 </p>
<p>但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突， </p>
<p>所以，中国制定了GB2312编码，用来把中文编进去。 </p>
<p>你可以想得到的是，全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc‐kr里， </p>
<p>各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。 </p>
<p>因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。 </p>
<p>Unicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。 </p>
<p>现代操作系统和大多数编程语言都直接支持Unicode。</p>
</blockquote>
<h2 id="8-2-get请求方式1：urllib-parse-quote"><a href="#8-2-get请求方式1：urllib-parse-quote" class="headerlink" title="8.2  get请求方式1：urllib.parse.quote()"></a>8.2  get请求方式1：urllib.parse.quote()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="comment">#url  = &#x27;https://www.baidu.com/s?ie=UTF-8&amp;wd=%E6%9E%97%E4%BF%8A%E6%9D%B0&#x27;</span></span><br><span class="line"><span class="comment">#复制进来发现林俊杰变为了%E6%9E%97%E4%BF%8A%E6%9D%B0</span></span><br><span class="line"><span class="comment">#这是因为浏览器用的是ASCII编码，而python用的是Unicode编码，所以需要进行转换</span></span><br><span class="line">url  = <span class="string">&#x27;https://www.baidu.com/s?ie=UTF-8&amp;wd=&#x27;</span></span><br><span class="line"></span><br><span class="line">name = urllib.parse.quote(<span class="string">&#x27;林俊杰&#x27;</span>)</span><br><span class="line"><span class="comment">#拼接url</span></span><br><span class="line">url = url + name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment">#模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取响应内容</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印数据</span></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure>

<h2 id="8-2-get请求方式2：urllib-parse-urlencode"><a href="#8-2-get请求方式2：urllib-parse-urlencode" class="headerlink" title="8.2 get请求方式2：urllib.parse.urlencode()"></a>8.2 get请求方式2：urllib.parse.urlencode()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment">#@Time:2022/3/2814:26</span></span><br><span class="line"><span class="comment">#@Author:陈 玉 皓</span></span><br><span class="line"><span class="comment">#@File:urlencode_1.py</span></span><br><span class="line"><span class="comment">#@Sofeware:PyCharm</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="comment">#urlencode应用场景，多个参数的时候</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#例:https://www.baidu.com/s?wd=周杰伦&amp;sex=男&amp;location=中国台湾省</span></span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&#x27;https://www.baidu.com/s?&#x27;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">   <span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;周杰伦&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;location&#x27;</span>:<span class="string">&#x27;中国台湾省&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new_data = urllib.parse.urlencode(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请求资源路径</span></span><br><span class="line">url = base_url + new_data</span><br><span class="line"><span class="built_in">print</span>(url)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment">#模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取响应内容</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印数据</span></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure>

<h2 id="9-ajax的get请求"><a href="#9-ajax的get请求" class="headerlink" title="9.ajax的get请求"></a>9.ajax的get请求</h2><p>案例：豆瓣电影</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment"># @Time:2022/3/2914:49</span></span><br><span class="line"><span class="comment"># @Author:陈 玉 皓</span></span><br><span class="line"><span class="comment"># @File:douban2.py</span></span><br><span class="line"><span class="comment"># @Sofeware:PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">   base_url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;&#x27;</span></span><br><span class="line"></span><br><span class="line">   data = &#123;</span><br><span class="line">      <span class="string">&#x27;start&#x27;</span>: (page - <span class="number">1</span>) * <span class="number">20</span>,</span><br><span class="line">      <span class="string">&#x27;limit&#x27;</span>: <span class="number">20</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   data = urllib.parse.urlencode(data)</span><br><span class="line"></span><br><span class="line">   url = base_url + data</span><br><span class="line"></span><br><span class="line">   headers = &#123;</span><br><span class="line">      <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">#请求对象的定制</span></span><br><span class="line">   request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line">   <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取网页源代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">   response = urllib.request.urlopen(request)</span><br><span class="line">   content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">   <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down_load</span>(<span class="params">page, content</span>):</span><br><span class="line">   <span class="comment"># open方法默认情况下使用的是gbk的编码</span></span><br><span class="line">   <span class="comment"># 如果想保存汉字，需要在open方法中指定编码格式为utf-8</span></span><br><span class="line">   <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;douban_&#x27;</span> + <span class="built_in">str</span>(page) + <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">      fp.write(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序的入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   start_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入起始的页码：&#x27;</span>))</span><br><span class="line">   end_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入结束的页码：&#x27;</span>))</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start_page, end_page + <span class="number">1</span>):</span><br><span class="line">      <span class="comment"># 每一页都有自己的请求定制</span></span><br><span class="line">      request = create_request(page)</span><br><span class="line">      <span class="comment"># 获取响应数据</span></span><br><span class="line">      content = get_content(request)</span><br><span class="line">      <span class="comment"># 下载</span></span><br><span class="line">      down_load(page,content)</span><br></pre></td></tr></table></figure>

<h2 id="10-ajax的post请求"><a href="#10-ajax的post请求" class="headerlink" title="10.ajax的post请求"></a>10.ajax的post请求</h2><p>KFC地点查询</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment"># @Time:2022/3/2916:33</span></span><br><span class="line"><span class="comment"># @Author:陈 玉 皓</span></span><br><span class="line"><span class="comment"># @File:kfcdemo.py</span></span><br><span class="line"><span class="comment"># @Sofeware:PyCharm</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">location,page</span>):</span><br><span class="line">   url = <span class="string">&#x27;http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname&#x27;</span></span><br><span class="line">   headers = &#123;</span><br><span class="line">      <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">   data = &#123;</span><br><span class="line">      <span class="string">&#x27;cname&#x27;</span>: location,</span><br><span class="line">      <span class="string">&#x27;pid&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;pageIndex&#x27;</span>: page,</span><br><span class="line">      <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;10&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">#post方式编码</span></span><br><span class="line">   data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">   request = urllib.request.Request(url=url,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">   response = urllib.request.urlopen(request)</span><br><span class="line">   content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">   <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down_load</span>(<span class="params">content,page</span>):</span><br><span class="line">   <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;kfc_&#x27;</span>+<span class="built_in">str</span>(page)+<span class="string">&#x27;.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">      f.write(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   localtion = <span class="built_in">input</span>(<span class="string">&#x27;请输入你要查询的省份或者城市:&#x27;</span>)</span><br><span class="line">   start_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入起始页码:&#x27;</span>))</span><br><span class="line">   end_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入结束页码:&#x27;</span>))</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start_page,end_page + <span class="number">1</span>):</span><br><span class="line">      <span class="comment"># 定制请求对象</span></span><br><span class="line">      request = create_request(localtion,page)</span><br><span class="line">      <span class="comment">#获取响应内容</span></span><br><span class="line">      content = get_content(request)</span><br><span class="line">      <span class="comment">#下载每一页的数据</span></span><br><span class="line">      down_load(content,page)</span><br></pre></td></tr></table></figure>

<h2 id="11-UrlError-HTTPError"><a href="#11-UrlError-HTTPError" class="headerlink" title="11.UrlError\HTTPError"></a>11.UrlError\HTTPError</h2><p><strong>简介:</strong></p>
<ol>
<li><p>HTTPError类是URLError类的子类 </p>
</li>
<li><p>导入的包urllib.error.HTTPError         urllib.error.URLError </p>
</li>
<li><p>http错误：http错误是针对浏览器无法连接到服务器而增加出来的错误提示。引导并告诉浏览者该页是哪里出了问题。</p>
</li>
<li><p>通过urllib发送请求的时候，有可能会发送失败，这个时候如果想让你的代码更加的健壮，可以通过try‐</p>
</li>
</ol>
<p>except进行捕获异常，异常有两类，URLError\HTTPError </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"><span class="comment">#url = https://blog.csdn.net/TZ45678/article/details/123486485</span></span><br><span class="line"><span class="comment">#乱改一下会出异常</span></span><br><span class="line">url = <span class="string">&#x27;https://blog.csdn.net/TZ45678/article/details/123486485sdfasfdasdf&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">   <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line">   response = urllib.request.urlopen(request)</span><br><span class="line">   content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">   <span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> urllib.error.HTTPError:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;系统正在升级...&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="12-cookie登录"><a href="#12-cookie登录" class="headerlink" title="12.cookie登录"></a>12.cookie登录</h2>]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
  </entry>
  <entry>
    <title>剑指Offer22 链表中倒数第K个结点</title>
    <url>/posts/4254875703.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="剑指-Offer-22-链表中倒数第k个节点"><a href="#剑指-Offer-22-链表中倒数第k个节点" class="headerlink" title="剑指 Offer 22. 链表中倒数第k个节点"></a><a href="https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/">剑指 Offer 22. 链表中倒数第k个节点</a></h4><p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</p>
<p>例如，一个链表有 <code>6</code> 个节点，从头节点开始，它们的值依次是 <code>1、2、3、4、5、6</code>。这个链表的倒数第 <code>3</code> 个节点是值为 <code>4</code> 的节点。</p>
<p><strong>示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k = 2.</span><br><span class="line"></span><br><span class="line">返回链表 4-&gt;5.</span><br></pre></td></tr></table></figure>

<h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h3><h4 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h4><ul>
<li>假设链表长度为<code>n</code>，倒数第k个即正数第<code>n-k</code>个</li>
<li>两次遍历，第一次找出链表长度，第二次找到链表第<code>n - k</code>个结点</li>
</ul>
<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">getKthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">        length++;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(length &lt; k )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cur =head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; length - k;i++)&#123;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h4><ul>
<li>双指针</li>
<li>快指针先走k步，然后慢指针和快指针同步走</li>
<li>快指针走到链表末尾，慢指针走到倒数第k个结点</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">getKthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="comment">//双指针，快指针先走k步，然后慢指针和快指针同步走，快指针走到链表末尾，慢指针走到倒数第k个结点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || k &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//快指针扫描链表长度，边走边判断是否到达了链表尾部，因为链表长度可能小于k</span></span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        --k;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果链表长度小于k，直接返回空</span></span><br><span class="line">    <span class="keyword">if</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span>) &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>左神动态规划专题</title>
    <url>/posts/2416130967.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote>
<p>机器人走路问题，假设有排成一排的N个位置，记为1-N，N一定大于等于2，规定机器人必须走K步，最终能来到P位置，则机器人到达P点一共多少种方法？</p>
<p>注：如果机器人在1位置，则下一步只能去2位置，若机器人在N位置，则下一步只能去N - 1 位置</p>
</blockquote>
<h4 id="尝试1："><a href="#尝试1：" class="headerlink" title="尝试1："></a>尝试1：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       System.out.println(way1(<span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">way1</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> start, <span class="type">int</span> aim, <span class="type">int</span> K)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> process1(start, K, aim, N);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//机器人当前的来到的位置是cur</span></span><br><span class="line">   <span class="comment">//机器人还有rest步需要去走</span></span><br><span class="line">   <span class="comment">//最终的目标是aim</span></span><br><span class="line">   <span class="comment">//有哪些位置? 1 - N</span></span><br><span class="line">   <span class="comment">//返回： 机器人从cur出发，走过rest步之后，最终停在aim的方法数有多少种。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process1</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> rest, <span class="type">int</span> aim, <span class="type">int</span> N)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (rest == <span class="number">0</span>) &#123; <span class="comment">//步数为0了，不需要走了！</span></span><br><span class="line">           <span class="comment">// 直接判断当前点是否为目标点并返回结果</span></span><br><span class="line">           <span class="type">return</span> <span class="variable">cur</span> <span class="operator">=</span>= aim ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//rest&gt; 0</span></span><br><span class="line">       <span class="comment">//还有步数要走！</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//机器人当前在左边界，下一步只能向右走,即1 -&gt; 2</span></span><br><span class="line">       <span class="keyword">if</span> (cur == <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="comment">//在1位置有rest步和在2位置有rest - 1步，没有区别，因为1 -&gt; 2这一步是固定的</span></span><br><span class="line">           <span class="keyword">return</span> process1(<span class="number">2</span>, rest - <span class="number">1</span>, aim, N);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//机器人当前在右边界，下一步只能向左走，即N - 1 &lt;- N</span></span><br><span class="line">       <span class="keyword">if</span> (cur == N) &#123;</span><br><span class="line">           <span class="keyword">return</span> process1(N - <span class="number">1</span>, rest - <span class="number">1</span>, aim, N);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//机器人在中间，可以任意向两边走,则结果为向左走的结果和向右走的结果加和</span></span><br><span class="line">       <span class="keyword">return</span> process1(cur - <span class="number">1</span>, rest - <span class="number">1</span>, aim, N) + process1(cur + <span class="number">1</span>, rest - <span class="number">1</span>, aim, N);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><code>出现重复解的暴力递归才可以优化</code></p>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>工具类积累</title>
    <url>/posts/3243178616.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="MD5工具类"><a href="#MD5工具类" class="headerlink" title="MD5工具类"></a>MD5工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MD5Utils</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用md5的算法进行加密</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">md5</span><span class="params">(String plainText)</span> &#123;</span><br><span class="line">      <span class="type">byte</span>[] secretBytes = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         secretBytes = MessageDigest.getInstance(<span class="string">&quot;md5&quot;</span>).digest(</span><br><span class="line">               plainText.getBytes());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;没有md5这个算法！&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">String</span> <span class="variable">md5code</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="number">1</span>, secretBytes).toString(<span class="number">16</span>);<span class="comment">// 16进制数字</span></span><br><span class="line">      <span class="comment">// 如果生成数字未满32位，需要前面补0</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">32</span> - md5code.length(); i++) &#123;</span><br><span class="line">         md5code = <span class="string">&quot;0&quot;</span> + md5code;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> md5code;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      System.out.println(md5(<span class="string">&quot;1234&quot;</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="日期工具类"><a href="#日期工具类" class="headerlink" title="日期工具类"></a>日期工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期操作工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期转换-  String -&gt; Date</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dateString 字符串时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Date类型信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">parseString2Date</span><span class="params">(String dateString)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (dateString == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parseString2Date(dateString, <span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期转换-  String -&gt; Date</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dateString 字符串时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern    格式模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Date类型信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">parseString2Date</span><span class="params">(String dateString, String pattern)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (dateString == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(pattern);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> sdf.parse(dateString);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期转换 Date -&gt; String</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date Date类型信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 字符串时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">parseDate2String</span><span class="params">(Date date)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (date == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parseDate2String(date, <span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期转换 Date -&gt; String</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date    Date类型信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern 格式模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 字符串时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">parseDate2String</span><span class="params">(Date date, String pattern)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (date == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(pattern);</span><br><span class="line">        <span class="type">String</span> <span class="variable">strDate</span> <span class="operator">=</span> sdf.format(date);</span><br><span class="line">        <span class="keyword">return</span> strDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前日期的本周一是几号</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 本周一的日期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">getThisWeekMonday</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        cal.setTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">// 获得当前日期是一个星期的第几天</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">dayWeek</span> <span class="operator">=</span> cal.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == dayWeek) &#123;</span><br><span class="line">            cal.add(Calendar.DAY_OF_MONTH, -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置一个星期的第一天，按中国的习惯一个星期的第一天是星期一</span></span><br><span class="line">        cal.setFirstDayOfWeek(Calendar.MONDAY);</span><br><span class="line">        <span class="comment">// 获得当前日期是一个星期的第几天</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> cal.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">        <span class="comment">// 根据日历的规则，给当前日期减去星期几与一个星期第一天的差值</span></span><br><span class="line">        cal.add(Calendar.DATE, cal.getFirstDayOfWeek() - day);</span><br><span class="line">        <span class="keyword">return</span> cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前日期周的最后一天</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前日期周的最后一天</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">getSundayOfThisWeek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="type">int</span> <span class="variable">dayOfWeek</span> <span class="operator">=</span> c.get(Calendar.DAY_OF_WEEK) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (dayOfWeek == <span class="number">0</span>) &#123;</span><br><span class="line">            dayOfWeek = <span class="number">7</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c.add(Calendar.DATE, -dayOfWeek + <span class="number">7</span>);</span><br><span class="line">        <span class="keyword">return</span> c.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据日期区间获取月份列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minDate 开始时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxDate 结束时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 月份列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getMonthBetween</span><span class="params">(String minDate, String maxDate, String format)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ArrayList&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">min</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">max</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line"></span><br><span class="line">        min.setTime(sdf.parse(minDate));</span><br><span class="line">        min.set(min.get(Calendar.YEAR), min.get(Calendar.MONTH), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        max.setTime(sdf.parse(maxDate));</span><br><span class="line">        max.set(max.get(Calendar.YEAR), max.get(Calendar.MONTH), <span class="number">2</span>);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(format);</span><br><span class="line"></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">curr</span> <span class="operator">=</span> min;</span><br><span class="line">        <span class="keyword">while</span> (curr.before(max)) &#123;</span><br><span class="line">            result.add(sdf2.format(curr.getTime()));</span><br><span class="line">            curr.add(Calendar.MONTH, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据日期获取年度中的周索引</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date 日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 周索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">getWeekOfYear</span><span class="params">(String date)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">useDate</span> <span class="operator">=</span> parseString2Date(date);</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        cal.setTime(useDate);</span><br><span class="line">        <span class="keyword">return</span> cal.get(Calendar.WEEK_OF_YEAR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据年份获取年中周列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> year 年分</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 周列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Integer, String&gt; <span class="title function_">getWeeksOfYear</span><span class="params">(String year)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">useDate</span> <span class="operator">=</span> parseString2Date(year, <span class="string">&quot;yyyy&quot;</span>);</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        cal.setTime(useDate);</span><br><span class="line">        <span class="comment">//获取年中周数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">weeksCount</span> <span class="operator">=</span> cal.getWeeksInWeekYear();</span><br><span class="line">        Map&lt;Integer, String&gt; mapWeeks = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">55</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; weeksCount; i++) &#123;</span><br><span class="line">            cal.get(Calendar.DAY_OF_YEAR);</span><br><span class="line">            mapWeeks.put(i + <span class="number">1</span>, parseDate2String(getFirstDayOfWeek(cal.get(Calendar.YEAR), i)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mapWeeks;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某年的第几周的开始日期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> year 年分</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> week 周索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 开始日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">getFirstDayOfWeek</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> week)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>();</span><br><span class="line">        c.set(Calendar.YEAR, year);</span><br><span class="line">        c.set(Calendar.MONTH, Calendar.JANUARY);</span><br><span class="line">        c.set(Calendar.DATE, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> (GregorianCalendar) c.clone();</span><br><span class="line">        cal.add(Calendar.DATE, week * <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getFirstDayOfWeek(cal.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某年的第几周的结束日期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> year 年份</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> week 周索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结束日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">getLastDayOfWeek</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> week)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>();</span><br><span class="line">        c.set(Calendar.YEAR, year);</span><br><span class="line">        c.set(Calendar.MONTH, Calendar.JANUARY);</span><br><span class="line">        c.set(Calendar.DATE, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> (GregorianCalendar) c.clone();</span><br><span class="line">        cal.add(Calendar.DATE, week * <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getLastDayOfWeek(cal.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前时间所在周的开始日期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date 当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 开始时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">getFirstDayOfWeek</span><span class="params">(Date date)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>();</span><br><span class="line">        c.setFirstDayOfWeek(Calendar.SUNDAY);</span><br><span class="line">        c.setTime(date);</span><br><span class="line">        c.set(Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek());</span><br><span class="line">        <span class="keyword">return</span> c.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前时间所在周的结束日期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date 当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结束日期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">getLastDayOfWeek</span><span class="params">(Date date)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>();</span><br><span class="line">        c.setFirstDayOfWeek(Calendar.SUNDAY);</span><br><span class="line">        c.setTime(date);</span><br><span class="line">        c.set(Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() + <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">return</span> c.getTime();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获得上周一的日期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">geLastWeekMonday</span><span class="params">(Date date)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        cal.setTime(getThisWeekMonday(date));</span><br><span class="line">        cal.add(Calendar.DATE, -<span class="number">7</span>);</span><br><span class="line">        <span class="keyword">return</span> cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得本周一的日期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">getThisWeekMonday</span><span class="params">(Date date)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        cal.setTime(date);</span><br><span class="line">        <span class="comment">// 获得当前日期是一个星期的第几天</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">dayWeek</span> <span class="operator">=</span> cal.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == dayWeek) &#123;</span><br><span class="line">            cal.add(Calendar.DAY_OF_MONTH, -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置一个星期的第一天，按中国的习惯一个星期的第一天是星期一</span></span><br><span class="line">        cal.setFirstDayOfWeek(Calendar.MONDAY);</span><br><span class="line">        <span class="comment">// 获得当前日期是一个星期的第几天</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> cal.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">        <span class="comment">// 根据日历的规则，给当前日期减去星期几与一个星期第一天的差值</span></span><br><span class="line">        cal.add(Calendar.DATE, cal.getFirstDayOfWeek() - day);</span><br><span class="line">        <span class="keyword">return</span> cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得下周一的日期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">getNextWeekMonday</span><span class="params">(Date date)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        cal.setTime(getThisWeekMonday(date));</span><br><span class="line">        cal.add(Calendar.DATE, <span class="number">7</span>);</span><br><span class="line">        <span class="keyword">return</span> cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得今天日期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">getToday</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得本月一日的日期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">getFirstDay4ThisMonth</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        calendar.set(Calendar.DAY_OF_MONTH,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> calendar.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本周一&quot;</span> + parseDate2String(getThisWeekMonday()));</span><br><span class="line">            System.out.println(<span class="string">&quot;本月一日&quot;</span> + parseDate2String(getFirstDay4ThisMonth()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="随机生成验证码工具类"><a href="#随机生成验证码工具类" class="headerlink" title="随机生成验证码工具类"></a>随机生成验证码工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 随机生成验证码工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidateCodeUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 长度为4位或者6位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">generateValidateCode</span><span class="params">(<span class="type">int</span> length)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">4</span>)&#123;</span><br><span class="line">            code = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">9999</span>);<span class="comment">//生成随机数，最大为9999</span></span><br><span class="line">            <span class="keyword">if</span>(code &lt; <span class="number">1000</span>)&#123;</span><br><span class="line">                code = code + <span class="number">1000</span>;<span class="comment">//保证随机数为4位数字</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(length == <span class="number">6</span>)&#123;</span><br><span class="line">            code = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">999999</span>);<span class="comment">//生成随机数，最大为999999</span></span><br><span class="line">            <span class="keyword">if</span>(code &lt; <span class="number">100000</span>)&#123;</span><br><span class="line">                code = code + <span class="number">100000</span>;<span class="comment">//保证随机数为6位数字</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;只能生成4位或6位数字验证码&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成指定长度字符串验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateValidateCode4String</span><span class="params">(<span class="type">int</span> length)</span>&#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rdm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">hash1</span> <span class="operator">=</span> Integer.toHexString(rdm.nextInt());</span><br><span class="line">        <span class="type">String</span> <span class="variable">capstr</span> <span class="operator">=</span> hash1.substring(<span class="number">0</span>, length);</span><br><span class="line">        <span class="keyword">return</span> capstr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式学习</title>
    <url>/posts/154390417.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="什么是单例？"><a href="#什么是单例？" class="headerlink" title="什么是单例？"></a>什么是单例？</h3><ul>
<li>保证一个类在任何情况下只有一个实例，该类<strong>构造⽅法必须是私有的</strong>、由⾃⼰创建⼀个静态变量存储实例，对<strong>外提供⼀个静态公有⽅法获取实例</strong>。</li>
</ul>
<hr>
<h3 id="那些地方用到了单例？"><a href="#那些地方用到了单例？" class="headerlink" title="那些地方用到了单例？"></a>那些地方用到了单例？</h3><ol>
<li>网站的计数器，一般是使用单例模式实现的，否则难以同步。</li>
<li>应用程序的日志应用，一般都是单例模式实现。</li>
<li>多线程的线程池设计一般也是采用单例模式，因为线程池要对池中的线程进行控制。</li>
</ol>
<hr>
<h3 id="单例优缺点"><a href="#单例优缺点" class="headerlink" title="单例优缺点"></a>单例优缺点</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul>
<li>在单例模式中，活动的单例只有一个实例，对单例类的所有实例化得到的都是相同的一个实例。这样就防止其它对象对自己的实例化，确保所有的对象都访问一个实例</li>
<li>单例模式具有一定的伸缩性，类自己来控制实例化进程，类就在改变实例化进程上有相应的伸缩性。</li>
<li>提供了对唯一实例的受控访问。</li>
<li><strong>由于在系统内存中只存在一个对象，因此可以节约系统资源，当需要频繁创建和销毁的对象时单例模式无疑可以提高系统的性能。</strong></li>
<li>允许可变数目的实例。</li>
<li>避免对共享资源的多重占用。</li>
</ul>
<h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul>
<li>不适用于变化的对象，如果同一类型的对象总是要在不同的用例场景发生变化，单例就会引起数据的错误，不能保存彼此的状态。</li>
<li>由于<strong>单例模式中没有抽象层，因此单例类的扩展有很大的困难。</strong></li>
<li>单例类的职责过重，在一定程度上违背了“单一职责原则”。</li>
<li>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失。</li>
</ul>
<hr>
<h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><p>单例模式有好几种写法：</p>
<ul>
<li><p>饿汉式：类初始化时，会立即加载该对象，线程天生安全，调用效率高，但是类加载时就回初始化，浪费内存空间。</p>
</li>
<li><p>懒汉式：类初始化时不会初始化该对象，真正需要使用的时候才会创建该对象，具备懒加载功能。</p>
<ul>
<li>简单懒汉式（在方法声明时加锁）</li>
<li>DCL双重检验加锁（进阶懒汉式）</li>
<li>静态内部类（优雅懒汉式）</li>
</ul>
</li>
<li><p>饿汉式</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//饿汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">//还没用到前就初始化了对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>简单懒汉式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单懒汉式    </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法加锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>DCL懒汉式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DCL懒汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">//这里一定要加volatile修饰，防止出现指令重排导致线程不安全问题</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//双重检验加锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>静态内部类懒汉式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态内部类懒汉式    </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="comment">//使用静态内部类来实现懒加载（一定线程安全）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">LazyLoader</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> LazyLoader.singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><p>简单工厂模式是由一个工厂对象来创建实例，客户端不需要不关注创建逻辑，只需要提供传入工厂的参数</p>
<p>适⽤于⼯⼚类<strong>负责创建对象较少</strong>的情况，缺点是如果要增加新产品，就需<br>要修改⼯⼚类的判断逻辑，<strong>违背开闭原则</strong>，且产品多的话会使⼯⼚类⽐较<br>复杂。</p>
<hr>
<h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>和简单工厂模式中工厂负责生产所有的产品相比，工厂方法模式将生成具体产品的任务分发给具体的产品工厂。也就是定义⼀个抽象⼯⼚，其<strong>定义了产品的⽣产接⼝，但不负责具体的产品，将⽣产任务交给不同的派⽣类⼯⼚。</strong>这样不⽤通过指定类型来创建对象了。</p>
<hr>
<h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>简单⼯⼚模式和⼯⼚⽅法模式不管⼯⼚怎么拆分抽象，都<strong>只是针对⼀类产</strong><br><strong>品</strong>，如果要⽣成另⼀种产品，就⽐较难办了！<br>抽象⼯⼚模式通过在 AbstarctFactory 中<strong>增加创建产品的接⼝</strong>，并在具体⼦<br>⼯⼚中实现新加产品的创建。</p>
<hr>
<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>在我们的应⽤程序中我们可能需要将两个不同接⼝的类来进⾏通信，在不<br>修改这两个类的前提下我们可能会需要某个中间件来完成这个衔接的过程。<br><strong>这个中间件就是适配器。</strong></p>
<p>所谓适配器模式就是将⼀个类的接⼝，转换成客户期望的另⼀个接⼝。它可以让原本两个不兼容的接⼝能够⽆缝完成对接。</p>
<p>作为中间件的适配器将⽬标类和适配者解耦，增加了类的透明性和可复⽤<br>性</p>
<hr>
<p><strong>优点：</strong></p>
<ol>
<li>提⾼了类的复⽤；</li>
<li>组合若⼲关联对象形成对外提供统⼀服务的接⼝；</li>
<li>扩展性、灵活性好。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>过多使⽤适配模式容易造成<strong>代码功能和逻辑意义的混淆。</strong></li>
<li>部分语⾔对继承的限制，可能⾄多只能适配⼀个适配者类，⽽且⽬标类<br> 必须是抽象类。</li>
</ol>
<hr>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>代理模式的本质是⼀个中间件，主要⽬的是解耦合服务提供者和使⽤者。<br><strong>使⽤者通过代理间接的访问服务提供者，便于后者的封装和控制。</strong></p>
<p>是⼀种结构性模式。</p>
<hr>
<p><strong>代理模型有静态代理和动态代理。</strong></p>
<ul>
<li><p>静态代理：由程序员手<strong>动创建代理类</strong>或特定工具自动生成源代码再对其编译，在程序运行前代理类的 .class 文件就已经存在了。</p>
<ul>
<li>特点是需要⾃⼰写代理类，实现对应的接⼝，⽐较麻烦。</li>
</ul>
</li>
<li><p>动态代理常⻅的⼜有两种实现⽅式：JDK动态代理和CGLIB代理</p>
<ul>
<li>JDK动态代理其实就是运<strong>⽤了反射的机制</strong>，⽽CGLIB代理则⽤的是利⽤ASM框架，通过修改其字节码⽣成⼦类来处理。3</li>
<li>要实现静态代理需要将代理类硬编码在程序中，有一些代理一个代理就要负责一个类，这样代理模式可能会非常多，这就造成了很多不必要的资源浪费并且增加了很多的代码量。</li>
<li>动态代理可以帮助我们仅仅在需要的时候再创建代理类，减少资源浪费，此外由于动态代理是一个<strong>模板的形式</strong>，也可以减少程序的代码量。</li>
</ul>
</li>
</ul>
<h3 id="静态代理和动态代理的区别"><a href="#静态代理和动态代理的区别" class="headerlink" title="静态代理和动态代理的区别"></a>静态代理和动态代理的区别</h3><ol>
<li>灵活性 ：动态代理更加灵活，不需要必须实现接⼝，可以直接代理实<br> 现类，并且可以不需要针对每个⽬标类都创建⼀个代理类。</li>
<li>另外，静态代理中，接⼝⼀旦新增加⽅法，⽬标对象和代理对象都要进⾏修改，这是⾮常麻烦的！</li>
<li>JVM 层⾯ ：静态代理在编译时就将接⼝、实现类、代理类这些都变成<br> 了⼀个个实际的 class ⽂件。⽽动态代理是在运⾏时动态⽣成类字节<br> 码，并加载到 JVM 中的。</li>
</ol>
<hr>
<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>观察者模式主要⽤于处理对象间的⼀对多的关系，是⼀种对象⾏为模式。<br>该模式的实际应⽤场景⽐较容易确认，当⼀个对象状态发⽣变化时，所有该对象的关注者均能收到状态变化通知，以进⾏相应的处理。（类似于广播）</p>
<hr>
<h3 id="观察者模式的优缺点"><a href="#观察者模式的优缺点" class="headerlink" title="观察者模式的优缺点"></a>观察者模式的优缺点</h3><p><strong>优点：</strong></p>
<ol>
<li>被观察者和观察者之间是抽象耦合的；</li>
<li>耦合度较低，两者之间的关联仅仅在于消息的通知；</li>
<li>被观察者⽆需关⼼他的观察者；</li>
<li>⽀持⼴播通信；</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>观察者只知道被观察对象发⽣了变化，但不知变化的过程和缘由；</li>
<li>观察者同时也可能是被观察者，消息传递的链路可能会过⻓，完成所有通知花费时间较多；</li>
<li>如果观察者和被观察者之间产⽣循环依赖，或者消息传递链路形成闭环，会导致⽆限循环；</li>
</ol>
<hr>
<h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>装饰器模式主要对现有的类对象进⾏包裹和封装，以期望在不改变类对象及其类定义的情况下，为对象添加额外功能。是⼀种对象结构型模式。</p>
<p>需要注意的是，该过程是通过调⽤被包裹之后的对象完成功能添加的，⽽不是直接修改现有对象的⾏为，相当于增加了中间层。</p>
<h3 id="应⽤场景"><a href="#应⽤场景" class="headerlink" title="应⽤场景"></a>应⽤场景</h3><ul>
<li>如果你希望在⽆需修改代码的情况下即可使⽤对象， 且希望在运⾏时为对象新增额外的⾏为， 可以使⽤装饰模式。</li>
<li>装饰能将业务逻辑组织为层次结构， 你可为各层创建⼀个装饰， 在运⾏时<br>将各种不同逻辑组合成对象。 由于这些对象都遵循通⽤接⼝， 客户端代码<br>能以相同的⽅式使⽤这些对象。</li>
<li>如果⽤继承来扩展对象⾏为的⽅案难以实现或者根本不可⾏， 你可以使⽤<br>该模式。</li>
<li>许多编程语⾔使⽤ final 最终关键字来限制对某个类的进⼀步扩展。 复⽤最终类已有⾏为的唯⼀⽅法是使⽤装饰模式：⽤封装器对其进⾏封装。</li>
</ul>
<h3 id="和代理模式的区别："><a href="#和代理模式的区别：" class="headerlink" title="和代理模式的区别："></a>和代理模式的区别：</h3><p>可以看到，代理模式和装饰器博士都是给类或者对象进行功能的增强。</p>
<ul>
<li><p>但是代理模式的访问控制主要在于对目标类的透明访问，也就是说我们不需要知道目标类的具体情况，只需要知道代理类可以帮助我们完成想要的功能就对了；</p>
</li>
<li><p>而对于装饰者模式，我们是有一个目标类的对象的，这个对象可以完成特定的功能，但是不能满足我们的要求，所以需要对其进行增强。</p>
</li>
</ul>
<p>也就是说，在代理模式中，<strong>目标类对于客户端是透明的，由代理类隐藏其具体信息并响应客户端请求</strong>；<strong>而装饰者中客户端对特定的目标类对象进行增强</strong>。</p>
<p>所以，<strong>代理类与真实对象的关系常在编译时就确定，而装饰者在运行时递归构造。</strong></p>
<hr>
<h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><ul>
<li>⼀个请求沿着⼀条“链”传递，直到该“链”上的某个处理者处理它为⽌</li>
<li>⼀个请求可以被多个处理者处理或处理者未明确指定时。</li>
<li>它最原始的裸体结构： switch-case 语句。</li>
</ul>
<h3 id="应⽤场景-1"><a href="#应⽤场景-1" class="headerlink" title="应⽤场景"></a>应⽤场景</h3><ul>
<li>当程序需要使⽤不同⽅式处理不同种类请求， ⽽且请求类型和顺序预<br>先未知时， 可以使⽤责任链模式。该模式能将多个处理者连接成⼀条<br>链。接收到请求后， 它会 “询问” 每个处理者是否能够对其进⾏处理。<br>这样所有处理者都有机会来处理请求。</li>
<li>当必须按顺序执⾏多个处理者时， 可以使⽤该模式。⽆论你以何种顺序将处理者连接成⼀条链， 所有请求都会严格按照顺序通过链上的处理者。</li>
</ul>
<hr>
<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>策略模式（Strategy Pattern）属于对象的⾏为模式。其⽤意是针对⼀组算法，将每⼀个算法封装到具有共同接⼝的独⽴的类中，从⽽使得它们可以相互替换。策略模式使得算法可以在不影响到客户端的情况下发⽣变化。<br>其主要⽬的是通过定义相似的算法，替换 if else 语句写法，并且可以随时相互替换。</p>
<hr>
<h2 id="Spring-框架中⽤到了哪些设计模式？"><a href="#Spring-框架中⽤到了哪些设计模式？" class="headerlink" title="Spring 框架中⽤到了哪些设计模式？"></a>Spring 框架中⽤到了哪些设计模式？</h2><ul>
<li>⼯⼚设计模式 : Spring 使⽤⼯⼚模式通过<ul>
<li>BeanFactory 、 ApplicationContext 创建 bean 对象。</li>
</ul>
</li>
<li>代理设计模式 : Spring AOP 功能的实现。</li>
<li>单例设计模式 : Spring 中的 Bean 默认都是单例的。</li>
<li>模板⽅法模式 : Spring 中 jdbcTemplate 、 hibernateTemplaTemplate 结尾的对数据库操作的类，它们就使⽤到了模板包装器设计模式 : 我们的项⽬需要连接多个数据库，⽽且每次访问中根据需要会去访问不同的数据库。这种模式让客户的需求能够动态切换不同的数据源。</li>
<li>观察者模式: Spring 事件驱动模型就是观察者模式很经典。</li>
<li>适配器模式 :Spring AOP 的增强或通知(Advice)使⽤到了spring MVC 中也是⽤到了适配器模式适配 Controller 。</li>
</ul>
<p>参考资料：</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000040571286#%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86">一文搞懂代理模式</a></li>
<li><a href="https://snailclimb.gitee.io/javaguide-interview/#/./docs/e-1spring?id=spring-aop">javaguide</a></li>
<li><a href="https://blog.csdn.net/A1342772/article/details/91349142">https://blog.csdn.net/A1342772/article/details/91349142</a></li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>微服务学习笔记04</title>
    <url>/posts/1611342000.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="一、初识MQ"><a href="#一、初识MQ" class="headerlink" title="一、初识MQ"></a>一、初识MQ</h1><h2 id="1-1-同步和异步通讯"><a href="#1-1-同步和异步通讯" class="headerlink" title="1.1.同步和异步通讯"></a>1.1.同步和异步通讯</h2><p>微服务间通讯有同步和异步两种方式：</p>
<p>同步通讯：就像打电话，需要<strong>实时响应。</strong></p>
<p>异步通讯：就像发邮件，<strong>不需要马上回复。</strong></p>
<p><img src="C:/Users/%E4%B8%B8%E4%BA%86%E9%B8%AD/AppData/Roaming/Typora/typora-user-images/image-20220831091154169.png" alt="image-20220831091154169"></p>
<p>两种方式各有优劣，打电话可以立即得到响应，但是你却不能跟多个人同时通话。发送邮件可以同时与多个人收发邮件，但是往往响应会有延迟。</p>
<h3 id="1-同步通讯"><a href="#1-同步通讯" class="headerlink" title="1.同步通讯"></a>1.同步通讯</h3><p>我们之前学习的Feign调用就属于同步方式，虽然调用可以实时得到结果，但存在下面的问题：</p>
<p><img src="C:/Users/%E4%B8%B8%E4%BA%86%E9%B8%AD/AppData/Roaming/Typora/typora-user-images/image-20220831091319999.png" alt="image-20220831091319999"></p>
<p>总结：</p>
<p>同步调用的优点：</p>
<ul>
<li>时效性较强，可以立即得到结果</li>
</ul>
<p>同步调用的问题：</p>
<ul>
<li>耦合度高</li>
<li>性能和吞吐能力下降</li>
<li>有额外的资源消耗</li>
<li>有级联失败问题</li>
</ul>
<h3 id="2-异步通讯"><a href="#2-异步通讯" class="headerlink" title="2.异步通讯"></a>2.异步通讯</h3><p>异步调用则可以避免上述问题：</p>
<p>我们以购买商品为例，用户支付后需要调用订单服务完成订单状态修改，调用物流服务，从仓库分配响应的库存并准备发货。</p>
<p>在事件模式中，支付服务是事件发布者（publisher），在支付完成后只需要发布一个支付成功的事件（event），事件中带上订单id。</p>
<p>订单服务和物流服务是事件订阅者（Consumer），订阅支付成功的事件，监听到事件后完成自己业务即可。</p>
<p>为了解除事件发布者与订阅者之间的耦合，两者并不是直接通信，而是有一个中间人（Broker）。发布者发布事件到Broker，不关心谁来订阅事件。订阅者从Broker订阅事件，不关心谁发来的消息。</p>
<p><img src="C:/Users/%E4%B8%B8%E4%BA%86%E9%B8%AD/AppData/Roaming/Typora/typora-user-images/image-20220831091336983.png" alt="image-20220831091336983"></p>
<p>Broker 是一个像数据总线一样的东西，所有的服务要接收数据和发送数据都发到这个总线上，这个总线就像协议一样，让服务间的通讯变得标准和可控。</p>
<p>好处：</p>
<ul>
<li><p>吞吐量提升：无需等待订阅者处理完成，响应更快速</p>
</li>
<li><p>故障隔离：服务没有直接调用，不存在级联失败问题</p>
</li>
<li><p>调用间没有阻塞，不会造成无效的资源占用</p>
</li>
<li><p>耦合度极低，每个服务都可以灵活插拔，可替换</p>
</li>
<li><p>流量削峰：不管发布事件的流量波动多大，都由Broker接收，订阅者可以按照自己的速度去处理事件</p>
</li>
</ul>
<p>缺点：</p>
<ul>
<li>架构复杂了，业务没有明显的流程线，不好管理</li>
<li>需要依赖于Broker的可靠、安全、性能</li>
</ul>
<p>好在现在开源软件或云平台上 Broker 的软件是非常成熟的，比较常见的一种就是我们今天要学习的MQ技术。</p>
<h2 id="1-2-技术对比："><a href="#1-2-技术对比：" class="headerlink" title="1.2.技术对比："></a>1.2.技术对比：</h2><p>MQ，中文是消息队列（MessageQueue），字面来看就是存放消息的队列。也就是事件驱动架构中的Broker。</p>
<p>比较常见的MQ实现：</p>
<ul>
<li>ActiveMQ</li>
<li>RabbitMQ</li>
<li>RocketMQ</li>
<li>Kafka</li>
</ul>
<p>几种常见MQ的对比：</p>
<table>
<thead>
<tr>
<th></th>
<th><strong>RabbitMQ</strong></th>
<th><strong>ActiveMQ</strong></th>
<th><strong>RocketMQ</strong></th>
<th><strong>Kafka</strong></th>
</tr>
</thead>
<tbody><tr>
<td>公司&#x2F;社区</td>
<td>Rabbit</td>
<td>Apache</td>
<td>阿里</td>
<td>Apache</td>
</tr>
<tr>
<td>开发语言</td>
<td>Erlang</td>
<td>Java</td>
<td>Java</td>
<td>Scala&amp;Java</td>
</tr>
<tr>
<td>协议支持</td>
<td>AMQP，XMPP，SMTP，STOMP</td>
<td>OpenWire,STOMP，REST,XMPP,AMQP</td>
<td>自定义协议</td>
<td>自定义协议</td>
</tr>
<tr>
<td>可用性</td>
<td>高</td>
<td>一般</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>单机吞吐量</td>
<td>一般</td>
<td>差</td>
<td>高</td>
<td>非常高</td>
</tr>
<tr>
<td>消息延迟</td>
<td>微秒级</td>
<td>毫秒级</td>
<td>毫秒级</td>
<td>毫秒以内</td>
</tr>
<tr>
<td>消息可靠性</td>
<td>高</td>
<td>一般</td>
<td>高</td>
<td>一般</td>
</tr>
</tbody></table>
<p>追求可用性：Kafka、 RocketMQ 、RabbitMQ</p>
<p>追求可靠性：RabbitMQ、RocketMQ</p>
<p>追求吞吐能力：RocketMQ、Kafka</p>
<p>追求消息低延迟：RabbitMQ、Kafka</p>
<h1 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2.快速入门"></a>2.快速入门</h1><h2 id="2-1-安装RabbitMQ"><a href="#2-1-安装RabbitMQ" class="headerlink" title="2.1.安装RabbitMQ"></a>2.1.安装RabbitMQ</h2><p>在线拉取</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:3-management</span><br></pre></td></tr></table></figure>

<p><img src="C:/Users/%E4%B8%B8%E4%BA%86%E9%B8%AD/AppData/Roaming/Typora/typora-user-images/image-20220831091827713.png" alt="image-20220831091827713"></p>
<p>执行下面的命令来运行MQ容器：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=itcast \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=123321 \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq1 \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3-management</span><br></pre></td></tr></table></figure>

<p><img src="C:/Users/%E4%B8%B8%E4%BA%86%E9%B8%AD/AppData/Roaming/Typora/typora-user-images/image-20220831091958191.png" alt="image-20220831091958191"></p>
<p>MQ的基本结构：</p>
<p><img src="C:/Users/%E4%B8%B8%E4%BA%86%E9%B8%AD/AppData/Roaming/Typora/typora-user-images/image-20220831091454193.png" alt="image-20220831091454193"></p>
<p>RabbitMQ中的一些角色：</p>
<ul>
<li>publisher：生产者</li>
<li>consumer：消费者</li>
<li>exchange个：交换机，负责消息路由</li>
<li>queue：队列，存储消息</li>
<li>virtualHost：虚拟主机，隔离不同租户的exchange、queue、消息的隔离</li>
</ul>
<h2 id="2-2-RabbitMQ消息模型"><a href="#2-2-RabbitMQ消息模型" class="headerlink" title="2.2.RabbitMQ消息模型"></a>2.2.RabbitMQ消息模型</h2><p>RabbitMQ官方提供了5个不同的Demo示例，对应了不同的消息模型：</p>
<p><img src="C:/Users/%E4%B8%B8%E4%BA%86%E9%B8%AD/AppData/Roaming/Typora/typora-user-images/image-20220831091518711.png" alt="image-20220831091518711"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>异常面试题整理</title>
    <url>/posts/1191646863.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="try中有return，finally还会执行吗？"><a href="#try中有return，finally还会执行吗？" class="headerlink" title="try中有return，finally还会执行吗？"></a>try中有return，finally还会执行吗？</h2><p><strong>会执行，</strong>并且finally的执行会早于try中的return</p>
<p>结论：</p>
<ol>
<li>不管有木有异常，finally块中的代码都会执行</li>
<li>当try和catch中有return时，finally仍然会执行</li>
<li>因为如果存在finally代码块，try中的return语句不会立马返回给调用者，而是会记录下当前的返回值，等待finally代码块执行完毕后再向调用者返回，然后如果finally代码块中对返回值进行了修改，则会返回修改后的返回值。</li>
</ol>
<hr>
<h2 id="Exception和Error"><a href="#Exception和Error" class="headerlink" title="Exception和Error"></a>Exception和Error</h2><p>Java可能抛出的结构有三种类型：运行时异常(RuntimeException)，受检异常(CheckedException)和错误(Error)。</p>
<ul>
<li><p><strong>运行时异常(RuntimeException)</strong></p>
</li>
<li><ul>
<li><strong>定义：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>RuntimeException及其子类都被称为运行时异常。</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>特点：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>Java编译器不会检查该异常。也就是说当程序中可能出现该异常时，如果没有通过throws声明抛出它，也没有用try-catch捕获它，还是会编译通过。</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>常见的几种运行时异常：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>ClassCastException 类转换异常</li>
<li>ArithmeticException 除零异常</li>
<li>IndexOutofBoundsException 数组越界异常</li>
<li>NullPointerException 空指针异常</li>
<li>BufffferOverflflowException 缓冲区溢出异常</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>受检异常(CheckedException)</strong></p>
</li>
<li><ul>
<li><strong>定义：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>Exception本身，以及Exception的子类中除了“运行时异常”之外的其他子类都属于受检查异常。</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>特点：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>Java编译器会检查此类异常，要么通过throws对该类异常进行抛出，要么通过try-catch进行捕获处理，否则不能通过编译。</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>常见的几种被检查异常：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>IOException （读写异常）</li>
<li>FileNotFoundException （找不到文件异常）</li>
<li>SQLException （比如在使用JDBC访问数据库时需要处理的SQLException）</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>错误（Error）</strong></p>
</li>
<li><ul>
<li><strong>定义：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>Error类及其子类</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>特点：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>和运行时异常一样，编译器也不会对错误进行检查。</li>
<li>Error 类型的错误通常为虚拟机相关错误，如系统崩溃，内存不足，堆栈溢出等，一旦这类错误发生，通常应用程序会被终止，仅靠应用程序本身无法恢复。</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="throw和throws的区别是什么？"><a href="#throw和throws的区别是什么？" class="headerlink" title="throw和throws的区别是什么？"></a>throw和throws的区别是什么？</h2><p>Java中的异常处理除了捕获和处理异常之外，还可以抛出异常，可以通过throws关键字在方法上声明该方法要抛出的异常，或者在方法内部通过throw关键字来抛出异常对象。</p>
<p><strong>区别：</strong></p>
<ul>
<li>throw 关键字用在方法内部，只能用于抛出一种异常，用来抛出方法或代码块中的异常，受查异常和非受查异常都可以被抛出。</li>
<li>throws 关键字用在方法声明上，可以抛出多个异常，用来标识该方法可能抛出的异常列表。一个方法用 throws 标识了可能抛出的异常列表，调用该方法的方法中必须包含可处理异常的代码，否则也要在方法签名中用 throws 关键字声明相应的异常。</li>
</ul>
<p><a href="https://blog.csdn.net/qq_43061290/article/details/124078378">
</a></p>
<h2 id="final、finally、finalize-有什么区别？"><a href="#final、finally、finalize-有什么区别？" class="headerlink" title="final、finally、finalize 有什么区别？"></a>final、finally、finalize 有什么区别？</h2><ul>
<li>final可以修饰类、变量、方法，修饰类表示该类不能被继承、修饰方法表示该方法不能被重写、修饰变量表示该变量是一个常量不能被重新赋值。</li>
<li>finally一般作用在try-catch代码块中，在处理异常的时候，通常我们将一定要执行的代码方法finally代码块中，表示不管是否出现异常，该代码块都会执行，一般用来存放一些关闭资源的代码。</li>
<li>finalize是一个方法，属于Object类的一个方法，而Object类是所有类的父类，<strong>Java 中允许使用 finalize()方法在垃圾收集器将对象从内存中（析构）清除出去之前做必要的清理工作。</strong></li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>微服务学习笔记day01</title>
    <url>/posts/3702598085.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="一、认识微服务"><a href="#一、认识微服务" class="headerlink" title="一、认识微服务"></a>一、认识微服务</h1><h2 id="1-1-单体架构"><a href="#1-1-单体架构" class="headerlink" title="1.1.单体架构"></a>1.1.单体架构</h2><p><strong>单体架构</strong>：将业务的所有功能集中在一个项目中开发，打成一个包部署。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820144652691.png" alt="image-20220820144652691"></p>
<p>单体架构的优缺点如下：</p>
<p><strong>优点：</strong></p>
<ul>
<li>架构简单</li>
<li>部署成本低</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>耦合度高（维护困难、升级困难）</li>
</ul>
<hr>
<h2 id="1-2-分布式架构"><a href="#1-2-分布式架构" class="headerlink" title="1.2.分布式架构"></a>1.2.分布式架构</h2><p><strong>分布式架构</strong>：根据业务功能对系统做拆分，每个业务功能模块作为独立项目开发，称为一个服务。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820144704396.png" alt="image-20220820144704396"></p>
<p>分布式架构的优缺点：</p>
<p><strong>优点：</strong></p>
<ul>
<li>降低服务耦合</li>
<li>有利于服务升级和拓展</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>服务调用关系错综复杂</li>
</ul>
<p>分布式架构虽然降低了服务耦合，但是服务拆分时也有很多问题需要思考：</p>
<ul>
<li>服务拆分的<strong>粒度</strong>如何界定？</li>
<li>服务<strong>之间如何调用</strong>？</li>
<li>服务的<strong>调用关系如何管理</strong>？</li>
</ul>
<p>人们需要制定一套行之有效的标准来约束分布式架构。</p>
<hr>
<h2 id="1-3-微服务"><a href="#1-3-微服务" class="headerlink" title="1.3.微服务"></a>1.3.微服务</h2><p>微服务的架构特征：</p>
<ul>
<li><strong>单一职责：</strong>微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责</li>
<li><strong>自治：</strong>团队独立、技术独立、数据独立，独立部署和交付</li>
<li><strong>面向服务：</strong>服务提供统一标准的接口，与语言和技术无关</li>
<li><strong>隔离性强：</strong>服务调用做好隔离、容错、降级，避免出现级联问题</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820144823344.png" alt="image-20220820144823344"></p>
<p>微服务的上述特性其实是在给分布式架构制定一个标准，进一步降低服务之间的耦合度，提供服务的独立性和灵活性。做到高内聚，低耦合。</p>
<p>因此，可以认为<strong>微服务</strong>是一种经过良好架构设计的<strong>分布式架构方案</strong> 。</p>
<h2 id="1-4-SpringCloud"><a href="#1-4-SpringCloud" class="headerlink" title="1.4.SpringCloud"></a>1.4.SpringCloud</h2><p>SpringCloud是目前国内使用最广泛的微服务框架。官网地址：<a href="https://spring.io/projects/spring-cloud%E3%80%82">https://spring.io/projects/spring-cloud。</a></p>
<p>SpringCloud集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验。</p>
<p>其中常见的组件包括：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820144847085.png" alt="image-20220820144847085"></p>
<hr>
<h2 id="1-5-总结"><a href="#1-5-总结" class="headerlink" title="1.5.总结"></a>1.5.总结</h2><ul>
<li><p>单体架构：简单方便，高度耦合，扩展性差，适合小型项目。例如：学生管理系统</p>
</li>
<li><p>分布式架构：松耦合，扩展性好，但架构复杂，难度大。适合大型互联网项目，例如：京东、淘宝</p>
</li>
<li><p>微服务：一种良好的分布式架构方案</p>
<p>①优点：拆分粒度更小、服务更独立、耦合度更低</p>
<p>②缺点：架构非常复杂，运维、监控、部署难度提高</p>
</li>
<li><p>SpringCloud是微服务架构的一站式解决方案，集成了各种优秀微服务功能组件</p>
</li>
</ul>
<hr>
<h1 id="二、服务拆分和远程调用"><a href="#二、服务拆分和远程调用" class="headerlink" title="二、服务拆分和远程调用"></a>二、服务拆分和远程调用</h1><p>任何分布式架构都离不开服务的拆分，微服务也是一样。</p>
<h2 id="2-1-服务拆分原则"><a href="#2-1-服务拆分原则" class="headerlink" title="2.1.服务拆分原则"></a>2.1.服务拆分原则</h2><p>这里我总结了微服务拆分时的几个原则：</p>
<ul>
<li>不同微服务，不要重复开发相同业务</li>
<li>微服务数据独立，不要访问其它微服务的数据库</li>
<li>微服务可以将自己的业务暴露为接口，供其它微服务调用</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820144932834.png" alt="image-20220820144932834"></p>
<h2 id="2-2-服务拆分示例"><a href="#2-2-服务拆分示例" class="headerlink" title="2.2.服务拆分示例"></a>2.2.服务拆分示例</h2><p>以课前资料中的微服务cloud-demo为例，其结构如下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820145028022.png" alt="image-20220820145028022"></p>
<p>cloud-demo：父工程，管理依赖</p>
<ul>
<li>order-service：订单微服务，负责订单相关业务</li>
<li>user-service：用户微服务，负责用户相关业务</li>
</ul>
<p>要求：</p>
<ul>
<li>订单微服务和用户微服务都必须有各自的数据库，相互独立</li>
<li>订单服务和用户服务都对外暴露Restful的接口</li>
<li>订单服务如果需要查询用户信息，只能调用用户服务的Restful接口，不能查询用户数据库</li>
</ul>
<hr>
<h3 id="1-导入数据库"><a href="#1-导入数据库" class="headerlink" title="1.导入数据库"></a>1.导入数据库</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820145457622.png" alt="image-20220820145457622"></p>
<h3 id="2-导入工程"><a href="#2-导入工程" class="headerlink" title="2.导入工程"></a>2.导入工程</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820145943892.png" alt="image-20220820145943892"></p>
<h3 id="3-将数据库信息修改为自己的"><a href="#3-将数据库信息修改为自己的" class="headerlink" title="3.将数据库信息修改为自己的"></a>3.将数据库信息修改为自己的</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820150524840.png" alt="image-20220820150524840"></p>
<h3 id="4-运行测试"><a href="#4-运行测试" class="headerlink" title="4.运行测试"></a>4.运行测试</h3><h4 id="1-查询用户"><a href="#1-查询用户" class="headerlink" title="1.查询用户"></a>1.查询用户</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820150651703.png" alt="image-20220820150651703"></p>
<h4 id="2-查询订单"><a href="#2-查询订单" class="headerlink" title="2.查询订单"></a>2.查询订单</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820150704689.png" alt="image-20220820150704689"></p>
<hr>
<h2 id="2-3-实现远程调用案例"><a href="#2-3-实现远程调用案例" class="headerlink" title="2.3.实现远程调用案例"></a>2.3.实现远程调用案例</h2><p>可以看到我们查询订单的时候查出来的用户是null，那怎么在订单服务中获取用户服务的数据呢</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820151604787.png" alt="image-20220820151604787"></p>
<hr>
<h3 id="1-案例需求"><a href="#1-案例需求" class="headerlink" title="1.案例需求"></a>1.案例需求</h3><p>修改order-service中的根据id查询订单业务，要求在查询订单的同时，根据订单中包含的userId查询出用户信息，一起返回。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820151718999.png" alt="image-20220820151718999"></p>
<p>不同的服务之间不能调用对方的数据库，所以我们需要向userService提供的接口发起请求，然后根据userService的返回值对订单数据进行包装。</p>
<p>步骤：</p>
<ul>
<li>注册一个RestTemplate的实例到Spring容器</li>
<li>修改order-service服务中的OrderService类中的queryOrderById方法，根据Order对象中的userId查询User</li>
<li>将查询的User填充到Order对象，一起返回</li>
</ul>
<h3 id="2-注册RestTemplate"><a href="#2-注册RestTemplate" class="headerlink" title="2.注册RestTemplate"></a>2.注册RestTemplate</h3><p>在order-service服务中的OrderApplication启动类中，注册RestTemplate实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820152117193.png" alt="image-20220820152117193"></p>
<h3 id="3-实现远程调用"><a href="#3-实现远程调用" class="headerlink" title="3.实现远程调用"></a>3.实现远程调用</h3><p>修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">       <span class="comment">// 1.查询订单</span></span><br><span class="line">       <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.远程查询user</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//url      id根据order动态获取</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8081/user/&quot;</span> + order.getUserId();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//调用</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//将返回的user存入order</span></span><br><span class="line">       order.setUser(user);</span><br><span class="line">       <span class="comment">// 4.返回</span></span><br><span class="line">       <span class="keyword">return</span> order;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820153040157.png" alt="image-20220820153040157"></p>
<h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820153049967.png" alt="image-20220820153049967"></p>
<hr>
<h2 id="2-4-提供者与消费者"><a href="#2-4-提供者与消费者" class="headerlink" title="2.4.提供者与消费者"></a>2.4.提供者与消费者</h2><p>在服务调用关系中，会有两个不同的角色：</p>
<p><strong>服务提供者</strong>：一次业务中，被其它微服务调用的服务。（提供接口给其它微服务）</p>
<p><strong>服务消费者</strong>：一次业务中，调用其它微服务的服务。（调用其它微服务提供的接口）</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820160431105.png" alt="image-20220820160431105"></p>
<p>但是，服务提供者与服务消费者的角色并<strong>不是绝对的</strong>，而<strong>是相对于业务而言</strong>。</p>
<p>如果服务A调用了服务B，而服务B又调用了服务C，服务B的角色是什么？</p>
<ul>
<li>对于A调用B的业务而言：A是服务消费者，B是服务提供者</li>
<li>对于B调用C的业务而言：B是服务消费者，C是服务提供者</li>
</ul>
<p>因此，服务B既可以是服务提供者，也可以是服务消费者。</p>
<hr>
<h1 id="三、Eureka注册中心"><a href="#三、Eureka注册中心" class="headerlink" title="三、Eureka注册中心"></a>三、Eureka注册中心</h1><p>假如我们的服务提供者user-service部署了多个实例，如图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820160547742.png" alt="image-20220820160547742"></p>
<p>大家思考几个问题：</p>
<ul>
<li>order-service在发起远程调用的时候，该<strong>如何得知user-service实例的ip地址和端口？</strong></li>
<li>有<strong>多个user-service实例地址，order-service调用时该如何选择？</strong></li>
<li>order-service<strong>如何得知某个user-service实例是否依然健康</strong>，是不是已经宕机？</li>
</ul>
<hr>
<h2 id="3-1-Eureka的结构和作用"><a href="#3-1-Eureka的结构和作用" class="headerlink" title="3.1.Eureka的结构和作用"></a>3.1.Eureka的结构和作用</h2><p>这些问题都需要利用SpringCloud中的<strong>注册中心</strong>来解决，其中最广为人知的注册中心就是Eureka，其结构如下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220820160633378.png" alt="image-20220820160633378"></p>
<p><strong>解答上述的三个问题：</strong></p>
<p><strong>问题1：</strong>order-service如何得知user-service实例地址？</p>
<p>获取地址信息的流程如下：</p>
<ul>
<li>user-service服务实例启动后，将自己的信息注册到eureka-server（Eureka服务端）。这个叫<strong>服务注册</strong></li>
<li>eureka-serve<strong>r保存服务名称到服务实例地址列表的映射关系</strong></li>
<li>order-service根据服务名称，拉取实例地址列表。这个叫服务发现或<strong>服务拉取</strong></li>
</ul>
<p><strong>问题2：</strong>order-service如何从多个user-service实例中选择具体的实例？</p>
<ul>
<li>order-service从实例列表中<strong>利用负载均衡算法</strong>选中一个实例地址</li>
<li>向该实例地址发起远程调用</li>
</ul>
<p><strong>问题3：</strong>order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</p>
<ul>
<li>user-service会<strong>每隔一段时间（默认30秒）向eureka-server发起请求</strong>，报告自己状态，称为<strong>心跳</strong></li>
<li>当<strong>超过一定时间没有发送心跳时</strong>，eureka-server会认为微服务实例故障，<strong>将该实例从服务列表中剔除</strong></li>
<li>order-service拉取服务时，就能将故障实例排除了</li>
</ul>
<blockquote>
<p>注意：一个微服务，既可以是服务提供者，又可以是服务消费者，因此eureka将服务注册、服务发现等功能统一封装到了eureka-client端</p>
</blockquote>
<p><strong>eureka-server使用步骤</strong>：</p>
<p><img src="C:/Users/%E9%99%88%E7%8E%89%E7%9A%93/Desktop/image-20220820160835481.png" alt="image-20220820160835481"></p>
<hr>
<h2 id="3-2-搭建eureka-server"><a href="#3-2-搭建eureka-server" class="headerlink" title="3.2.搭建eureka-server"></a>3.2.搭建eureka-server</h2><p>首先注册中心服务端：eureka-server，<strong>这必须是一个独立的微服务</strong></p>
<h3 id="1-创建一个eureka-server模块"><a href="#1-创建一个eureka-server模块" class="headerlink" title="1.创建一个eureka-server模块"></a>1.创建一个eureka-server模块</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220821081747555.png" alt="image-20220821081747555"></p>
<h3 id="2-引入依赖"><a href="#2-引入依赖" class="headerlink" title="2.引入依赖"></a>2.引入依赖</h3><p>引入SpringCloud为eureka提供的starter依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-编写启动类"><a href="#3-编写启动类" class="headerlink" title="3.编写启动类"></a>3.编写启动类</h3><p>给eureka-server服务编写一个启动类，一定要添加一个@EnableEurekaServer注解，开启eureka的注册中心功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.eureka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-编写配置文件"><a href="#4-编写配置文件" class="headerlink" title="4.编写配置文件"></a>4.编写配置文件</h3><p>编写一个application.yml文件，内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure>

<h3 id="5-启动服务测试"><a href="#5-启动服务测试" class="headerlink" title="5.启动服务测试"></a>5.启动服务测试</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220821082359419.png" alt="image-20220821082359419"></p>
<h2 id="3-3-服务注册"><a href="#3-3-服务注册" class="headerlink" title="3.3.服务注册"></a>3.3.服务注册</h2><p>服务注册就两件事<code>引依赖，加配置</code></p>
<h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h3><p>在user-service的pom文件中，引入下面的eureka-client依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h3><p>在user-service中，修改application.yml文件，添加服务名称、eureka地址：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220821083422937.png" alt="image-20220821083422937"></p>
<h3 id="3-启动多个user-service实例"><a href="#3-启动多个user-service实例" class="headerlink" title="3.启动多个user-service实例"></a>3.启动多个user-service实例</h3><p>为了演示一个服务有多个实例的场景，添加一个SpringBoot的启动配置，再启动一个user-service。</p>
<p>首先，复制原来的user-service启动配置：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220821083514186.png" alt="image-20220821083514186"></p>
<p>然后，在弹出的窗口中，填写信息：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220821083615556.png" alt="image-20220821083615556"></p>
<p>然后将服务全部启动</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220821084014619.png" alt="image-20220821084014619"></p>
<p>查看eureka-server管理页面</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220821084051626.png" alt="image-20220821084051626"></p>
<p>这里如果报错的就把Maven：clean -&gt; install就好了</p>
<hr>
<h2 id="3-4-服务发现"><a href="#3-4-服务发现" class="headerlink" title="3.4.服务发现"></a>3.4.服务发现</h2><h3 id="1-修改OrderService的代码中的url访问路径，用服务名代替ip和端口"><a href="#1-修改OrderService的代码中的url访问路径，用服务名代替ip和端口" class="headerlink" title="1.修改OrderService的代码中的url访问路径，用服务名代替ip和端口"></a>1.修改OrderService的代码中的url访问路径，用服务名代替ip和端口</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220821085346409.png" alt="image-20220821085346409"></p>
<h3 id="2-在order-service的启动类的RestTemplate上加上-LoadBalanced注解"><a href="#2-在order-service的启动类的RestTemplate上加上-LoadBalanced注解" class="headerlink" title="2. 在order-service的启动类的RestTemplate上加上@LoadBalanced注解"></a>2. 在order-service的启动类的RestTemplate上加上@LoadBalanced注解</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220821085441644.png" alt="image-20220821085441644"></p>
<h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3><p>第一次访问id为3的用户</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220821085509492.png" alt="image-20220821085509492"></p>
<p>是userservice1接收的</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220821085546979.png" alt="image-20220821085546979"></p>
<p>第二次访问id为2的用户</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220821085637213.png" alt="image-20220821085637213"></p>
<p>是userservice接收的</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220821085623916.png" alt="image-20220821085623916"></p>
<p>因为默认的负载均衡策略是轮询，所以一个接收一次。</p>
<hr>
<h1 id="四、Ribbon负载均衡"><a href="#四、Ribbon负载均衡" class="headerlink" title="四、Ribbon负载均衡"></a>四、Ribbon负载均衡</h1><h2 id="4-1-负载均衡原理"><a href="#4-1-负载均衡原理" class="headerlink" title="4.1.负载均衡原理"></a>4.1.负载均衡原理</h2><p>SpringCloud底层是利用了一个名为Ribbon的组件来实现负载均衡功能的。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220821094137908.png" alt="image-20220821094137908"></p>
<h2 id="4-2-源码跟踪"><a href="#4-2-源码跟踪" class="headerlink" title="4.2.源码跟踪"></a>4.2.源码跟踪</h2><p>为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口。</p>
<p>是因为Ribbon中的<code>LoadBalancerInterceptor</code>帮我们根据service名称，获取到了服务实例的ip和端口。这个类会在对RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。</p>
<hr>
<h3 id="1-LoadBalancerIntercepor"><a href="#1-LoadBalancerIntercepor" class="headerlink" title="1.LoadBalancerIntercepor"></a>1.LoadBalancerIntercepor</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220821094408137.png" alt="image-20220821094408137"></p>
<p>这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事：</p>
<ul>
<li><code>request.getURI()</code>：<strong>获取请求uri</strong>，本例中就是 <a href="http://user-service/user/8">http://user-service/user/8</a></li>
<li><code>originalUri.getHost()</code>：<strong>获取uri路径的主机名，其实就是服务id</strong>，<code>user-service</code></li>
<li><code>this.loadBalancer.execute()</code>：<strong>处理服务id，和用户请求</strong>。</li>
</ul>
<p>这里的<code>this.loadBalancer</code>是<code>LoadBalancerClient</code>类型，我们继续跟入。</p>
<hr>
<h3 id="2-LoadBalancerClient"><a href="#2-LoadBalancerClient" class="headerlink" title="2.LoadBalancerClient"></a>2.LoadBalancerClient</h3><p>继续跟入execute方法：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220821094540052.png" alt="image-20220821094540052"></p>
<p>代码：</p>
<ul>
<li>getLoadBalancer(serviceId)：根据服务id获取ILoadBalancer，而ILoadBalancer会拿着服务id去eureka中获取服务列表并保存起来。</li>
<li>getServer(loadBalancer)：<strong>利用内置的负载均衡算法</strong>，从服务列表中选择一个。</li>
</ul>
<hr>
<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><p>SpringCloudRibbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改。用一幅图来总结一下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220821094922054.png" alt="image-20220821094922054"></p>
<p><strong>基本流程：</strong></p>
<ul>
<li><strong>拦截</strong>我们的RestTemplate请求<a href="http://userservice/user/1">http://userservice/user/1</a></li>
<li>RibbonLoadBalancerClient会从请求url中<strong>获取服务名称</strong>，也就是user-service</li>
<li>DynamicServerListLoadBalancer<strong>根据user-service到eureka拉取服务列表</strong></li>
<li><strong>eureka返回列表</strong>，localhost:8081、localhost:8082</li>
<li>IRule<strong>利用内置负载均衡规则，从列表中选择一个</strong>，例如localhost:8081</li>
<li><strong>RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice</strong>，得到<a href="http://localhost:8081/user/1%EF%BC%8C%E5%8F%91%E8%B5%B7%E7%9C%9F%E5%AE%9E%E8%AF%B7%E6%B1%82">http://localhost:8081/user/1，发起真实请求</a></li>
</ul>
<hr>
<h2 id="4-3-负载均衡策略"><a href="#4-3-负载均衡策略" class="headerlink" title="4.3.负载均衡策略"></a>4.3.负载均衡策略</h2><h3 id="1-复杂均衡策略"><a href="#1-复杂均衡策略" class="headerlink" title="1.复杂均衡策略"></a>1.复杂均衡策略</h3><p>负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220821095116443.png" alt="image-20220821095116443"></p>
<p>不同规则的含义如下：</p>
<table>
<thead>
<tr>
<th><strong>内置负载均衡规则类</strong></th>
<th><strong>规则描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>RoundRobinRule</td>
<td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td>
</tr>
<tr>
<td>AvailabilityFilteringRule</td>
<td>对以下两种服务器进行忽略：   （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。  （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<clientName>.<clientConfigNameSpace>.ActiveConnectionsLimit属性进行配置。</td>
</tr>
<tr>
<td>WeightedResponseTimeRule</td>
<td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td>
</tr>
<tr>
<td><strong>ZoneAvoidanceRule</strong></td>
<td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td>
</tr>
<tr>
<td>BestAvailableRule</td>
<td>忽略那些短路的服务器，并选择并发数较低的服务器。</td>
</tr>
<tr>
<td>RandomRule</td>
<td>随机选择一个可用的服务器。</td>
</tr>
<tr>
<td>RetryRule</td>
<td>重试机制的选择逻辑</td>
</tr>
</tbody></table>
<p>默认的实现就是ZoneAvoidanceRule，是一种轮询方案</p>
<hr>
<h3 id="2-自定义负载均衡策略"><a href="#2-自定义负载均衡策略" class="headerlink" title="2.自定义负载均衡策略"></a>2.自定义负载均衡策略</h3><p>通过定义IRule实现可以修改负载均衡规则，有两种方式：</p>
<ol>
<li>代码方式：在order-service中的OrderApplication类中，定义一个新的IRule：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">userservice:</span> <span class="comment"># 给某个微服务配置负载均衡规则，这里是userservice服务</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>注意</strong>，一般用默认的负载均衡规则，不做修改。</p>
</blockquote>
<h2 id="4-4-饥饿加载"><a href="#4-4-饥饿加载" class="headerlink" title="4.4.饥饿加载"></a>4.4.饥饿加载</h2><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p>
<p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">userservice</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="五、Nacos注册中心"><a href="#五、Nacos注册中心" class="headerlink" title="五、Nacos注册中心"></a>五、Nacos注册中心</h1><p>国内公司一般都推崇阿里巴巴的技术，比如注册中心，SpringCloudAlibaba也推出了一个名为Nacos的注册中心。</p>
<h2 id="5-1-认识和安装Nacos"><a href="#5-1-认识和安装Nacos" class="headerlink" title="5.1.认识和安装Nacos"></a>5.1.认识和安装Nacos</h2><p><a href="https://nacos.io/">Nacos</a>是阿里巴巴的产品，现在是<a href="https://spring.io/projects/spring-cloud">SpringCloud</a>中的一个组件。相比<a href="https://github.com/Netflix/eureka">Eureka</a>功能更加丰富，在国内受欢迎程度较高。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220821095500893.png" alt="image-20220821095500893"></p>
<p>安装略。</p>
<p>登录成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828102500221.png" alt="image-20220828102500221"></p>
<h2 id="5-2-服务注册到nacos"><a href="#5-2-服务注册到nacos" class="headerlink" title="5.2.服务注册到nacos"></a>5.2.服务注册到nacos</h2><p>Nacos是SpringCloudAlibaba的组件，而SpringCloudAlibaba也遵循SpringCloud中定义的服务注册、服务发现规范。因此使用Nacos和使用Eureka对于微服务来说，并没有太大区别。</p>
<p>主要差异在于：</p>
<ul>
<li>依赖不同</li>
<li>服务地址不同</li>
</ul>
<h3 id="1-引入依赖-1"><a href="#1-引入依赖-1" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h3><p>在cloud-demo父工程的pom文件中的<code>&lt;dependencyManagement&gt;</code>中引入SpringCloudAlibaba的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos的管理依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在user-service和order-service中的pom文件中引入nacos-discovery依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>注意</strong>：不要忘了注释掉eureka的依赖。</p>
</blockquote>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828102836601.png" alt="image-20220828102836601"></p>
<h3 id="2-配置nacos地址"><a href="#2-配置nacos地址" class="headerlink" title="2.配置nacos地址"></a>2.配置nacos地址</h3><p>在user-service和order-service的application.yml中添加nacos地址：在user-service和order-service的application.yml中添加nacos地址：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>注意</strong>：不要忘了注释掉eureka的地址</p>
</blockquote>
<h3 id="3-测试-1"><a href="#3-测试-1" class="headerlink" title="3.测试"></a>3.测试</h3><p>重启微服务后，登录nacos管理页面，可以看到微服务信息：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828103724200.png" alt="image-20220828103724200"></p>
<hr>
<hr>
<h2 id="5-3-服务分级存储模型"><a href="#5-3-服务分级存储模型" class="headerlink" title="5.3.服务分级存储模型"></a>5.3.服务分级存储模型</h2><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的user-service，可以有:</p>
<ul>
<li>127.0.0.1:8081</li>
<li>127.0.0.1:8082</li>
<li>127.0.0.1:8083</li>
</ul>
<p>假如这些实例分布于全国各地的不同机房，例如：</p>
<ul>
<li>127.0.0.1:8081，在上海机房</li>
<li>127.0.0.1:8082，在上海机房</li>
<li>127.0.0.1:8083，在杭州机房</li>
</ul>
<p><strong>Nacos就将同一机房内的实例</strong> 划分为一个<strong>集群</strong>。</p>
<p>也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828104356839.png" alt="image-20220828104356839"></p>
<p><strong>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。</strong>例如：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828104409700.png" alt="image-20220828104409700"></p>
<p>杭州机房内的order-service应该优先访问同机房的user-service。</p>
<h3 id="1-给user-service配置集群"><a href="#1-给user-service配置集群" class="headerlink" title="1. 给user-service配置集群"></a>1. 给user-service配置集群</h3><p>修改user-service的application.yml文件，添加集群配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">SH</span> <span class="comment"># 集群名称</span></span><br></pre></td></tr></table></figure>

<p>重启两个user-service实例后，我们可以在nacos控制台看到下面结果：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828105026247.png" alt="image-20220828105026247"></p>
<p>在复制一个user-service启动配置，添加属性</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-Dserver.port=8083 -Dspring.cloud.nacos.discovery.cluster-name=BJ</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828104926137.png" alt="image-20220828104926137"></p>
<p>启动UserApplication3之后再次查看控制台</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828105131701.png" alt="image-20220828105131701"></p>
<hr>
<h3 id="2-同集群优先的负载均衡"><a href="#2-同集群优先的负载均衡" class="headerlink" title="2.同集群优先的负载均衡"></a>2.同集群优先的负载均衡</h3><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p>
<p>因此Nacos中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。</p>
<p>1、给order-service配置集群信息</p>
<p>修改order-service的application.yml文件，添加集群配置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: localhost:8848</span><br><span class="line">      discovery:</span><br><span class="line">        cluster-name: HZ <span class="comment"># 集群名称</span></span><br></pre></td></tr></table></figure>



<p>2、修改负载均衡规则</p>
<p>修改order-service的application.yml文件，修改负载均衡规则：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">userservice:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure>

<p>然后对order101、102、103、104分别访问</p>
<p>UserApplication1中有两次访问</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828110143613.png" alt="image-20220828110143613"></p>
<p>UserApplication2中有两次访问</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828110207703.png" alt="image-20220828110207703"></p>
<p>UserApplication中没有访问</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828110228869.png" alt="image-20220828110228869"></p>
<p>但是如果把UserApplication1和UserApplication2都停掉，访问的就是UserApplication3</p>
<p>因为1、2所在的集群停掉了，只能访问其他集群</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828110407167.png" alt="image-20220828110407167"></p>
<hr>
<h2 id="5-4-权重配置"><a href="#5-4-权重配置" class="headerlink" title="5.4.权重配置"></a>5.4.权重配置</h2><p>实际部署中会出现这样的场景：</p>
<p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望<strong>性能好的机器承担更多的用户请求。</strong></p>
<p>但默认情况下NacosRule是同集群内随机挑选，不会考虑机器的性能问题。</p>
<p>因此，Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高。</p>
<p>在nacos控制台，找到user-service的实例列表，点击编辑，即可修改权重：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828110933663.png" alt="image-20220828110933663"></p>
<p>在弹出的编辑窗口，修改权重：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828111003055.png" alt="image-20220828111003055"></p>
<blockquote>
<p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问，可以通过将权重调为0的方式对服务器进行升级，这样用户对此是无感知的。</p>
</blockquote>
<h2 id="5-5-环境隔离"><a href="#5-5-环境隔离" class="headerlink" title="5.5.环境隔离"></a>5.5.环境隔离</h2><p>Nacos提供了namespace来实现环境隔离功能。</p>
<ul>
<li>nacos中可以有多个namespace</li>
<li>namespace下可以有group、service等</li>
<li>不同namespace之间相互隔离，例如不同namespace的服务互相不可见</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828111514680.png" alt="image-20220828111514680"></p>
<h3 id="1-创建namespace"><a href="#1-创建namespace" class="headerlink" title="1.创建namespace"></a>1.创建namespace</h3><p>默认情况下，所有service、data、group都在同一个namespace，名为public：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828111546430.png" alt="image-20220828111546430"></p>
<p>可以点击页面新增按钮，添加一个namespace：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828111613744.png" alt="image-20220828111613744"></p>
<p>填写表单：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828111654951.png" alt="image-20220828111654951"></p>
<p>这里的命名空间是自动生成的uuid</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828111726738.png" alt="image-20220828111726738"></p>
<hr>
<h3 id="2-给微服务配置namespace"><a href="#2-给微服务配置namespace" class="headerlink" title="2.给微服务配置namespace"></a>2.给微服务配置namespace</h3><p>给微服务配置namespace只能通过修改配置来实现。</p>
<p>例如，修改order-service的application.yml文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">492a7d5d-237b-46a1-a99a-fa8e98e4b0f9</span> <span class="comment"># 命名空间，填自己生成个ID</span></span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828111839645.png" alt="image-20220828111839645"></p>
<p>重启order-service后，访问控制台，可以看到下面的结果：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828111916165.png" alt="image-20220828111916165"></p>
<p>此时访问order-service，因为namespace不同，会导致找不到userservice，控制台会报错：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828112013112.png"></p>
<hr>
<h2 id="5-6-Nacos与Eureka的区别"><a href="#5-6-Nacos与Eureka的区别" class="headerlink" title="5.6.Nacos与Eureka的区别"></a>5.6.Nacos与Eureka的区别</h2><p>Nacos会把服务提供者实例分为两种类型：</p>
<ul>
<li><p><strong>临时实例：</strong>如果实例宕机超过一定时间，会从服务列表剔除，<strong>（默认的类型，领养的）</strong>。</p>
</li>
<li><p><strong>非临时实例：</strong>如果实例宕机，不会从服务列表剔除，也可以叫永久实例。<strong>（亲儿子）</strong></p>
</li>
</ul>
<p>配置一个服务实例为永久实例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment"># 设置为非临时实例</span></span><br></pre></td></tr></table></figure>





<p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828112031740.png" alt="image-20220828112031740"></p>
<ul>
<li><p><strong>Nacos与eureka的共同点</strong></p>
<ul>
<li>都支持服务注册和服务拉取</li>
<li>都支持服务提供者心跳方式做健康检测</li>
</ul>
</li>
<li><p><strong>Nacos与Eureka的区别</strong></p>
<ul>
<li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，<strong>非临时实例采用主动检测模式</strong></li>
<li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li>
<li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li>
<li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务学习笔记day02</title>
    <url>/posts/1169717375.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="一、Nacos配置管理"><a href="#一、Nacos配置管理" class="headerlink" title="一、Nacos配置管理"></a>一、Nacos配置管理</h1><h2 id="1-1-统一配置管理"><a href="#1-1-统一配置管理" class="headerlink" title="1.1.统一配置管理"></a>1.1.统一配置管理</h2><p>当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错。我们需要一种<strong>统一配置管理方案，可以集中管理所有实例的配置。</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828143106263.png" alt="image-20220828143106263"></p>
<p>Nacos一方面可以将配置集中管理，另一方可以在配置变更时，及时通知微服务，实现配置的热更新。</p>
<h3 id="1-在nacos中添加配置文件"><a href="#1-在nacos中添加配置文件" class="headerlink" title="1.在nacos中添加配置文件"></a>1.在nacos中添加配置文件</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828143526210.png" alt="image-20220828143526210"></p>
<p>填写配置信息</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828143712396.png" alt="image-20220828143712396"></p>
<blockquote>
<p>注意：项目的核心配置，需要热更新的配置才有放到nacos管理的必要。基本不会变更的一些配置还是保存在微服务本地比较好。</p>
</blockquote>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828143807214.png" alt="image-20220828143807214"></p>
<hr>
<h3 id="2-从微服务拉取配置"><a href="#2-从微服务拉取配置" class="headerlink" title="2.从微服务拉取配置"></a>2.从微服务拉取配置</h3><p>微服务要拉取nacos中管理的配置，并且与本地的application.yml配置合并，才能完成项目启动。</p>
<p>但如果尚未读取application.yml，又如何得知nacos地址呢？</p>
<p>因此spring引入了一种新的配置文件：<strong>bootstrap.yaml文件，会在application.yml之前被读取</strong>，流程如下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828143841375.png" alt="image-20220828143841375"></p>
<p>1）引入nacos-config依赖</p>
<p>首先，在user-service服务中，引入nacos-config的客户端依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos配置管理依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）添加bootstrap.yaml</p>
<p>然后，在user-service中添加一个bootstrap.yaml文件，内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境，这里是dev </span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br></pre></td></tr></table></figure>

<p>这里会根据spring.cloud.nacos.server-addr获取nacos地址，再根据</p>
<p><code>$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</code>作为文件id，来读取配置。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828155555895.png" alt="image-20220828155555895"></p>
<p>3）读取nacos配置</p>
<p>在user-service中的UserController中添加业务逻辑，读取pattern.dateformat配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String dateformat;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;now&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">now</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//格式化时间</span></span><br><span class="line">    <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问页面：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828155636590.png" alt="image-20220828155636590"></p>
<p><code>这里报各种错的注意检查以下问题：</code></p>
<ol>
<li>命名空间是否在public下，如果在dev下需要添加命名空间id</li>
<li>配置文件不要复制，自己手敲</li>
<li>bootstrap依赖导入一下</li>
</ol>
<hr>
<h2 id="1-2-配置热更新"><a href="#1-2-配置热更新" class="headerlink" title="1.2.配置热更新"></a>1.2.配置热更新</h2><p>我们最终的目的，是修改nacos中的配置后，微服务中无需重启即可让配置生效，也就是<strong>配置热更新</strong>。</p>
<p><strong>要实现配置热更新，可以使用两种方式：</strong></p>
<h3 id="1-方式1"><a href="#1-方式1" class="headerlink" title="1.方式1"></a>1.方式1</h3><p>在@Value注入的变量所在类上添加注解@RefreshScope：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828163541714.png" alt="image-20220828163541714"></p>
<h3 id="2-方式2（推荐）"><a href="#2-方式2（推荐）" class="headerlink" title="2.方式2（推荐）"></a>2.方式2（推荐）</h3><p><strong>使用@ConfigurationProperties注解代替@Value注解。</strong></p>
<p>在user-service服务中，添加一个类，读取patterrn.dateformat属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.user.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在UserController中使用这个类代替@Value：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828164202906.png" alt="image-20220828164202906"></p>
<h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><p>将配置改为年月日</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828164039448.png" alt="image-20220828164039448"></p>
<p>实现了配置热更新</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828163528058.png" alt="image-20220828163528058"></p>
<hr>
<h2 id="1-3-配置共享"><a href="#1-3-配置共享" class="headerlink" title="1.3.配置共享"></a>1.3.配置共享</h2><p>其实微服务启动时，会去nacos读取多个配置文件，例如：</p>
<ul>
<li><p><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：userservice-dev.yaml</p>
</li>
<li><p><code>[spring.application.name].yaml</code>，例如：userservice.yaml</p>
</li>
</ul>
<p>而<code>[spring.application.name].yaml</code>不包含环境，因此可以被多个环境共享。</p>
<h3 id="1）添加一个环境共享配置"><a href="#1）添加一个环境共享配置" class="headerlink" title="1）添加一个环境共享配置"></a>1）添加一个环境共享配置</h3><p>我们在nacos中添加一个userservice.yaml文件：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828164709352.png" alt="image-20220828164709352"></p>
<h3 id="2）在user-service中读取共享配置"><a href="#2）在user-service中读取共享配置" class="headerlink" title="2）在user-service中读取共享配置"></a>2）在user-service中读取共享配置</h3><p>在user-service服务中，修改PatternProperties类，读取新添加的属性：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828165234319.png" alt="image-20220828165234319"></p>
<p>在user-service服务中，修改UserController，添加方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;prop&quot;)</span></span><br><span class="line"><span class="keyword">public</span> PatternProperties <span class="title function_">prpo</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> patternProperties;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3）运行两个UserApplication，使用不同的profile"><a href="#3）运行两个UserApplication，使用不同的profile" class="headerlink" title="3）运行两个UserApplication，使用不同的profile"></a>3）运行两个UserApplication，使用不同的profile</h3><p>修改UserApplication2这个启动项，改变其profile值：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828165437410.png" alt="image-20220828165437410"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828165512917.png" alt="image-20220828165512917"></p>
<p>这样，UserApplication(8081)使用的profile是dev，UserApplication2(8082)使用的profile是test。</p>
<p>启动UserApplication和UserApplication2</p>
<p>访问<a href="http://localhost:8081/user/prop">http://localhost:8081/user/prop</a></p>
<p>结果如下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828165640891.png" alt="image-20220828165640891"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828165655247.png" alt="image-20220828165655247"></p>
<p>可以看出来，不管是dev，还是test环境，都读取到了envSharedValue这个属性的值。</p>
<h3 id="4）配置共享的优先级"><a href="#4）配置共享的优先级" class="headerlink" title="4）配置共享的优先级"></a>4）配置共享的优先级</h3><p>当nacos、服务本地同时出现相同属性时，优先级有高低之分：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220828165720913.png" alt="image-20220828165720913"></p>
<h2 id="1-4-搭建Nacos集群"><a href="#1-4-搭建Nacos集群" class="headerlink" title="1.4.搭建Nacos集群"></a>1.4.搭建Nacos集群</h2><p>步骤：</p>
<ol>
<li>搭建MySQL集群并初始化数据库表</li>
<li>下载解压nacos</li>
<li>修改集群配置（节点信息）、数据库配置</li>
<li>分别启动多个nacos节点</li>
<li>Nginx反向代理</li>
</ol>
<hr>
<h1 id="2-Feign远程调用"><a href="#2-Feign远程调用" class="headerlink" title="2.Feign远程调用"></a>2.Feign远程调用</h1><p>先看以前利用RestTemplate发起远程调用的代码：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220829080022216.png" alt="image-20220829080022216"></p>
<p>存在下面的问题：</p>
<p>•代码可读性差，编程体验不统一</p>
<p>•参数复杂URL难以维护</p>
<p>Feign是一个声明式的http客户端，官方地址：<a href="https://github.com/OpenFeign/feign">https://github.com/OpenFeign/feign</a></p>
<p>其作用就是帮助我们优雅的实现http请求的发送，解决上面提到的问题。</p>
<h2 id="2-1-Feign替代RestTemplate"><a href="#2-1-Feign替代RestTemplate" class="headerlink" title="2.1.Feign替代RestTemplate"></a>2.1.Feign替代RestTemplate</h2><p>Fegin的使用步骤如下：</p>
<h3 id="1）引入依赖"><a href="#1）引入依赖" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h3><p>我们在order-service服务的pom文件中引入feign的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2）添加注解"><a href="#2）添加注解" class="headerlink" title="2）添加注解"></a>2）添加注解</h3><p>在order-service的启动类添加注解开启Feign的功能：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220829080107462.png" alt="image-20220829080107462"></p>
<h3 id="3）编写Feign的客户端"><a href="#3）编写Feign的客户端" class="headerlink" title="3）编写Feign的客户端"></a>3）编写Feign的客户端</h3><p>在order-service中新建一个接口，内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;userservice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这个客户端主要是基于SpringMVC的注解来声明远程调用的信息，比如：</p>
<ul>
<li>服务名称：userservice</li>
<li>请求方式：GET</li>
<li>请求路径：&#x2F;user&#x2F;{id}</li>
<li>请求参数：Long id</li>
<li>返回值类型：User</li>
</ul>
<p>这样，Feign就可以帮助我们发送http请求，无需自己使用RestTemplate来发送了。</p>
<h3 id="4）修改orderService"><a href="#4）修改orderService" class="headerlink" title="4）修改orderService"></a>4）修改orderService</h3><p>修改order-service中的OrderService类中的queryOrderById方法，使用Feign客户端代替RestTemplate：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询订单</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.利用Feign发起http请求，查询用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userClient.findById(order.getUserId());</span><br><span class="line">    <span class="comment">//3.封装user到order</span></span><br><span class="line">    order.setUser(user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.返回</span></span><br><span class="line">    <span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="5）测试"><a href="#5）测试" class="headerlink" title="5）测试"></a>5）测试</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220829080455107.png" alt="image-20220829080455107"></p>
<h3 id="6）总结"><a href="#6）总结" class="headerlink" title="6）总结"></a>6）总结</h3><p>使用Feign的步骤：</p>
<p>① 引入依赖</p>
<p>② 添加@EnableFeignClients注解</p>
<p>③ 编写FeignClient接口</p>
<p>④ 使用FeignClient中定义的方法代替RestTemplate</p>
<hr>
<h2 id="2-2-自定义配置"><a href="#2-2-自定义配置" class="headerlink" title="2.2.自定义配置"></a>2.2.自定义配置</h2><p>Feign可以支持很多的自定义配置，如下表所示：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>feign.Logger.Level</strong></td>
<td>修改日志级别</td>
<td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td>
</tr>
<tr>
<td>feign.codec.Decoder</td>
<td>响应结果的解析器</td>
<td>http远程调用的结果做解析，例如解析json字符串为java对象</td>
</tr>
<tr>
<td>feign.codec.Encoder</td>
<td>请求参数编码</td>
<td>将请求参数编码，便于通过http请求发送</td>
</tr>
<tr>
<td>feign. Contract</td>
<td>支持的注解格式</td>
<td>默认是SpringMVC的注解</td>
</tr>
<tr>
<td>feign. Retryer</td>
<td>失败重试机制</td>
<td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td>
</tr>
</tbody></table>
<p>一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的@Bean覆盖默认Bean即可。</p>
<p>下面以日志为例来演示如何自定义配置。</p>
<h3 id="1-配置文件方式"><a href="#1-配置文件方式" class="headerlink" title="1.配置文件方式"></a>1.配置文件方式</h3><p>基于配置文件修改feign的日志级别可以针对单个服务：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span>  </span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span> </span><br><span class="line">      <span class="attr">userservice:</span> <span class="comment"># 针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">#  日志级别 </span></span><br></pre></td></tr></table></figure>

<p>也可以针对所有服务：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span>  </span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span> </span><br><span class="line">      <span class="attr">default:</span> <span class="comment"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">#  日志级别 </span></span><br></pre></td></tr></table></figure>



<p>而日志的级别分为四种：</p>
<ul>
<li>NONE：不记录任何日志信息，这是默认值。</li>
<li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li>
<li>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</li>
<li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li>
</ul>
<h3 id="2-Java代码方式"><a href="#2-Java代码方式" class="headerlink" title="2.Java代码方式"></a>2.Java代码方式</h3><p>也可以基于Java代码来修改日志级别，先声明一个类，然后声明一个Logger.Level的对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFeignConfiguration</span>  &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">feignLogLevel</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.BASIC; <span class="comment">// 日志级别为BASIC</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>如果要<strong>全局生效</strong>，将其放到启动类的@EnableFeignClients这个注解中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration .class)</span> </span><br></pre></td></tr></table></figure>



<p>如果是<strong>局部生效</strong>，则把它放到对应的@FeignClient这个注解中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;, configuration = DefaultFeignConfiguration .class)</span> </span><br></pre></td></tr></table></figure>







<h2 id="2-3-Feign使用优化"><a href="#2-3-Feign使用优化" class="headerlink" title="2.3.Feign使用优化"></a>2.3.Feign使用优化</h2><p>Feign底层发起http请求，依赖于其它的框架。其底层客户端实现包括：</p>
<p>•URLConnection：默认实现，不支持连接池</p>
<p>•Apache HttpClient ：支持连接池</p>
<p>•OKHttp：支持连接池</p>
<p>因此提高Feign的性能主要手段就是使用<strong>连接池</strong>代替默认的URLConnection。</p>
<p>这里用Apache的HttpClient来演示。</p>
<p>1）引入依赖</p>
<p>在order-service的pom文件中引入Apache的HttpClient依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--httpClient的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2）配置连接池</p>
<p>在order-service的application.yml中添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="comment"># default全局的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">BASIC</span> <span class="comment"># 日志级别，BASIC就是基本的请求和响应信息</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启feign对HttpClient的支持</span></span><br><span class="line">    <span class="attr">max-connections:</span> <span class="number">200</span> <span class="comment"># 最大的连接数</span></span><br><span class="line">    <span class="attr">max-connections-per-route:</span> <span class="number">50</span> <span class="comment"># 每个路径的最大连接数</span></span><br></pre></td></tr></table></figure>

<p><strong>Feign的优化总结：</strong></p>
<ol>
<li><p>日志级别尽量用basic</p>
</li>
<li><p>使用HttpClient或OKHttp代替URLConnection</p>
</li>
<li><p>引入feign-httpClient依赖</p>
</li>
<li><p>配置文件开启httpClient功能，设置连接池参数</p>
</li>
</ol>
<h2 id="2-4-最佳实践"><a href="#2-4-最佳实践" class="headerlink" title="2.4.最佳实践"></a>2.4.最佳实践</h2><p>所谓最近实践，就是使用过程中总结的经验，最好的一种使用方式。</p>
<p>观察可以发现，Feign的客户端与服务提供者的controller代码非常相似：</p>
<p><strong>feign客户端：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220829094247803.png" alt="image-20220829094247803"></p>
<p><strong>UserController：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220829094324564.png" alt="image-20220829094324564"></p>
<p>可以发现这里的很多代码都是重复编写的。</p>
<h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式:"></a>解决方式:</h3><h4 id="1-继承方式"><a href="#1-继承方式" class="headerlink" title="1.继承方式"></a>1.继承方式</h4><p>一样的代码可以通过继承来共享：</p>
<p>1）定义一个API接口，利用定义方法，并基于SpringMVC注解做声明。</p>
<p>2）Feign客户端和Controller都集成改接口</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220829094440482.png" alt="image-20220829094440482"></p>
<p>优点：</p>
<ul>
<li>简单</li>
<li>实现了代码共享</li>
</ul>
<p>缺点：</p>
<ul>
<li><p>服务提供方、服务消费方紧耦合</p>
</li>
<li><p>参数列表中的注解映射并不会继承，因此Controller中必须再次声明方法、参数列表、注解</p>
</li>
</ul>
<hr>
<h4 id="2-抽取方式"><a href="#2-抽取方式" class="headerlink" title="2.抽取方式"></a>2.抽取方式</h4><p>将Feign的Client抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用。</p>
<p>例如，将UserClient、User、Feign的默认配置都抽取到一个feign-api包中，所有微服务引用该依赖包，即可直接使用。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220829094502121.png" alt="image-20220829094502121"></p>
<h4 id="3-实现基于抽取的最佳实践"><a href="#3-实现基于抽取的最佳实践" class="headerlink" title="3.实现基于抽取的最佳实践"></a>3.实现基于抽取的最佳实践</h4><h5 id="1）抽取"><a href="#1）抽取" class="headerlink" title="1）抽取"></a>1）抽取</h5><p>首先创建一个module，命名为feign-api：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220829101043651.png" alt="image-20220829101043651"></p>
<p>在feign-api中然后引入feign的starter依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>然后，order-service中编写的UserClient、User、DefaultFeignConfiguration都复制到feign-api项目中</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220829101938011.png" alt="image-20220829101938011"></p>
<h4 id="2）在order-service中使用feign-api"><a href="#2）在order-service中使用feign-api" class="headerlink" title="2）在order-service中使用feign-api"></a>2）在order-service中使用feign-api</h4><p>首先，删除order-service中的UserClient、User、DefaultFeignConfiguration等类或接口。</p>
<p>在order-service的pom文件中中引入feign-api的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>修改order-service中的所有与上述三个组件有关的导包部分，改成导入feign-api中的包</p>
<h4 id="3）重启测试"><a href="#3）重启测试" class="headerlink" title="3）重启测试"></a>3）重启测试</h4><p>重启后，发现服务报错了：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220829102257809.png" alt="image-20220829102257809"></p>
<p>这是因为UserClient现在在cn.itcast.feign.clients包下，</p>
<p>而order-service的@EnableFeignClients注解是在cn.itcast.order包下，不在同一个包，无法扫描到UserClient。</p>
<h4 id="4）解决扫描包问题"><a href="#4）解决扫描包问题" class="headerlink" title="4）解决扫描包问题"></a>4）解决扫描包问题</h4><p>方式一：</p>
<p>指定Feign应该扫描的包：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;cn.itcast.feign.clients&quot;)</span></span><br></pre></td></tr></table></figure>



<p>方式二：</p>
<p>指定需要加载的Client接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(clients = &#123;UserClient.class&#125;)</span></span><br></pre></td></tr></table></figure>



<hr>
<h1 id="3-Gateway服务网关"><a href="#3-Gateway服务网关" class="headerlink" title="3.Gateway服务网关"></a>3.Gateway服务网关</h1><p>Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p>
<h2 id="3-1-为什么需要网关"><a href="#3-1-为什么需要网关" class="headerlink" title="3.1.为什么需要网关"></a>3.1.为什么需要网关</h2><p>Gateway网关是我们服务的守门神，所有微服务的统一入口。</p>
<p>网关的<strong>核心功能特性</strong>：</p>
<ul>
<li>请求路由</li>
<li>权限控制</li>
<li>限流</li>
</ul>
<p>架构图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220829102321033.png" alt="image-20220829102321033"></p>
<p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p>
<p><strong>路由和负载均衡</strong>：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p>
<p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p>
<p>在SpringCloud中网关的实现包括两种：</p>
<ul>
<li>gateway</li>
<li>zuul</li>
</ul>
<p>Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。</p>
<h2 id="3-2-gateway快速入门"><a href="#3-2-gateway快速入门" class="headerlink" title="3.2.gateway快速入门"></a>3.2.gateway快速入门</h2><p>下面，我们就演示下网关的基本路由功能。基本步骤如下：</p>
<ol>
<li>创建SpringBoot工程gateway，引入网关依赖</li>
<li>编写启动类</li>
<li>编写基础配置和路由规则</li>
<li>启动网关服务进行测试</li>
</ol>
<h3 id="1）创建gateway服务，引入依赖"><a href="#1）创建gateway服务，引入依赖" class="headerlink" title="1）创建gateway服务，引入依赖"></a>1）创建gateway服务，引入依赖</h3><p>创建服务：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220829151638252.png" alt="image-20220829151638252"></p>
<p>引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--网关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nacos服务发现依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2）编写启动类"><a href="#2）编写启动类" class="headerlink" title="2）编写启动类"></a>2）编写启动类</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220829151715287.png" alt="image-20220829151715287"></p>
<h3 id="3）编写基础配置和路由规则"><a href="#3）编写基础配置和路由规则" class="headerlink" title="3）编写基础配置和路由规则"></a>3）编写基础配置和路由规则</h3><p>创建application.yml文件，内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment">#网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment">#网管路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment">#路由标识，必须唯一</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userservice</span> <span class="comment">#路由目标地址</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment">#路由断言，判读请求是否符合规则</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment">#路径断言，判断路径是否以/user开头，如果是则符合</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-service</span> <span class="comment">#路由标识，必须唯一</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://orderservice</span> <span class="comment">#路由目标地址</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment">#路由断言，判读请求是否符合规则</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span> <span class="comment">#路径断言，判断路径是否以/user开头，如果是则符合</span></span><br></pre></td></tr></table></figure>

<h3 id="4）测试"><a href="#4）测试" class="headerlink" title="4）测试"></a>4）测试</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220829151811195.png" alt="image-20220829151811195"></p>
<h3 id="5）网关路由的流程图"><a href="#5）网关路由的流程图" class="headerlink" title="5）网关路由的流程图"></a>5）网关路由的流程图</h3><p>整个访问的流程如下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220829151828027.png" alt="image-20220829151828027"></p>
<p><strong>总结：</strong></p>
<p>网关搭建步骤：</p>
<ol>
<li><p>创建项目，引入nacos服务发现和gateway依赖</p>
</li>
<li><p>配置application.yml，包括服务基本信息、nacos地址、路由</p>
</li>
</ol>
<p>路由配置包括：</p>
<ol>
<li><p>路由id：路由的唯一标示</p>
</li>
<li><p>路由目标（uri）：路由的目标地址，http代表固定地址，lb代表根据服务名负载均衡</p>
</li>
<li><p>路由断言（predicates）：判断路由的规则，</p>
</li>
<li><p>路由过滤器（filters）：对请求或响应做处理</p>
</li>
</ol>
<hr>
<h2 id="3-3-断言工厂"><a href="#3-3-断言工厂" class="headerlink" title="3.3.断言工厂"></a>3.3.断言工厂</h2><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p>
<p>例如Path&#x3D;&#x2F;user&#x2F;**是按照路径匹配，这个规则是由</p>
<p><code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来</p>
<p>处理的，像这样的断言工厂在SpringCloudGateway还有十几个:</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>After</td>
<td>是某个时间点后的请求</td>
<td>-  After&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver]</td>
</tr>
<tr>
<td>Before</td>
<td>是某个时间点之前的请求</td>
<td>-  Before&#x3D;2031-04-13T15:14:47.433+08:00[Asia&#x2F;Shanghai]</td>
</tr>
<tr>
<td>Between</td>
<td>是某两个时间点之前的请求</td>
<td>-  Between&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver],  2037-01-21T17:42:47.789-07:00[America&#x2F;Denver]</td>
</tr>
<tr>
<td>Cookie</td>
<td>请求必须包含某些cookie</td>
<td>- Cookie&#x3D;chocolate, ch.p</td>
</tr>
<tr>
<td>Header</td>
<td>请求必须包含某些header</td>
<td>- Header&#x3D;X-Request-Id, \d+</td>
</tr>
<tr>
<td>Host</td>
<td>请求必须是访问某个host（域名）</td>
<td>-  Host&#x3D;<strong>.somehost.org,</strong>.anotherhost.org</td>
</tr>
<tr>
<td>Method</td>
<td>请求方式必须是指定方式</td>
<td>- Method&#x3D;GET,POST</td>
</tr>
<tr>
<td>Path</td>
<td>请求路径必须符合指定规则</td>
<td>- Path&#x3D;&#x2F;red&#x2F;{segment},&#x2F;blue&#x2F;**</td>
</tr>
<tr>
<td>Query</td>
<td>请求参数必须包含指定参数</td>
<td>- Query&#x3D;name, Jack或者-  Query&#x3D;name</td>
</tr>
<tr>
<td>RemoteAddr</td>
<td>请求者的ip必须是指定范围</td>
<td>- RemoteAddr&#x3D;192.168.1.1&#x2F;24</td>
</tr>
<tr>
<td>Weight</td>
<td>权重处理</td>
<td></td>
</tr>
</tbody></table>
<p>目前只需要掌握Path这种路由工程就可以了，之后需要哪种就去官网查文档。</p>
<hr>
<h2 id="3-4-过滤器工厂"><a href="#3-4-过滤器工厂" class="headerlink" title="3.4.过滤器工厂"></a>3.4.过滤器工厂</h2><p>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220829154545370.png" alt="image-20220829154545370"></p>
<h3 id="1-路由过滤器的种类"><a href="#1-路由过滤器的种类" class="headerlink" title="1. 路由过滤器的种类"></a>1. 路由过滤器的种类</h3><p>Spring提供了31种不同的路由过滤器工厂。例如：</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>AddRequestHeader</td>
<td>给当前请求添加一个请求头</td>
</tr>
<tr>
<td>RemoveRequestHeader</td>
<td>移除请求中的一个请求头</td>
</tr>
<tr>
<td>AddResponseHeader</td>
<td>给响应结果中添加一个响应头</td>
</tr>
<tr>
<td>RemoveResponseHeader</td>
<td>从响应结果中移除有一个响应头</td>
</tr>
<tr>
<td>RequestRateLimiter</td>
<td>限制请求的流量</td>
</tr>
</tbody></table>
<h3 id="2-请求头过滤器"><a href="#2-请求头过滤器" class="headerlink" title="2. 请求头过滤器"></a>2. 请求头过滤器</h3><p>下面我们以AddRequestHeader 为例来讲解。</p>
<blockquote>
<p><strong>需求</strong>：给所有进入userservice的请求添加一个请求头：Truth&#x3D;itcast is freaking awesome!</p>
</blockquote>
<p>只需要修改gateway服务的application.yml文件，添加路由过滤即可：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220829155240212.png" alt="image-20220829155240212"></p>
<p>当前过滤器写在userservice路由下，因此仅仅对访问userservice的请求有效。</p>
<p>修改user-service中的请求方法</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220829155404014.png" alt="image-20220829155404014"></p>
<p>测试：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220829155418950.png" alt="image-20220829155418950"></p>
<h3 id="3-默认过滤器"><a href="#3-默认过滤器" class="headerlink" title="3.默认过滤器"></a>3.默认过滤器</h3><p>如果要对所有的路由都生效，则可以将过滤器工厂写到default下。格式如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> </span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://userservice</span> </span><br><span class="line">        <span class="attr">predicates:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Itcast</span> <span class="string">is</span> <span class="string">freaking</span> <span class="string">awesome!</span> </span><br></pre></td></tr></table></figure>



<h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><p>过滤器的作用是什么？</p>
<p>① 对路由的请求或响应做加工处理，比如添加请求头</p>
<p>② 配置在路由下的过滤器只对当前路由的请求生效</p>
<p>defaultFilters的作用是什么？</p>
<p>① 对所有路由都生效的过滤器</p>
<hr>
<h2 id="3-5-全局过滤器"><a href="#3-5-全局过滤器" class="headerlink" title="3.5.全局过滤器"></a>3.5.全局过滤器</h2><h3 id="1-全局过滤器作用"><a href="#1-全局过滤器作用" class="headerlink" title="1.全局过滤器作用"></a>1.全局过滤器作用</h3><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。区别在于GatewayFilter通过配置定义，处理逻辑是固定的；而GlobalFilter的逻辑需要自己写代码实现。</p>
<p>定义方式是实现GlobalFilter接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  处理当前请求，有必要的话通过&#123;<span class="doctag">@link</span> GatewayFilterChain&#125;将请求交给下一个过滤器处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange 请求上下文，里面可以获取Request、Response等信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain 用来把请求委托给下一个过滤器 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Mono&lt;Void&gt;&#125; 返回标示当前过滤器业务结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在filter中编写自定义逻辑，可以实现下列功能：</p>
<ul>
<li>登录状态判断</li>
<li>权限校验</li>
<li>请求限流等</li>
</ul>
<h3 id="2-自定义全局过滤器"><a href="#2-自定义全局过滤器" class="headerlink" title="2.自定义全局过滤器"></a>2.自定义全局过滤器</h3><p>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：</p>
<ul>
<li><p>参数中是否有authorization，</p>
</li>
<li><p>authorization参数值是否为admin</p>
</li>
</ul>
<p>如果同时满足则放行，否则拦截</p>
<p>实现：</p>
<p>在gateway中定义一个过滤器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.gateway.filters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Order(-1)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取请求参数</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; params = exchange.getRequest().getQueryParams();</span><br><span class="line">        <span class="comment">// 2.获取authorization参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">auth</span> <span class="operator">=</span> params.getFirst(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.校验</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(auth)) &#123;</span><br><span class="line">            <span class="comment">// 放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.拦截</span></span><br><span class="line">        <span class="comment">// 4.1.禁止访问，设置状态码</span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);</span><br><span class="line">        <span class="comment">// 4.2.结束处理</span></span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-过滤器执行顺序"><a href="#3-过滤器执行顺序" class="headerlink" title="3.过滤器执行顺序"></a>3.过滤器执行顺序</h3><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p>
<p>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220829155707212.png" alt="image-20220829155707212"></p>
<p>排序的规则是什么呢？</p>
<ul>
<li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong>。</li>
<li>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定</li>
<li>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。</li>
<li>当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行。</li>
</ul>
<p>详细内容，可以查看源码：</p>
<p><code>org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()</code>方法是先加载defaultFilters，然后再加载某个route的filters，然后合并。</p>
<p><code>org.springframework.cloud.gateway.handler.FilteringWebHandler#handle()</code>方法会加载全局过滤器，与前面的过滤器合并后根据order排序，组织过滤器链</p>
<h2 id="3-6-跨域问题"><a href="#3-6-跨域问题" class="headerlink" title="3.6.跨域问题"></a>3.6.跨域问题</h2><h3 id="1-什么是跨域问题"><a href="#1-什么是跨域问题" class="headerlink" title="1.什么是跨域问题"></a>1.什么是跨域问题</h3><p>跨域：域名不一致就是跨域，主要包括：</p>
<ul>
<li><p>域名不同： <a href="http://www.taobao.com/">www.taobao.com</a> 和 <a href="http://www.taobao.org/">www.taobao.org</a> 和 <a href="http://www.jd.com/">www.jd.com</a> 和 miaosha.jd.com</p>
</li>
<li><p>域名相同，端口不同：localhost:8080和localhost8081</p>
</li>
</ul>
<p>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题</p>
<p>解决方案：COR</p>
<p>不知道的小伙伴可以查看这篇博文：<a href="https://www.ruanyifeng.com/blog/2016/04/cors.html">https://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>
<h3 id="2-解决跨域问题"><a href="#2-解决跨域问题" class="headerlink" title="2.解决跨域问题"></a>2.解决跨域问题</h3><p>在gateway服务的application.yml文件中，添加下面的配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 。。。</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment"># 全局的跨域处理</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment"># 解决options请求被拦截问题</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment"># 允许哪些网站的跨域请求 </span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://localhost:8090&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 允许的跨域ajax的请求方式</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 允许在请求中携带的头信息</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment"># 是否允许携带cookie</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment"># 这次跨域检测的有效期</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker学习笔记</title>
    <url>/posts/65401918.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="1-初识Docker"><a href="#1-初识Docker" class="headerlink" title="1.初识Docker"></a>1.初识Docker</h1><h2 id="1-1-什么是Docker"><a href="#1-1-什么是Docker" class="headerlink" title="1.1.什么是Docker"></a>1.1.什么是Docker</h2><p>微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦。</p>
<ul>
<li>分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突。</li>
<li>在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题</li>
</ul>
<h3 id="1-应用部署的环境问题"><a href="#1-应用部署的环境问题" class="headerlink" title="1.应用部署的环境问题"></a>1.应用部署的环境问题</h3><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p>
<ul>
<li><p>依赖关系复杂，容易出现兼容性问题</p>
</li>
<li><p>开发、测试、生产环境有差异</p>
</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830094009728.png" alt="image-20220830094009728"></p>
<p>例如一个项目中，部署时需要依赖于node.js、Redis、RabbitMQ、MySQL等，这些服务部署时所需要的函数库、依赖项各不相同，甚至会有冲突。给部署带来了极大的困难。</p>
<h3 id="2-Docker解决依赖兼容问题"><a href="#2-Docker解决依赖兼容问题" class="headerlink" title="2.Docker解决依赖兼容问题"></a>2.Docker解决依赖兼容问题</h3><p>而Docker确巧妙的解决了这些问题，Docker是如何实现的呢？</p>
<p>Docker为了解决依赖的兼容问题的，采用了两个手段：</p>
<ul>
<li><p><strong>将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包</strong></p>
</li>
<li><p>将每个应用放到一个<strong>隔离容器</strong>去运行，避免互相干扰</p>
</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830094056554.png" alt="image-20220830094056554"></p>
<p>这样打包好的应用包中，既包含应用本身，也保护应用所需要的Libs、Deps，无需再操作系统上安装这些，自然就不存在不同应用之间的兼容问题了。</p>
<p>虽然解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统版本也会有差异，怎么解决这些问题呢？</p>
<h3 id="3-Docker解决操作系统环境差异"><a href="#3-Docker解决操作系统环境差异" class="headerlink" title="3.Docker解决操作系统环境差异"></a>3.Docker解决操作系统环境差异</h3><p>要解决不同操作系统环境差异问题，必须先了解操作系统结构。以一个Ubuntu操作系统为例，结构如下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20210731143401460.png" alt="image-20210731143401460"></p>
<p>结构包括：</p>
<ul>
<li><strong>计算机硬件：</strong>例如CPU、内存、磁盘等</li>
<li><strong>系统内核：</strong>所有Linux发行版的内核都是Linux，例如CentOS、Ubuntu、Fedora等。内核可以与计算机硬件交互，对外提供<strong>内核指令</strong>，用于操作计算机硬件。</li>
<li><strong>系统应用：</strong>操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便。</li>
</ul>
<p>应用于计算机交互的流程如下：</p>
<p>1）应用调用操作系统应用（函数库），实现各种功能</p>
<p>2）系统函数库是对内核指令集的封装，会调用内核指令</p>
<p>3）内核指令操作计算机硬件</p>
<p>Ubuntu和CentOSpringBoot<strong>都是基于Linux内核，无非是系统应用不同</strong>，提供的函数库有差异：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20210731144304990.png" alt="image-20210731144304990"></p>
<p>此时，如果将一个Ubuntu版本的MySQL应用安装到CentOS系统，MySQL在调用Ubuntu函数库时，会发现找不到或者不匹配，就会报错了：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20210731144458680.png" alt="image-20210731144458680"></p>
<p>Docker如何解决不同系统环境的问题？</p>
<ul>
<li>Docker<strong>将用户程序与所需要调用的系统(比如Ubuntu)函数库一起打包</strong></li>
<li>Docker运行到不同操作系统时，直接<strong>基于打包的函数库</strong>，<strong>借助于操作系统的Linux内核</strong>来运行</li>
</ul>
<p>如图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20210731144820638.png" alt="image-20210731144820638"></p>
<h3 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h3><p>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？</p>
<ul>
<li>Docker允许开发中将应用、依赖、函数库、配置一起<strong>打包</strong>，形成可移植镜像</li>
<li>Docker应用运行在容器中，使用沙箱机制，相互<strong>隔离</strong></li>
</ul>
<p>Docker如何解决开发、测试、生产环境有差异的问题？</p>
<ul>
<li>Docker镜像中包含完整运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</li>
</ul>
<p>Docker是一个快速交付应用、运行应用的技术，具备下列优势：</p>
<ul>
<li>可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意Linux操作系统</li>
<li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li>
<li>启动、移除都可以通过一行命令完成，方便快捷</li>
</ul>
<h2 id="1-2-Docker和虚拟机的区别"><a href="#1-2-Docker和虚拟机的区别" class="headerlink" title="1.2.Docker和虚拟机的区别"></a>1.2.Docker和虚拟机的区别</h2><p>Docker可以让一个应用在任何操作系统中非常方便的运行。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用。</p>
<p>两者有什么差异呢？</p>
<p><strong>虚拟机</strong>（virtual machine）是在操作系统中<strong>模拟</strong>硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的Ubuntu应用了。</p>
<p><strong>Docker</strong>仅仅是封装函数库，并没有模拟完整的操作系统，如图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20210731145914960.png" alt="image-20210731145914960"></p>
<p>对比来看：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20210731152243765.png" alt="image-20210731152243765"></p>
<p>小结：</p>
<p>Docker和虚拟机的差异：</p>
<ul>
<li><p>docker是一个系统进程；虚拟机是在操作系统中的操作系统</p>
</li>
<li><p>docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</p>
</li>
</ul>
<h2 id="1-3-Docker架构"><a href="#1-3-Docker架构" class="headerlink" title="1.3.Docker架构"></a>1.3.Docker架构</h2><h3 id="1-镜像和容器"><a href="#1-镜像和容器" class="headerlink" title="1.镜像和容器"></a>1.镜像和容器</h3><p>Docker中有几个重要的概念：</p>
<p><strong>镜像（Image）</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。</p>
<p><strong>容器（Container）</strong>：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器进程做隔离，对外不可见。</p>
<p>一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的<strong>文件</strong>。只有运行时，才会加载到内存，形成进程。</p>
<p>而<strong>镜像</strong>，就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是只读的。</p>
<p><strong>容器</strong>呢，就是将这些文件中编写的程序、函数加载到内存中允许，形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20210731153059464.png" alt="image-20210731153059464"></p>
<p>例如你下载了一个QQ，如果我们将QQ在磁盘上的运行<strong>文件</strong>及其运行的操作系统依赖打包，形成QQ镜像。然后你可以启动多次，双开、甚至三开QQ，跟多个妹子聊天。</p>
<h3 id="2-DockerHub"><a href="#2-DockerHub" class="headerlink" title="2.DockerHub"></a>2.DockerHub</h3><p>开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如Redis、MySQL镜像放到网络上，共享使用，就像GitHub的代码共享一样。</p>
<ul>
<li><p>DockerHub：DockerHub是一个官方的Docker镜像的托管平台。这样的平台称为Docker Registry。</p>
</li>
<li><p>国内也有类似于DockerHub 的公开服务，比如 <a href="https://c.163yun.com/hub">网易云镜像服务</a>、<a href="https://cr.console.aliyun.com/">阿里云镜像库</a>等。</p>
</li>
</ul>
<p>我们一方面可以将自己的镜像共享到DockerHub，另一方面也可以从DockerHub拉取镜像：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20210731153743354.png" alt="image-20210731153743354"></p>
<h3 id="3-Docker架构"><a href="#3-Docker架构" class="headerlink" title="3.Docker架构"></a>3.Docker架构</h3><p>我们要使用Docker来操作镜像、容器，就必须要安装Docker。</p>
<p>Docker是一个CS架构的程序，由两部分组成：</p>
<ul>
<li><p>服务端(server)：Docker守护进程，负责处理Docker指令，管理镜像、容器等</p>
</li>
<li><p>客户端(client)：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</p>
</li>
</ul>
<p>如图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830094545847.png" alt="image-20220830094545847"></p>
<h3 id="4-小结-1"><a href="#4-小结-1" class="headerlink" title="4.小结"></a>4.小结</h3><p>镜像：</p>
<ul>
<li>将应用程序及其依赖、环境、配置打包在一起</li>
</ul>
<p>容器：</p>
<ul>
<li>镜像运行起来就是容器，一个镜像可以运行多个容器</li>
</ul>
<p>Docker结构：</p>
<ul>
<li><p>服务端：接收命令或远程请求，操作镜像或容器</p>
</li>
<li><p>客户端：发送命令或者请求到Docker服务端</p>
</li>
</ul>
<p>DockerHub：</p>
<ul>
<li>一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为DockerRegistry</li>
</ul>
<h2 id="1-4-安装Docker"><a href="#1-4-安装Docker" class="headerlink" title="1.4.安装Docker"></a>1.4.安装Docker</h2><p>企业部署一般都是采用Linux操作系统，而其中又数CentOS发行版占比最多，因此在CentOS下安装Docker。</p>
<h4 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1.安装docker"></a>1.安装docker</h4><p>首先需要大家虚拟机联网，安装yum工具</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830110345125.png" alt="image-20220830110345125"></p>
<p>然后更新本地镜像源：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830110419466.png" alt="image-20220830110419466"></p>
<p>然后输入命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830110650328.png" alt="image-20220830110650328"></p>
<p>docker-ce为社区免费版本。稍等片刻，docker即可安装成功。</p>
<h4 id="2-启动docker"><a href="#2-启动docker" class="headerlink" title="2.启动docker"></a>2.启动docker</h4><p>Docker应用需要用到各种端口，逐一去修改防火墙设置。非常麻烦，因此建议大家直接关闭防火墙！</p>
<p>启动docker前，一定要关闭防火墙后！！</p>
<p>启动docker前，一定要关闭防火墙后！！</p>
<p>启动docker前，一定要关闭防火墙后！！</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 禁止开机启动防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>



<p>通过命令启动docker：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start docker  <span class="comment"># 启动docker服务</span></span><br><span class="line"></span><br><span class="line">systemctl stop docker  <span class="comment"># 停止docker服务</span></span><br><span class="line"></span><br><span class="line">systemctl restart docker  <span class="comment"># 重启docker服务</span></span><br></pre></td></tr></table></figure>



<p>然后输入命令，可以查看docker版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure>

<p>如图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830110740239.png" alt="image-20220830110740239"></p>
<h4 id="3-配置镜像加速"><a href="#3-配置镜像加速" class="headerlink" title="3.配置镜像加速"></a>3.配置镜像加速</h4><p>docker官方镜像仓库网速较差，我们需要设置国内镜像服务：</p>
<p>参考阿里云的镜像加速文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830111106289.png" alt="image-20220830111106289"></p>
<h1 id="2-Docker的基本操作"><a href="#2-Docker的基本操作" class="headerlink" title="2.Docker的基本操作"></a>2.Docker的基本操作</h1><h2 id="2-1-镜像操作"><a href="#2-1-镜像操作" class="headerlink" title="2.1.镜像操作"></a>2.1.镜像操作</h2><h3 id="1-镜像名称"><a href="#1-镜像名称" class="headerlink" title="1.镜像名称"></a>1.镜像名称</h3><p>首先来看下镜像的名称组成：</p>
<ul>
<li>镜名称一般分两部分组成：[repository]:[tag]。</li>
<li>在没有指定tag时，默认是latest，代表最新版本的镜像</li>
</ul>
<p>如图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830112107029.png" alt="image-20220830112107029"></p>
<p>这里的mysql就是repository，5.7就是tag，合一起就是镜像名称，代表5.7版本的MySQL镜像。</p>
<h3 id="2-镜像命令"><a href="#2-镜像命令" class="headerlink" title="2.镜像命令"></a>2.镜像命令</h3><p>常见的镜像操作命令如图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830112120803.png" alt="image-20220830112120803"></p>
<h3 id="3-案例1-拉取、查看镜像"><a href="#3-案例1-拉取、查看镜像" class="headerlink" title="3.案例1-拉取、查看镜像"></a>3.案例1-拉取、查看镜像</h3><p>需求：从DockerHub中拉取一个nginx镜像并查看</p>
<p>1）首先去镜像仓库搜索nginx镜像，比如<a href="https://hub.docker.com/">DockerHub</a>:</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830112240535.png" alt="image-20220830112240535"></p>
<p>2）根据查看到的镜像名称，拉取自己需要的镜像，通过命令：docker pull nginx</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830112256568.png" alt="image-20220830112256568"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830112326810.png" alt="image-20220830112326810"></p>
<p>3）通过命令：docker images 查看拉取到的镜像</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830112357764.png" alt="image-20220830112357764"></p>
<h3 id="4-案例2-保存、导入镜像"><a href="#4-案例2-保存、导入镜像" class="headerlink" title="4.案例2-保存、导入镜像"></a>4.案例2-保存、导入镜像</h3><p>需求：利用docker save将nginx镜像导出磁盘，然后再通过load加载回来</p>
<p>1）利用docker xx –help命令查看docker save和docker load的语法</p>
<p>例如，查看save命令用法，可以输入命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker save --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830112448330.png" alt="image-20220830112448330"></p>
<p>命令格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker save -o [保存的目标文件名称] [镜像名称]</span><br></pre></td></tr></table></figure>



<p>2）使用docker save导出镜像到磁盘 </p>
<p>运行命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker save -o nginx.tar nginx:latest</span><br></pre></td></tr></table></figure>

<p>结果如图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830112541730.png" alt="image-20220830112541730"></p>
<p>3）使用docker load加载镜像</p>
<p>先删除本地的nginx镜像：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker rmi nginx:latest</span><br></pre></td></tr></table></figure>



<p>然后运行命令，加载本地文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker load -i nginx.tar</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830112613961.png" alt="image-20220830112613961"></p>
<h2 id="2-2-容器操作"><a href="#2-2-容器操作" class="headerlink" title="2.2.容器操作"></a>2.2.容器操作</h2><h3 id="1-容器相关命令"><a href="#1-容器相关命令" class="headerlink" title="1.容器相关命令"></a>1.容器相关命令</h3><p>容器操作的命令如图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830112637528.png" alt="image-20220830112637528"></p>
<p>容器保护三个状态：</p>
<ul>
<li>运行：进程正常运行</li>
<li>暂停：进程暂停，CPU不再运行，并不释放内存</li>
<li>停止：进程终止，回收进程占用的内存、CPU等资源</li>
</ul>
<p>其中：</p>
<ul>
<li><p>docker run：创建并运行一个容器，处于运行状态</p>
</li>
<li><p>docker pause：让一个运行的容器暂停</p>
</li>
<li><p>docker unpause：让一个容器从暂停状态恢复运行</p>
</li>
<li><p>docker stop：停止一个运行的容器</p>
</li>
<li><p>docker start：让一个停止的容器再次运行</p>
</li>
<li><p>docker rm：删除一个容器</p>
</li>
</ul>
<h3 id="2-案例-创建并运行一个容器"><a href="#2-案例-创建并运行一个容器" class="headerlink" title="2.案例-创建并运行一个容器"></a>2.案例-创建并运行一个容器</h3><p>创建并运行nginx容器的命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name myNginx -p 80:80 -d nginx</span><br></pre></td></tr></table></figure>

<p>命令解读：</p>
<ul>
<li>docker run ：创建并运行一个容器</li>
<li>–name : 给容器起一个名字，比如叫做mn</li>
<li>-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li>
<li>-d：后台运行容器</li>
<li>nginx：镜像名称，例如nginx</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830145634587.png" alt="image-20220830145634587"></p>
<p>这里的<code>-p</code>参数，是将容器端口映射到宿主机端口。</p>
<p>默认情况下，容器是隔离环境，我们直接访问宿主机的80端口，肯定访问不到容器中的nginx。</p>
<p>现在，将容器的80与宿主机的80关联起来，当我们访问宿主机的80端口时，就会被映射到容器的80，这样就能访问到nginx了：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830145714712.png" alt="image-20220830145714712"></p>
<h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830145543576.png" alt="image-20220830145543576"></p>
<h3 id="3-案例-进入容器，修改文件"><a href="#3-案例-进入容器，修改文件" class="headerlink" title="3.案例-进入容器，修改文件"></a>3.案例-进入容器，修改文件</h3><p><strong>需求</strong>：进入Nginx容器，修改HTML文件内容，添加“传智教育欢迎您”</p>
<p><strong>提示</strong>：进入容器要用到docker exec命令。</p>
<p><strong>步骤</strong>：</p>
<p>1）进入容器。进入我们刚刚创建的nginx容器的命令为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it myNginx bash</span><br></pre></td></tr></table></figure>

<p>命令解读：</p>
<ul>
<li><p>docker exec ：进入容器内部，执行一个命令</p>
</li>
<li><p>-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</p>
</li>
<li><p>mn ：要进入的容器的名称</p>
</li>
<li><p>bash：进入容器后执行的命令，bash是一个linux终端交互命令</p>
</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830152048105.png" alt="image-20220830152048105"></p>
<p>2）进入nginx的HTML所在目录 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</p>
<p>容器内部会模拟一个独立的Linux文件系统，看起来如同一个linux服务器一样：</p>
<p>nginx的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的html文件。</p>
<p>查看DockerHub网站中的nginx页面，可以知道nginx的html目录位置在<code>/usr/share/nginx/html</code></p>
<p>我们执行命令，进入该目录：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/nginx/html</span><br></pre></td></tr></table></figure>

<p> 查看目录下文件：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830152238473.png" alt="image-20220830152238473"></p>
<p>3）修改index.html的内容</p>
<p>容器内没有vi命令，无法直接修改，我们用下面的命令来修改：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -i -e <span class="string">&#x27;s#Welcome to nginx#传智教育欢迎您#g&#x27;</span> -e <span class="string">&#x27;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#x27;</span> index.html</span><br></pre></td></tr></table></figure>



<p>在浏览器访问自己的虚拟机地址即可看到结果：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830152220526.png" alt="image-20220830152220526"></p>
<h3 id="4-小结-2"><a href="#4-小结-2" class="headerlink" title="4.小结"></a>4.小结</h3><p>docker run命令的常见参数有哪些？</p>
<ul>
<li>–name：指定容器名称</li>
<li>-p：指定端口映射</li>
<li>-d：让容器后台运行</li>
</ul>
<p>查看容器日志的命令：</p>
<ul>
<li>docker logs</li>
<li>添加 -f 参数可以持续查看日志</li>
</ul>
<p>查看容器状态：</p>
<ul>
<li>docker ps</li>
<li>docker ps -a 查看所有容器，包括已经停止的</li>
</ul>
<h2 id="2-3-数据卷（容器数据管理）"><a href="#2-3-数据卷（容器数据管理）" class="headerlink" title="2.3.数据卷（容器数据管理）"></a>2.3.数据卷（容器数据管理）</h2><p>在之前的nginx案例中，修改nginx的html页面时，需要进入nginx内部。并且因为没有编辑器，修改文件也很麻烦。</p>
<p>这就是因为容器与数据（容器内文件）耦合带来的后果。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830152252360.png" alt="image-20220830152252360"></p>
<p>要解决这个问题，必须将数据与容器解耦，这就要用到数据卷了。</p>
<h3 id="1-什么是数据卷"><a href="#1-什么是数据卷" class="headerlink" title="1.什么是数据卷"></a>1.什么是数据卷</h3><p><strong>数据卷（volume）</strong>是一个虚拟目录，指向宿主机文件系统中的某个目录。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830152306089.png" alt="image-20220830152306089"></p>
<p>一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。</p>
<p>这样，我们操作宿主机的&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;html目录，就等于操作容器内的&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html目录了</p>
<h3 id="2-数据集操作命令"><a href="#2-数据集操作命令" class="headerlink" title="2.数据集操作命令"></a>2.数据集操作命令</h3><p>数据卷操作的基本语法如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume [COMMAND]</span><br></pre></td></tr></table></figure>

<p>docker volume命令是数据卷操作，根据命令后跟随的command来确定下一步的操作：</p>
<ul>
<li>create 创建一个volume</li>
<li>inspect 显示一个或多个volume的信息</li>
<li>ls 列出所有的volume</li>
<li>prune 删除未使用的volume</li>
<li>rm 删除一个或多个指定的volume</li>
</ul>
<h3 id="3-创建和查看数据卷"><a href="#3-创建和查看数据卷" class="headerlink" title="3.创建和查看数据卷"></a>3.创建和查看数据卷</h3><p><strong>需求</strong>：创建一个数据卷，并查看数据卷在宿主机的目录位置</p>
<p>① 创建数据卷</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume create html</span><br></pre></td></tr></table></figure>



<p>② 查看所有数据</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830155931264.png" alt="image-20220830155931264"></p>
<p>③ 查看数据卷详细信息卷</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume inspect html</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830155948143.png" alt="image-20220830155948143"></p>
<p>可以看到，我们创建的html这个数据卷关联的宿主机目录为<code>/var/lib/docker/volumes/html/_data</code>目录。</p>
<p><strong>小结</strong>：</p>
<p>数据卷的作用：</p>
<ul>
<li>将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</li>
</ul>
<p>数据卷操作：</p>
<ul>
<li>docker volume create：创建数据卷</li>
<li>docker volume ls：查看所有数据卷</li>
<li>docker volume inspect：查看数据卷详细信息，包括关联的宿主机目录位置</li>
<li>docker volume rm：删除指定数据卷</li>
<li>docker volume prune：删除所有未使用的数据卷</li>
</ul>
<h3 id="4-挂载数据卷"><a href="#4-挂载数据卷" class="headerlink" title="4.挂载数据卷"></a>4.挂载数据卷</h3><p>我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --name mn \</span><br><span class="line">  -v html:/root/html \</span><br><span class="line">  -p 8080:80</span><br><span class="line">  nginx \</span><br></pre></td></tr></table></figure>

<p>这里的-v就是挂载数据卷的命令：</p>
<ul>
<li><code>-v html:/root/htm</code> ：把html数据卷挂载到容器内的&#x2F;root&#x2F;html这个目录中</li>
</ul>
<h3 id="5-案例-给nginx挂载数据卷"><a href="#5-案例-给nginx挂载数据卷" class="headerlink" title="5.案例-给nginx挂载数据卷"></a>5.案例-给nginx挂载数据卷</h3><p><strong>需求</strong>：创建一个nginx容器，修改容器内的html目录内的index.html内容</p>
<p><strong>分析</strong>：上个案例中，我们进入nginx容器内部，已经知道nginx的html目录所在位置&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html ，我们需要把这个目录挂载到html这个数据卷上，方便操作其中的内容。</p>
<p><strong>提示</strong>：运行容器时使用 -v 参数挂载数据卷</p>
<p>步骤：</p>
<p>① 创建容器并挂载数据卷到容器内的HTML目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name mn -v html:/usr/share/nginx/html -p 80:80 -d nginx</span><br></pre></td></tr></table></figure>



<p>② 进入html数据卷所在位置，并修改HTML内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看html数据卷的位置</span></span><br><span class="line">docker volume inspect html</span><br><span class="line"><span class="comment"># 进入该目录</span></span><br><span class="line"><span class="built_in">cd</span> /var/lib/docker/volumes/html/_data</span><br><span class="line"><span class="comment"># 修改文件</span></span><br><span class="line">vi index.html</span><br></pre></td></tr></table></figure>

<h3 id="6-案例-给MySQL挂载本地目录"><a href="#6-案例-给MySQL挂载本地目录" class="headerlink" title="6.案例-给MySQL挂载本地目录"></a>6.案例-给MySQL挂载本地目录</h3><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：</p>
<ul>
<li>带数据卷模式：宿主机目录 –&gt; 数据卷 —&gt; 容器内目录</li>
<li>直接挂载模式：宿主机目录 —&gt; 容器内目录</li>
</ul>
<p>如图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830160034953.png" alt="image-20220830160034953"></p>
<p><strong>语法</strong>：</p>
<p>目录挂载与数据卷挂载的语法是类似的：</p>
<ul>
<li>-v [宿主机目录]:[容器内目录]</li>
<li>-v [宿主机文件]:[容器内文件]</li>
</ul>
<p><strong>需求</strong>：创建并运行一个MySQL容器，将宿主机目录直接挂载到容器</p>
<p>实现思路如下：</p>
<p>1）在将课前资料中的mysql.tar文件上传到虚拟机，通过load命令加载为镜像</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830160634236.png" alt="image-20220830160634236"></p>
<p>2）创建目录&#x2F;tmp&#x2F;mysql&#x2F;data</p>
<p>3）创建目录&#x2F;tmp&#x2F;mysql&#x2F;conf，将课前资料提供的hmy.cnf文件上传到&#x2F;tmp&#x2F;mysql&#x2F;conf</p>
<p>4）去DockerHub查阅资料，创建并运行MySQL容器，要求：</p>
<p>① 挂载&#x2F;tmp&#x2F;mysql&#x2F;data到mysql容器内数据存储目录</p>
<p>② 挂载&#x2F;tmp&#x2F;mysql&#x2F;conf&#x2F;hmy.cnf到mysql容器的配置文件</p>
<p>③ 设置MySQL密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run </span><br><span class="line">--name mysql </span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 </span><br><span class="line">-p 3306:3306 </span><br><span class="line">-v /tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf </span><br><span class="line">-v /tmp/mysql/data:/var/lib/mysql </span><br><span class="line">-d </span><br><span class="line">mysql:5.7.25</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830161834489.png" alt="image-20220830161834489"></p>
<h3 id="7-小结"><a href="#7-小结" class="headerlink" title="7.小结"></a>7.小结</h3><p>docker run的命令中通过 -v 参数挂载文件或目录到容器中：</p>
<ul>
<li>-v volume名称:容器内目录</li>
<li>-v 宿主机文件:容器内文</li>
<li>-v 宿主机目录:容器内目录</li>
</ul>
<p>数据卷挂载与目录直接挂载的</p>
<ul>
<li>数据卷挂载耦合度低，由docker来管理目录，但是目录较深，不好找</li>
<li>目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看</li>
</ul>
<h1 id="3-Dockerfile自定义镜像"><a href="#3-Dockerfile自定义镜像" class="headerlink" title="3.Dockerfile自定义镜像"></a>3.Dockerfile自定义镜像</h1><p>常见的镜像在DockerHub就能找到，但是我们自己写的项目就必须自己构建镜像了。</p>
<p>而要自定义镜像，就必须先了解镜像的结构才行。</p>
<h2 id="3-1-镜像结构"><a href="#3-1-镜像结构" class="headerlink" title="3.1.镜像结构"></a>3.1.镜像结构</h2><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p>
<p>我们以MySQL为例，来看看镜像的组成结构：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830163747856.png" alt="image-20220830163747856"></p>
<p>简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。</p>
<p>我们要构建镜像，其实就是实现上述打包的过程。</p>
<h2 id="3-2-Dockerfile语法"><a href="#3-2-Dockerfile语法" class="headerlink" title="3.2.Dockerfile语法"></a>3.2.Dockerfile语法</h2><p>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。</p>
<p>我们只需要告诉Docker，我们的镜像的组成，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来Docker会帮助我们构建镜像。</p>
<p>而描述上述信息的文件就是Dockerfile文件。</p>
<p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的**指令(Instruction)**，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830163800008.png" alt="image-20220830163800008"></p>
<p>更新详细语法说明，请参考官网文档： <a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p>
<h2 id="3-3-构建Java项目"><a href="#3-3-构建Java项目" class="headerlink" title="3.3.构建Java项目"></a>3.3.构建Java项目</h2><h3 id="1-基于Ubuntu构建Java项目"><a href="#1-基于Ubuntu构建Java项目" class="headerlink" title="1.基于Ubuntu构建Java项目"></a>1.基于Ubuntu构建Java项目</h3><p>需求：基于Ubuntu镜像构建一个新镜像，运行一个java项目</p>
<ul>
<li>新建一个空文件夹docker-demo</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830163953883.png" alt="image-20220830163953883"></p>
<ul>
<li>步骤2：拷贝课前资料中的docker-demo.jar、jdk8.tar.gz、Dockerfile文件到docker-demo这个目录</li>
</ul>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830164310922.png" alt="image-20220830164310922"></p>
<ul>
<li><p>Dockerfile中的内容如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="comment"># 配置环境变量，JDK的安装目录</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_DIR=/usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝jdk和java项目的包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; <span class="built_in">mv</span> ./jdk1.8.0_144 ./java8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>步骤3：进入docker-demo</p>
<p>将准备好的docker-demo上传到虚拟机任意目录，然后进入docker-demo目录下</p>
</li>
<li><p>步骤4：运行命令：</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t javaweb:1.0 .</span><br></pre></td></tr></table></figure>

<ul>
<li>步骤5：创建容器</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name web -p 8090:8090 -d javaweb:1.0</span><br></pre></td></tr></table></figure>

<p><strong>测试：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830165321493.png" alt="image-20220830165321493"></p>
<p>注意：记得开放8090端口或者关闭防火墙</p>
<h3 id="2-基于java8构建Java项目"><a href="#2-基于java8构建Java项目" class="headerlink" title="2.基于java8构建Java项目"></a>2.基于java8构建Java项目</h3><p>虽然我们可以基于Ubuntu基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。</p>
<p>例如，构建java项目的镜像，可以在已经准备了JDK的基础镜像基础上构建。</p>
<p>需求：基于java:8-alpine镜像，将一个Java项目构建为镜像</p>
<p>实现思路如下：</p>
<ul>
<li><p>① 新建一个空的目录，然后在目录中新建一个文件，命名为Dockerfile</p>
</li>
<li><p>② 拷贝课前资料提供的docker-demo.jar到这个目录中</p>
</li>
<li><p>③ 编写Dockerfile文件：</p>
<ul>
<li><p>a ）基于java:8-alpine作为基础镜像</p>
</li>
<li><p>b ）将app.jar拷贝到镜像中</p>
</li>
<li><p>c ）暴露端口</p>
</li>
<li><p>d ）编写入口ENTRYPOINT</p>
<p>内容如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./app.jar /tmp/app.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>④ 使用docker build命令构建镜像</p>
</li>
<li><p>⑤ 使用docker run创建容器并运行</p>
</li>
</ul>
<h2 id="3-4-小结"><a href="#3-4-小结" class="headerlink" title="3.4.小结"></a>3.4.小结</h2><p>小结：</p>
<ol>
<li><p>Dockerfile的本质是一个文件，通过指令描述镜像的构建过程</p>
</li>
<li><p>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</p>
</li>
<li><p>基础镜像可以是基本操作系统，如Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine</p>
</li>
</ol>
<h1 id="4-Docker-Compose"><a href="#4-Docker-Compose" class="headerlink" title="4.Docker-Compose"></a>4.Docker-Compose</h1><p>Docker Compose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830165455879.png" alt="image-20220830165455879"></p>
<h2 id="4-1-初识DockerCompose"><a href="#4-1-初识DockerCompose" class="headerlink" title="4.1.初识DockerCompose"></a>4.1.初识DockerCompose</h2><p>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">version<span class="punctuation">:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"> services<span class="punctuation">:</span></span><br><span class="line">  mysql<span class="punctuation">:</span></span><br><span class="line">    image<span class="punctuation">:</span> mysql<span class="punctuation">:</span><span class="number">5.7</span><span class="number">.25</span></span><br><span class="line">    environment<span class="punctuation">:</span></span><br><span class="line">     MYSQL_ROOT_PASSWORD<span class="punctuation">:</span> <span class="number">123</span> </span><br><span class="line">    volumes<span class="punctuation">:</span></span><br><span class="line">     - <span class="string">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">     - <span class="string">&quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&quot;</span></span><br><span class="line">  web<span class="punctuation">:</span></span><br><span class="line">    build<span class="punctuation">:</span> .</span><br><span class="line">    ports<span class="punctuation">:</span></span><br><span class="line">     - <span class="string">&quot;8090:8090&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的Compose文件就描述一个项目，其中包含两个容器：</p>
<ul>
<li>mysql：一个基于<code>mysql:5.7.25</code>镜像构建的容器，并且挂载了两个目录</li>
<li>web：一个基于<code>docker build</code>临时构建的镜像容器，映射端口时8090</li>
</ul>
<p>DockerCompose的详细语法参考官网：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p>
<p>其实DockerCompose文件可以看做是将多个docker run命令写到一个文件，只是语法稍有差异。</p>
<h2 id="4-2-安装DockerCompose"><a href="#4-2-安装DockerCompose" class="headerlink" title="4.2.安装DockerCompose"></a>4.2.安装DockerCompose</h2><h5 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h5><p>Linux下需要通过命令下载：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h5 id="2-修改文件权限"><a href="#2-修改文件权限" class="headerlink" title="2.修改文件权限"></a>2.修改文件权限</h5><p>修改文件权限：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>



<h5 id="3-Base自动补全命令："><a href="#3-Base自动补全命令：" class="headerlink" title="3.Base自动补全命令："></a>3.Base自动补全命令：</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 补全命令</span></span><br><span class="line">curl -L https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure>

<p>如果这里出现错误，需要修改自己的hosts文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;199.232.68.133 raw.githubusercontent.com&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>



<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830170432202.png" alt="image-20220830170432202"></p>
<h2 id="4-3-部署微服务集群"><a href="#4-3-部署微服务集群" class="headerlink" title="4.3.部署微服务集群"></a>4.3.部署微服务集群</h2><p><strong>需求</strong>：将之前学习的cloud-demo微服务集群利用DockerCompose部署</p>
<p><strong>实现思路</strong>：</p>
<p>① 查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件</p>
<p>② 修改自己的cloud-demo项目，将数据库、nacos地址都命名为docker-compose中的服务名</p>
<p>③ 使用maven打包工具，将项目中的每个微服务都打包为app.jar</p>
<p>④ 将打包好的app.jar拷贝到cloud-demo中的每一个对应的子目录中</p>
<p>⑤ 将cloud-demo上传至虚拟机，利用 docker-compose up -d 来部署</p>
<h3 id="1-compose文件"><a href="#1-compose文件" class="headerlink" title="1.compose文件"></a>1.compose文件</h3><p>查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件，而且每个微服务都准备了一个独立的目录：</p>
<p>内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MODE:</span> <span class="string">standalone</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8848:8848&quot;</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7.25</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$PWD/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$PWD/mysql/conf:/etc/mysql/conf.d/&quot;</span></span><br><span class="line">  <span class="attr">userservice:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./user-service</span></span><br><span class="line">  <span class="attr">orderservice:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./order-service</span></span><br><span class="line">  <span class="attr">gateway:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./gateway</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;10010:10010&quot;</span></span><br></pre></td></tr></table></figure>

<p>可以看到，其中包含5个service服务：</p>
<ul>
<li><code>nacos</code>：作为注册中心和配置中心<ul>
<li><code>image: nacos/nacos-server</code>： 基于nacos&#x2F;nacos-server镜像构建</li>
<li><code>environment</code>：环境变量<ul>
<li><code>MODE: standalone</code>：单点模式启动</li>
</ul>
</li>
<li><code>ports</code>：端口映射，这里暴露了8848端口</li>
</ul>
</li>
<li><code>mysql</code>：数据库<ul>
<li><code>image: mysql:5.7.25</code>：镜像版本是mysql:5.7.25</li>
<li><code>environment</code>：环境变量<ul>
<li><code>MYSQL_ROOT_PASSWORD: 123</code>：设置数据库root账户的密码为123</li>
</ul>
</li>
<li><code>volumes</code>：数据卷挂载，这里挂载了mysql的data、conf目录，其中有我提前准备好的数据</li>
</ul>
</li>
<li><code>userservice</code>、<code>orderservice</code>、<code>gateway</code>：都是基于Dockerfile临时构建的</li>
</ul>
<h3 id="2-修改微服务配置"><a href="#2-修改微服务配置" class="headerlink" title="2.修改微服务配置"></a>2.修改微服务配置</h3><p>因为微服务将来要部署为docker容器，而容器之间互联不是通过IP地址，而是通过容器名。这里我们将order-service、user-service、gateway服务的mysql、nacos地址都修改为基于容器名的访问。</p>
<p>如下所示：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://mysql:3306/cloud_order?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderservice</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">nacos:8848</span> <span class="comment"># nacos服务地址</span></span><br></pre></td></tr></table></figure>



<h3 id="3-打包"><a href="#3-打包" class="headerlink" title="3.打包"></a>3.打包</h3><p>接下来需要将我们的每个微服务都打包。因为之前查看到Dockerfile中的jar包名称都是app.jar，因此我们的每个微服务都需要用这个名称。</p>
<p>可以通过修改pom.xml中的打包名称来实现，每个微服务都需要修改：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 服务打包的最终名称 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>app<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-拷贝jar包到部署目录"><a href="#4-拷贝jar包到部署目录" class="headerlink" title="4.拷贝jar包到部署目录"></a>4.拷贝jar包到部署目录</h3><p>编译打包好的app.jar文件，需要放到Dockerfile的同级目录中。注意：每个微服务的app.jar放到与服务名称对应的目录，别搞错了。</p>
<p>user-service：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830172900617.png" alt="image-20220830172900617"></p>
<p>order-service：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830172922696.png" alt="image-20220830172922696"></p>
<p>gateway：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220830172934365.png" alt="image-20220830172934365"></p>
<h3 id="5-部署"><a href="#5-部署" class="headerlink" title="5.部署"></a>5.部署</h3><p>最后，我们需要将文件整个cloud-demo文件夹上传到虚拟机中，由DockerCompose部署。</p>
<p>部署：</p>
<p>进入cloud-demo目录，然后运行下面的命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>



<h1 id="5-Docker镜像仓库"><a href="#5-Docker镜像仓库" class="headerlink" title="5.Docker镜像仓库"></a>5.Docker镜像仓库</h1><h2 id="5-1-搭建私有镜像仓库"><a href="#5-1-搭建私有镜像仓库" class="headerlink" title="5.1.搭建私有镜像仓库"></a>5.1.搭建私有镜像仓库</h2><p>搭建镜像仓库可以基于Docker官方提供的DockerRegistry来实现。</p>
<p>官网地址：<a href="https://hub.docker.com/_/registry">https://hub.docker.com/_/registry</a></p>
<h3 id="1-简化版镜像仓库"><a href="#1-简化版镜像仓库" class="headerlink" title="1.简化版镜像仓库"></a>1.简化版镜像仓库</h3><p>Docker官方的Docker Registry是一个基础版本的Docker镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。</p>
<p>搭建方式比较简单，命令如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --name registry	\</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -v registry-data:/var/lib/registry \</span><br><span class="line">    registry</span><br></pre></td></tr></table></figure>



<p>命令中挂载了一个数据卷registry-data到容器内的&#x2F;var&#x2F;lib&#x2F;registry 目录，这是私有镜像库存放数据的目录。</p>
<p>访问<a href="http://yourip:5000/v2/_catalog">http://YourIp:5000/v2/_catalog</a> 可以查看当前私有镜像服务中包含的镜像</p>
<h3 id="2-带有图形化界面版本"><a href="#2-带有图形化界面版本" class="headerlink" title="2.带有图形化界面版本"></a>2.带有图形化界面版本</h3><p>使用DockerCompose部署带有图象界面的DockerRegistry，命令如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.0&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./registry-data:/var/lib/registry</span></span><br><span class="line">  <span class="attr">ui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">joxit/docker-registry-ui:static</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_TITLE=传智教育私有仓库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_URL=http://registry:5000</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">registry</span></span><br></pre></td></tr></table></figure>



<h3 id="3-配置Docker信任地址"><a href="#3-配置Docker信任地址" class="headerlink" title="3.配置Docker信任地址"></a>3.配置Docker信任地址</h3><p>我们的私服采用的是http协议，默认不被Docker信任，所以需要做一个配置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开要修改的文件</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 添加内容：</span></span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;http://192.168.150.101:8080&quot;</span>]</span><br><span class="line"><span class="comment"># 重加载</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>







<h2 id="5-2-推送、拉取镜像"><a href="#5-2-推送、拉取镜像" class="headerlink" title="5.2.推送、拉取镜像"></a>5.2.推送、拉取镜像</h2><p>推送镜像到私有镜像服务必须先tag，步骤如下：</p>
<p>① 重新tag本地镜像，名称前缀为私有仓库的地址：192.168.150.101:8080&#x2F;</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker tag nginx:latest 192.168.150.101:8080/nginx:1.0 </span><br></pre></td></tr></table></figure>



<p>② 推送镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker push 192.168.150.101:8080/nginx:1.0 </span><br></pre></td></tr></table></figure>



<p>③ 拉取镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull 192.168.150.101:8080/nginx:1.0 </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法小结</title>
    <url>/posts/2509888949.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="1-选择排序（了解）"><a href="#1-选择排序（了解）" class="headerlink" title="1.选择排序（了解）"></a>1.选择排序（了解）</h2><h4 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a><strong>算法思路：</strong></h4><p>每轮选取当前未排序的元素中最小的元素交换到未排序部分的最开头，经过若干步骤就能排序完整个数组。即：先选出最小的，然后选出第二小的，依次类推。</p>
<h4 id="算法实现："><a href="#算法实现：" class="headerlink" title="算法实现："></a>算法实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-15 8:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectionSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="type">SelectionSort</span> <span class="variable">sort</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SelectionSort</span>();</span><br><span class="line">        <span class="type">int</span>[] sortArray = sort.sortArray(nums);</span><br><span class="line">        System.out.println(Arrays.toString(sortArray));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选择排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortArray(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">//[0,i]表示有序区间，该区间所有元素排序完毕</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//当前最小值的索引，初始假设是i</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//选择[i,len-1]里的最小元素，和索引i位置的元素交换</span></span><br><span class="line">            <span class="comment">//即将未排序部分的最小元素放到未排序部分的开头</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">                <span class="comment">//找到了更小的值，将最小元素索引进行更新</span></span><br><span class="line">                <span class="keyword">if</span> (nums[j] &lt; nums[minIndex]) &#123;</span><br><span class="line">                    minIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将最小元素与索引i位置元素交换</span></span><br><span class="line">            swap(nums, i, minIndex);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> index1, <span class="type">int</span> index2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[index1];</span><br><span class="line">        nums[index1] = nums[index2];</span><br><span class="line">        nums[index2] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul>
<li><strong>算法思想：</strong><ol>
<li><strong>贪心算法：</strong>每次决策都选当前最优，当前最优则全局最优。但是<strong>这种思想不是任何时候都适用。</strong></li>
<li><strong>减治思想:<strong>外层循环每次都能排定一个元素，问题规模逐渐减小，直到全部解决。即</strong>大而化小，小而化无</strong>。</li>
<li>优点：<strong>交换次数最少</strong>。</li>
</ol>
</li>
</ul>
<h4 id="复杂度分析："><a href="#复杂度分析：" class="headerlink" title="复杂度分析："></a>复杂度分析：</h4><ul>
<li>时间复杂度：O(N<sup>2</sup>)，N为数组长度。</li>
<li>空间复杂度：O(1)，只使用到了常数个临时变量。</li>
</ul>
<h2 id="2-插入排序（熟悉）"><a href="#2-插入排序（熟悉）" class="headerlink" title="2.插入排序（熟悉）"></a>2.插入排序（熟悉）</h2><h4 id="算法思路：-1"><a href="#算法思路：-1" class="headerlink" title="算法思路："></a>算法思路：</h4><p>每次将一个元素插入到一个有序的数组里，使之成为一个更长的有序数组，有限次操作之后，数组整体有序。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/710dd138492c0da4324657033971f3bee0355514f2ab2834756c988a90398cbb-file_1585624920301" alt="img"></p>
<p>图片来自「力扣」第 147 题：<a href="https://leetcode-cn.com/problems/insertion-sort-list/">对链表进行插入排序</a>。</p>
<h4 id="算法实现：-1"><a href="#算法实现：-1" class="headerlink" title="算法实现："></a>算法实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-15 9:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InjectionSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="type">InjectionSort</span> <span class="variable">sort</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InjectionSort</span>();</span><br><span class="line">        <span class="type">int</span>[] sortArray = sort.sortArray(nums);</span><br><span class="line">        System.out.println(Arrays.toString(sortArray));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入排序，稳定排序，在接近有序的情况下，表现比较好</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortArray(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将num[i]插入到区间[0,i]使之仍然是有序数据，初始有序数组区间为为[0,0]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="comment">//使用一个临时变量保存nums[i]，然后将i之前的元素后移，然后插入i</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="comment">//nums[j - 1] &gt; temp是寻找插入位置</span></span><br><span class="line">            <span class="comment">//j &gt; 0是边界条件</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; nums[j - <span class="number">1</span>] &gt; temp) &#123;</span><br><span class="line">                <span class="comment">//元素后移</span></span><br><span class="line">                nums[j] = nums[j - <span class="number">1</span>];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//插入操作</span></span><br><span class="line">            nums[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h4><ul>
<li>插入排序在“几乎有序”的数组和“短数组”中表现良好，因此<strong>在小区间内执行排序任务的时候可以使用插入排序。</strong></li>
<li>由于我们的内层循环的判断条件是<code>nums[j-1] &gt; temp</code>，所以在数组几乎有序的情况下，插入排序的时间复杂度可以达到O(N)。</li>
</ul>
<h4 id="复杂度分析：-1"><a href="#复杂度分析：-1" class="headerlink" title="复杂度分析："></a>复杂度分析：</h4><ul>
<li>时间复杂度：O(N<sup>2</sup>)，N为数组长度。</li>
<li>空间复杂度：O(1)，只使用到了常数个临时变量。</li>
</ul>
<h2 id="3-归并排序（重点）"><a href="#3-归并排序（重点）" class="headerlink" title="3.归并排序（重点）"></a>3.归并排序（<em>重点</em>）</h2><h4 id="算法思路：-2"><a href="#算法思路：-2" class="headerlink" title="算法思路："></a>算法思路：</h4><ul>
<li>基本思路：借助额外空间，合并两个有序数组，使之成为一个更长的有序数组。</li>
<li>算法思想：分治思想。</li>
</ul>
<blockquote>
<p>大佬建议：「归并排序」是理解「递归思想」的非常好的学习材料，大家可以通过理解：递归完成以后，合并两个有序数组的这一步骤，想清楚程序的执行流程。即「递归函数执行完成以后，我们还可以做点事情」。因此，「归并排序」我个人觉得非常重要，一定要掌握。</p>
<p>作者：liweiwei1419<br>链接：<a href="https://leetcode.cn/problems/sort-an-array/solution/fu-xi-ji-chu-pai-xu-suan-fa-java-by-liweiwei1419/">https://leetcode.cn/problems/sort-an-array/solution/fu-xi-ji-chu-pai-xu-suan-fa-java-by-liweiwei1419/</a></p>
</blockquote>
<h4 id="算法实现：-2"><a href="#算法实现：-2" class="headerlink" title="算法实现："></a>算法实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-15 9:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSort</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line">        sort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 归并排序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="comment">//只有一个元素，肯定是有序的，递归出口</span></span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将数组分成两半</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//对左边进行排序</span></span><br><span class="line">        sort(nums, left, mid);</span><br><span class="line">        <span class="comment">//对右边进行排序</span></span><br><span class="line">        sort(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="comment">//归并</span></span><br><span class="line">        merge(nums, left, mid + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] merge(<span class="type">int</span>[] nums, <span class="type">int</span> leftPtr, <span class="type">int</span> rightPtr, <span class="type">int</span> rightBound) &#123;</span><br><span class="line">        <span class="comment">//辅助数组，用于每次存储每次排序好的数组</span></span><br><span class="line">        <span class="type">int</span>[] help = <span class="keyword">new</span> <span class="title class_">int</span>[rightBound - leftPtr + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> rightPtr - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//左部分数组的开始指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> leftPtr;</span><br><span class="line">        <span class="comment">//右部分数组的开始指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> rightPtr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将两个数组进行归并</span></span><br><span class="line">        <span class="keyword">while</span> (p1 &lt;= mid &amp;&amp; p2 &lt;= rightBound) &#123;</span><br><span class="line">            help[i++] = nums[p1] &lt;= nums[p2] ? nums[p1++] : nums[p2++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//要么p1越界，要么p2越界</span></span><br><span class="line">        <span class="keyword">while</span> (p1 &lt;= mid) &#123;</span><br><span class="line">            help[i++] = nums[p1++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (p2 &lt;= rightBound) &#123;</span><br><span class="line">            help[i++] = nums[p2++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把排序好的数组刷回去</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; help.length; i++) &#123;</span><br><span class="line">            nums[leftPtr + i] = help[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="总结：-2"><a href="#总结：-2" class="headerlink" title="总结："></a>总结：</h4><ul>
<li>将无序数组拆分，排序后再合并成大的有序数组。</li>
</ul>
<h4 id="复杂度分析：-2"><a href="#复杂度分析：-2" class="headerlink" title="复杂度分析："></a><strong>复杂度分析</strong>：</h4><ul>
<li>时间复杂度：O(N <sub>log</sub> N)，这里 N<em>N</em> 是数组的长度；</li>
<li>空间复杂度：O(N)，辅助数组与输入数组规模相当。</li>
</ul>
<hr>
<h2 id="4-冒泡排序"><a href="#4-冒泡排序" class="headerlink" title="4.冒泡排序"></a>4.冒泡排序</h2><h3 id="算法思路：-3"><a href="#算法思路：-3" class="headerlink" title="算法思路："></a>算法思路：</h3><p>两两交换，⼤的放在后⾯，第⼀次排序后最⼤值已在数组末尾。<strong>因为两两交换，需要 n-1 趟排序</strong>（⽐如10个数，需要9趟排序）</p>
<h3 id="算法实现：-3"><a href="#算法实现：-3" class="headerlink" title="算法实现："></a>算法实现：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">        sort(nums);</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//外层循环控制排序的趟数，一共n - 1趟</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设定一个标记，若为true，则表示此次循环没有进行交换，也就是待排序列已经有序，排序已经完成。</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//内层循环控制比较的次数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; len - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="comment">//如果前一位比后一位大，则交换</span></span><br><span class="line">                <span class="keyword">if</span> (nums[j] &gt; nums[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[j];</span><br><span class="line">                    nums[j] = nums[j + <span class="number">1</span>];</span><br><span class="line">                    nums[j + <span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果当前趟没有元素交换，则证明数组已经排好序</span></span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="复杂度分析：-3"><a href="#复杂度分析：-3" class="headerlink" title="复杂度分析："></a>复杂度分析：</h3><ul>
<li>时间复杂度：O(N<sup>2</sup>)</li>
<li>空间复杂度：O(1)</li>
</ul>
<h2 id="5-快速排序"><a href="#5-快速排序" class="headerlink" title="5.快速排序"></a>5.快速排序</h2><h3 id="算法思路：-4"><a href="#算法思路：-4" class="headerlink" title="算法思路："></a>算法思路：</h3><p>数组中找⼀个元素(节点)，⽐它⼩的放在节点的左边，⽐它⼤的放在节点右边。⼀趟下来，⽐节点⼩的在<br>左边，⽐节点⼤的在右边。不断执⾏这个操作….</p>
<h3 id="算法实现：-4"><a href="#算法实现：-4" class="headerlink" title="算法实现："></a>算法实现：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">        quickSort(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 待排序数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left 数组第一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 数组最后一个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> right;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//选取数组中间元素为基准</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> nums[left + (right - left) / <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= j)&#123;</span><br><span class="line">            <span class="comment">//寻找左边第一个比基准大的节点</span></span><br><span class="line">            <span class="keyword">while</span> (pivot &gt; nums[i])&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//寻找右边第一个比基准小的节点</span></span><br><span class="line">            <span class="keyword">while</span> (pivot &lt; nums[j])&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//此时找到了左边第一个比基准大的节点和右边第一个比基准小的节点</span></span><br><span class="line">            <span class="comment">//将它们交换</span></span><br><span class="line">            <span class="keyword">if</span> (i &lt;= j)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                nums[j] = temp;</span><br><span class="line">                <span class="comment">//记得更新i和j的值</span></span><br><span class="line">                i++;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//递归对基准左边的数组排序,直到左边只剩一个数（递归出口）</span></span><br><span class="line">            <span class="keyword">if</span> (left &lt; j)&#123;</span><br><span class="line">                quickSort(nums,left,j);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//递归对基准右边的数组排序，直到右边只剩一个数（递归出口）</span></span><br><span class="line">            <span class="keyword">if</span> (right &gt; i)&#123;</span><br><span class="line">                quickSort(nums,i,right);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="复杂度分析：-4"><a href="#复杂度分析：-4" class="headerlink" title="复杂度分析："></a>复杂度分析：</h3><p>时间复杂度：O(N log N)<br>空间复杂度：O(logN)，这里占用的空间主要来自递归函数的栈空间。</p>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务视频推荐</title>
    <url>/posts/1651592173.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script>]]></content>
      <categories>
        <category>学习视频推荐</category>
      </categories>
  </entry>
  <entry>
    <title>操作系统面试题整理</title>
    <url>/posts/1443169507.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="一、操作系统基础"><a href="#一、操作系统基础" class="headerlink" title="一、操作系统基础"></a>一、操作系统基础</h2><h3 id="1-什么是操作系统？"><a href="#1-什么是操作系统？" class="headerlink" title="1.什么是操作系统？"></a>1.什么是操作系统？</h3><ul>
<li>操作系统本质上是一个运行在计算机上的软件程序，用于管理计算机硬件和软件资源。</li>
<li>操作系统的存在屏蔽了硬件的复杂性，它像是硬件使用的负责人，统筹着各种相关事项。</li>
<li>操作系统的内核(Kernel)是操作系统的核心部分，主要负责系统内存、软件设备、文件系统和应用程序的管理。内核是连接应用程序和硬件的桥梁，决定着系统的性能和稳定性。</li>
</ul>
<h3 id="2-什么是系统调用？"><a href="#2-什么是系统调用？" class="headerlink" title="2.什么是系统调用？"></a>2.什么是系统调用？</h3><p>根据进程访问资源的特点，可以把进程在系统上的运行分为两个级别：</p>
<ul>
<li><strong>用户态：</strong>用户态运行的进程只可以读取用户程序的数据。</li>
<li><strong>系统态：</strong>系统态运行的进程或者程序几乎可以访问计算机的任何资源，不受限制。</li>
</ul>
<h5 id="系统调用："><a href="#系统调用：" class="headerlink" title="系统调用："></a>系统调用：</h5><p>我们运行的程序基本都是运行在用户态，如果我们调用操作系统提供的系统态级别的子功能，就需要进行系统调用。</p>
<p>也就是说我们运行的用户程序中，凡是和系统态级别的资源有关的操作(比如文件管理、进程控制、内存管理等)，都必须<strong>通过系统调用的方式向操作系统提出服务请求</strong>，并且由操作系统代为完成。</p>
<p>系统调用按照功能大致可以分为以下几类：</p>
<ul>
<li><strong>设备管理：</strong>完成设备的请求或释放，以及设备启动等功能。</li>
<li><strong>文件管理：</strong>完成文件的读、写、创建及删除等功能。</li>
<li><strong>进程控制：</strong>完成进程的创建、撤销、阻塞及唤醒等功能。</li>
<li><strong>进程通信：</strong>完成进程之间的消息传递或信号传递等功能。</li>
<li><strong>内存管理：</strong>完成内存的分配、回收以及获取作业占用内存区大小及地址等功能。</li>
</ul>
<hr>
<h2 id="二、进程与线程"><a href="#二、进程与线程" class="headerlink" title="二、进程与线程"></a>二、进程与线程</h2><h3 id="1-线程、程序、进程的基本概念。以及他们之间的关系。"><a href="#1-线程、程序、进程的基本概念。以及他们之间的关系。" class="headerlink" title="1.线程、程序、进程的基本概念。以及他们之间的关系。"></a>1.线程、程序、进程的基本概念。以及他们之间的关系。</h3><ul>
<li><p><strong>程序：</strong>是为了完成特定任务、用某种语言编写的一组指令的集合，是静态的代码</p>
</li>
<li><p><strong>进程：</strong></p>
</li>
<li><ul>
<li>进程是<strong>程序的一次执行过程</strong>，或者说是<strong>正在运行的一个程序，</strong>是系统运行程序的基本单位，比如我们使用QQ，就启动了一个进程，操作系统会为该进程分配内存空间。进程是动态的，有创建、运行、和销毁的过程。</li>
</ul>
</li>
<li><p><strong>线程：</strong></p>
</li>
<li><ul>
<li><strong>概念：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>线程是由进程创建出来的，是进程的一个实体</li>
<li>一个进程可以拥有多个线程，比如迅雷同时下载多个文件，QQ打开多个聊天窗口，可将这些看为进程里的线程。</li>
</ul>
</li>
</ul>
</li>
<li><p>线程是进程划分的更小的单位。<strong>线程与进程最大的不同在于不同的进程是相互独立的，而同一进程中的线程是有极大的可能会相互影响的。</strong></p>
</li>
<li><p>与进程不同的是同类的<strong>多个线程共享进程的堆和方法区资源</strong>，但是每个线程都有自己的<strong>程序计数器</strong>、<strong>虚拟机栈</strong>和<strong>本地方法栈</strong>，所以系统在产生一个线程或者在各个线程之间做切换工作时，负担要比进程小的多，也正因为如此，线程也被称为<strong>轻量级进程</strong>。</p>
</li>
<li><p><strong>总结：</strong> </p>
<ul>
<li>线程是进程划分成的更小的运行单位，一个进程在其执行的过程中可以产生多个线程。</li>
<li>线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。</li>
<li>线程执行开销小，但不利于资源的管理和保护；而进程正相反。</li>
</ul>
</li>
</ul>
<h3 id="2-进程有哪几种状态"><a href="#2-进程有哪几种状态" class="headerlink" title="2.进程有哪几种状态?"></a>2.进程有哪几种状态?</h3><ul>
<li><strong>创建状态(new)</strong> ：进程正在被创建，尚未到就绪状态。</li>
<li><strong>就绪状态(ready)</strong> ：进程已处于准备运行状态，即进程获得了除了处理器之外的一切所需资源，一旦得到处理器资源(处理器分配的时间片)即可运行。</li>
<li><strong>运行状态(running)</strong> ：进程正在处理器上上运行(单核 CPU 下任意时刻只有一个进程处于运行状态)。</li>
<li><strong>阻塞状态(waiting)</strong> ：又称为等待状态，进程正在等待某一事件而暂停运行如等待某资源为可用或等待 IO 操作完成。即使处理器空闲，该进程也不能运行。</li>
<li><strong>结束状态(terminated)</strong> ：进程正在从系统中消失。可能是进程正常结束或其他原因中断退出运行。</li>
</ul>
<h3 id="3-进程间常见的通信方式？"><a href="#3-进程间常见的通信方式？" class="headerlink" title="3.进程间常见的通信方式？"></a>3.进程间常见的通信方式？</h3><h4 id="进程通信概念："><a href="#进程通信概念：" class="headerlink" title="进程通信概念："></a>进程通信概念：</h4><p>每个进程各自有不同的用户地址空间，任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核，在内核中开辟一块缓冲区，进程1把数据从用户空间拷到内核缓冲区，进程2再从内核缓冲区把数据读走，内核提供的这种机制称为<strong>进程间通信（IPC，InterProcess Communication）</strong>。</p>
<p>常见的七种进程间通信方式：</p>
<ol>
<li><strong>管道&#x2F;匿名管道(Pipes)</strong> ：管道的实质是一个内核缓冲区，进程以先进先出的方式从缓冲区存取数据，管道一端的进程顺序的将数据写入缓冲区，另一端的进程则顺序的读出数据。只能用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。并且管道是半双工的，数据只能单向流动；需要双方通信时，需要建立起两个管道。</li>
<li><strong>有名管道(Names Pipes)</strong> : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循**先进先出(first in first out)**。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程之间的通信。</li>
<li><strong>信号(Signal)</strong> ：信号是Linux系统中用于进程间互相通信或者操作的一种机制，信号可以在任何时候发给某一进程，而无需知道该进程的状态。</li>
<li><strong>消息队列(Message Queuing)</strong> ：<ol>
<li>消息队列是消息的链表，具有特定的格式，存放在内存中并由消息队列标识符标识。</li>
<li>管道和消息队列的通信数据都是先进先出的原则。</li>
<li>与管道（无名管道：只存在于<strong>内存</strong>中的文件；有名管道：存在于实际的<strong>磁盘</strong>介质或者文件系统）不同的是消息队列存放在<strong>内核</strong>中，只有在内核重启(即，操作系统重启)或者显示地删除一个消息队列时，该消息队列才会被真正的删除。</li>
<li>消息队列可以实现消息的随机查询，消息不一定要以先进先出的次序读取，也可以按消息的类型读取.比 FIFO 更有优势。</li>
<li><strong>消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。</strong></li>
</ol>
</li>
<li><strong>信号量(Semaphores)</strong> ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。</li>
<li><strong>共享内存(Shared memory)</strong> ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。这种方式需要依靠某种同步操作，如互斥锁和信号量等。</li>
<li><strong>套接字(Sockets)</strong> : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP&#x2F;IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。</li>
</ol>
<h3 id="4-线程间同步的方式有哪些？"><a href="#4-线程间同步的方式有哪些？" class="headerlink" title="4.线程间同步的方式有哪些？"></a>4.线程间同步的方式有哪些？</h3><p>线程同步是指两个或多个<strong>共享关键资源</strong>的线程的并发执行。应该同步线程以避免关键的资源使用冲突。</p>
<p>操作系统中一般有三种线程同步的方式：</p>
<ol>
<li><strong>互斥量（Mutex）</strong>：采用互斥对象机制，只有拥有互斥对象的线程才能有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键字和各种锁都是这种机制。</li>
<li>**信号量(Semphares)**：允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。</li>
<li>**事件(Event)**：通过wait()和notify()的通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。</li>
</ol>
<h3 id="5-进程的调度算法有哪些？"><a href="#5-进程的调度算法有哪些？" class="headerlink" title="5.进程的调度算法有哪些？"></a>5.进程的调度算法有哪些？</h3><p>为了确定首先执行哪个进程以及最后执行哪个进程以实现最大 CPU 利用率，计算机科学家已经定义了一些算法，它们是：</p>
<ul>
<li><strong>先到先服务(FCFS)调度算法</strong> : 从就绪队列中选择一个<strong>最先进入该队列的进程</strong>为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。</li>
<li><strong>短作业优先(SJF)的调度算法</strong> : 从就绪队列中选出一个<strong>估计运行时间最短的进程</strong>为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。</li>
<li><strong>时间片轮转调度算法</strong> : 时间片轮转调度是一种最古老，最简单，<strong>最公平且使用最广的算法</strong>，又称 RR(Round robin)调度。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。</li>
<li><strong>多级反馈队列调度算法</strong> ：<ul>
<li>前面介绍的几种进程调度的算法都有一定的局限性。如<strong>短作业优先的调度算法，仅照顾了短进程而忽略了长进程</strong> 。</li>
<li>多级反馈队列调度算法是一种根据先来先服务原则给就绪队列排序，为就绪队列赋予不同的优先级数，不同的时间片，按照优先级抢占CPU的调度算法。</li>
<li>多级反馈队列调度算法既能使高优先级的作业得到响应又能使短作业（进程）迅速完成。，因而它是目前<strong>被公认的一种较好的进程调度算法</strong>，UNIX 操作系统采取的便是这种调度算法。</li>
</ul>
</li>
<li><strong>优先级调度</strong> ： 为每个进程分配优先级，首先执行具有最高优先级的进程，依此类推。具有相同优先级的进程以先到先服务的方式执行。也可以根据内存要求，时间要求或任何其他资源要求来确定优先级。</li>
</ul>
<hr>
<h2 id="三、内存管理"><a href="#三、内存管理" class="headerlink" title="三、内存管理"></a>三、内存管理</h2><h3 id="1-操作系统的内存管理是做什么的？"><a href="#1-操作系统的内存管理是做什么的？" class="headerlink" title="1.操作系统的内存管理是做什么的？"></a>1.操作系统的内存管理是做什么的？</h3><p>操作系统的内存管理主要负责内存的分配与回收（malloc 函数：申请内存，free 函数：释放内存），另外地址转换也就是将逻辑地址转换成相应的物理地址等功能也是操作系统内存管理做的事情。</p>
<h3 id="2-常见的几种内存管理机制"><a href="#2-常见的几种内存管理机制" class="headerlink" title="2.常见的几种内存管理机制"></a>2.常见的几种内存管理机制</h3><p>内存管理方式简单分为<strong>连续分配管理方式</strong>和<strong>非连续分配管理方式</strong>这两种。连续分配管理方式是指为一个用户程序分配一个连续的内存空间，常见的如 <strong>块式管理</strong> 。同样地，非连续分配管理方式允许一个用户程序使用的内存分布在离散或者说不相邻的内存中，常见的如<strong>页式管理</strong> 和 <strong>段式管理</strong>和<strong>段页式管理</strong>。</p>
<ol>
<li><strong>块式管理</strong> ：将内存分为几个固定大小的块，每个块中只包含一个进程。如果程序运行需要内存的话，操作系统就分配给它一块，如果程序运行只需要很小的空间的话，分配的这块内存很大一部分几乎被浪费了。这些在每个块中未被利用的空间，我们称之为碎片。</li>
<li><strong>页式管理</strong> ：把主存分为大小相等且固定的一页一页的形式，页较小，相对相比于块式管理的划分力度更大，提高了内存利用率，减少了碎片。页式管理通过页表对应逻辑地址和物理地址。</li>
<li><strong>段式管理</strong> ： 页式管理虽然提高了内存利用率，但是页式管理其中的页实际并无任何实际意义。 段式管理把主存分为一段段的，每一段的空间又要比一页的空间小很多 。<strong>但是，最重要的是段是有实际意义的，每个段定义了一组逻辑信息</strong>，例如，有主程序段 MAIN、子程序段 X、数据段 D 及栈段 S 等。 段式管理通过段表对应逻辑地址和物理地址。</li>
<li><strong>段页式管理机制</strong> 。段页式管理机制结合了段式管理和页式管理的优点。简单来说段页式管理机制就是把主存先分成若干段，每个段又分成若干页，也就是说 <strong>段页式管理机制</strong> 中段与段之间以及段的内部的都是离散的。</li>
</ol>
<h3 id="3-快表和多级页表"><a href="#3-快表和多级页表" class="headerlink" title="3.快表和多级页表"></a>3.快表和多级页表</h3><p>在页式内存管理中有很重要的两点需要解决：</p>
<ol>
<li>虚拟地址到物理地址的转换速度的问题。</li>
<li>虚拟地址空间大，页表也会很大的问题。</li>
</ol>
<h4 id="快表："><a href="#快表：" class="headerlink" title="快表："></a>快表：</h4><p>为了解决虚拟地址到物理地址的转换速度，操作系统才页式管理方案的基础上引入了快表来加速虚拟地址到物理地址的转换。可以把快表理解为一种特殊的高速缓冲存储器（Cache），其中的内容是页表的一部分或者全部内容。作为页表的 Cache，它的作用与页表相似，但是提高了访问速率。由于采用页表做地址转换，读写内存数据时 CPU 要访问两次主存。有了快表，有时只要访问一次高速缓冲存储器，一次主存，这样可加速查找并提高指令执行速度。</p>
<p><strong>使用快表之后的地址转换流程：</strong></p>
<ol>
<li>根据虚拟地址中的页号查快表；</li>
<li>如果该页在快表中，直接从快表中读取相应的物理地址；</li>
<li>如果该页不在快表中，就访问内存中的页表，再从页表中得到物理地址，同时将页表中的该映射表项添加到快表中；</li>
<li>当快表填满后，又要登记新页时，就按照一定的淘汰策略淘汰掉快表中的一个页。</li>
</ol>
<p>我们平时开发系统使用的缓存（比如 Redis）就是根据这个思想做的。</p>
<h4 id="多级页表："><a href="#多级页表：" class="headerlink" title="多级页表："></a>多级页表：</h4><p>为了解决解决虚拟地址空间大，页表也会很大的问题，操作系统引入了多节页表。</p>
<p>引入多级页表的主要目的是为了避免把全部页表一直放在内存中占用过多空间，特别是那些根本就不需要的页表就不需要保留在内存中。多级页表属于时间换空间的典型场景。</p>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>为了提高内存的空间性能，提出了多级页表的概念；但是提到空间性能是以浪费时间性能为基础的，因此为了补充损失的时间性能，提出了快表（即 TLB）的概念。 </p>
<h3 id="4-分页机制和分段机制的共同点和区别？"><a href="#4-分页机制和分段机制的共同点和区别？" class="headerlink" title="4.分页机制和分段机制的共同点和区别？"></a>4.分页机制和分段机制的共同点和区别？</h3><ol>
<li><strong>共同点</strong><ul>
<li>分页机制和分段机制都是为了提高内存利用率，较少内存碎片。</li>
<li>页和段都是离散存储的，所以两者都是离散分配内存的方式。但是，每个页和段中的内存是连续的。</li>
</ul>
</li>
<li><strong>区别</strong><ul>
<li>页的大小是固定的，由操作系统决定；而段的大小不固定，取决于我们当前运行的程序。</li>
<li>分页仅仅是为了满足操作系统内存管理的需求，而段是逻辑信息的单位，在程序中可以体现为代码段，数据段，能够更好满足用户的需要。</li>
</ul>
</li>
</ol>
<h3 id="5-逻辑（虚拟）地址和物理地址？"><a href="#5-逻辑（虚拟）地址和物理地址？" class="headerlink" title="5.逻辑（虚拟）地址和物理地址？"></a>5.逻辑（虚拟）地址和物理地址？</h3><p>我们编程一般只可能和逻辑地址打交道，比如在 C 语言中，指针里面存储的数值就可以理解成为内存里的一个地址，这个地址也就是我们说的逻辑地址，<strong>逻辑地址由操作系统决定</strong>。物理地址指的是真实物理内存中地址，更具体一点来说就是内存地址寄存器中的地址。<strong>物理地址是内存单元真正的地址</strong>。</p>
<h3 id="6-为什么要有虚拟地址？"><a href="#6-为什么要有虚拟地址？" class="headerlink" title="6.为什么要有虚拟地址？"></a>6.为什么要有虚拟地址？</h3><p>如果没有虚拟地址空间的时候，<strong>程序都是直接访问和操作的都是物理内存</strong> 。</p>
<p>这样就会产生很多问题：</p>
<ol>
<li>用户程序可以访问任意内存，寻址内存的每个字节，这样就很容易（有意或者无意）破坏操作系统，造成操作系统崩溃。</li>
<li>想要同时运行多个程序特别困难，比如你想同时运行一个微信和一个 QQ 音乐都不行。为什么呢？举个简单的例子：微信在运行的时候给内存地址 1xxx 赋值后，QQ 音乐也同样给内存地址 1xxx 赋值，那么 QQ 音乐对内存的赋值就会覆盖微信之前所赋的值，这就造成了微信这个程序就会崩溃。</li>
</ol>
<p><strong>总结来说：如果直接把物理地址暴露出来的话会带来严重问题，比如可能对操作系统造成伤害以及给同时运行多个程序造成困难。</strong></p>
<p>通过虚拟地址访问内存有以下<strong>优势：</strong></p>
<ul>
<li>程序可以使用一系列相邻的虚拟地址来访问物理内存中不相邻的内存缓冲区。</li>
<li>程序可以使用一系列虚拟地址来访问大于可用物理内存的内存缓冲区。当物理内存的供应量变小时，内存管理器会将物理内存页（通常大小为 4 KB）保存到磁盘文件。数据或代码页会根据需要在物理内存与磁盘之间进行传输。<strong>相当于用时间换空间。</strong></li>
<li>不同进程使用的虚拟地址彼此隔离。一个进程中的代码无法更改正在由另一进程或操作系统使用的物理内存。</li>
</ul>
<hr>
<h2 id="四、虚拟内存"><a href="#四、虚拟内存" class="headerlink" title="四、虚拟内存"></a>四、虚拟内存</h2><h3 id="1-什么是虚拟内存？"><a href="#1-什么是虚拟内存？" class="headerlink" title="1.什么是虚拟内存？"></a>1.什么是虚拟内存？</h3><p><strong>虚拟内存</strong>是计算机系统内存管理的一种技术，虚拟内存不只是“使用硬盘空间来扩展内存“的技术。<strong>虚拟内存的重要意义是它定义了一个连续的虚拟地址空间</strong>，并且 <strong>把内存扩展到硬盘空间</strong>。</p>
<p><strong>虚拟内存</strong> 使得应用程序认为它拥有连续的可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换。</p>
<p>与没有使用虚拟内存技术的系统相比，使用这种技术的系统使得大型程序的编写变得更容易，对真正的物理内存（例如 RAM）的使用也更有效率。</p>
<p>目前，大多数操作系统都使用了虚拟内存，如 Windows 家族的“虚拟内存”；Linux 的“交换空间”等。</p>
<h3 id="2-什么是局部性原理？"><a href="#2-什么是局部性原理？" class="headerlink" title="2.什么是局部性原理？"></a>2.什么是局部性原理？</h3><p>局部性原理是虚拟内存技术的基础，正是因为程序运行具有局部性原理，才可以只装入部分程序到内存就开始运行。</p>
<p>局部性原理表现在以下两个方面：</p>
<ol>
<li><strong>时间局部性</strong> ：如果程序中的某条指令一旦执行，不久以后该指令可能再次执行；如果某数据被访问过，不久以后该数据可能再次被访问。产生时间局部性的典型原因，是由于在程序中存在着大量的循环操作。</li>
<li><strong>空间局部性</strong> ：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也将被访问，即程序在一段时间内所访问的地址，可能集中在一定的范围之内，这是因为指令通常是顺序存放、顺序执行的，数据也一般是以向量、数组、表等形式簇聚存储的。</li>
</ol>
<p>时间局部性是通过将近来使用的指令和数据保存到高速缓存存储器中，并使用高速缓存的层次结构实现。</p>
<p>空间局部性通常是使用较大的高速缓存，并将预取机制集成到高速缓存控制逻辑中实现。</p>
<p>虚拟内存技术实际上就是建立了 “内存一外存”的两级存储器的结构，利用局部性原理实现髙速缓存。</p>
<h3 id="3-虚拟存储器"><a href="#3-虚拟存储器" class="headerlink" title="3.虚拟存储器"></a>3.虚拟存储器</h3><p>基于局部性原理，在程序装入时，可以将程序的一部分装入内存，而将其他部分留在外存，就可以启动程序执行。</p>
<p>由于外存往往比内存大很多，所以我们运行的软件的内存大小实际上是可以比计算机系统实际的内存大小大的。</p>
<p>在程序执行过程中，当所访问的信息不在内存时，由操作系统将所需要的部分调入内存，然后继续执行程序。</p>
<p>另一方面，操作系统将内存中暂时不使用的内容换到外存上，从而腾出空间存放将要调入内存的信息。</p>
<p>这样，计算机好像为用户提供了一个比实际内存大的多的存储器——<strong>虚拟存储器</strong>。</p>
<p><strong>实际上，我觉得虚拟内存同样是一种时间换空间的策略，你用 CPU 的计算时间，页的调入调出花费的时间，换来了一个虚拟的更大的空间来支持程序的运行。不得不感叹，程序世界几乎不是时间换空间就是空间换时间。</strong></p>
<h3 id="4-虚拟内存的技术实现"><a href="#4-虚拟内存的技术实现" class="headerlink" title="4.虚拟内存的技术实现"></a>4.虚拟内存的技术实现</h3><p><strong>虚拟内存的实现需要建立在离散分配的内存管理方式的基础上。</strong> </p>
<p>虚拟内存的实现有以下三种方式：</p>
<ol>
<li><strong>请求分页存储管理</strong> ：建立在分页管理之上，为了支持虚拟存储器功能而增加了请求调页功能和页面置换功能。请求分页是目前最常用的一种实现虚拟存储器的方法。请求分页存储管理系统中，在作业开始运行之前，仅装入当前要执行的部分段即可运行。假如在作业运行的过程中发现要访问的页面不在内存，则由处理器通知操作系统按照对应的页面置换算法将相应的页面调入到主存，同时操作系统也可以将暂时不用的页面置换到外存中。</li>
<li><strong>请求分段存储管理</strong> ：建立在分段存储管理之上，增加了请求调段功能、分段置换功能。请求分段储存管理方式就如同请求分页储存管理方式一样，在作业开始运行之前，仅装入当前要执行的部分段即可运行；在执行过程中，可使用请求调入中断动态装入要访问但又不在内存的程序段；当内存空间已满，而又需要装入新的段时，根据置换功能适当调出某个段，以便腾出空间而装入新的段。</li>
<li><strong>请求段页式存储管理</strong></li>
</ol>
<h4 id="请求分页存储管理和分页存储管理的区别"><a href="#请求分页存储管理和分页存储管理的区别" class="headerlink" title="请求分页存储管理和分页存储管理的区别"></a>请求分页存储管理和分页存储管理的区别</h4><p>它们之间的根本区别在于是否将一作业的全部地址空间同时装入主存。</p>
<p>请求分页存储管理不要求将作业全部地址空间同时装入主存。</p>
<p>基于这一点，请求分页存储管理可以提供虚存，而分页存储管理却不能提供虚存。</p>
<p>不管是上面那种实现方式，我们一般都需要：</p>
<ol>
<li>一定容量的内存和外存：在载入程序的时候，只需要将程序的一部分装入内存，而将其他部分留在外存，然后程序就可以执行了；</li>
<li><strong>缺页中断</strong>：如果<strong>需执行的指令或访问的数据尚未在内存</strong>（称为缺页或缺段），则由处理器通知操作系统将相应的页面或段<strong>调入到内存</strong>，然后继续执行程序；</li>
<li><strong>虚拟地址空间</strong> ：逻辑地址到物理地址的变换。</li>
</ol>
<h3 id="5-页面置换算法"><a href="#5-页面置换算法" class="headerlink" title="5.页面置换算法"></a>5.页面置换算法</h3><p>地址映射过程中，若在页面中发现所要访问的页面不在内存中，则称为发生了缺页中断 。</p>
<blockquote>
<p><strong>缺页中断</strong> 就是要访问的<strong>页</strong>不在主存，需要操作系统将其调入主存后再进行访问。 在这个时候，被内存映射的文件实际上成了一个分页交换文件。</p>
</blockquote>
<p>当发生缺页中断时，如果当前内存中并没有空闲的页面，操作系统就必须在内存选择一个页面将其移出内存，以便为即将调入的页面让出空间。</p>
<p>用来选择淘汰哪一页的规则叫做页面置换算法，我们<strong>可以把页面置换算法看成是淘汰页面的规则。</strong></p>
<ul>
<li><strong>OPT 页面置换算法（最佳页面置换算法）</strong> ：最佳(Optimal， OPT)置换算法所选择的被淘汰页面将是以后永不使用的，或者是在最长时间内不再被访问的页面，这样可以保证获得最低的缺页率。但由于人们目前无法预知进程在内存下的若千页面中哪个是未来最长时间内不再被访问的，因而该算法无法实现。一般作为衡量其他置换算法的方法。</li>
<li><strong>FIFO（First In First Out） 页面置换算法（先进先出页面置换算法）</strong> : 总是淘汰最先进入内存的页面，即选择在内存中驻留时间最久的页面进行淘汰。</li>
<li><strong>LRU （Least Currently Used）页面置换算法（最近最久未使用页面置换算法）</strong> ：LRU算法赋予每个页面一个访问字段，用来记录一个页面自上次被访问以来所经历的时间 T，当须淘汰一个页面时，选择现有页面中其 T 值最大的，即最近最久未使用的页面予以淘汰。</li>
<li><strong>LFU （Least Frequently Used）页面置换算法（最少使用页面置换算法）</strong> : 该置换算法选择在之前时期使用最少的页面作为淘汰页。</li>
</ul>
<p>参考文章：</p>
<p><a href="https://snailclimb.gitee.io/javaguide-interview/#/">JavaGuide哥的面试突击版</a></p>
<p><a href="https://www.jianshu.com/p/c1015f5ffa74">进程间通信</a></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>数据解析</title>
    <url>/posts/3105981009.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="1-XPath"><a href="#1-XPath" class="headerlink" title="1. XPath"></a>1. XPath</h1><h2 id="1-1-XPath简介"><a href="#1-1-XPath简介" class="headerlink" title="1.1 XPath简介"></a>1.1 XPath简介</h2><p>XPath，全称是<code>XML Path Language</code>，即XML路径语言，是一门在XML文档中查找信息的语言，也同样适用于HTML文档的搜索。</p>
<h2 id="1-2-XPath使用"><a href="#1-2-XPath使用" class="headerlink" title="1.2 XPath使用"></a>1.2 XPath使用</h2><ol>
<li><p>安装lxml库</p>
<p>pip install lxml -i <a href="https://pypi.douban.com/simple">https://pypi.douban.com/simple</a></p>
</li>
<li><p>导入lxml.etree</p>
<p>from lxml import etree</p>
</li>
<li><p>etree.parse()             解析本地文件</p>
<p>html_tree &#x3D; etree.parse(‘XX.html’)</p>
</li>
<li><p>etree.HTML()            解析服务器响应的文件</p>
<p>html_tree &#x3D; etree.HTML(response.read().decode(‘utf-8’))</p>
</li>
<li><p>html_tree.xpath(‘xpath路径’)</p>
</li>
</ol>
<h2 id="1-2-XPath基本语法"><a href="#1-2-XPath基本语法" class="headerlink" title="1.2 XPath基本语法"></a>1.2 XPath基本语法</h2><ul>
<li>路径查询<ul>
<li>&#x2F;&#x2F;：从当前节点选取子孙节点，不考虑层级关系</li>
<li>&#x2F;：从当前节点选取直接子节点</li>
<li><strong>.</strong> ：选取当前节点</li>
<li><strong>..</strong> :选取当前节点的父节点</li>
</ul>
</li>
<li>谓词查询(<strong>注意单引号和双引号的问题</strong>)<ul>
<li>&#x2F;&#x2F;div[@id]</li>
<li>&#x2F;&#x2F;div[@id &#x3D; “box”]</li>
</ul>
</li>
<li>属性查询<ul>
<li>&#x2F;&#x2F;@class</li>
</ul>
</li>
<li>模糊查询<ul>
<li>&#x2F;&#x2F;div[contains(@id，”he”)]，表示id中包含关键字he的的div标签</li>
<li>&#x2F;&#x2F;div[starts-with(@id，“he”)]，表示id开头是he的的div标签</li>
</ul>
</li>
<li>内容查询<ul>
<li>&#x2F;&#x2F;div&#x2F;h1&#x2F;text()，查看标签内容</li>
</ul>
</li>
<li>逻辑运算<ul>
<li>&#x2F;&#x2F;div[@id &#x3D;”head” and @class &#x3D; “s_down”] </li>
<li>&#x2F;&#x2F;div[@id &#x3D;”head” or @class &#x3D; “s_down”]</li>
</ul>
</li>
</ul>
<h2 id="1-3-实践案例"><a href="#1-3-实践案例" class="headerlink" title="1.3 实践案例"></a>1.3 实践案例</h2><p><strong>获取百度网站的百度一下</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment">#@Time:2022/4/614:32</span></span><br><span class="line"><span class="comment">#@Author:陈 玉 皓</span></span><br><span class="line"><span class="comment">#@File:解析_百度一下.py</span></span><br><span class="line"><span class="comment">#@Sofeware:PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment">#（1）获取网页的源码</span></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">   <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"><span class="comment">#模拟浏览器访问服务器</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"><span class="comment">#获取网页源码</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#（2）解析服务器响应的文件</span></span><br><span class="line">tree = etree.HTML(content)</span><br><span class="line"></span><br><span class="line">result = tree.xpath(<span class="string">&#x27;//span/input[@id=&quot;su&quot;]/@value&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#（3）打印</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<h4 id="获取站长素材前十页的老虎图片"><a href="#获取站长素材前十页的老虎图片" class="headerlink" title="获取站长素材前十页的老虎图片"></a>获取站长素材前十页的老虎图片</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment"># @Time:2022/4/614:54</span></span><br><span class="line"><span class="comment"># @Author:陈 玉 皓</span></span><br><span class="line"><span class="comment"># @File:获取站长素材前十页的老虎图片.py</span></span><br><span class="line"><span class="comment"># @Sofeware:PyCharm</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    <span class="keyword">if</span> page == <span class="number">1</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://sc.chinaz.com/tupian/laohutupian.html&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> &lt; page &lt; <span class="number">7</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://sc.chinaz.com/tupian/laohutupian_&#x27;</span> + <span class="built_in">str</span>(page) + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down_load</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="comment"># 下载图片</span></span><br><span class="line">    tree = etree.HTML(content)</span><br><span class="line">    <span class="comment"># 图片名称列表</span></span><br><span class="line">    name_list = tree.xpath(<span class="string">&#x27;//div[@id= &quot;container&quot;]//a/img/@alt&#x27;</span>)</span><br><span class="line">    <span class="comment"># 图片地址列表</span></span><br><span class="line">    src_list = tree.xpath(<span class="string">&#x27;//div[@id= &quot;container&quot;]/div/div/a/img/@src2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(name_list)):</span><br><span class="line">        name = name_list[i]</span><br><span class="line">        src = src_list[i]</span><br><span class="line">        <span class="comment">#去掉_s就是下的高清图</span></span><br><span class="line">        url = <span class="string">&quot;https:&quot;</span> + src.replace(<span class="string">&quot;_s&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        urllib.request.urlretrieve(url=url, filename=<span class="string">&quot;./tigers/&quot;</span> + name + <span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Think_pwd：214115</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入起始页码:&#x27;</span>))</span><br><span class="line">    end_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入结束页码:&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> end_page &gt; <span class="number">6</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;您输入的页数大于总页数，请输入小于7的数字！&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start_page, end_page + <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># (1) 定制请求对象</span></span><br><span class="line">            request = create_request(page)</span><br><span class="line">            <span class="comment"># (2) 获取响应对象</span></span><br><span class="line">            content = get_content(request)</span><br><span class="line">            <span class="comment"># (3) 下载</span></span><br><span class="line">            down_load(content)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;下载完成！&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="2-Beautiful-Soup"><a href="#2-Beautiful-Soup" class="headerlink" title="2. Beautiful Soup"></a>2. Beautiful Soup</h1><h2 id="2-1-BeautifulSoup简介"><a href="#2-1-BeautifulSoup简介" class="headerlink" title="2.1 BeautifulSoup简介"></a>2.1 BeautifulSoup简介</h2><ol>
<li><p>BeautifulSoup简称： </p>
<ol>
<li>bs4</li>
</ol>
</li>
<li><p>什么是BeatifulSoup？ </p>
<ol>
<li>BeautifulSoup，和lxml一样，是一个html的解析器，主要功能也是解析和提取数据</li>
</ol>
</li>
<li><p>优缺点？ </p>
<ol>
<li>缺点：效率没有lxml的效率高 </li>
<li>优点：接口设计人性化，使用方便</li>
</ol>
</li>
</ol>
<h2 id="2-2-安装以及创建"><a href="#2-2-安装以及创建" class="headerlink" title="2.2 安装以及创建"></a>2.2 安装以及创建</h2><ol>
<li><p>安装</p>
<ol>
<li>pip install bs4</li>
</ol>
</li>
<li><p>导入</p>
<ol>
<li>from bs4 import BeautifulSoup</li>
</ol>
</li>
<li><p>创建对象 </p>
<ol>
<li><p>服务器响应的文件生成对象 </p>
<p>soup &#x3D; BeautifulSoup(response.read().decode(), ‘lxml’) </p>
</li>
<li><p>本地文件生成对象 </p>
<p>soup &#x3D; BeautifulSoup(open(‘1.html’), ‘lxml’)</p>
</li>
</ol>
</li>
</ol>
<p><code>注意：默认打开文件的编码格式gbk所以需要指定打开编码格式</code></p>
<h2 id="2-3-节点定位"><a href="#2-3-节点定位" class="headerlink" title="2.3 节点定位"></a>2.3 节点定位</h2><ul>
<li>方法选择器：<ul>
<li><code>find_all()</code>，查询符合条件的所有元素的一个列表。<ul>
<li><code>name</code>：根据节点名来查询元素。例：<code>find_all(name = &#39;ul&#39;)</code></li>
<li><code>attrs</code>：根据属性来查询元素。例：<code>find_all(attrs = &#123;&#39;id&#39;：&#39;h1&#39;&#125;)</code></li>
<li><code>text</code>：根据传入的字符串或者正则表达式对象来匹配文本。例：<code>find_all(text = re.compile(&#39;link&#39;))</code></li>
</ul>
</li>
<li><code>find()</code>，查询符合条件的所有元素，只返回第一个元素。</li>
</ul>
</li>
<li>CSS选择器<ul>
<li><code>select(根据选择器的到节点对象)【推荐】</code><ul>
<li>根据标签获取节点：<code>select(标签名)</code></li>
<li>根据class获取节点：<code>select(.class)</code></li>
<li>根据id获取节点：<code>select(#id)</code></li>
<li>根据属性获取节点：<code>select(&#39;li[class]&#39;)</code></li>
<li>层级选择器：<ul>
<li>后代选择器：<code>element element</code>：div p</li>
<li>子代选择器：<code>element&gt;element</code>：div &gt; p</li>
<li>同级选择器：<code>element,element</code>：div , p</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>节点信息<ul>
<li>获取节点内容：<ul>
<li>obj.get_text()</li>
<li>obj.string</li>
</ul>
</li>
<li>节点属性：<ul>
<li>tag.name 获取标签名<ul>
<li>tag.name</li>
</ul>
</li>
<li>tag.attrs 将标签属性值作为一个字典返回</li>
</ul>
</li>
<li>获取节点属性<ul>
<li>obj.attr.get(‘title’)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-4-Demo"><a href="#2-4-Demo" class="headerlink" title="2.4 Demo"></a>2.4 Demo</h2><h4 id="获取星巴克菜单中的的菜品名称"><a href="#获取星巴克菜单中的的菜品名称" class="headerlink" title="获取星巴克菜单中的的菜品名称"></a>获取星巴克菜单中的的菜品名称</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.starbucks.com.cn/menu/&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(content,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment">#//ul[@class=&quot;grid padded-3 product&quot;]//strong</span></span><br><span class="line"><span class="comment">#获取食品名称列表</span></span><br><span class="line">name_list = soup.select(<span class="string">&#x27;ul[class=&quot;grid padded-3 product&quot;] strong&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> name_list:</span><br><span class="line">    <span class="comment">#获取节点内容</span></span><br><span class="line">    <span class="built_in">print</span>(name.get_text())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
  </entry>
  <entry>
    <title>瑞吉外卖项目day01笔记</title>
    <url>/posts/1388911163.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="一、-软件开发整体介绍"><a href="#一、-软件开发整体介绍" class="headerlink" title="一、 软件开发整体介绍"></a>一、 软件开发整体介绍</h1><p>作为一名软件开发工程师,我们需要了解在软件开发过程中的开发流程， 以及软件开发过程中涉及到的岗位角色，角色的分工、职责， 并了解软件开发中涉及到的三种软件环境。那么这一小节，我们将从 软件开发流程、角色分工、软件环境 三个方面，来整体上介绍一下软件开发。</p>
<h2 id="1-1-软件开发流程"><a href="#1-1-软件开发流程" class="headerlink" title="1.1 软件开发流程"></a>1.1 软件开发流程</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805192836128.png" alt="image-20220805192836128"></p>
<p><strong>1). 第1阶段: 需求分析</strong></p>
<p>完成产品原型、需求规格说明书的编写。  </p>
<p>产品原型，一般是通过网页(html)的形式展示当前的页面展示什么样的数据, 页面的布局是什么样子的，点击某个菜单，打开什么页面，点击某个按钮，出现什么效果，都可以通过产品原型看到。 </p>
<p>需求规格说明书， 一般来说就是使用 Word 文档来描述当前项目有哪些功能，每一项功能的需求及业务流程是什么样的，都会在文档中描述。</p>
<p><strong>2). 第2阶段: 设计</strong></p>
<p>设计的内容包含 产品设计、UI界面设计、概要设计、详细设计、数据库设计。</p>
<p>在设计阶段，会出具相关的UI界面、及相关的设计文档。比如数据库设计，需要设计当前项目中涉及到哪些数据库，每一个数据库里面包含哪些表，这些表结构之间的关系是什么样的，表结构中包含哪些字段，字段类型都会在文档中描述清楚。</p>
<p><strong>3). 第3阶段: 编码</strong></p>
<p>编写项目代码、并完成单元测试。</p>
<p>作为软件开发工程师，我们主要的工作就是在该阶段， 对分配给我们的模块功能，进行编码实现。编码实现完毕后，进行单元测试，单元测试通过后再进入到下一阶段。</p>
<p><strong>4). 第4阶段: 测试</strong></p>
<p>在该阶段中主要由测试人员, 对部署在测试环境的项目进行功能测试, 并出具测试报告。</p>
<p><strong>5). 第5阶段: 上线运维</strong></p>
<p>在项目上线之前， 会由运维人员准备服务器上的软件环境安装、配置， 配置完毕后， 再将我们开发好的项目，部署在服务器上运行。</p>
<p>我们作为软件开发工程师， 我们主要的任务是在编码阶段， 但是在一些小的项目组当中， 也会涉及到数据库的设计、测试等方面的工作。</p>
<h2 id="1-2-角色分工"><a href="#1-2-角色分工" class="headerlink" title="1.2 角色分工"></a>1.2 角色分工</h2><p>学习了软件开发的流程之后， 我们还有必要了解一下在整个软件开发过程中涉及到的岗位角色，以及各个角色的职责分工。 </p>
<table>
<thead>
<tr>
<th>岗位&#x2F;角色</th>
<th>职责&#x2F;分工</th>
</tr>
</thead>
<tbody><tr>
<td>项目经理</td>
<td>对整个项目负责，任务分配、把控进度</td>
</tr>
<tr>
<td>产品经理</td>
<td>进行需求调研，输出需求调研文档、产品原型等</td>
</tr>
<tr>
<td>UI设计师</td>
<td>根据产品原型输出界面效果图</td>
</tr>
<tr>
<td>架构师</td>
<td>项目整体架构设计、技术选型等</td>
</tr>
<tr>
<td><font color='red'>开发工程师</font></td>
<td><font color='red'>功能代码实现</font></td>
</tr>
<tr>
<td>测试工程师</td>
<td>编写测试用例，输出测试报告</td>
</tr>
<tr>
<td>运维工程师</td>
<td>软件环境搭建、项目上线</td>
</tr>
</tbody></table>
<p>上述我们讲解的角色分工, 是在一个项目组中比较标准的角色分工, 但是在实际的项目中, 有一些项目组由于人员配置紧张, 可能并没有专门的架构师或测试人员, 这个时候可能需要有项目经理或者程序员兼任。</p>
<h2 id="1-3-软件环境"><a href="#1-3-软件环境" class="headerlink" title="1.3 软件环境"></a>1.3 软件环境</h2><p>在我们日常的软件开发中，会涉及到软件开发中的三套环境， 那么这三套环境分别是: 开发环境、测试环境、生产环境。 接下来，我们分别介绍一下这三套环境的作用和特点。</p>
<p><strong>1). 开发环境(development)</strong></p>
<p>我们作为软件开发人员，在开发阶段使用的环境，就是开发环境，一般外部用户无法访问。</p>
<p>比如，我们在开发中使用的MySQL数据库和其他的一些常用软件，我们可以安装在本地， 也可以安装在一台专门的服务器中， 这些应用软件仅仅在软件开发过程中使用， 项目测试、上线时，我们不会使用这套环境了，这个环境就是开发环境。</p>
<p><strong>2). 测试环境(testing)</strong></p>
<p>当软件开发工程师，将项目的功能模块开发完毕，并且单元测试通过后，就需要将项目部署到测试服务器上，让测试人员对项目进行测试。那这台测试服务器就是专门给测试人员使用的环境， 也就是测试环境，用于项目测试，一般外部用户无法访问。</p>
<p><strong>3). 生产环境(production)</strong></p>
<p>当项目开发完毕，并且由测试人员测试通过之后，就可以上线项目，将项目部署到线上环境，并正式对外提供服务，这个线上环境也称之为生产环境。</p>
<blockquote>
<p><font color='gree'> <b>拓展知识:</b></font> </p>
<p>​	<strong>准生产环境:</strong> 对于有的公司来说，项目功能开发好, 并测试通过以后，并不是直接就上生产环境。为了保证我们开发的项目在上线之后能够完全满足要求，就需要把项目部署在真实的环境中, 测试一下是否完全符合要求啊，这时候就诞生了准生产环境，你可以把他当做生产环境的克隆体，准生产环境的服务器配置, 安装的应用软件(JDK、Tomcat、数据库、中间件 …) 的版本都一样，这种环境也称为 “仿真环境”。</p>
<p>​	ps.由于项目的性质和类型不同，有的项目可能不需要这个环境</p>
</blockquote>
<h1 id="二、-瑞吉外卖项目介绍"><a href="#二、-瑞吉外卖项目介绍" class="headerlink" title="二、 瑞吉外卖项目介绍"></a>二、 瑞吉外卖项目介绍</h1><p>在开发瑞吉外卖这个项目之前，我们需要全方位的来介绍一下当前我们学习的这个项目。接下来，我们将从以下的五个方面， 来介绍瑞吉外卖这个项目。</p>
<h2 id="2-1-项目介绍"><a href="#2-1-项目介绍" class="headerlink" title="2.1 项目介绍"></a>2.1 项目介绍</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805192901586.png" alt="image-20220805192901586"></p>
<p>本项目（瑞吉外卖）是专门为餐饮企业（餐厅、饭店）定制的一款软件产品，包括 系统管理后台 和 移动端应用 两部分。其中系统管理后台主要提供给餐饮企业内部员工使用，可以对餐厅的分类、菜品、套餐、订单、员工等进行管理维护。移动端应用主要提供给消费者使用，可以在线浏览菜品、添加购物车、下单等。</p>
<p>本项目共分为3期进行开发：</p>
<table>
<thead>
<tr>
<th>阶段</th>
<th>功能实现</th>
</tr>
</thead>
<tbody><tr>
<td>第一期</td>
<td>主要实现基本需求，其中移动端应用通过H5实现，用户可以通过手机浏览器访问</td>
</tr>
<tr>
<td>第二期</td>
<td>主要针对移动端应用进行改进，使用微信小程序实现，用户使用起来更加方便</td>
</tr>
<tr>
<td>第三期</td>
<td>主要针对系统进行优化升级，提高系统的访问性能</td>
</tr>
</tbody></table>
<h2 id="2-2-产品原型"><a href="#2-2-产品原型" class="headerlink" title="2.2 产品原型"></a>2.2 产品原型</h2><p><strong>产品原型</strong>，就是一款产品成型之前，由产品经理绘制的一个简单的框架，就是将页面的排版布局展现出来，使产品的初步构思有一个可视化的展示。通过原型展示，可以更加直观的了解项目的需求和提供的功能。</p>
<blockquote>
<p><strong><font color='red'>注意事项：</font></strong> 产品原型主要用于展示项目的功能，并不是最终的页面效果。</p>
</blockquote>
<p>在课程资料的产品原型文件夹下,提供了两份产品原型。</p>
<p> <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805192931824.png" alt="image-20220805192931824"> </p>
<p><strong>1). 管理端</strong></p>
<p>餐饮企业内部员工使用。 主要功能有: </p>
<table>
<thead>
<tr>
<th>模块</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>登录&#x2F;退出</td>
<td>内部员工必须登录后,才可以访问系统管理后台</td>
</tr>
<tr>
<td>员工管理</td>
<td>管理员可以在系统后台对员工信息进行管理，包含查询、新增、编辑、禁用等功能</td>
</tr>
<tr>
<td>分类管理</td>
<td>主要对当前餐厅经营的 菜品分类 或 套餐分类 进行管理维护， 包含查询、新增、修改、删除等功能</td>
</tr>
<tr>
<td>菜品管理</td>
<td>主要维护各个分类下的菜品信息，包含查询、新增、修改、删除、启售、停售等功能</td>
</tr>
<tr>
<td>套餐管理</td>
<td>主要维护当前餐厅中的套餐信息，包含查询、新增、修改、删除、启售、停售等功能</td>
</tr>
<tr>
<td>订单明细</td>
<td>主要维护用户在移动端下的订单信息，包含查询、取消、派送、完成，以及订单报表下载等功能</td>
</tr>
</tbody></table>
<p><strong>2). 用户端</strong></p>
<p>移动端应用主要提供给消费者使用。主要功能有:</p>
<table>
<thead>
<tr>
<th>模块</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>登录&#x2F;退出</td>
<td>在移动端, 用户也需要登录后使用APP进行点餐</td>
</tr>
<tr>
<td>点餐-菜单</td>
<td>在点餐界面需要展示出菜品分类&#x2F;套餐分类, 并根据当前选择的分类加载其中的菜品信息, 供用户查询选择</td>
</tr>
<tr>
<td>点餐-购物车</td>
<td>用户选中的菜品就会加入用户的购物车, 主要包含 查询购物车、加入购物车、删除购物车、清空购物车等功能</td>
</tr>
<tr>
<td>订单支付</td>
<td>用户选完菜品&#x2F;套餐后, 可以对购物车菜品进行结算支付, 这时就需要进行订单的支付</td>
</tr>
<tr>
<td>个人信息</td>
<td>在个人中心页面中会展示当前用户的基本信息, 用户可以管理收货地址, 也可以查询历史订单数据</td>
</tr>
</tbody></table>
<h2 id="2-3-技术选型"><a href="#2-3-技术选型" class="headerlink" title="2.3 技术选型"></a>2.3 技术选型</h2><p>关于本项目的技术选型, 我们将会从 用户层、网关层、应用层、数据层 这几个方面进行介绍，而对于我们服务端开发工程师来说，在项目开发过程中，我们主要关注应用层及数据层技术的应用。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805192941946.png" alt="image-20220805192941946"> </p>
<p><strong>1). 用户层</strong></p>
<p>本项目中在构建系统管理后台的前端页面，我们会用到H5、Vue.js、ElementUI等技术。而在构建移动端应用时，我们会使用到微信小程序。</p>
<p><strong>2). 网关层</strong></p>
<p>Nginx是一个服务器，主要用来作为Http服务器，部署静态资源，访问性能高。在Nginx中还有两个比较重要的作用： 反向代理和负载均衡， 在进行项目部署时，要实现Tomcat的负载均衡，就可以通过Nginx来实现。</p>
<p><strong>3). 应用层</strong></p>
<p>SpringBoot： 快速构建Spring项目, 采用 “约定优于配置” 的思想, 简化Spring项目的配置开发。</p>
<p>Spring: 统一管理项目中的各种资源(bean), 在web开发的各层中都会用到。</p>
<p>SpringMVC：SpringMVC是spring框架的一个模块，springmvc和spring无需通过中间整合层进行整合，可以无缝集成。</p>
<p>SpringSession: 主要解决在集群环境下的Session共享问题。</p>
<p>lombok：能以简单的注解形式来简化java代码，提高开发人员的开发效率。例如开发中经常需要写的javabean，都需要花时间去添加相应的getter&#x2F;setter，也许还要去写构造器、equals等方法。</p>
<p>Swagger： 可以自动的帮助开发人员生成接口文档，并对接口进行测试。</p>
<p><strong>4). 数据层</strong></p>
<p>MySQL： 关系型数据库, 本项目的核心业务数据都会采用MySQL进行存储。</p>
<p>MybatisPlus： 本项目持久层将会使用MybatisPlus来简化开发, 基本的单表增删改查直接调用框架提供的方法即可。</p>
<p>Redis： 基于key-value格式存储的内存数据库, 访问速度快, 经常使用它做缓存(降低数据库访问压力, 提供访问效率), 在后面的性能优化中会使用。</p>
<p><strong>5). 工具</strong></p>
<p>git: 版本控制工具, 在团队协作中, 使用该工具对项目中的代码进行管理。</p>
<p>maven: 项目构建工具。</p>
<p>junit：单元测试工具，开发人员功能实现完毕后，需要通过junit对功能进行单元测试。</p>
<h2 id="2-4-功能架构"><a href="#2-4-功能架构" class="headerlink" title="2.4 功能架构"></a>2.4 功能架构</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805192951200.png" alt="image-20220805192951200"> </p>
<p><strong>1). 移动端前台功能</strong></p>
<p>手机号登录 , 微信登录 , 收件人地址管理 , 用户历史订单查询 , 菜品规格查询 , 购物车功能 , 下单 , 分类及菜品浏览。</p>
<p><strong>2). 系统管理后台功能</strong></p>
<p>员工登录&#x2F;退出 , 员工信息管理 , 分类管理 , 菜品管理 , 套餐管理 , 菜品口味管理 , 订单管理 。</p>
<h2 id="2-5-角色"><a href="#2-5-角色" class="headerlink" title="2.5 角色"></a>2.5 角色</h2><p>在瑞吉外卖这个项目中，存在以下三种用户，这三种用户对应三个角色： 后台系统管理员、后台系统普通员工、C端(移动端)用户。</p>
<table>
<thead>
<tr>
<th>角色</th>
<th>权限操作</th>
</tr>
</thead>
<tbody><tr>
<td>后台系统管理员</td>
<td>登录后台管理系统，拥有后台系统中的所有操作权限</td>
</tr>
<tr>
<td>后台系统普通员工</td>
<td>登录后台管理系统，对菜品、套餐、订单等进行管理 (不包含员工管理)</td>
</tr>
<tr>
<td>C端用户</td>
<td>登录移动端应用，可以浏览菜品、添加购物车、设置地址、在线下单等</td>
</tr>
</tbody></table>
<h1 id="三、开发环境搭建"><a href="#三、开发环境搭建" class="headerlink" title="三、开发环境搭建"></a>三、开发环境搭建</h1><h2 id="3-1-数据库环境搭建"><a href="#3-1-数据库环境搭建" class="headerlink" title="3.1 数据库环境搭建"></a>3.1 数据库环境搭建</h2><p>打开Navicat，右键连接，新建数据库</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659684689289-934107c8-0e0e-4725-897f-f06004ad1eb5.png" alt="img"></p>
<p>新建数据库</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659684757252-9921f145-5b42-47d9-a188-58d81bb4b815.png" alt="img"></p>
<p>导入表结构和表信息，右键，运行SQL文件</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659684882309-a197a987-9962-406b-98d2-88fa8c46b867.png" alt="img"></p>
<p>找到SQL文件，选中，运行</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659684955505-a7a3b622-9461-41d7-87c7-a4de1b9857a2.png" alt="img"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659684976072-4fafc762-59ba-406e-833d-a8b59eb0c134.png" alt="img"></p>
<p>导入成功~</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659685010466-9c0ff67a-88f6-4991-88f7-16edee24fd17.png" alt="img"></p>
<p>数据库表说明</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659685415640-e16539f6-17b8-4464-b070-6e75bdbf9e37.png" alt="img"></p>
<h2 id="3-2-maven环境搭建"><a href="#3-2-maven环境搭建" class="headerlink" title="3.2 maven环境搭建"></a>3.2 maven环境搭建</h2><h3 id="1、-创建一个新的项目"><a href="#1、-创建一个新的项目" class="headerlink" title="1、 创建一个新的项目"></a>1、 创建一个新的项目</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659685531031-d3c30c89-9be3-404c-b551-9bbb763205d9.png" alt="img"></p>
<p>选择创建Maven项目</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659685582738-090ff6c9-0094-404c-a206-8c92ef09f467.png" alt="img"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659685726432-7169ffed-cb7e-40d0-9370-08e9df95b523.png" alt="img"></p>
<p>检查Maven</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/1659685816439-f80f0422-e62b-4cfd-bd0e-875ac75e5a01.png" alt="img"></p>
<h3 id="2、-导入pom-xml文件"><a href="#2、-导入pom-xml文件" class="headerlink" title="2、 导入pom.xml文件"></a>2、 导入pom.xml文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reggie_take_out<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、创建配置文件application-yml"><a href="#3、创建配置文件application-yml" class="headerlink" title="3、创建配置文件application.yml"></a>3、创建配置文件application.yml</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805155657827.png" alt="image-20220805155657827"></p>
<p>代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">reggie_take_out</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">ASSIGN_ID</span></span><br></pre></td></tr></table></figure>

<h3 id="4、编写启动类"><a href="#4、编写启动类" class="headerlink" title="4、编写启动类"></a>4、编写启动类</h3><p>创建启动类ReggieApplication</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805161747443.png" alt="image-20220805161747443"></p>
<p>并写入以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-05 16:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReggieApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ReggieApplication.class,args);</span><br><span class="line">        <span class="comment">//输出日志</span></span><br><span class="line">        log.info(<span class="string">&quot;项目启动成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行测试，启动成功。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805161846988.png" alt="image-20220805161846988"></p>
<h3 id="5、导入静态资源"><a href="#5、导入静态资源" class="headerlink" title="5、导入静态资源"></a>5、导入静态资源</h3><p>在resources目录下创建static目录，将前端资料复制到static</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805162722841.png" alt="image-20220805162722841"></p>
<p>测试，可以访问到。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805162744591.png" alt="image-20220805162744591"></p>
<h1 id="四、后台登录功能开发"><a href="#四、后台登录功能开发" class="headerlink" title="四、后台登录功能开发"></a>四、后台登录功能开发</h1><h2 id="4-1-创建实体类"><a href="#4-1-创建实体类" class="headerlink" title="4.1 创建实体类"></a>4.1 创建实体类</h2><p>在reggie目录下新建entity包，新建Employee类</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805164535814.png" alt="image-20220805164535814"></p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">//员工实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String idNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-2-完善项目目录"><a href="#4-2-完善项目目录" class="headerlink" title="4.2 完善项目目录"></a>4.2 完善项目目录</h2><h3 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h3><p>创建mapper目录并创建EmployeeMapper接口继承BaseMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Employee&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><p>创建service目录并创建EmployeeService接口继承IService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Employee&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在service目录中创建impl并创建EmployeeServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;EmployeeMapper, Employee&gt; <span class="keyword">implements</span> <span class="title class_">EmployeeService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><p>创建controller目录并创建EmployeeController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/employee&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="common"><a href="#common" class="headerlink" title="common"></a>common</h3><p>创建common目录并创建R通用返回结果类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通用返回结果类</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">//编码：1成功，0和其它数字为失败</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">//动态数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">success</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        R&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;();</span><br><span class="line">        r.data = object;</span><br><span class="line">        r.code = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.msg = msg;</span><br><span class="line">        r.code = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R&lt;T&gt; <span class="title function_">add</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-3-处理逻辑"><a href="#4-3-处理逻辑" class="headerlink" title="4.3 处理逻辑"></a>4.3 处理逻辑</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805192611181.png" alt="image-20220805192611181"></p>
<ol>
<li>将页面提交的代码password进行md5加密处理</li>
<li>根据页面提交的用户名username查询数据库</li>
<li>如果没有查询到则返回登录失败结果</li>
<li>查询到了进行密码比对，如果密码不一致返回登录失败结果</li>
<li>查看员工状态，如果为已禁用状态，则返回员工已禁用结果</li>
<li>登陆成功，将员工id存入Session并返回登录成功结果</li>
</ol>
<h2 id="4-4-Controller代码编写"><a href="#4-4-Controller代码编写" class="headerlink" title="4.4 Controller代码编写"></a>4.4 Controller代码编写</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1. 将页面提交的代码password进行md5加密处理</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();</span><br><span class="line">        password = DigestUtils.md5DigestAsHex(password.getBytes());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        2. 根据页面提交的用户名username查询数据库</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Employee::getUsername, employee.getUsername());</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        3. 如果没有查询到则返回登录失败结果</span></span><br><span class="line">        <span class="keyword">if</span> (emp == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;登陆失败!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        4. 查询到了进行密码比对，如果密码不一致返回登录失败结果</span></span><br><span class="line">        <span class="keyword">if</span> (!emp.getPassword().equals(password)) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        5. 查看员工状态，如果为已禁用状态，则返回员工已禁用结果</span></span><br><span class="line">        <span class="keyword">if</span> (emp.getStatus() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;账号已被禁用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        6. 登陆成功，将员工id存入Session并返回登录成功结果</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>, emp.getId());</span><br><span class="line">        <span class="keyword">return</span> R.success(emp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><p>用户名不存在，登陆失败</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805185327553.png" alt="image-20220805185327553"></p>
<p>用户名存在，密码错误</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805185353385.png" alt="image-20220805185353385"></p>
<p>用户禁用，首先在数据库中将用户状态改为0，然后进行测试。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805185502660.png" alt="image-20220805185502660"></p>
<p>登陆成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805185256452.png" alt="image-20220805185256452"></p>
<h1 id="五、后台用户退出功能开发"><a href="#五、后台用户退出功能开发" class="headerlink" title="五、后台用户退出功能开发"></a>五、后台用户退出功能开发</h1><h2 id="5-1-处理逻辑"><a href="#5-1-处理逻辑" class="headerlink" title="5.1 处理逻辑"></a>5.1 处理逻辑</h2><ol>
<li>清理Session中的用户id</li>
<li>返回结果</li>
</ol>
<h2 id="5-2-代码编写"><a href="#5-2-代码编写" class="headerlink" title="5.2 代码编写"></a>5.2 代码编写</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工退出功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">//清理Session中保存的当前登录的员工的id</span></span><br><span class="line">    request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>瑞吉外卖项目day02笔记</title>
    <url>/posts/1663107238.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="一、完善登录功能"><a href="#一、完善登录功能" class="headerlink" title="一、完善登录功能"></a>一、完善登录功能</h1><h2 id="1-1-问题分析"><a href="#1-1-问题分析" class="headerlink" title="1.1 问题分析"></a>1.1 问题分析</h2><p><strong>问题：</strong>index页面不用登录直接输入url也可以访问</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805193614521.png" alt="image-20220805193614521"></p>
<p><strong>理想效果：</strong>只有登录成功后才可以访问系统中的页面，如果没有登录, 访问系统中的任何界面都直接跳转到登录页面。</p>
<p><strong>实现方式：</strong>通过过滤器或拦截器来实现，在过滤器、拦截器中拦截前端发起的请求，判断用户是否已经完成登录，如果没有登录则返回提示信息，跳转到登录页面。</p>
<h2 id="1-2-思路分析"><a href="#1-2-思路分析" class="headerlink" title="1.2 思路分析"></a>1.2 思路分析</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805193817680.png" alt="image-20220805193817680"></p>
<p><strong>过滤器具体的处理逻辑如下：</strong></p>
<ol>
<li>获取本次请求的URI</li>
<li>判断本次请求, 是否需要登录, 才可以访问</li>
<li>如果不需要，则直接放行</li>
<li>判断登录状态，如果已登录，则直接放行</li>
<li>如果未登录, 则返回未登录结果</li>
</ol>
<p>如果没登录，根据前端的处理来实现后端代码</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805193929843.png" alt="image-20220805193929843"></p>
<h2 id="1-3-代码实现"><a href="#1-3-代码实现" class="headerlink" title="1.3 代码实现"></a>1.3 代码实现</h2><h3 id="创建过滤器"><a href="#创建过滤器" class="headerlink" title="创建过滤器"></a>创建过滤器</h3><p>创建filter包，并创建LoginCheckFilter过滤器</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查用户是否已经完成登陆</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-05 19:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        log.info(<span class="string">&quot;拦截到请求:&#123;&#125;&quot;</span>, request.getRequestURI());</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在启动类上加上Servlet组件扫描的注解, 来扫描过滤器配置的@WebFilter注解， 扫描上之后， 过滤器在运行时就生效了。</p>
<p><font color='red'><b>@ServletComponentScan 的作用: </b></font></p>
<p>​	在SpringBoot项目中, 在引导类&#x2F;配置类上加了该注解后, 会自动扫描项目中(当前包及其子包下)的@WebServlet , @WebFilter , @WebListener 注解, 自动注册Servlet的相关组件 ;</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805200436655.png" alt="image-20220805200436655"></p>
<p>测试一下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805200544004.png" alt="image-20220805200544004"></p>
<p>发现过滤器是可以生效的。</p>
<blockquote>
<p><font color='red'><b>AntPathMatcher 拓展:</b></font></p>
<p><strong>介绍:</strong> Spring中提供的路径匹配器 ;</p>
<p><strong>通配符规则:</strong> 		</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>?</td>
<td>匹配一个字符</td>
</tr>
<tr>
<td>*</td>
<td>匹配0个或多个字符</td>
</tr>
<tr>
<td>**</td>
<td>匹配0个或多个目录&#x2F;字符</td>
</tr>
</tbody></table>
</blockquote>
<h3 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查用户是否已经完成登陆</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-05 19:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="comment">//路径匹配器，支持通配符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        1. 获取本次请求的URI</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;拦截到请求:&#123;&#125;&quot;</span>, requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不需要进行处理的请求路径</span></span><br><span class="line">        String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/front/**&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2. 判断本次请求, 是否需要登录, 才可以访问</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> check(requestURI, urls);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        3. 如果不需要登录，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (check) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;本次请求&#123;&#125;不需要处理&quot;</span>, requestURI);</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        4. 判断登录状态，如果已登录，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户已登录，用户ID为:&#123;&#125;&quot;</span>, request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        5. 如果未登录, 则返回未登录结果</span></span><br><span class="line">        <span class="comment">//通过输出流的方式向客户端响应数据</span></span><br><span class="line">        response.getWriter().write(JSON.toJSONString(R.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br><span class="line">        log.info(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路径匹配，检查本期请求是否需要放行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestURI</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urls</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String requestURI, String[] urls)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> PATH_MATCHER.match(url, requestURI);</span><br><span class="line">            <span class="keyword">if</span> (match) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><p>成功实现</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805202637249.png" alt="image-20220805202637249"></p>
<h1 id="二、新增员工"><a href="#二、新增员工" class="headerlink" title="二、新增员工"></a>二、新增员工</h1><h2 id="2-1-代码执行流程"><a href="#2-1-代码执行流程" class="headerlink" title="2.1 代码执行流程"></a>2.1 代码执行流程</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805203947008.png" alt="image-20220805203947008"></p>
<ol>
<li>点击”保存”按钮, 页面发送ajax请求，将新增员工页面中输入的数据以json的形式提交到服务端, 请求方式POST, 请求路径 &#x2F;employee</li>
<li>服务端Controller接收页面提交的数据并调用Service将数据进行保存</li>
<li>Service调用Mapper操作数据库，保存数据</li>
</ol>
<h2 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2 代码实现"></a>2.2 代码实现</h2><p>在EmployeeController中增加save方法, 用于保存用户员工信息。</p>
<ol>
<li><p>在新增员工时， 按钮页面原型中的需求描述， 需要给员工设置初始默认密码 123456， 并对密码进行MD5加密。</p>
</li>
<li><p>在组装员工信息时, 还需要封装创建时间、修改时间，创建人、修改人信息(从session中获取当前登录用户)。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增员工功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;新增员工，员工信息：&#123;&#125;&quot;</span>, employee.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置初始密码123456，使用md5进行加密</span></span><br><span class="line">    employee.setPassword(DigestUtils.md5DigestAsHex(<span class="string">&quot;123456&quot;</span>.getBytes()));</span><br><span class="line">    <span class="comment">//设置创建时间</span></span><br><span class="line">    employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">    <span class="comment">//设置更新时间</span></span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得当前登录用户的id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"></span><br><span class="line">    employee.setCreateUser(empId);</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line"></span><br><span class="line">    employeeService.save(employee);</span><br><span class="line">    <span class="comment">//返回成功信息</span></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增员工成功!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试一下，插入成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805204803806.png" alt="image-20220805204803806"></p>
<p>但是这里有一个问题，如果再次插入同账号的员工</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805205103631.png" alt="image-20220805205103631"></p>
<p>发现这里出现系统接口500异常</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805205121147.png" alt="image-20220805205121147"></p>
<p>控制台也报错了，因为在 employee 表结构中，我们针对于username字段，建立了唯一索引，添加重复的username数据时，违背该约束，就会报错。但是此时前端提示的信息并不具体，用户并不知道是因为什么原因造成的该异常，我们需要给用户提示详细的错误信息 。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805205221784.png" alt="image-20220805205221784"></p>
<h1 id="三、全局异常处理器"><a href="#三、全局异常处理器" class="headerlink" title="三、全局异常处理器"></a>三、全局异常处理器</h1><h2 id="3-1-思路分析"><a href="#3-1-思路分析" class="headerlink" title="3.1 思路分析"></a>3.1 思路分析</h2><p>要想解决上述测试中存在的问题，我们需要对程序中可能出现的异常进行捕获，通常有两种处理方式：</p>
<p><strong>A. 在Controller方法中加入 try…catch 进行异常捕获</strong></p>
<p>形式如下： </p>
<p> <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805205457644.png" alt="image-20220805205457644"></p>
<p>如果采用这种方式，虽然可以解决，但是存在弊端，需要我们在保存其他业务数据时，也需要在Controller方法中加上try…catch进行处理，代码冗余，不通用。</p>
<p><strong>B. 使用异常处理器进行全局异常捕获</strong></p>
<p>采用这种方式来实现，我们只需要在项目中定义一个通用的全局异常处理器，就可以解决本项目的所有异常。</p>
<h2 id="3-2-全局异常处理器"><a href="#3-2-全局异常处理器" class="headerlink" title="3.2 全局异常处理器"></a>3.2 全局异常处理器</h2><p>在项目中自定义一个全局异常处理器，在异常处理器上加上注解 @ControllerAdvice,可以通过属性annotations指定拦截哪一类的Controller方法。 并在异常处理器的方法上加上注解 @ExceptionHandler 来指定拦截的是那一类型的异常。</p>
<blockquote>
<p>异常处理方法逻辑: </p>
<ul>
<li>指定捕获的异常类型为 SQLIntegrityConstraintViolationException</li>
<li>解析异常的提示信息, 获取出是那个值违背了唯一约束 </li>
<li>组装错误信息并返回</li>
</ul>
</blockquote>
<h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-05 21:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice(annotations = &#123;RestController.class&#125;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span> &#123;</span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line">        <span class="comment">//将错误信息用空格分开Duplicate entry &#x27;duoduo&#x27; for key &#x27;idx_username&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> (ex.getMessage().contains(<span class="string">&quot;Duplicate entry&quot;</span>)) &#123;</span><br><span class="line">            String[] split = ex.getMessage().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">//获取用户名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> split[<span class="number">2</span>] + <span class="string">&quot;已存在&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> R.error(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><font color='red'><b>注解说明:</b></font></p>
<p>​	上述的全局异常处理器上使用了的两个注解 @ControllerAdvice , @ResponseBody , 他们的作用分别为: </p>
<p>​	@ControllerAdvice : 指定拦截那些类型的控制器;</p>
<p>​	@ResponseBody: 将方法的返回值 R 对象转换为json格式的数据, 响应给页面;</p>
<p>​	</p>
<p>上述使用的两个注解, 也可以合并成为一个注解 @RestControllerAdvice </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805210512152.png" alt="image-20220805210512152"> </p>
</blockquote>
<h3 id="测试：-1"><a href="#测试：-1" class="headerlink" title="测试："></a>测试：</h3><p>成功检查出异常并返回错误信息</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220805210403840.png" alt="image-20220805210403840"></p>
<h1 id="四、员工分页查询"><a href="#四、员工分页查询" class="headerlink" title="四、员工分页查询"></a>四、员工分页查询</h1><h2 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h2><p>系统中的员工很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。而在我们的分页查询页面中, 除了分页条件以外，还有一个查询条件 “员工姓名”。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806075143599.png" alt="image-20220806075143599"></p>
<ul>
<li><p>请求参数</p>
<ul>
<li><p>搜索条件： 员工姓名(模糊查询)</p>
</li>
<li><p>分页条件： 每页展示条数 ， 页码</p>
</li>
</ul>
</li>
<li><p>响应数据</p>
<ul>
<li><p>总记录数</p>
</li>
<li><p>结果列表</p>
</li>
</ul>
</li>
</ul>
<h2 id="4-2-程序执行流程分析"><a href="#4-2-程序执行流程分析" class="headerlink" title="4.2 程序执行流程分析"></a>4.2 程序执行流程分析</h2><p>在开发代码之前，需要梳理一下整个程序的执行过程。</p>
<p>A. 点击菜单，打开员工管理页面时，执行查询： </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806075823871.png" alt="image-20220806075823871"></p>
<p>B. 搜索栏输入员工姓名,回车,执行查询:</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806075831325.png" alt="image-20220806075831325"></p>
<ol>
<li><p>页面发送ajax请求，将分页查询参数(page、pageSize、name)提交到服务端</p>
</li>
<li><p>服务端Controller接收页面提交的数据, 并组装条件调用Service查询数据</p>
</li>
<li><p>Service调用Mapper操作数据库，查询分页数据</p>
</li>
<li><p>Controller将查询到的分页数据, 响应给前端页面</p>
</li>
<li><p>页面接收到分页数据, 并通过ElementUI的Table组件展示到页面上</p>
</li>
</ol>
<h2 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h2><p>要实现分页查询功能，就需要用到MybatisPlus中提供的分页插件，要使用分页插件，就要在配置类中声明分页插件的bean对象。</p>
<p>在config目录下新建MybatisPlusConfig类</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置MP的分页插件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-06 8:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="分页查询实现"><a href="#分页查询实现" class="headerlink" title="分页查询实现"></a>分页查询实现</h4><p>页面在进行分页查询时， 具体的请求信息如下:</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;employee&#x2F;page</td>
</tr>
<tr>
<td>请求参数</td>
<td>page , pageSize , name</td>
</tr>
</tbody></table>
<p>那么查询完毕后我们需要给前端返回什么样的结果呢? </p>
<p>查询返回的结果数据data中应该封装两项信息, 分别为: records 封装分页列表数据, total 中封装符合条件的总记录数。 </p>
<p>那么这个时候, 在定义controller方法的返回值类型R时, 我们可以直接将 MybatisPlus 分页查询的结果 Page 直接封装返回, 因为Page中的属性如下: </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806080524874.png" alt="image-20220806080524874"> </p>
<p>那么接下来就依据于这些已知的需求和条件完成分页查询的代码实现。 具体的逻辑如下: </p>
<p>A. 构造分页条件</p>
<p>B. 构建搜索条件 - name进行模糊匹配</p>
<p>C. 构建排序条件 - 更新时间倒序排序</p>
<p>D. 执行查询</p>
<p>E. 组装结果并返回</p>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a><strong>代码如下：</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工信息分页查询功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;page = &#123;&#125;,pageSize=&#123;&#125;,name=&#123;&#125;&quot;</span>, page, pageSize, name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.构造分页构造器</span></span><br><span class="line">    <span class="type">Page</span> <span class="variable">pageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(page, pageSize);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.构造条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加过滤条件，模糊查询</span></span><br><span class="line">    queryWrapper.like(StringUtils.isNotEmpty(name), Employee::getName, name);</span><br><span class="line">    <span class="comment">//添加排序条件，按照更新时间进行排序</span></span><br><span class="line">    queryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.执行查询</span></span><br><span class="line">    employeeService.page(pageInfo, queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试：-2"><a href="#测试：-2" class="headerlink" title="测试："></a>测试：</h4><p>前端正常拿到数据</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806081831536.png" alt="image-20220806081831536"></p>
<p>后端也执行了查询</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806081916191.png" alt="image-20220806081916191"></p>
<h1 id="五、启动、禁用员工账号"><a href="#五、启动、禁用员工账号" class="headerlink" title="五、启动、禁用员工账号"></a>五、启动、禁用员工账号</h1><h2 id="5-1-需求分析"><a href="#5-1-需求分析" class="headerlink" title="5.1 需求分析"></a>5.1 需求分析</h2><p>在员工管理列表页面，可以对某个员工账号进行<font color='gree'>启用</font>或者<font color='red'>禁用</font>操作。账号禁用的员工不能登录系统，启用后的员工可以正常登录。如果某个员工账号状态为正常，则按钮显示为 “禁用”，如果员工账号状态为已禁用，则按钮显示为”启用”。</p>
<p>&#x3D;&#x3D;注意：只有管理员（admin用户）可以对其他普通用户进行启用、禁用操作，所以普通用户登录系统后启用、禁用按钮不显示。&#x3D;&#x3D;</p>
<h2 id="5-2-程序执行流程"><a href="#5-2-程序执行流程" class="headerlink" title="5.2 程序执行流程"></a>5.2 程序执行流程</h2><h3 id="1-页面按钮动态展示"><a href="#1-页面按钮动态展示" class="headerlink" title="1 页面按钮动态展示"></a>1 页面按钮动态展示</h3><p>1). 当管理员admin点击 “启用” 或 “禁用” 按钮时, 调用方法statusHandle</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806091557779.png" alt="image-20220806091557779"></p>
<blockquote>
<p>scope.row : 获取到的是这一行的数据信息 ;</p>
</blockquote>
<p>2). statusHandle方法中进行二次确认, 然后发起ajax请求, 传递id、status参数</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806091613731.png" alt="image-20220806091613731"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806091620314.png" alt="image-20220806091620314"></p>
<p>最终发起异步请求, 请求服务端, 请求信息如下： </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>PUT</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;employee</td>
</tr>
<tr>
<td>请求参数</td>
<td>{“id”:xxx,”status”:xxx}</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>{…params}</strong> : 三点是ES6中出现的扩展运算符。作用是遍历当前使用的对象能够访问到的所有属性，并将属性放入当前对象中。</p>
</blockquote>
<h2 id="5-3-代码实现"><a href="#5-3-代码实现" class="headerlink" title="5.3 代码实现"></a>5.3 代码实现</h2><p>程序的执行过程：</p>
<p>1). 页面发送ajax请求，将参数(id、status)提交到服务端</p>
<p>2). 服务端Controller接收页面提交的数据并调用Service更新数据</p>
<p>3). Service调用Mapper操作数据库</p>
<p>启用、禁用员工账号，本质上就是一个更新操作，也就是对status状态字段进行操作。在Controller中创建update方法，此方法是一个通用的修改员工信息的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id修改员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(HttpServletRequest request,<span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">    log.info(employee.toString());</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long)request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"></span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line">    employeeService.updateById(employee);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;员工信息修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-4-代码修复"><a href="#5-4-代码修复" class="headerlink" title="5.4 代码修复"></a>5.4 代码修复</h2><p>在前端JS中， js在对长度较长的长整型数据进行处理时， 会损失精度， 从而导致提交的id和数据库中的id不一致。</p>
<p>想解决这个问题，只需要让js处理的<strong>ID数据类型转为字符串类型</strong>即可, 这样就不会损失精度了。</p>
<p>由于在SpringMVC中, 将Controller方法返回值转换为json对象, 是通过jackson来实现的, 涉及到SpringMVC中的一个消息转换器MappingJackson2HttpMessageConverter, 所以我们要解决这个问题, 就需要对该消息转换器的功能进行拓展。</p>
<p><strong>具体实现步骤：</strong></p>
<p>1). 提供对象转换器JacksonObjectMapper，基于Jackson进行Java对象到json数据的转换（资料中已经提供，直接复制到项目中使用）</p>
<p>2). 在WebMvcConfig配置类中扩展Spring mvc的消息转换器，在此消息转换器中使用提供的对象转换器进行Java对象到json数据的转换</p>
<p><strong>1). 引入JacksonObjectMapper</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="keyword">module</span>.SimpleModule;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.std.ToStringSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span></span><br><span class="line"><span class="comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span></span><br><span class="line"><span class="comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title class_">ObjectMapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JacksonObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">//收到未知属性时不报异常</span></span><br><span class="line">        <span class="built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        <span class="built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>()</span><br><span class="line">                .addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))</span><br><span class="line"></span><br><span class="line">                .addSerializer(BigInteger.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(Long.class, ToStringSerializer.instance)</span><br><span class="line"></span><br><span class="line">                .addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line">        <span class="comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class="line">        <span class="built_in">this</span>.registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该自定义的对象转换器, 主要指定了, 在进行json数据序列化及反序列化时, LocalDateTime、LocalDate、LocalTime的处理方式, 以及BigInteger及Long类型数据，直接转换为字符串。</p>
<p><strong>2). 在WebMvcConfig中重写方法extendMessageConverters</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩展mvc框架的消息转换器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;扩展消息转换器...&quot;</span>);</span><br><span class="line">    <span class="comment">//创建消息转换器对象</span></span><br><span class="line">    <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">    <span class="comment">//设置对象转换器，底层使用Jackson将Java对象转为json</span></span><br><span class="line">    messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">    <span class="comment">//将上面的消息转换器对象追加到mvc框架的转换器集合中</span></span><br><span class="line">    converters.add(<span class="number">0</span>,messageConverter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="测试：-3"><a href="#测试：-3" class="headerlink" title="测试："></a>测试：</h3><p>状态更改成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806091817743.png" alt="image-20220806091817743"></p>
<h1 id="六、编辑员工信息"><a href="#六、编辑员工信息" class="headerlink" title="六、编辑员工信息"></a>六、编辑员工信息</h1><h2 id="6-1-程序执行流程"><a href="#6-1-程序执行流程" class="headerlink" title="6.1 程序执行流程"></a>6.1 程序执行流程</h2><ol>
<li><p>点击编辑按钮时，页面跳转到add.html，并在url中携带参数[员工id]</p>
</li>
<li><p>在add.html页面获取url中的参数[员工id]</p>
</li>
<li><p>发送ajax请求，请求服务端，同时提交员工id参数</p>
</li>
<li><p>服务端接收请求，根据员工id查询员工信息，将员工信息以json形式响应给页面</p>
</li>
<li><p>页面接收服务端响应的json数据，通过VUE的数据绑定进行员工信息回显</p>
</li>
<li><p>点击保存按钮，发送ajax请求，将页面中的员工信息以json方式提交给服务端</p>
</li>
<li><p>服务端接收员工信息，并进行处理，完成后给页面响应</p>
</li>
<li><p>页面接收到服务端响应信息后进行相应处理</p>
</li>
</ol>
<blockquote>
<p><strong>注意：add.html页面为公共页面，新增员工和编辑员工都是在此页面操作</strong></p>
</blockquote>
<h2 id="6-2-代码实现"><a href="#6-2-代码实现" class="headerlink" title="6.2 代码实现"></a>6.2 代码实现</h2><h4 id="根据ID查询"><a href="#根据ID查询" class="headerlink" title="根据ID查询"></a>根据ID查询</h4><p>经过上述的分析,我们看到,在根据ID查询员工信息时,请求信息如下: </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;employee&#x2F;{id}</td>
</tr>
</tbody></table>
<p><strong>代码实现:</strong> </p>
<p>在EmployeeController中增加方法, 根据ID查询员工信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;根据id查询员工信息...&quot;</span>);</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">    <span class="keyword">if</span>(employee != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.success(employee);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;没有查询到对应员工信息&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="修改员工"><a href="#修改员工" class="headerlink" title="修改员工"></a>修改员工</h4><p>经过上述的分析,我们看到,在修改员工信息时,请求信息如下: </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>PUT</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;employee</td>
</tr>
<tr>
<td>请求参数</td>
<td>{…….} json格式数据</td>
</tr>
</tbody></table>
<p><strong>代码实现:</strong> </p>
<p>在EmployeeController中增加方法, 根据ID更新员工信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id修改员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(HttpServletRequest request,<span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">    log.info(employee.toString());</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long)request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"></span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line">    employeeService.updateById(employee);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;员工信息修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="6-4-功能测试"><a href="#6-4-功能测试" class="headerlink" title="6.4 功能测试"></a>6.4 功能测试</h2><p>数据可以正常修改</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220806103824964.png" alt="image-20220806103824964"></p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>海康威视面试复盘</title>
    <url>/posts/496300544.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="1-内存泄漏和内存溢出"><a href="#1-内存泄漏和内存溢出" class="headerlink" title="1.内存泄漏和内存溢出"></a>1.内存泄漏和内存溢出</h3><ul>
<li><strong>内存溢出</strong>是指程序在申请内存时，内有足够的内存空间可以供其使用，比如申请了一个Integer，但是给它存了long类型才能存下的数，这就会造成内存溢出。</li>
<li><strong>内存泄漏</strong>是指在程序申请使用内存后没有归还，结果就是申请的那块内存地址丢了，系统就再也不能把他分配给需要的程序。一次内存泄漏可以忽略不计，但是内存泄漏堆积后果很严重，无论多少内存，迟早都会被占光。</li>
<li><strong>内存泄漏最终会导致内存溢出！</strong></li>
</ul>
<hr>
<h3 id="2-线程池的创建"><a href="#2-线程池的创建" class="headerlink" title="2.线程池的创建"></a>2.线程池的创建</h3><p>线程池的创建有两种方式，《阿里巴巴Java开发手册》中强制线程池不允许使用Executor去创建，而是通过ThreadPoolExecutor的方式创建。</p>
<ul>
<li><strong>方式一：</strong>通过ThreadPoolExecutor构造方法来实现</li>
<li><strong>方式二：</strong>通过Executor框架的工具类Executors来实现，可以通过该工具类创建三种类型的ThreadPoolExecutor：</li>
</ul>
<ol>
<li><ol>
<li><strong>FixedThreadPool：</strong></li>
</ol>
</li>
<li><ol>
<li><ol>
<li>该方法返回<strong>一个固定线程数量</strong>的线程池。</li>
<li>该线程池中的线程数量始终不变。</li>
<li>当有一个新任务提交时，线程池中如果有线程空闲，则，立即执行。</li>
<li>如果没有，就把新的任务暂存在一个任务队列中，待有线程空闲时，再来处理队列中的任务。</li>
</ol>
</li>
</ol>
</li>
<li><ol>
<li><strong>SingleThreadExecutor：</strong></li>
</ol>
</li>
<li><ol>
<li><ol>
<li>该方法返回<strong>只有一个线程</strong>的线程池。</li>
<li>当有一个新任务提交时，任务会被保存在任务队列中，等到线程空闲，再来处理队列中的任务</li>
</ol>
</li>
</ol>
</li>
<li><ol>
<li><strong>CachedThreadPool：</strong></li>
</ol>
</li>
<li><ol>
<li><ol>
<li>该方法可以返回一个<strong>可根据实际情况调整线程数量</strong>的线程池。</li>
<li>线程池中的线程数量不确定，但是如果有空闲线程可以复用，会优先复用可复用的线程。</li>
<li>如果所有线程都在运行，又有新的任务提交，则会创建新的线程处理任务。</li>
<li>所有线程在当前任务执行完毕后，都会返回线程池进行复用。</li>
</ol>
</li>
</ol>
</li>
</ol>
<hr>
<h3 id="3-volatile关键字"><a href="#3-volatile关键字" class="headerlink" title="3.volatile关键字"></a>3.volatile关键字</h3><p>volatile关键字是JVM提供的轻量级的同步机制。可以理解为低配版的synchronized关键字。</p>
<ol>
<li><p>保证了可见性。 </p>
</li>
<li><ol>
<li>一个线程修改了物理内存中的值，其他线程就会马上获得通知。</li>
</ol>
</li>
<li><p>不保证原子性。 </p>
</li>
<li><ol>
<li>原子性是指不可分割，完整性，即某个线程在执行某个任务时是不可以被打断的。需要整体同时成功或者同时失败。</li>
</ol>
</li>
<li><p>有序性（禁止指令重排） </p>
</li>
<li><ol>
<li>就是在volatile「前后」加上「内存屏障」，使得编译器和CPU⽆法进⾏重排序，致使有序。</li>
</ol>
</li>
</ol>
<hr>
<h3 id="4-指令重排"><a href="#4-指令重排" class="headerlink" title="4.指令重排"></a>4.指令重排</h3><p><strong>指令重排序</strong>是指编译器或CPU为了优化程序的执行性能而对指令进行重新排序的一种手段，重排序会带来可见性问题，所以在多线程开发中必须要关注并规避重排序。</p>
<p><strong>简单来说，就是指你在程序中写的代码，在执行时并不一定按照写的顺序,所以需要编译器或者CPU对指令进行重排序。</strong></p>
<p>Java中的指令重排序有两次，第一次发生在将字节码编译成机器码的阶段，第二次发生在CPU执行的时候，也会适当对指令进行重排。</p>
<hr>
<h3 id="5-CAS"><a href="#5-CAS" class="headerlink" title="5.CAS"></a>5.CAS</h3><p>CAS（Compare and Swap），即比较并替换，是一个原子性的操作，是实现并发算法时常用到的一种技术。</p>
<p><strong>CAS的思想：</strong></p>
<ul>
<li>三个参数，一个内存值V、当前值A、即将更新的值B，当且仅当当前值A和内存值V相同时，将内存值V修改为B并返回true，否则什么都不做，并返回false。</li>
<li>将当前值和内存值进行比对，判断是否被修改过，这就是CAS的核心。</li>
</ul>
<p><strong>为什么用？</strong></p>
<ul>
<li>synchronized通过加锁使得每次只会让一个线程去操作共享资源，但是CAS相当于没有加锁，多个线程都可以直接操作共享资源，在实际去修改的时候才会判断能否修改成功，在很多时候比synchronized锁要高效很多。</li>
<li>比如对一个值进行累加，就没必要使用synchronized锁</li>
</ul>
<p><strong>缺点：ABA问题</strong></p>
<ul>
<li><p>从CAS更新的时候，它只会⽐对当前值和内存值是否相等，这会ABA问题。</p>
</li>
<li><p>例子: </p>
</li>
<li><ul>
<li>假设线程A读到当前值是10，可能线程B把值修改为100，然后线程C⼜把值修改为10。</li>
<li>等到线程A拿到执⾏权时，因为当前值和内存值是⼀致的，线程A是可以修改的！</li>
<li>站在线程A的⻆度来说，这个值是从未被修改的，但是其实这个变量已经被线程B和线程C修改过了。</li>
<li>这就是ABA问题。</li>
</ul>
</li>
</ul>
<p>为了解决ABA的问题，Java提供了AtomicStampedReference类，在原有的基础上加了个版本比对，⽐对</p>
<p>的就是内存值+版本是否⼀致。</p>
<hr>
<h3 id="6-什么是控制反转，Spring如何实现控制反转？"><a href="#6-什么是控制反转，Spring如何实现控制反转？" class="headerlink" title="6.什么是控制反转，Spring如何实现控制反转？"></a>6.什么是控制反转，Spring如何实现控制反转？</h3><ul>
<li><p>控制反转即IOC，就是把原有自己控制的事情交给别人去处理，更多的是一种思想或者设计模式，比如本来由我们⾃⼰new出来的对象，现在交由IOC容器，把对象的控制权交给它⽅了。</p>
</li>
<li><p>在Spring中，Spring IOC 解决的是<strong>对象管理</strong>和<strong>对象依赖</strong>的问题。 </p>
</li>
<li><ul>
<li>本来是我们⾃⼰⼿动new出来的对象，现在则把对象交给Spring的IOC容器管理。</li>
<li>IOC容器可以理解为⼀个对象⼯⼚，我们都把该对象交给⼯⼚，<strong>⼯⼚管理这些对象的创建以及依赖关系</strong>。</li>
<li>等我们需要⽤对象的时候，从⼯⼚⾥边获取就好了。</li>
<li>对象⽆需⾃⾏创建或者管理它的依赖关系，依赖关系将被「⾃动注⼊」到需要它们的对象当中去。</li>
</ul>
</li>
<li><p><strong>控制反转是一种思想，依赖注入是实现方式。</strong></p>
</li>
</ul>
<hr>
<h3 id="7-什么是代理模式？"><a href="#7-什么是代理模式？" class="headerlink" title="7.什么是代理模式？"></a>7.什么是代理模式？</h3><ul>
<li><p><strong>定义：</strong> </p>
</li>
<li><ul>
<li>代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。</li>
</ul>
</li>
<li><p><strong>作用：</strong> </p>
</li>
<li><ul>
<li>隔离作用：在某些情况下，一个客户类不想或者不能直接引用一个委托对象，而代理类对象可以在客户类和被代理类对象（委托类对象）之间起到中介的作用。</li>
<li>增加功能：代理模式可以在不修改被代理对象的基础上，通过扩展代理类，进行一些功能的附加与增强。</li>
</ul>
</li>
</ul>
<p><strong>注意：代理类和被代理类应该共同实现一个接口，或者是共同继承某个类。</strong></p>
<ul>
<li><p><strong>分类：</strong> </p>
</li>
<li><ul>
<li><strong>静态代理</strong>：静态代理需要⾃⼰写代理类，实现对应的接⼝。在我们运行之前，代理类.class文件就已经被创建了。</li>
<li><strong>动态代理</strong>：是在程序运行时通过反射机制动态创建的。</li>
</ul>
</li>
</ul>
<p>动态代理在技术或者框架原理中非常常见，比如MyBatis和SpringAOP技术。</p>
<hr>
<h3 id="8-MySQL如何优化？如何判断索引是否创建成功？"><a href="#8-MySQL如何优化？如何判断索引是否创建成功？" class="headerlink" title="8.MySQL如何优化？如何判断索引是否创建成功？"></a>8.MySQL如何优化？如何判断索引是否创建成功？</h3><h4 id="如何优化："><a href="#如何优化：" class="headerlink" title="如何优化："></a>如何优化：</h4><ul>
<li><p>**创建合适的索引:**如果不加索引的话，那么查找任何哪怕只是一条特定的数据都会进行一次全表扫描，如果一张表的数据量很大而符合条件的结果又很少，那么不加索引会引起致命的性能下降。</p>
</li>
<li><p><strong>开启慢查询日志：</strong>记录执行速度慢的SQL，对慢SQL语句进行优化</p>
</li>
<li><p><strong>优化SQL语句：</strong> </p>
</li>
<li><ul>
<li>尽量避免使用子查询</li>
<li>用in来代替or</li>
<li>读取适当的记录limit (m,n)，不要读取多余的记录</li>
<li>禁止不必要的Order By排序</li>
</ul>
</li>
<li><p>使用事务</p>
</li>
<li><p>使用外键</p>
</li>
</ul>
<h4 id="如何判断索引是否创建成功？"><a href="#如何判断索引是否创建成功？" class="headerlink" title="如何判断索引是否创建成功？"></a>如何判断索引是否创建成功？</h4><ul>
<li>可以通过 explain 命令获取 select 语句的执行计划，通过 explain 我们可以知道表的读取顺序，数据读取操作的类型，哪些索引被使用了等信息。</li>
</ul>
<hr>
<h3 id="9-HTTP是哪一层的协议？七层协议模型是哪七层？"><a href="#9-HTTP是哪一层的协议？七层协议模型是哪七层？" class="headerlink" title="9.HTTP是哪一层的协议？七层协议模型是哪七层？"></a>9.HTTP是哪一层的协议？七层协议模型是哪七层？</h3><p><strong>OSI七层协议模型：</strong></p>
<p>从下到上：物联网叔会使用</p>
<p>物理层，数据链路层，网络层，运输层，会话层，表示层，应用层</p>
<ul>
<li>应用层的<strong>任务</strong>是通过应用进程间的交互来完成特定网络应用。包括的<strong>协议</strong>有HTTP、DNS、SMTP。</li>
<li>运输层的<strong>任务</strong>是负责向两台主机进程之间的通信提供通用的数据传输服务。包括的<strong>协议</strong>有TCP、UDP。</li>
<li>网络层的<strong>任务</strong>就是选择合适的网间路由和交换结点， 确保数据及时传送。包括的<strong>协议</strong>有IP协议。</li>
<li>数据链路层的<strong>任务</strong>是负责两台主机之间的数据传输，将网络层交下来的 IP 数据报组装成帧。</li>
<li>物理层的<strong>任务</strong>是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。</li>
</ul>
<hr>
<h3 id="10-JVM模型，JVM调优参数"><a href="#10-JVM模型，JVM调优参数" class="headerlink" title="10.JVM模型，JVM调优参数"></a>10.JVM模型，JVM调优参数</h3><p>JVM主要包含五大块，程序计数器、虚拟机栈、本地方法栈、堆和方法区。</p>
<p>其中程序计数器、虚拟机栈、本地方法栈是线程私有的，即线程之间相互隔离的。</p>
<p>堆和方法区是所有线程所共享的。</p>
<ul>
<li><p><strong>程序计数器：</strong> </p>
</li>
<li><ul>
<li>Java是多线程的语⾔，假设线程数⼤于CPU数，就很有可能有「线程切换」现象，切换意味着「中断」和「恢复」，那⾃然就需要有⼀块区域来保存「当前线程的执⾏信息」，程序计数器就是⽤于记录各个线程执⾏的字节码的地址（分⽀、循环、跳转、异常、线程恢复等都依赖于程序计数器）</li>
</ul>
</li>
<li><p><strong>虚拟机栈：</strong> </p>
</li>
<li><ul>
<li>每个线程在创建的时候都会创建⼀个「虚拟机栈」，每次⽅法调⽤都会创建⼀个「栈帧」。每个「栈帧」会包含⼏块内容：局部变量表、操作数栈、动态连接和返回地址。</li>
<li>虚拟机栈保存⽅法了局部变量、部分变量的计算并参与了⽅法的调⽤和返回。</li>
</ul>
</li>
<li><p><strong>本地方法栈：</strong> </p>
</li>
<li><ul>
<li>本地⽅法栈跟虚拟机栈的功能类似，虚拟机栈⽤于管理 Java 函数的调⽤，⽽本地⽅法栈则⽤于管理本地⽅法的调⽤。这⾥的「本地⽅法」指的是「⾮Java⽅法」，⼀般本地⽅法是使⽤C语⾔实现的。</li>
</ul>
</li>
<li><p><strong>堆：</strong> </p>
</li>
<li><ul>
<li>堆是所有线程共享的区域，⼏乎类的实例和数组分配的内存都来⾃于它 </li>
<li>堆划分为「新⽣代」和「⽼年代」，「新⽣代」⼜被进⼀步划分为 Eden 和 Survivor 区，最后<br>  Survivor 由 From Survivor 和 To Survivor 组成。</li>
</ul>
</li>
<li><p><strong>方法区：</strong> </p>
</li>
<li><ul>
<li>⽅法区主要是⽤来存放已被虚拟机加载的「类相关信息」：包括类信息、常量池。</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>类信息⼜包括了类的版本、字段、⽅法、接⼝和⽗类等信息。 </li>
<li>常量池⼜可以分「静态常量池」和「运⾏时常量池」</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><ul>
<li>静态常量池主要存储的是「字⾯量」以及「符号引⽤」等信息，静态常量池也包括了我们说的「字符串常<br>  量池」。 </li>
<li>运⾏时常量池存储的是「类加载」时⽣成的「直接引⽤」等信息。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="11-字符串去重的几种方法"><a href="#11-字符串去重的几种方法" class="headerlink" title="11.字符串去重的几种方法"></a>11.字符串去重的几种方法</h3><ul>
<li>暴力循环 </li>
<li>集合</li>
</ul>
<hr>
<h3 id="12-浅拷贝和深拷贝"><a href="#12-浅拷贝和深拷贝" class="headerlink" title="12.浅拷贝和深拷贝"></a>12.浅拷贝和深拷贝</h3><ul>
<li>浅拷贝：只复制当前对象的基本数据类型和引用变量，但是引用变量指向的那些对象不进行复制，<strong>引用变量指向的仍然是原对象中引用变量所指向的值。</strong>修改克隆对象可能回影响原对象，不安全。</li>
<li>深拷贝：完全拷贝了基本数据类型和引用数据类型以及引用数据类型指向的对象，也进行了复制。<strong>也就是说深拷贝把要复制的对象所引用的对象也全部进行了复制。</strong></li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>瑞吉外卖项目day03笔记</title>
    <url>/posts/3310750482.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="一、公共字段自动填充"><a href="#一、公共字段自动填充" class="headerlink" title="一、公共字段自动填充"></a>一、公共字段自动填充</h1><h2 id="1-1-问题分析"><a href="#1-1-问题分析" class="headerlink" title="1.1 问题分析"></a>1.1 问题分析</h2><p>前面已经完成了后台系统的员工管理功能的开发，在新增员工时需要设置创建时间、创建人、修改时间、修改人等字段，在编辑员工时需要设置修改时间、修改人等字段。这些字段属于公共字段，也就是也就是在系统中很多表中都会有这些字段，如下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807092551094.png" alt="image-20220807092551094"></p>
<p>而针对于这些字段，目前的赋值方式为： </p>
<p>A. 在新增数据时, 将createTime、updateTime 设置为当前时间, createUser、updateUser设置为当前登录用户ID。</p>
<p>B. 在更新数据时, 将updateTime 设置为当前时间, updateUser设置为当前登录用户ID。</p>
<p>如果都按照这种操作方式来处理这些公共字段, 需要在每一个业务方法中进行操作, 编码相对冗余、繁琐，所以可以<strong>使用Mybatis Plus提供的公共字段自动填充功能来简化开发。</strong></p>
<h2 id="1-2-思路分析"><a href="#1-2-思路分析" class="headerlink" title="1.2 思路分析"></a>1.2 思路分析</h2><p>Mybatis Plus公共字段自动填充，也就是在插入或者更新的时候为指定字段赋予指定的值，使用它的好处就是可以统一对这些字段进行处理，避免了重复代码。在上述的问题分析中，我们提到有四个公共字段，需要在新增&#x2F;更新中进行赋值操作, 具体情况如下: </p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>赋值时机</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>createTime</td>
<td>插入(INSERT)</td>
<td>当前时间</td>
</tr>
<tr>
<td>updateTime</td>
<td>插入(INSERT) , 更新(UPDATE)</td>
<td>当前时间</td>
</tr>
<tr>
<td>createUser</td>
<td>插入(INSERT)</td>
<td>当前登录用户ID</td>
</tr>
<tr>
<td>updateUser</td>
<td>插入(INSERT) , 更新(UPDATE)</td>
<td>当前登录用户ID</td>
</tr>
</tbody></table>
<p>实现步骤：</p>
<p>1、在实体类的属性上加入@TableField注解，指定自动填充的策略。</p>
<p>2、按照框架要求编写元数据对象处理器，在此类中统一为公共字段赋值，此类需要实现MetaObjectHandler接口。</p>
<h3 id="1-给实体类添加注解"><a href="#1-给实体类添加注解" class="headerlink" title="1.给实体类添加注解"></a>1.给实体类添加注解</h3><p>实体类的属性上加入**@TableField注解**，指定自动填充的策略。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807092951242.png" alt="image-20220807092951242"></p>
<h3 id="2-编写元数据对象处理器"><a href="#2-编写元数据对象处理器" class="headerlink" title="2.编写元数据对象处理器"></a>2.编写元数据对象处理器</h3><p>按照框架要求编写元数据对象处理器，在此类中统一为公共字段赋值，此类需要实现MetaObjectHandler接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义元数据对象处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 9:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjecthandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充[insert]...&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        <span class="comment">//在对象处理器中没办法获取request对象，暂时写死，以后解决</span></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>, <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充[update]...&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        <span class="comment">//在对象处理器中没办法获取request对象，暂时写死，以后解决</span></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后将原来的添加和更新操作中的手动赋值操作注释掉</p>
<p>添加操作</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807093051314.png" alt="image-20220807093051314"></p>
<p>更新操作</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807093106155.png" alt="image-20220807093106155"></p>
<h3 id="3-功能测试"><a href="#3-功能测试" class="headerlink" title="3.功能测试"></a>3.功能测试</h3><p><strong>添加功能测试：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807092150153.png" alt="image-20220807092150153"></p>
<p>添加操作公共字段添加没有问题</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807092234701.png" alt="image-20220807092234701"></p>
<p><strong>更新功能测试：</strong></p>
<p>将飞飞性别改成女</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807092333062.png" alt="image-20220807092333062"></p>
<p>公共字段自动也填充成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807092432170.png" alt="image-20220807092432170"></p>
<h2 id="1-3-功能完善"><a href="#1-3-功能完善" class="headerlink" title="1.3 功能完善"></a>1.3 功能完善</h2><p>前面完成了公共字段自动填充功能的代码开发，但是还有一个问题没有解决，就是在自动填充createUser和updateUser时设置的用户id是固定值，因为在MyMetaObjectHandler类中是不能直接获得HttpSession对象的，所以需要通过其他方式来获取登录用户id。</p>
<h3 id="1-业务执行流程"><a href="#1-业务执行流程" class="headerlink" title="1.业务执行流程"></a>1.业务执行流程</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807104154156.png" alt="image-20220807104154156"></p>
<p>客户端发送的每次http请求，对应的在服务端都会分配一个新的线程来处理，在处理过程中涉及到下面类中的方法都属于相同的一个线程：</p>
<p>1). LoginCheckFilter的doFilter方法</p>
<p>2). EmployeeController的update方法</p>
<p>3). MyMetaObjectHandler的updateFill方法</p>
<p><strong>在上述类的方法中加入如下代码(获取当前线程ID,并输出):</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">log.info(<span class="string">&quot;线程id为：&#123;&#125;&quot;</span>,id);</span><br></pre></td></tr></table></figure>

<p>执行编辑员工功能进行验证，通过观察控制台输出可以发现，一次请求<strong>对应的线程id是相同的</strong>：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807104441938.png" alt="image-20220807104441938"></p>
<p>所以可以使用ThreadLocal来进行保存员工的id并填充</p>
<h3 id="2-ThreadLocal介绍"><a href="#2-ThreadLocal介绍" class="headerlink" title="2.ThreadLocal介绍"></a>2.ThreadLocal介绍</h3><p>ThreadLocal并不是一个Thread，而是Thread的局部变量。当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。</p>
<p>ThreadLocal为每个线程提供单独一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问当前线程对应的值。</p>
<p><strong>ThreadLocal常用方法：</strong></p>
<p>A. public void set(T value) : 设置当前线程的线程局部变量的值</p>
<p>B. public T get() : 返回当前线程所对应的线程局部变量的值</p>
<p>C. public void remove() : 删除当前线程所对应的线程局部变量的值 </p>
<p>所以我们可以在LoginCheckFilter的doFilter方法中获取当前登录用户id，并调用ThreadLocal的set方法来设置当前线程的线程局部变量的值（用户id），然后在MyMetaObjectHandler的updateFill方法中调用ThreadLocal的get方法来获得当前线程所对应的线程局部变量的值（用户id）。</p>
<p>如果在后续的操作中, 我们需要在Controller &#x2F; Service中要使用当前登录用户的ID, 可以直接从ThreadLocal直接获取。</p>
<h3 id="3-操作步骤"><a href="#3-操作步骤" class="headerlink" title="3. 操作步骤"></a>3. 操作步骤</h3><p>实现步骤：</p>
<ol>
<li><p>编写BaseContext工具类，基于ThreadLocal封装的工具类</p>
</li>
<li><p>在LoginCheckFilter的doFilter方法中调用BaseContext来设置当前登录用户的id</p>
</li>
<li><p>在MyMetaObjectHandler的方法中调用BaseContext获取登录用户的id</p>
</li>
</ol>
<h3 id="4-代码实现："><a href="#4-代码实现：" class="headerlink" title="4.代码实现："></a>4.代码实现：</h3><p><strong>1、在common包下创建BaseContext工具类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于ThreadLocal封装工具类，用户保存和获取当前登录用户id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 10:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、LoginCheckFilter中存放当前登录用户到ThreadLocal</strong></p>
<p>在doFilter方法中, 判定用户是否登录, 如果用户登录, 在放行之前, 获取HttpSession中的登录用户信息, 调用BaseContext的setCurrentId方法将当前登录用户ID存入ThreadLocal。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将用户id从Session中取出来，存入线程的ThreadLocal变量中</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">BaseContext.setCurrentId(empId);</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807105903926.png" alt="image-20220807105903199"></p>
<p><strong>3、MyMetaObjectHandler中从ThreadLocal中获取</strong></p>
<p>将之前在代码中固定的当前登录用户1， 修改为动态调用BaseContext中的getCurrentId方法获取当前登录用户ID</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807110716910.png" alt="image-20220807110716910"></p>
<h3 id="5-功能测试"><a href="#5-功能测试" class="headerlink" title="5. 功能测试"></a>5. 功能测试</h3><p>测试增加&#x2F;更新员工信息功能, 直接查询数据库数据变更，看看在新增&#x2F;修改数据时，这些公共字段数据是否能够完成自动填充, 并且看看填充的create_user 及 update_user字段值是不是本地登录用户的ID。</p>
<h1 id="二、新增分类"><a href="#二、新增分类" class="headerlink" title="二、新增分类"></a>二、新增分类</h1><h2 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h2><p>后台系统中可以管理分类信息，分类包括两种类型，分别是 <strong>菜品分类</strong> 和 <strong>套餐分类</strong> 。当我们在后台系统中添加菜品时需要选择一个菜品分类，当我们在后台系统中添加一个套餐时需要选择一个套餐分类，在移动端也会按照菜品分类和套餐分类来展示对应的菜品和套餐。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807112659881.png" alt="image-20220807112659881"></p>
<p>在分类管理中,我们新增分类时, 可以选择新增菜品分类(川菜、湘菜、粤菜…), 也可以选择新增套餐分类(营养早餐、超值午餐…)。 在添加套餐的时候, 输入的排序字段, 控制的是移动端套餐列表的展示顺序。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807112709875.png" alt="image-20220807112709875"></p>
<h2 id="2-2-前端页面分析"><a href="#2-2-前端页面分析" class="headerlink" title="2.2 前端页面分析"></a>2.2 前端页面分析</h2><p>在开发代码之前，需要梳理一下整个程序的执行过程：</p>
<p>1). 在页面(backend&#x2F;page&#x2F;category&#x2F;list.html)的新增分类表单中填写数据，点击 “确定” 发送ajax请求，将新增分类窗口输入的数据以json形式提交到服务端</p>
<p>2). 服务端Controller接收页面提交的数据并调用Service将数据进行保存</p>
<p>3). Service调用Mapper操作数据库，保存数据</p>
<p>可以看到新增菜品分类和新增套餐分类请求的服务端地址和提交的json数据结构相同，只是type不同，所以服务端只需要提供一个方法统一处理即可：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807112759265.png" alt="image-20220807112759265"></p>
<p>具体请求信息整理如下: </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>POST</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;category</td>
</tr>
<tr>
<td>请求参数</td>
<td>json格式 - {“name”:”川菜”,”type”:”1”,”sort”:2}</td>
</tr>
</tbody></table>
<h2 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3 代码实现"></a>2.3 代码实现</h2><p>代码实现的具体步骤: </p>
<ul>
<li><p>实体类Category</p>
</li>
<li><p>Mapper接口CategoryMapper</p>
</li>
<li><p>业务层接口CategoryService</p>
</li>
<li><p>业务层实现类CategoryServiceImpl</p>
</li>
<li><p>控制层CategoryController</p>
</li>
</ul>
<h3 id="1-实体类Category"><a href="#1-实体类Category" class="headerlink" title="1.实体类Category"></a>1.实体类Category</h3><p>在entity包下新建实体类Category</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Category</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//类型 1 菜品分类 2 套餐分类</span></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//分类名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//顺序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-Mapper接口"><a href="#2-Mapper接口" class="headerlink" title="2.Mapper接口"></a>2.Mapper接口</h3><p>在mapper包下新建Mapper接口CategoryMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 11:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Category&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-业务层接口CategoryService"><a href="#3-业务层接口CategoryService" class="headerlink" title="3.业务层接口CategoryService"></a>3.业务层接口CategoryService</h3><p>在service包下新建业务层接口CategoryService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 11:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-业务层实现类CategoryServiceImpl"><a href="#4-业务层实现类CategoryServiceImpl" class="headerlink" title="4.业务层实现类CategoryServiceImpl"></a>4.业务层实现类CategoryServiceImpl</h3><p>在service包下的impl包下新建业务层接口CategoryService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 11:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper, Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-控制层CategoryController"><a href="#5-控制层CategoryController" class="headerlink" title="5. 控制层CategoryController"></a>5. 控制层CategoryController</h3><p>在controller包下新建CategoryController类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 11:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前category：&#123;&#125;&quot;</span>, category);</span><br><span class="line">        categoryService.save(category);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增分类成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-功能测试"><a href="#2-4-功能测试" class="headerlink" title="2.4 功能测试"></a>2.4 功能测试</h2><p>新增分类的代码编写完毕之后, 我们需要重新启动项目，进入管理系统访问分类管理, 然后进行新增分类测试，需要将所有情况都覆盖全，例如：</p>
<p>1). 输入的分类名称不存在</p>
<p>鲁菜添加成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807113920249.png" alt="image-20220807113920249"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807113953935.png" alt="image-20220807113953935"></p>
<p>2). 输入已存在的分类名称</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807113854767.png" alt="image-20220807113854767"></p>
<h1 id="三、分类信息分页查询"><a href="#三、分类信息分页查询" class="headerlink" title="三、分类信息分页查询"></a>三、分类信息分页查询</h1><h2 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h2><p>系统中的分类很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807141212238.png" alt="image-20220807141212238"></p>
<h2 id="3-2-前端页面分析"><a href="#3-2-前端页面分析" class="headerlink" title="3.2 前端页面分析"></a>3.2 前端页面分析</h2><p>在开发代码之前，需要梳理一下整个程序的执行过程：</p>
<p>1). 页面发送ajax请求，将分页查询参数(page、pageSize)提交到服务端</p>
<p>2). 服务端Controller接收页面提交的数据并调用Service查询数据</p>
<p>3). Service调用Mapper操作数据库，查询分页数据</p>
<p>4). Controller将查询到的分页数据响应给页面</p>
<p>5). 页面接收到分页数据并通过ElementUI的Table组件展示到页面上</p>
<p>页面加载时,就会触发Vue声明周期的钩子方法,然后执行分页查询,发送异步请求到服务端,前端代码如下: </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807141220749.png" alt="image-20220807141220749"></p>
<p>页面中使用的是ElementUI提供的分页组件进行分页条的展示:</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807141227018.png" alt="image-20220807141227018"></p>
<p>我们通过浏览器,也可以抓取到分页查询的请求信息, 如下: </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807141240320.png" alt="image-20220807141240320"></p>
<p>具体的请求信息整理如下: </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;category&#x2F;page</td>
</tr>
<tr>
<td>请求参数</td>
<td>?page&#x3D;1&amp;pageSize&#x3D;10</td>
</tr>
</tbody></table>
<h2 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h2><p>在CategoryController中增加分页查询的方法，在方法中传递分页条件进行查询，并且需要对查询到的结果，安排设置的套餐顺序字段sort进行排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line">    <span class="comment">//分页构造器</span></span><br><span class="line">    Page&lt;Category&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加排序条件，根据sort进行排序</span></span><br><span class="line">    queryWrapper.orderByAsc(Category::getSort);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    categoryService.page(pageInfo,queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-4-功能测试"><a href="#3-4-功能测试" class="headerlink" title="3.4 功能测试"></a>3.4 功能测试</h2><p>可以正常查询到数据并分页</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807141323634.png" alt="image-20220807141323634"></p>
<h1 id="四、删除分类"><a href="#四、删除分类" class="headerlink" title="四、删除分类"></a>四、删除分类</h1><h2 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h2><p>在分类管理列表页面，可以对某个分类进行删除操作。需要注意的是当分类关联了菜品或者套餐时，此分类不允许删除。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807144955349.png" alt="image-20220807144955349"></p>
<h2 id="4-2-前端页面分析"><a href="#4-2-前端页面分析" class="headerlink" title="4.2 前端页面分析"></a>4.2 前端页面分析</h2><p>在前端页面中，点击 “删除” 按钮，就会触发定义的方法，然后往服务端发送异步请求，并传递参数id，执行删除分类操作。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807145005124.png" alt="image-20220807145005124"></p>
<p>删除操作的具体执行流程如下： </p>
<p>1). 点击删除，页面发送ajax请求，将参数(id)提交到服务端</p>
<p>2). 服务端Controller接收页面提交的数据并调用Service删除数据</p>
<p>3). Service调用Mapper操作数据库</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807145012793.png" alt="image-20220807145012793"></p>
<p>从上述的分析中，可以得到请求的信息如下：</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>DELETE</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;category</td>
</tr>
<tr>
<td>请求参数</td>
<td>?id&#x3D;1395291114922618881</td>
</tr>
</tbody></table>
<h2 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h2><p>在CategoryController中增加根据ID删除的方法，在方法中接收页面传递参数id，然后执行删除操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id删除分类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long ids)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;删除分类，ids为：&#123;&#125;&quot;</span>,ids);</span><br><span class="line">    categoryService.removeById(ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;分类信息删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里前端传来的是ids，可以选择把前端的ids改为id，也可以在后端将id改为ids</p>
</blockquote>
<h2 id="3-5-功能完善"><a href="#3-5-功能完善" class="headerlink" title="3.5 功能完善"></a>3.5 功能完善</h2><p>在上述的测试中，可以看到分类数据是可以正常删除的。但是并没有检查删除的分类是否关联了菜品或者套餐，所以我们需要进行功能完善。</p>
<p><strong>完善后的逻辑为：</strong></p>
<ul>
<li>根据当前分类的ID，查询该分类下是否存在菜品，如果存在，则提示错误信息</li>
<li>根据当前分类的ID，查询该分类下是否存在套餐，如果存在，则提示错误信息</li>
<li>执行正常的删除分类操作</li>
</ul>
<h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p><strong>1. 准备菜品(Dish)及套餐(Setmeal)实体类(课程资料中直接拷贝)放在entity包下</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 菜品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dish</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品价格</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品码</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//0 停售 1 起售</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//顺序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Setmeal</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐价格</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态 0:停用 1:启用</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//编码</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.Mapper接口DishMapper和SetmealMapper</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Dish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Setmeal&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>3.Service接口DishService和SetmealService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Dish&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Setmeal&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>4.Service实现类DishServicelmpl和SetmealServicelmpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DishMapper, Dish&gt; <span class="keyword">implements</span> <span class="title class_">DishService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;SetmealMapper, Setmeal&gt; <span class="keyword">implements</span> <span class="title class_">SetmealService</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><p> <strong>1.在CategoryService中扩展remove方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line">	<span class="comment">//根据ID删除分类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.在CategoryServiceImpl中实现remove方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServicelmpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper, Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealService setmealService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; dishLambdaQueryWrapper=<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加查询条件，根据分类id进行查询</span></span><br><span class="line">        dishLambdaQueryWrapper.eq(Dish::getCategoryId,id);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> dishService.count(dishLambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询当前分类是否关联菜品,如果已经关联，抛出业务异常</span></span><br><span class="line">        <span class="keyword">if</span>(count1&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//已经关联菜品，抛出业务异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;已经关联菜品，不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询当前分类是否关联了套餐，如果已经关联，抛出业务异常</span></span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; setmealLambdaQueryWrapper=<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加查询条件，根据分类id进行查询</span></span><br><span class="line">        setmealLambdaQueryWrapper.eq(Setmeal::getCategoryId,id);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> setmealService.count(setmealLambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(count2&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//已经关联套餐，抛出业务异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;已经关联套餐，不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//正常删除分类</span></span><br><span class="line">        <span class="built_in">super</span>.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在上述的业务逻辑中，当分类下关联的有菜品或者套餐时，我们在业务代码中抛出了自定义异常，并且在异常中封装了错误提示信息，那这个错误提示信息如何提示给页面呢？</p>
<p>异常抛出之后，会被异常处理器捕获，我们只需要在异常处理器中捕获这一类的异常，然后给页面返回对应的提示信息即可。</p>
<p><strong>3.定义异常类CustomException</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>4.在全局异常处理器GlobalExceptionHandler添加异常处理</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进行异常处理方法</span></span><br><span class="line"><span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(CustomException ex)</span>&#123;</span><br><span class="line">    log.error(ex.getMessage());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.error(ex.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5.改造CategoryController的delete方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除分类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long ids)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;删除分类，id为&#123;&#125;&quot;</span>,ids);</span><br><span class="line"><span class="comment">//        categoryService.removeById(ids);</span></span><br><span class="line">        categoryService.remove(ids);</span><br><span class="line">        <span class="comment">//代码完善之后categoryService.remove(ids);</span></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;分类信息删除成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、修改分类"><a href="#五、修改分类" class="headerlink" title="五、修改分类"></a>五、修改分类</h1><h2 id="5-1-需求分析"><a href="#5-1-需求分析" class="headerlink" title="5.1 需求分析"></a>5.1 需求分析</h2><p>在分类管理列表页面点击修改按钮，弹出修改窗口，在修改窗口回显分类信息并进行修改，最后点击确定按钮完成修改操作</p>
<h2 id="5-2-代码实现"><a href="#5-2-代码实现" class="headerlink" title="5.2 代码实现"></a>5.2 代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改分类</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">    categoryService.updateById(category);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;分类修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-3-功能测试"><a href="#5-3-功能测试" class="headerlink" title="5.3 功能测试"></a>5.3 功能测试</h2><p>修改湘菜信息<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807150908759.png" alt="image-20220807150908759"></p>
<p>页面展示正常</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807150923924.png" alt="image-20220807150923924"></p>
<p>SQL语句成功执行</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807150943748.png" alt="image-20220807150943748"></p>
<p>数据库中数据修改成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807151005586.png" alt="image-20220807151005586"></p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>瑞吉外卖项目day04笔记</title>
    <url>/posts/15807900.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="一、文件上传下载"><a href="#一、文件上传下载" class="headerlink" title="一、文件上传下载"></a>一、文件上传下载</h1><h2 id="1-1-文件上传介绍"><a href="#1-1-文件上传介绍" class="headerlink" title="1.1 文件上传介绍"></a>1.1 文件上传介绍</h2><p>文件上传，也称为upload，是指将本地图片、视频、音频等文件上传到服务器上，可以供其他用户浏览或下载的过程。文件上传在项目中应用非常广泛，我们经常发微博、发微信朋友圈都用到了文件上传功能。</p>
<p>文件上传时，对页面的form表单有如下要求：</p>
<table>
<thead>
<tr>
<th>表单属性</th>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>method</td>
<td>post</td>
<td>必须选择post方式提交</td>
</tr>
<tr>
<td>enctype</td>
<td>multipart&#x2F;form-data</td>
<td>采用multipart格式上传文件</td>
</tr>
<tr>
<td>type</td>
<td>file</td>
<td>使用input的file控件上传</td>
</tr>
</tbody></table>
<h3 id="1-前端介绍"><a href="#1-前端介绍" class="headerlink" title="1. 前端介绍"></a>1. 前端介绍</h3><p><strong>1). 简单html页面表单</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/common/upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;myFile&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>  /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>2). ElementUI中提供的upload上传组件</strong></p>
<p>目前一些前端组件库也提供了相应的上传组件，但是底层原理还是基于form表单的文件上传。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807160953182.png" alt="image-20220807160953182"> </p>
<h3 id="2-服务端介绍"><a href="#2-服务端介绍" class="headerlink" title="2.服务端介绍"></a>2.服务端介绍</h3><p>服务端要接收客户端页面上传的文件，通常都会使用Apache的两个组件：</p>
<ul>
<li><p>commons-fileupload</p>
</li>
<li><p>commons-io</p>
</li>
</ul>
<p>而Spring框架在spring-web包中对文件上传进行了封装，大大简化了服务端代码，我们只需要在Controller的方法中声明一个MultipartFile类型的参数即可接收上传的文件，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line">    System.out.println(file);</span><br><span class="line">    <span class="keyword">return</span> R.success(fileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-文件下载介绍"><a href="#1-2-文件下载介绍" class="headerlink" title="1.2 文件下载介绍"></a>1.2 文件下载介绍</h2><p>文件下载，也称为download，是指将文件从服务器传输到本地计算机的过程。通过浏览器进行文件下载，通常有两种表现形式：</p>
<p><strong>1). 以附件形式下载，弹出保存对话框，将文件保存到指定磁盘目录</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807161038817.png" alt="image-20220807161038817"></p>
<p><strong>2). 直接在浏览器中打开</strong></p>
<p>而今天所需要实现的菜品展示，表现形式为在浏览器中直接打开。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807161047354.png" alt="image-20220807161047354"></p>
<p>通过浏览器进行文件下载，本质上就是服务端将文件以流的形式写回浏览器的过程。</p>
<h2 id="1-3-文件上传代码实现"><a href="#1-3-文件上传代码实现" class="headerlink" title="1.3 文件上传代码实现"></a>1.3 文件上传代码实现</h2><h3 id="1-导入文件上传页面"><a href="#1-导入文件上传页面" class="headerlink" title="1.导入文件上传页面"></a>1.导入文件上传页面</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;文件上传&lt;/title&gt;</span><br><span class="line">  &lt;!-- 引入样式 --&gt;</span><br><span class="line">  &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;../../plugins/element-ui/index.css&quot;</span> /&gt;</span><br><span class="line">  &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;../../styles/common.css&quot;</span> /&gt;</span><br><span class="line">  &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;../../styles/page.css&quot;</span> /&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;shortcut icon&quot;</span> href=<span class="string">&quot;../../favicon.ico&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div class=<span class="string">&quot;addBrand-container&quot;</span> id=<span class="string">&quot;food-add-app&quot;</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">        &lt;el-upload class=<span class="string">&quot;avatar-uploader&quot;</span></span><br><span class="line">                action=<span class="string">&quot;/common/upload&quot;</span></span><br><span class="line">                :show-file-list=<span class="string">&quot;false&quot;</span></span><br><span class="line">                :on-success=<span class="string">&quot;handleAvatarSuccess&quot;</span></span><br><span class="line">                :before-upload=<span class="string">&quot;beforeUpload&quot;</span></span><br><span class="line">                ref=<span class="string">&quot;upload&quot;</span>&gt;</span><br><span class="line">            &lt;img v-<span class="keyword">if</span>=<span class="string">&quot;imageUrl&quot;</span> :src=<span class="string">&quot;imageUrl&quot;</span> class=<span class="string">&quot;avatar&quot;</span>&gt;&lt;/img&gt;</span><br><span class="line">            &lt;i v-<span class="keyword">else</span> class=<span class="string">&quot;el-icon-plus avatar-uploader-icon&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">        &lt;/el-upload&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">    &lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;../../plugins/vue/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- 引入组件库 --&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;../../plugins/element-ui/index.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- 引入axios --&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;../../plugins/axios/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;../../js/index.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#food-add-app&#x27;</span>,</span><br><span class="line">        data() &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            imageUrl: <span class="string">&#x27;&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          handleAvatarSuccess (response, file, fileList) &#123;</span><br><span class="line">              <span class="built_in">this</span>.imageUrl = `/common/download?name=$&#123;response.data&#125;`</span><br><span class="line">          &#125;,</span><br><span class="line">          beforeUpload (file) &#123;</span><br><span class="line">            <span class="keyword">if</span>(file)&#123;</span><br><span class="line">              <span class="type">const</span> <span class="variable">suffix</span> <span class="operator">=</span> file.name.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">              <span class="type">const</span> <span class="variable">size</span> <span class="operator">=</span> file.size / <span class="number">1024</span> / <span class="number">1024</span> &lt; <span class="number">2</span></span><br><span class="line">              <span class="keyword">if</span>([<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;jpeg&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>].indexOf(suffix) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.$message.error(<span class="string">&#x27;上传图片只支持 png、jpeg、jpg 格式！&#x27;</span>)</span><br><span class="line">                <span class="built_in">this</span>.$refs.upload.clearFiles()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span>(!size)&#123;</span><br><span class="line">                <span class="built_in">this</span>.$message.error(<span class="string">&#x27;上传文件大小不能超过 2MB!&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> file</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-配置文件存储路径"><a href="#2-配置文件存储路径" class="headerlink" title="2.配置文件存储路径"></a>2.配置文件存储路径</h3><p>需要在application.yml中定义文件存储路径</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reggie:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">D:\img\</span></span><br></pre></td></tr></table></figure>

<h3 id="2-添加Controller"><a href="#2-添加Controller" class="headerlink" title="2.添加Controller"></a>2.添加Controller</h3><p>编写文件上传的方法, 通过MultipartFile类型的参数即可接收上传的文件, 方法形参的名称需要与页面的file域的name属性一致。</p>
<p>所在包: com.itheima.reggie.controller</p>
<p>上传逻辑: </p>
<p>1). 获取文件的原始文件名, 通过原始文件名获取文件后缀</p>
<p>2). 通过UUID重新声明文件名, 文件名称重复造成文件覆盖</p>
<p>3). 创建文件存放目录</p>
<p>4). 将上传的临时文件转存到指定位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 16:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/common&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;reggie.path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String basePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件上传</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="comment">//file 是一个临时文件，需要转存到指定位置，否则请求完成后临时文件会删除</span></span><br><span class="line">        <span class="comment">//log.info(&quot;file:&#123;&#125;&quot;,file.toString());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//原始文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">//使用UUID随机生成文件名，防止因为文件名相同造成文件覆盖</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + suffix;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个目录对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basePath);</span><br><span class="line">        <span class="comment">//判断当前目录是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">            <span class="comment">//目录不存在</span></span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将临时文件转存到指定位置</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + fileName));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-在过滤器中进行路径放行"><a href="#3-在过滤器中进行路径放行" class="headerlink" title="3.在过滤器中进行路径放行"></a>3.在过滤器中进行路径放行</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807161831315.png" alt="image-20220807161831315"></p>
<h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h3><p>成功实现文件上传。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807162005372.png" alt="image-20220807162005372"></p>
<h2 id="1-4-文件下载代码实现"><a href="#1-4-文件下载代码实现" class="headerlink" title="1.4 文件下载代码实现"></a>1.4 文件下载代码实现</h2><h3 id="1-前端代码"><a href="#1-前端代码" class="headerlink" title="1.前端代码"></a>1.前端代码</h3><p>文件下载，前端页面可以使用<img>标签展示下载的图片。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">&quot;imageUrl&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;imageUrl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>那么，通过<img>标签如何展示图片数据呢，接下来我们来解析一下具体的流程：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807163952168.png" alt="image-20220807163952168"></p>
<p>在文件上传成功后，在 handleAvatarSuccess 方法中获取文件上传成功之后返回的数据(文件名)，然后调用 &#x2F;common&#x2F;download?name&#x3D;xxx 进行文件的下载。在这里，我们想让上传的照片能够在页面展示出来，所以我们就需要在服务端将文件以流的形式写回浏览器。</p>
<h3 id="2-后端代码"><a href="#2-后端代码" class="headerlink" title="2.后端代码"></a>2.后端代码</h3><p>在 CommonController 中定义方法download，并接收页面传递的参数name，然后读取图片文件的数据，然后以流的形式写回浏览器。</p>
<p>具体逻辑如下： </p>
<p>1). 定义输入流，通过输入流读取文件内容</p>
<p>2). 通过response对象，获取到输出流</p>
<p>3). 通过response对象设置响应数据格式(image&#x2F;jpeg)</p>
<p>4). 通过输入流读取文件数据，然后通过上述的输出流写回浏览器</p>
<p>5). 关闭资源</p>
<p><strong>代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件下载</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String name, HttpServletResponse response)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//输入流，通过输入流读取文件内容</span></span><br><span class="line">        FileInputStream fileInputStream=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(basePath+name));</span><br><span class="line">        <span class="comment">//输出流，通过输出流将文件写回浏览器，在浏览器中展示图片</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len=fileInputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        outputStream.close();</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3><p>图片正常展示</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807164247038.png" alt="image-20220807164247038"></p>
<h1 id="二、新增菜品"><a href="#二、新增菜品" class="headerlink" title="二、新增菜品"></a>二、新增菜品</h1><h2 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h2><p>后台系统中可以管理菜品信息，通过 新增功能来添加一个新的菜品，在添加菜品时需要选择当前菜品所属的菜品分类，并且需要上传菜品图片，在移动端会按照菜品分类来展示对应的菜品信息 。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807171606466.png" alt="image-20220807171606466"></p>
<h2 id="2-2-数据模型"><a href="#2-2-数据模型" class="headerlink" title="2.2 数据模型"></a>2.2 数据模型</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807171635111.png" alt="image-20220807171635111"></p>
<p>新增菜品，其实就是将新增页面录入的菜品信息插入到dish表，如果添加了口味做法，还需要向dish_flavor表插入数据。所以在新增菜品时，涉及到两个表：</p>
<table>
<thead>
<tr>
<th>表结构</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>dish</td>
<td>菜品表</td>
</tr>
<tr>
<td>dish_flavor</td>
<td>菜品口味表</td>
</tr>
</tbody></table>
<ol>
<li>菜品表:dish</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807171648611.png" alt="image-20220807171648611"></p>
<ol start="2">
<li>菜品口味表:dish_flavor</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807171701776.png" alt="image-20220807171701776"></p>
<h2 id="2-3-准备工作"><a href="#2-3-准备工作" class="headerlink" title="2.3 准备工作"></a>2.3 准备工作</h2><p>在开发业务功能前，先将需要用到的类和接口基本结构创建好：</p>
<p>1、实体类 DishFlavor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">菜品口味</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishFlavor</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味数据list</span></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、Mapper接口DishFlavorMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 17:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishFlavorMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;DishFlavor&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、业务层接口 DishFlavorService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 17:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishFlavorService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;DishFlavor&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、业务层实现类 DishFlavorServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 17:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishFlavorServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DishFlavorMapper, DishFlavor&gt; <span class="keyword">implements</span> <span class="title class_">DishFlavorService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、 控制层 DishController</p>
<p>菜品及菜品口味的相关操作，统一使用这一个controller。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 菜品管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-07 17:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/dish&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishFlavorService dishFlavorService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-前端页面分析"><a href="#2-4-前端页面分析" class="headerlink" title="2.4 前端页面分析"></a>2.4 前端页面分析</h2><p>在开发代码之前，需要梳理一下新增菜品时前端页面和服务端的交互过程。</p>
<ol>
<li><p>点击新建菜品按钮, 访问页面(backend&#x2F;page&#x2F;food&#x2F;add.html), 页面加载时发送ajax请求，请求服务端获取菜品分类数据并展示到下拉框中</p>
</li>
<li><p>页面发送请求进行图片上传，请求服务端将图片保存到服务器(上传功能已实现)</p>
</li>
<li><p>页面发送请求进行图片下载，将上传的图片进行回显(下载功能已实现)</p>
</li>
<li><p>点击保存按钮，发送ajax请求，将菜品相关数据以json形式提交到服务端</p>
</li>
</ol>
<p>开发新增菜品功能，其实就是在服务端编写代码去处理前端页面发送的<strong>这4次请求</strong>(上传、下载已实现)即可。经过上述的分析，我们还需要在服务端实现两块功能：</p>
<p>A. 菜品分类数据列表查询, 具体请求信息整理如下 : </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;category&#x2F;list</td>
</tr>
<tr>
<td>请求参数</td>
<td>?type&#x3D;1</td>
</tr>
</tbody></table>
<p>B. 保存菜品信息, 具体请求信息整理如下 : </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>POST</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;dish</td>
</tr>
<tr>
<td>请求参数</td>
<td>json格式</td>
</tr>
</tbody></table>
<h2 id="2-5-代码实现"><a href="#2-5-代码实现" class="headerlink" title="2.5 代码实现"></a>2.5 代码实现</h2><h3 id="1-菜品分类查询"><a href="#1-菜品分类查询" class="headerlink" title="1.菜品分类查询"></a>1.菜品分类查询</h3><p>在CategoryController中增加方法实现菜品分类查询，根据分类进行查询，并对查询的结果按照sort排序字段进行升序排序，如果sort相同，再按照修改时间倒序排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据条件查询分类数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Category&gt;&gt; <span class="title function_">list</span><span class="params">(Category category)</span> &#123;</span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加条件</span></span><br><span class="line">    lambdaQueryWrapper.eq(category.getType() != <span class="literal">null</span>, Category::getType, category.getType());</span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    lambdaQueryWrapper.orderByAsc(Category::getSort).orderByAsc(Category::getUpdateTime);</span><br><span class="line">    List&lt;Category&gt; list = categoryService.list(lambdaQueryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试：</strong></p>
<p>可以正常显示。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220807172303348.png" alt="image-20220807172303348"></p>
<h3 id="2-保存菜品信息"><a href="#2-保存菜品信息" class="headerlink" title="2.保存菜品信息"></a>2.保存菜品信息</h3><p>在上述的分析中，我们可以看到在保存菜品时，页面传递过来的是json格式数据，格式如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;佛跳墙&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">88800</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span><span class="string">&quot;da9e1c70-fc32-4781-9510-a1c4ccd2ff59.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;佛跳墙&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1397844357980663809&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;flavors&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;辣度&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;[\&quot;不辣\&quot;,\&quot;微辣\&quot;,\&quot;中辣\&quot;,\&quot;重辣\&quot;]&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;showOption&quot;</span><span class="punctuation">:</span><span class="keyword">false</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;忌口&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;[\&quot;不要葱\&quot;,\&quot;不要蒜\&quot;,\&quot;不要香菜\&quot;,\&quot;不要辣\&quot;]&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;showOption&quot;</span><span class="punctuation">:</span><span class="keyword">false</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在服务端应该如何来封装前端传递的数据呢，我们发现，如果使用菜品类Dish来封装，只能封装菜品的基本属性，flavors属性是无法封装的。那么这个时候，我们应该如何处理呢?</p>
<p>这个时候，我们需要自<strong>定义一个实体类，然后继承自 Dish，并对Dish的属性进行拓展，增加 flavors 集合属性(内部封装DishFlavor)。</strong></p>
<p><strong>1). 导入 DishDto 实体类</strong></p>
<p>封装页面传递的请求参数。</p>
<p>所属包: com.itheima.reggie.dto</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Dish;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.DishFlavor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishDto</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><font color='red'>拓展： 我们在做项目时，经常会涉及到各种类型的实体模型。基本包含以下几种</font> </p>
<table>
<thead>
<tr>
<th>实体模型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>DTO</td>
<td>Data Transfer Object(数据传输对象)，一般用于展示层与服务层之间的数据传输。</td>
</tr>
<tr>
<td>Entity</td>
<td>最常用实体类，基本和数据表一一对应，一个实体类对应一张表。</td>
</tr>
<tr>
<td>VO</td>
<td>Value Object(值对象), 主要用于封装前端页面展示的数据对象，用一个VO对象来封装整个页面展示所需要的对象数据</td>
</tr>
<tr>
<td>PO</td>
<td>Persistant Object(持久层对象), 是ORM(Objevt Relational Mapping)框架中Entity，PO属性和数据库中表的字段形成一一对应关系</td>
</tr>
</tbody></table>
<p><strong>2). DishController定义方法新增菜品</strong></p>
<p>在该Controller的方法中，不仅需要保存菜品的基本信息，还需要保存菜品的口味信息，需要操作两张表，所以我们需要在DishService接口中定义接口方法，在这个方法中需要保存上述的两部分数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增菜品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span>&#123;</span><br><span class="line">    log.info(dishDto.toString());</span><br><span class="line"></span><br><span class="line">    dishService.saveWithFlavor(dishDto);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>3). DishService中增加方法saveWithFlavor</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新增菜品，同时插入菜品对应的口味数据，需要操作两张表：dish、dish_flavor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span>;</span><br></pre></td></tr></table></figure>



<p><strong>4). DishServiceImpl中实现方法saveWithFlavor</strong></p>
<p>页面传递的菜品口味信息，仅仅包含name 和 value属性，缺少一个非常重要的属性dishId， 所以在保存完菜品的基本信息后，我们需要获取到菜品ID，然后为菜品口味对象属性dishId赋值。</p>
<p>具体逻辑如下：</p>
<p>①. 保存菜品基本信息 ;</p>
<p>②. 获取保存的菜品ID ;</p>
<p>③. 获取菜品口味列表，遍历列表，为菜品口味对象属性dishId赋值;</p>
<p>④. 批量保存菜品口味列表;</p>
<p>代码实现如下: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DishFlavorService dishFlavorService;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 新增菜品，同时保存对应的口味数据</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">    <span class="comment">//保存菜品的基本信息到菜品表dish</span></span><br><span class="line">    <span class="built_in">this</span>.save(dishDto);</span><br><span class="line">	</span><br><span class="line">    <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dishDto.getId();<span class="comment">//菜品id</span></span><br><span class="line">    <span class="comment">//菜品口味</span></span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line">    flavors = flavors.stream().map((item) -&gt; &#123;</span><br><span class="line">        item.setDishId(dishId);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存菜品口味数据到菜品口味表dish_flavor</span></span><br><span class="line">    dishFlavorService.saveBatch(flavors);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明: </p>
<p>​	由于在 saveWithFlavor 方法中，进行了两次数据库的保存操作，操作了两张表，那么为了保证数据的一致性，我们需要在方法上加上注解 @Transactional来控制事务。</p>
</blockquote>
<p><strong>5). 在引导类上加注解 @EnableTransactionManagement</strong></p>
<p>Service层方法上加的注解@Transactional要想生效，需要在引导类上加上注解 @EnableTransactionManagement， 开启对事务的支持。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//开启对事物管理的支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReggieApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ReggieApplication.class,args);</span><br><span class="line">        log.info(<span class="string">&quot;项目启动成功...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-6-功能测试"><a href="#2-6-功能测试" class="headerlink" title="2.6 功能测试"></a>2.6 功能测试</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808085237220.png" alt="image-20220808085237220"></p>
<p>菜品表添加成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808085255338.png" alt="image-20220808085255338"></p>
<p>口味表添加成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808085308284.png" alt="image-20220808085308284"></p>
<h1 id="三、菜品分页查询"><a href="#三、菜品分页查询" class="headerlink" title="三、菜品分页查询"></a>三、菜品分页查询</h1><h2 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h2><p>系统中的菜品数据很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808092228949.png" alt="image-20220808092228949"></p>
<p>在菜品列表展示时，除了菜品的基本信息(名称、售价、售卖状态、更新时间)外，还有两个字段略微特殊，第一个是图片字段 ，我们从数据库查询出来的仅仅是图片的名字，图片要想在表格中回显展示出来，就需要下载这个图片。第二个是菜品分类，这里展示的是分类名称，而不是分类ID，此时我们就需要根据菜品的分类ID，去分类表中查询分类信息，然后在页面展示。</p>
<h2 id="3-2-前端页面分析"><a href="#3-2-前端页面分析" class="headerlink" title="3.2 前端页面分析"></a>3.2 前端页面分析</h2><p>前端页面和服务端的<strong>交互过程</strong>：</p>
<ol>
<li><p>访问页面(backend&#x2F;page&#x2F;food&#x2F;list.html)时，发送ajax请求，将分页查询参数(page、pageSize、name)提交到服务端，获取分页数据</p>
</li>
<li><p>页面发送请求，请求服务端进行图片下载，用于页面图片展示</p>
</li>
</ol>
<p>开发菜品信息分页查询功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可，而前端发起的请求中， 图片文件下载回显的代码，我们已经实现了。所以，我们只需要开发分页查询的功能即可，分页查询具体的请求信息如下：</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;dish&#x2F;page</td>
</tr>
<tr>
<td>请求参数</td>
<td>?page&#x3D;1&amp;pageSize&#x3D;10&amp;name&#x3D;xxx</td>
</tr>
</tbody></table>
<h2 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h2><h3 id="1-分析"><a href="#1-分析" class="headerlink" title="1.分析"></a>1.分析</h3><p>在分页查询时需要给页面返回分类的名称，而<strong>分类的名称前端在接收的时候是通过 categoryName 属性获取的，那么对应的服务端也应该封装到 categoryName 属性中。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;categoryName&quot;</span> <span class="attr">label</span>=<span class="string">&quot;菜品分类&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>而在我们的实体类 Dish 中，仅仅包含 categoryId， 不包含 categoryNam所以要返回DishDto对象，在该对象中可以<strong>拓展一个属性 categoryName</strong>，来封装菜品分类名称。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishDto</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> String categoryName; <span class="comment">//菜品分类名称</span></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>具体逻辑为： </p>
<ol>
<li><p>构造分页条件对象</p>
</li>
<li><p>构建查询及排序条件</p>
</li>
<li><p>执行分页条件查询</p>
</li>
<li><p>遍历分页查询列表数据，根据分类ID查询分类信息，从而获取该菜品的分类名称</p>
</li>
<li><p>封装数据并返回</p>
</li>
</ol>
<h3 id="2-代码编写"><a href="#2-代码编写" class="headerlink" title="2.代码编写"></a>2.代码编写</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line">    <span class="comment">//构造分页构造器</span></span><br><span class="line">    Page&lt;Dish&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line"></span><br><span class="line">    Page&lt;DishDto&gt; dishDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加过滤条件</span></span><br><span class="line">    queryWrapper.like(!StringUtils.isEmpty(name), Dish::getName, name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    queryWrapper.orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行分页查询</span></span><br><span class="line">    dishService.page(pageInfo, queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象拷贝，records属性不拷贝，过会我们自己填</span></span><br><span class="line">    BeanUtils.copyProperties(pageInfo,dishDtoPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line">    <span class="comment">//拿到菜品集合</span></span><br><span class="line">    List&lt;Dish&gt; records = pageInfo.getRecords();</span><br><span class="line">    <span class="comment">//数据拷贝填入</span></span><br><span class="line">    List&lt;DishDto&gt; list=records.stream().map((item)-&gt;&#123;</span><br><span class="line">        DishDto dishDto=<span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">        <span class="comment">//对象拷贝</span></span><br><span class="line">        BeanUtils.copyProperties(item,dishDto);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="comment">//根据id查分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="comment">//如果当前分类为空就跳过不添加</span></span><br><span class="line">        <span class="keyword">if</span>(category!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            dishDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dishDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//存入DtoPage的集合中</span></span><br><span class="line">    dishDtoPage.setRecords(list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(dishDtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-3-功能测试"><a href="#3-3-功能测试" class="headerlink" title="3.3 功能测试"></a>3.3 功能测试</h2><p>菜品信息分类正常且菜品分类正常显示</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808092835511.png" alt="image-20220808092835511"></p>
<h1 id="四、修改菜品基本信息"><a href="#四、修改菜品基本信息" class="headerlink" title="四、修改菜品基本信息"></a>四、修改菜品基本信息</h1><h2 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h2><p>在菜品管理列表页面点击修改按钮，跳转到修改菜品页面，在修改页面回显菜品相关信息并进行修改，最后点击确定按钮完成修改操作。</p>
<h2 id="4-2-前端页面分析"><a href="#4-2-前端页面分析" class="headerlink" title="4.2 前端页面分析"></a>4.2 前端页面分析</h2><p><strong>前端页面（add.html）和服务端的交互过程</strong>：</p>
<ol>
<li><p>点击菜品列表的中的修改按钮，携带菜品id跳转至add.html</p>
</li>
<li><p>进入add.html，页面发送ajax请求，请求服务端获取分类数据，用于菜品分类下拉框中数据展示(<strong>已实现</strong>)</p>
</li>
<li><p>add.html获取id, 发送ajax请求，请求服务端，根据id查询当前菜品信息，用于菜品信息回显</p>
</li>
<li><p>页面发送请求，请求服务端进行图片下载，用于页图片回显(<strong>已实现</strong>)</p>
</li>
<li><p>点击保存按钮，页面发送ajax请求，将修改后的菜品相关数据以json形式提交到服务端</p>
</li>
</ol>
<hr>
<p>经过上述的分析，我们发现，菜品分类下拉框的展示、图片的下载回显功能我们都已经实现了。我们只需要在这里实现两个功能即可，分别是： </p>
<p><strong>1. 根据ID查询菜品及菜品口味信息</strong></p>
<p>具体请求信息如下： </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;dish&#x2F;{id}</td>
</tr>
</tbody></table>
<p><strong>2. 修改菜品及菜品口味信息</strong></p>
<p>具体请求信息如下：</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>PUT</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;dish</td>
</tr>
<tr>
<td>请求参数</td>
<td>json格式数据</td>
</tr>
</tbody></table>
<p>具体的json格式数据，我们可以通过浏览器抓取： </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1422783914845487106&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;佛跳墙&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1397844357980663809&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">88800</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span><span class="string">&quot;da9e1c70-fc32-4781-9510-a1c4ccd2ff59.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;佛跳墙&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-08-04 12:58:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createUser&quot;</span><span class="punctuation">:</span><span class="string">&quot;1412578435737350122&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updateUser&quot;</span><span class="punctuation">:</span><span class="string">&quot;1412578435737350122&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;flavors&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1422783914883235842&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1422783914845487106&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;辣度&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;[\&quot;不辣\&quot;,\&quot;微辣\&quot;,\&quot;中辣\&quot;,\&quot;重辣\&quot;]&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-08-04 12:58:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-08-04 12:58:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;createUser&quot;</span><span class="punctuation">:</span><span class="string">&quot;1412578435737350122&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;updateUser&quot;</span><span class="punctuation">:</span><span class="string">&quot;1412578435737350122&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;isDeleted&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;showOption&quot;</span><span class="punctuation">:</span><span class="keyword">false</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1422783914895818754&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1422783914845487106&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;忌口&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;[\&quot;不要葱\&quot;,\&quot;不要蒜\&quot;,\&quot;不要香菜\&quot;,\&quot;不要辣\&quot;]&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-08-04 12:58:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-08-04 12:58:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;createUser&quot;</span><span class="punctuation">:</span><span class="string">&quot;1412578435737350122&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;updateUser&quot;</span><span class="punctuation">:</span><span class="string">&quot;1412578435737350122&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;isDeleted&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;showOption&quot;</span><span class="punctuation">:</span><span class="keyword">false</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-3-功能实现"><a href="#4-3-功能实现" class="headerlink" title="4.3 功能实现"></a>4.3 功能实现</h2><h3 id="1-根据ID查询菜品信息"><a href="#1-根据ID查询菜品信息" class="headerlink" title="1.根据ID查询菜品信息"></a>1.根据ID查询菜品信息</h3><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>页面发送ajax请求，请求服务端，根据id查询当前菜品信息和对应的口味信息，用于修改页面中菜品信息回显。</p>
<ol>
<li>在DishService接口中扩展getByIdWithFlavor方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询菜品信息和对应的口味信息</span></span><br><span class="line"><span class="keyword">public</span> DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>在DishService实现类中实现此方法<ol>
<li>根据ID查询菜品的基本信息 </li>
<li>根据菜品的ID查询菜品口味列表数据</li>
<li>组装数据并返回</li>
</ol>
</li>
</ol>
<p>代码实现: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询菜品信息和对应的口味信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//查询菜品基本信息，从dish表查询</span></span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line"></span><br><span class="line">    <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">    <span class="comment">//对象拷贝，将菜品基本信息拷贝到Dto对象中</span></span><br><span class="line">    BeanUtils.copyProperties(dish,dishDto);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询当前菜品对应的口味信息，从dish_flavor表查询</span></span><br><span class="line">    LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(DishFlavor::getDishId,dish.getId());</span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishFlavorService.list(queryWrapper);</span><br><span class="line">    dishDto.setFlavors(flavors);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dishDto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3). 在DishController中创建get方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据id查询菜品信息和对应的口味信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;DishDto&gt; <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> dishService.getByIdWithFlavor(id);</span><br><span class="line">    <span class="keyword">return</span> R.success(dishDto);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>@PathVariable : 该注解可以用来提取url路径中传递的请求参数。</p>
</blockquote>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>数据成功回显</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808101301876.png" alt="image-20220808101301876"></p>
<h3 id="2-修改菜品信息"><a href="#2-修改菜品信息" class="headerlink" title="2.修改菜品信息"></a>2.修改菜品信息</h3><h4 id="1-代码实现"><a href="#1-代码实现" class="headerlink" title="1.代码实现"></a>1.代码实现</h4><p>点击保存按钮，页面发送ajax请求，将修改后的菜品相关数据以json形式提交到服务端。<strong>在修改菜品信息时需要注意，除了要更新dish菜品表，还需要更新dish_flavor菜品口味表。</strong></p>
<ol>
<li>在DishService接口中扩展方法updateWithFlavor</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新菜品信息，同时更新对应的口味信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishDto)</span>;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>在DishServiceImpl中实现方法updateWithFlavor</li>
</ol>
<p>在该方法中，既需要更新dish菜品基本信息表，还需要更新dish_flavor菜品口味表。</p>
<p>而页面再操作时，关于菜品的口味，有修改，有新增，也有可能删除，name应该如何更新菜品口味信息呢？</p>
<p>其实，无论菜品口味信息如何变化，我们只需要保持一个原则： <strong>先删除，后添加。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="meta">@Transactional</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">     <span class="comment">//更新dish表基本信息</span></span><br><span class="line">     <span class="built_in">this</span>.updateById(dishDto);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//将修改操作拆解为删除+重新添加两部分来完成</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//清理当前菜品对应口味数据---dish_flavor表的delete操作</span></span><br><span class="line">     LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line">     queryWrapper.eq(DishFlavor::getDishId,dishDto.getId());</span><br><span class="line"></span><br><span class="line">     <span class="comment">//1.删除</span></span><br><span class="line">     dishFlavorService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//2.添加</span></span><br><span class="line">     <span class="comment">//添加当前提交过来的口味数据---dish_flavor表的insert操作</span></span><br><span class="line">     List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line"></span><br><span class="line">     flavors = flavors.stream().map((item) -&gt; &#123;</span><br><span class="line">         item.setDishId(dishDto.getId());</span><br><span class="line">         <span class="keyword">return</span> item;</span><br><span class="line">     &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">     dishFlavorService.saveBatch(flavors);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<p>3). 在DishController中创建update方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 修改菜品</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span>&#123;</span><br><span class="line">    log.info(dishDto.toString());</span><br><span class="line">    dishService.updateWithFlavor(dishDto);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;修改菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="4-3-2-2-功能测试"><a href="#4-3-2-2-功能测试" class="headerlink" title="4.3.2.2 功能测试"></a>4.3.2.2 功能测试</h5><p>这是原来的菜品信息</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808102827337.png" alt="image-20220808102827337"></p>
<p>修改为</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808103015255.png" alt="image-20220808103015255"></p>
<p>页面修改操作成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808103045478.png" alt="image-20220808103045478"></p>
<p>菜品表更新成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808103146956.png" alt="image-20220808103146956"></p>
<p>口味表更新成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808103118506.png" alt="image-20220808103118506"></p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>瑞吉外卖项目day05笔记</title>
    <url>/posts/2793815592.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="一、新增套餐"><a href="#一、新增套餐" class="headerlink" title="一、新增套餐"></a>一、新增套餐</h1><h2 id="1-1-需求分析"><a href="#1-1-需求分析" class="headerlink" title="1.1 需求分析"></a>1.1 需求分析</h2><p>套餐就是菜品的集合。</p>
<p>后台系统中可以管理套餐信息，通过新增套餐功能来添加一个新的套餐，在添加套餐时需要选择当前套餐所属的套餐分类和包含的菜品，并且需要上传套餐对应的图片，在移动端会按照套餐分类来展示对应的套餐。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808110904164.png" alt="image-20220808110904164"></p>
<h2 id="1-2-数据模型"><a href="#1-2-数据模型" class="headerlink" title="1.2 数据模型"></a>1.2 数据模型</h2><p>新增套餐，其实就是将新增页面录入的套餐信息插入到setmeal表，还需要向setmeal_dish表插入套餐和菜品关联数据。所以在新增套餐时，涉及到两个表：</p>
<table>
<thead>
<tr>
<th>表</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>setmeal</td>
<td>套餐表</td>
<td>存储套餐的基本信息</td>
</tr>
<tr>
<td>setmeal_dish</td>
<td>套餐菜品关系表</td>
<td>存储套餐关联的菜品的信息(一个套餐可以关联多个菜品)</td>
</tr>
</tbody></table>
<p>两张表具体的表结构如下: </p>
<p><strong>1). 套餐表setmeal</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808110925552.png" alt="image-20220808110925552"></p>
<p>在该表中，套餐名称name字段是不允许重复的，在建表时，已经创建了唯一索引。</p>
<p><strong>2). 套餐菜品关系表setmeal_dish</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808110952117.png" alt="image-20220808110952117"></p>
<p>在该表中，菜品的名称name，菜品的原价price 实际上都是冗余字段，因为我们在这张表中存储了菜品的ID(dish_id)，根据该ID我们就可以查询出name，price的数据信息，而这里我们又存储了name，price，这样的话，我们在后续的查询展示操作中，就不需要再去查询数据库获取菜品名称和原价了，这样可以简化我们的操作。</p>
<h2 id="1-3-准备工作"><a href="#1-3-准备工作" class="headerlink" title="1.3 准备工作"></a>1.3 准备工作</h2><p><strong>1). 实体类 SetmealDish</strong></p>
<p>所属包： com.itheima.reggie.entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐菜品关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDish</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="keyword">private</span> Long setmealId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品名称 （冗余字段）</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//菜品原价</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//份数</span></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2). DTO SetmealDto</strong></p>
<p>该数据传输对象DTO,主要用于封装页面在新增套餐时传递过来的json格式的数据,其中包含套餐的基本信息,还包含套餐关联的菜品集合。</p>
<p>所属包： com.itheima.reggie.dto</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Setmeal;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.SetmealDish;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDto</span> <span class="keyword">extends</span> <span class="title class_">Setmeal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;SetmealDish&gt; setmealDishes;<span class="comment">//套餐关联的菜品集合</span></span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> String categoryName;<span class="comment">//分类名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3). Mapper接口 SetmealDishMapper</strong></p>
<p>所属包: com.itheima.reggie.mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-08 10:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealDishMapper</span>  <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;SetmealDish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4). 业务层接口 SetmealDishService</strong></p>
<p>所属包： com.itheima.reggie.service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-08 11:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealDishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;SetmealDish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5). 业务层实现类 SetmealDishServiceImpl</strong></p>
<p>所属包： com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-08 11:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;SetmealDishMapper, SetmealDish&gt; <span class="keyword">implements</span> <span class="title class_">SetmealDishService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>6). 控制层 SetmealController</strong></p>
<p>套餐管理的相关业务，我们都统一在 SetmealController 中进行统一处理操作。</p>
<p>所属包: com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> xiaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-08-08 11:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/setmeal&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealService setmealService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealDishService setmealDishService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-4-前端页面分析"><a href="#1-4-前端页面分析" class="headerlink" title="1.4 前端页面分析"></a>1.4 前端页面分析</h2><p><strong>前端页面和服务端的交互过程：</strong></p>
<ol>
<li><p>点击新建套餐按钮，访问页面(backend&#x2F;page&#x2F;combo&#x2F;add.html)，页面加载发送ajax请求，请求服务端获取<strong>套餐分类</strong>数据并展示到下拉框中(&#x3D;&#x3D;已实现&#x3D;&#x3D;)</p>
</li>
<li><p>访问页面(backend&#x2F;page&#x2F;combo&#x2F;add.html)，页面加载时发送ajax请求，请求服务端获取<strong>菜品分类</strong>数据并展示到添加菜品窗口中(&#x3D;&#x3D;已实现&#x3D;&#x3D;)</p>
</li>
<li><p>当点击添加菜品窗口左侧菜单的某一个分类, 页面发送ajax请求，请求服务端，根据菜品分类查询对应的<strong>菜品</strong>数据并展示到添加菜品窗口中</p>
</li>
<li><p>页面发送请求进行<strong>图片上传</strong>，请求服务端将图片保存到服务器(&#x3D;&#x3D;已实现&#x3D;&#x3D;)</p>
</li>
<li><p>页面发送请求进行<strong>图片下载</strong>，将上传的图片进行回显(&#x3D;&#x3D;已实现&#x3D;&#x3D;)</p>
</li>
<li><p>点击保存按钮，发送ajax请求，将<strong>套餐</strong>相关数据以json形式提交到服务端</p>
</li>
</ol>
<p>经过上述的页面解析及流程分析，我们发送这里需要发送的<strong>请求有5个</strong>，分别是 ：</p>
<p>A. 根据传递的参数,查询套餐分类列表</p>
<p>B. 根据传递的参数,查询菜品分类列表</p>
<p>C. 图片上传</p>
<p>D. 图片下载展示</p>
<p>E. 根据菜品分类ID,查询菜品列表</p>
<p>F. 保存套餐信息</p>
<p>而对于以上的前4个功能我们都已经实现, 所以我们接下来需要开发的功能主要是最后两项, 具体的请求信息如下:</p>
<p><strong>1). 根据分类ID查询菜品列表</strong></p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;dish&#x2F;list</td>
</tr>
<tr>
<td>请求参数</td>
<td>?categoryId&#x3D;1397844263642378242</td>
</tr>
</tbody></table>
<p><strong>2). 保存套餐信息</strong></p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>POST</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;setmeal</td>
</tr>
<tr>
<td>请求参数</td>
<td>json格式数据</td>
</tr>
</tbody></table>
<p>传递的json格式数据如下: </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;营养超值工作餐&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1399923597874081794&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">3800</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span><span class="string">&quot;9cd7a80a-da54-4f46-bf33-af3576514cec.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;营养超值工作餐&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dishList&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;idType&quot;</span><span class="punctuation">:</span><span class="string">&quot;1399923597874081794&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;setmealDishes&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    	<span class="punctuation">&#123;</span><span class="attr">&quot;copies&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span><span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1423329009705463809&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;米饭&quot;</span><span class="punctuation">,</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    	<span class="punctuation">&#123;</span><span class="attr">&quot;copies&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1423328152549109762&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;可乐&quot;</span><span class="punctuation">,</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">500</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    	<span class="punctuation">&#123;</span><span class="attr">&quot;copies&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1397853890262118402&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;鱼香肉丝&quot;</span><span class="punctuation">,</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">3800</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-5-代码实现"><a href="#1-5-代码实现" class="headerlink" title="1.5 代码实现"></a>1.5 代码实现</h2><h3 id="1-根据分类查询菜品"><a href="#1-根据分类查询菜品" class="headerlink" title="1.根据分类查询菜品"></a>1.根据分类查询菜品</h3><p>在当前的需求中，我们只需要根据页面传递的菜品分类的ID(categoryId)来查询菜品列表即可，我们可以直接定义一个DishController的方法，声明一个Long类型的categoryId，这样做是没问题的。</p>
<p><strong>但是考虑到该方法的拓展性，我们在这里定义方法时，通过Dish这个实体来接收参数。</strong></p>
<p>在DishController中定义方法list，接收Dish类型的参数：</p>
<p>在查询时，需要根据菜品分类categoryId进行查询，并且还要限定菜品的状态为起售状态(status为1)，然后对查询的结果进行排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据条件查询对应菜品数据</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Dish&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造查询条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; lambdaQueryWrapper=<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加条件，查询状态为起售状态的菜品</span></span><br><span class="line">    lambdaQueryWrapper.eq(Dish::getStatus,<span class="number">1</span>);</span><br><span class="line">    lambdaQueryWrapper.eq(dish.getCategoryId()!=<span class="literal">null</span>,Dish::getCategoryId,dish.getCategoryId());</span><br><span class="line">    <span class="comment">//条件排序条件</span></span><br><span class="line">    lambdaQueryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Dish&gt; list=dishService.list(lambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试：</strong></p>
<p>成功查询到数据</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808112204822.png" alt="image-20220808112204822"></p>
<h3 id="2-保存套餐"><a href="#2-保存套餐" class="headerlink" title="2.保存套餐"></a>2.保存套餐</h3><p>在进行套餐信息保存时，前端提交的数据，不仅包含套餐的基本信息，还包含套餐关联的菜品列表数据 setmealDishes。</p>
<p>所以这个时候我们使用Setmeal就不能完成参数的封装了，我们需要在Setmeal的基本属性的基础上，再扩充一个属性 setmealDishes 来接收页面传递的套餐关联的菜品列表，所以要<strong>使用SetmealDto来完成这个需求。</strong></p>
<p><strong>1). SetmealController中定义方法save，新增套餐</strong></p>
<p>在该Controller的方法中,我们不仅需要保存套餐的基本信息，还需要保存套餐关联的菜品数据，所以我们需要再该方法中调用业务层方法,完成两块数据的保存。</p>
<p>页面传递的数据是json格式，需要在方法形参前面加上@RequestBody注解, 完成参数封装。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;套餐信息：&#123;&#125;&quot;</span>,setmealDto);</span><br><span class="line"></span><br><span class="line">    setmealService.saveWithDish(setmealDto);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增套餐成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2). SetmealService中定义方法saveWithDish</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增套餐，同时需要保存套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDto setmealDto)</span>;</span><br></pre></td></tr></table></figure>



<p><strong>3). SetmealServiceImpl实现方法saveWithDish</strong></p>
<p>具体逻辑: </p>
<p>A. 保存套餐基本信息</p>
<p>B. 获取套餐关联的菜品集合，并为集合中的每一个元素赋值套餐ID(setmealId)</p>
<p>C. 批量保存套餐关联的菜品集合</p>
<p><strong>代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SetmealDishService setmealDishService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增套餐，同时需要保存套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line">    <span class="comment">//保存套餐的基本信息，操作setmeal，执行insert操作</span></span><br><span class="line">    <span class="built_in">this</span>.save(setmealDto);</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">    setmealDishes.stream().map((item) -&gt; &#123;</span><br><span class="line">        item.setSetmealId(setmealDto.getId());</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存套餐和菜品的关联信息，操作setmeal_dish,执行insert操作</span></span><br><span class="line">    setmealDishService.saveBatch(setmealDishes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4).测试</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808140713987.png" alt="image-20220808140713987"></p>
<p>套餐添加成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808141006844.png" alt="image-20220808141006844"></p>
<p>套餐和菜品关联表添加成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808141029459.png" alt="image-20220808141029459"></p>
<h1 id="二、套餐分页查询"><a href="#二、套餐分页查询" class="headerlink" title="二、套餐分页查询"></a>二、套餐分页查询</h1><h2 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h2><p>系统中的套餐数据很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808142716349.png" alt="image-20220808142716349"></p>
<p>在进行套餐数据的分页查询时，除了传递分页参数以外，还可以传递一个可选的条件(套餐名称)。</p>
<p>查询返回的字段中，包含套餐的基本信息之外，<strong>还有一个套餐的分类名称</strong>，在查询时，需要<strong>关联查询</strong>这个字段。</p>
<h2 id="2-2-前端页面分析"><a href="#2-2-前端页面分析" class="headerlink" title="2.2 前端页面分析"></a>2.2 前端页面分析</h2><p><strong>前端页面和服务端的交互过程：</strong></p>
<p>1). 访问页面(backend&#x2F;page&#x2F;combo&#x2F;list.html)，页面加载时，会自动发送ajax请求，将分页查询参数(page、pageSize、name)提交到服务端，获取分页数据</p>
<p>2). 在列表渲染展示时，页面发送请求，请求服务端进行图片下载，用于页面图片展示(<strong>已实现</strong>)</p>
<p>具体的请求信息如下:</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;setmeal&#x2F;page</td>
</tr>
<tr>
<td>请求参数</td>
<td>?page&#x3D;1&amp;pageSize&#x3D;10&amp;name&#x3D;xxx</td>
</tr>
</tbody></table>
<h2 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3 代码实现"></a>2.3 代码实现</h2><h3 id="1-基本信息查询"><a href="#1-基本信息查询" class="headerlink" title="1. 基本信息查询"></a>1. 基本信息查询</h3><p>在SetmealController中创建套餐分页查询方法。</p>
<p><strong>逻辑如下：</strong> </p>
<ol>
<li><p>构建分页条件对象</p>
</li>
<li><p>构建查询条件对象，如果传递了套餐名称，根据套餐名称模糊查询， 并对结果按修改时间降序排序</p>
</li>
<li><p>执行分页查询</p>
</li>
<li><p>组装数据并返回</p>
</li>
</ol>
<p><strong>代码实现 :</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line">    <span class="comment">//构造分页构造器</span></span><br><span class="line">    Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line"></span><br><span class="line">    Page&lt;SetmealDto&gt; pageDtoInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//构造条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//根据name进行模糊查询</span></span><br><span class="line">    queryWrapper.like(!StringUtils.isEmpty(name), Setmeal::getName, name);</span><br><span class="line">    <span class="comment">//添加排序条件，根据sort进行排序</span></span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line">    <span class="comment">//进行分页查询</span></span><br><span class="line">    setmealService.page(pageInfo, queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象拷贝</span></span><br><span class="line">    BeanUtils.copyProperties(pageInfo, pageDtoInfo, <span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; records = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDto&gt; list = records.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line"></span><br><span class="line">        BeanUtils.copyProperties(item, setmealDto);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="comment">//根据id查分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="comment">//分类不为空时，取出分类名称填入Dto</span></span><br><span class="line">        <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            setmealDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setmealDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    pageDtoInfo.setRecords(list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(pageDtoInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-功能测试"><a href="#2-4-功能测试" class="headerlink" title="2.4 功能测试"></a>2.4 功能测试</h2><p>可以获取到套餐分类名称categoryName并可以在列表页面展示出来 。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808143354511.png" alt="image-20220808143354511"></p>
<h1 id="三、删除套餐"><a href="#三、删除套餐" class="headerlink" title="三、删除套餐"></a>三、删除套餐</h1><h2 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h2><p>在套餐管理列表页面,点击删除按钮，可以删除对应的套餐信息。也可以通过复选框选择多个套餐，点击批量删除按钮一次删除多个套餐。</p>
<p><strong>注意，对于状态为售卖中的套餐不能删除，需要先停售，然后才能删除。</strong></p>
<h2 id="3-2-前端页面分析"><a href="#3-2-前端页面分析" class="headerlink" title="3.2 前端页面分析"></a>3.2 前端页面分析</h2><p><strong>前端页面和服务端的交互过程：</strong></p>
<p>1). 点击删除, 删除单个套餐时，页面发送ajax请求，根据套餐id删除对应套餐</p>
<p>2). 删除多个套餐时，页面发送ajax请求，根据提交的多个套餐id删除对应套餐</p>
<p>开发删除套餐功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可，一次请求为根据ID删除，一次请求为根据ID批量删除。</p>
<p>观察删除单个套餐和批量删除套餐的请求信息可以发现，两种请求的<strong>地址</strong>和<strong>请求方式</strong>都是相同的，不同的则是传递的id个数，所以在<strong>服务端可以提供一个方法来统一处理。</strong></p>
<p>具体的请求信息如下： </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>DELETE</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;setmeal</td>
</tr>
<tr>
<td>请求参数</td>
<td>?ids&#x3D;1423640210125656065,1423338765002256385</td>
</tr>
</tbody></table>
<h2 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h2><p>删除套餐的流程及请求信息，我们分析完毕之后，就来完成服务端的逻辑开发。在服务端的逻辑中, 删除套餐时, 我们不仅要删除套餐, 还要删除套餐与菜品的关联关系。</p>
<p><strong>1). 在SetmealService接口中定义方法removeWithDish</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除套餐，同时需要删除套餐和菜品的关联数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeWithDish</span><span class="params">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>2). 在SetmealServiceImpl中实现方法removeWithDish</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除套餐，同时需要删除套餐和菜品的关联数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeWithDish</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SQL模拟：select count(*) from setmeal where id in (1,2,3) and status = 1</span></span><br><span class="line">    <span class="comment">//首先查询套餐状态，确定是否能够删除</span></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line"></span><br><span class="line">    queryWrapper.in(Setmeal::getId, ids);</span><br><span class="line">    queryWrapper.eq(Setmeal::getStatus, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//根据所查询到的数据来判断</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.count(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果不能删除，抛出一个业务异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;套餐正在售卖中，不能删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果可以删除，先删除套餐表中的数据---setmeal</span></span><br><span class="line">    <span class="built_in">this</span>.removeByIds(ids);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SQL模拟：delete from setmeal_dish where setmeal_id in (1,2,3)</span></span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    lambdaQueryWrapper.in(SetmealDish::getSetmealId, ids);</span><br><span class="line">    <span class="comment">//删除关系表中的数据----setmeal_dish</span></span><br><span class="line">    setmealDishService.remove(lambdaQueryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3).在SetmealController中创建delete方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除套餐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;ids:&#123;&#125;&quot;</span>,ids);</span><br><span class="line">    setmealService.removeWithDish(ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;套餐数据删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-4-功能测试"><a href="#3-4-功能测试" class="headerlink" title="3.4 功能测试"></a>3.4 功能测试</h2><p>首先删除一个起售的套餐</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808151904295.png" alt="image-20220808151904295"></p>
<p>测试：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808151336650.png" alt="image-20220808151336650"></p>
<p>然后将状态再改为0</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808151917298.png" alt="image-20220808151917298"></p>
<p>然后删除</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808151935701.png" alt="image-20220808151935701"></p>
<h1 id="四、短信发送"><a href="#四、短信发送" class="headerlink" title="四、短信发送"></a>四、短信发送</h1><h2 id="4-1-短信服务介绍"><a href="#4-1-短信服务介绍" class="headerlink" title="4.1 短信服务介绍"></a>4.1 短信服务介绍</h2><p>在项目中，如果我们要实现短信发送功能，我们无需自己实现，也无需和运营商直接对接，只需要调用第三方提供的短信服务即可。</p>
<p>目前市面上有很多第三方提供的短信服务，这些第三方短信服务会和各个运营商（移动、联通、电信）对接，我们只需要注册成为会员，并且按照提供的开发文档进行调用就可以发送短信。需要说明的是，这些短信服务一般都是收费服务。</p>
<p>常用短信服务：</p>
<ul>
<li><p>阿里云</p>
</li>
<li><p>华为云</p>
</li>
<li><p>腾讯云</p>
</li>
<li><p>京东</p>
</li>
<li><p>梦网</p>
</li>
<li><p>乐信</p>
</li>
</ul>
<p>本项目在选择短信服务的第三方服务提供商时，选择的是阿里云短信服务。</p>
<h2 id="4-2-阿里云短信服务介绍"><a href="#4-2-阿里云短信服务介绍" class="headerlink" title="4.2 阿里云短信服务介绍"></a>4.2 阿里云短信服务介绍</h2><p>阿里云短信服务（Short Message Service）是广大企业客户快速触达手机用户所优选使用的通信能力。调用API或用群发助手，即可发送验证码、通知类和营销类短信；国内验证短信秒级触达，到达率最高可达99%；国际&#x2F;港澳台短信覆盖200多个国家和地区，安全稳定，广受出海企业选用。</p>
<p>应用场景： </p>
<table>
<thead>
<tr>
<th>场景</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>验证码</td>
<td>APP、网站注册账号，向手机下发验证码； 登录账户、异地登录时的安全提醒； 找回密码时的安全验证； 支付认证、身份校验、手机绑定等。</td>
</tr>
<tr>
<td>短信通知</td>
<td>向注册用户下发系统相关信息，包括： 升级或维护、服务开通、价格调整、 订单确认、物流动态、消费确认、 支付通知等普通通知短信。</td>
</tr>
<tr>
<td>推广短信</td>
<td>向注册用户和潜在客户发送通知和推广信息，包括促销活动通知、业务推广等商品与活动的推广信息。增加企业产品曝光率、提高产品的知名度。</td>
</tr>
</tbody></table>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808160529181.png" alt="image-20220808160529181"></p>
<p>阿里云短信服务官方网站： <a href="https://www.aliyun.com/product/sms?spm=5176.19720258.J_8058803260.52.5c432c4a11Dcwf">https://www.aliyun.com/product/sms?spm=5176.19720258.J_8058803260.52.5c432c4a11Dcwf</a></p>
<h2 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h2><p><strong>具体实现：</strong></p>
<p>1). pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-dysmsapi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2). 将官方提供的main方法封装为一个工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aliyuncs.DefaultAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.IAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.DefaultProfile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信发送工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SMSUtils</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 发送短信</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> signName 签名</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> templateCode 模板</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> phoneNumbers 手机号</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> param 参数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String signName, String templateCode,String phoneNumbers,String param)</span>&#123;</span><br><span class="line">      <span class="type">DefaultProfile</span> <span class="variable">profile</span> <span class="operator">=</span> DefaultProfile.getProfile(<span class="string">&quot;cn-hangzhou&quot;</span>, <span class="string">&quot;xxxxxxxxxxxxxxxx&quot;</span>, <span class="string">&quot;xxxxxxxxxxxxxx&quot;</span>);</span><br><span class="line">      <span class="type">IAcsClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAcsClient</span>(profile);</span><br><span class="line"></span><br><span class="line">      <span class="type">SendSmsRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendSmsRequest</span>();</span><br><span class="line">      request.setSysRegionId(<span class="string">&quot;cn-hangzhou&quot;</span>);</span><br><span class="line">      request.setPhoneNumbers(phoneNumbers);</span><br><span class="line">      request.setSignName(signName);</span><br><span class="line">      request.setTemplateCode(templateCode);</span><br><span class="line">      request.setTemplateParam(<span class="string">&quot;&#123;\&quot;code\&quot;:\&quot;&quot;</span>+param+<span class="string">&quot;\&quot;&#125;&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">SendSmsResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.getAcsResponse(request);</span><br><span class="line">         System.out.println(<span class="string">&quot;短信发送成功&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、验证码登录"><a href="#五、验证码登录" class="headerlink" title="五、验证码登录"></a>五、验证码登录</h1><h2 id="5-1-需求分析"><a href="#5-1-需求分析" class="headerlink" title="5.1 需求分析"></a>5.1 需求分析</h2><p>为了方便用户登录，移动端通常都会提供通过手机验证码登录的功能。手机验证码登录有如下优点：</p>
<ol>
<li><p>方便快捷，无需注册，直接登录</p>
</li>
<li><p>使用短信验证码作为登录凭证，无需记忆密码</p>
</li>
<li><p>安全</p>
</li>
</ol>
<p><strong>登录流程：</strong></p>
<p>输入手机号 &gt; 获取验证码 &gt; 输入验证码 &gt; 点击登录 &gt; 登录成功</p>
<blockquote>
<p>注意：通过手机验证码登录，手机号是区分不同用户的标识。</p>
</blockquote>
<h2 id="5-2-数据模型"><a href="#5-2-数据模型" class="headerlink" title="5.2 数据模型"></a>5.2 数据模型</h2><p>通过手机验证码登录时，涉及的表为user表，即用户表。结构如下:</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808160742214.png" alt="image-20220808160742214"></p>
<h2 id="5-3-前端页面分析"><a href="#5-3-前端页面分析" class="headerlink" title="5.3 前端页面分析"></a>5.3 前端页面分析</h2><p>在开发代码之前，需要梳理一下登录时前端页面和服务端的交互过程：</p>
<ol>
<li><p>在登录页面(front&#x2F;page&#x2F;login.html)输入手机号，点击【获取验证码】按钮，页面发送ajax请求，在服务端调用短信服务API给指定手机号发送验证码短信。</p>
</li>
<li><p>在登录页面输入验证码，点击【登录】按钮，发送ajax请求，在服务端处理登录请求。</p>
</li>
</ol>
<p>如果服务端返回的登录成功，页面将会把当前登录用户的手机号存储在sessionStorage中，并跳转到移动的首页页面。</p>
<p>开发手机验证码登录功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可，分别是获取短信验证码 和 登录请求，具体的请求信息如下： </p>
<p><strong>1). 获取短信验证码</strong></p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>POST</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;user&#x2F;sendMsg</td>
</tr>
<tr>
<td>请求参数</td>
<td>{“phone”:”13100001111”}</td>
</tr>
</tbody></table>
<p><strong>2). 登录</strong></p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>POST</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;user&#x2F;login</td>
</tr>
<tr>
<td>请求参数</td>
<td>{“phone”:”13100001111”, “code”:”1111”}</td>
</tr>
</tbody></table>
<h2 id="5-4-代码开发"><a href="#5-4-代码开发" class="headerlink" title="5.4 代码开发"></a>5.4 代码开发</h2><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p><strong>1). 实体类 User（直接从课程资料中导入即可）</strong></p>
<p>所属包: com.itheima.reggie.entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手机号</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//性别 0 女 1 男</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//身份证号</span></span><br><span class="line">    <span class="keyword">private</span> String idNumber;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//头像</span></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态 0:禁用，1:正常</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2). Mapper接口 UserMapper</strong></p>
<p>所属包: com.itheima.reggie.mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt;&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>3). 业务层接口 UserService</strong></p>
<p>所属包: com.itheima.reggie.service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>4). 业务层实现类 UserServiceImpl</strong></p>
<p>所属包: com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper,User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5). 控制层 UserController</strong></p>
<p>所属包: com.itheima.reggie.controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.UserService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>6). 工具类SMSUtils、ValidateCodeUtils（直接从课程资料中导入即可）</strong></p>
<p>所属包: com.itheima.reggie.utils</p>
<p> <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808161055013.png" alt="image-20220808161055013"></p>
<ul>
<li><p>SMSUtils : 是我们上面改造的阿里云短信发送的工具类 ;</p>
</li>
<li><p>ValidateCodeUtils : 是验证码生成的工具类 ;</p>
</li>
</ul>
<h3 id="2-功能实现"><a href="#2-功能实现" class="headerlink" title="2.功能实现"></a>2.功能实现</h3><h5 id="修改LoginCheckFilter"><a href="#修改LoginCheckFilter" class="headerlink" title="修改LoginCheckFilter"></a>修改LoginCheckFilter</h5><p>前面我们已经完成了LoginCheckFilter过滤器的开发，此过滤器用于检查用户的登录状态。我们在进行手机验证码登录时，发送的两个请求(获取验证码和登录)需要在此过滤器处理时直接放行。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808163847435.png" alt="image-20220808163847435"> </p>
<p>对于移动的端的页面，也是用户登录之后，才可以访问的，那么这个时候就需要在 LoginCheckFilter 中进行判定，如果移动端用户已登录，我们获取到用户登录信息，存入ThreadLocal中(在后续的业务处理中，如果需要获取当前登录用户ID，直接从ThreadLocal中获取)，然后放行。</p>
<p>增加如下逻辑: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4-2、判断登录状态，如果已登录，则直接放行</span></span><br><span class="line"><span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">    log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    BaseContext.setCurrentId(userId);</span><br><span class="line"></span><br><span class="line">    filterChain.doFilter(request,response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="发送短信验证码"><a href="#发送短信验证码" class="headerlink" title="发送短信验证码"></a>发送短信验证码</h5><p>在UserController中创建方法，处理登录页面的请求，为指定手机号发送短信验证码，同时需要将手机号对应的验证码保存到Session，方便后续登录时进行比对。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送手机短信验证码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">//获取手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isNotEmpty(phone))&#123;</span><br><span class="line">        <span class="comment">//生成随机的4位验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> ValidateCodeUtils.generateValidateCode(<span class="number">4</span>).toString();</span><br><span class="line">        log.info(<span class="string">&quot;code=&#123;&#125;&quot;</span>,code);</span><br><span class="line">			</span><br><span class="line">        <span class="comment">//调用阿里云提供的短信服务API完成发送短信</span></span><br><span class="line">        <span class="comment">//SMSUtils.sendMessage(&quot;瑞吉外卖&quot;,&quot;&quot;,phone,code);</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment">//需要将生成的验证码保存到Session</span></span><br><span class="line">        session.setAttribute(phone,code);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;手机验证码短信发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;短信发送失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-验证码登录"><a href="#3-验证码登录" class="headerlink" title="3. 验证码登录"></a>3. 验证码登录</h3><p>在UserController中增加登录的方法 login，该方法的具体逻辑为： </p>
<ol>
<li><p>获取前端传递的手机号和验证码</p>
</li>
<li><p>从Session中获取到手机号对应的正确的验证码</p>
</li>
<li><p>进行验证码的比对 , 如果比对失败, 直接返回错误信息</p>
</li>
<li><p>如果比对成功, 需要根据手机号查询当前用户, 如果用户不存在, 则自动注册一个新用户</p>
</li>
<li><p>将登录用户的ID存储Session中</p>
</li>
</ol>
<p>具体代码实现: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移动端用户登录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;User&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map map, HttpSession session)</span>&#123;</span><br><span class="line">    log.info(map.toString());</span><br><span class="line">    <span class="comment">//获取手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> map.get(<span class="string">&quot;phone&quot;</span>).toString();</span><br><span class="line">    <span class="comment">//获取验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> map.get(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line">    <span class="comment">//从Session中获取保存的验证码</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> session.getAttribute(phone);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行验证码的比对（页面提交的验证码和Session中保存的验证码比对）</span></span><br><span class="line">    <span class="keyword">if</span>(codeInSession != <span class="literal">null</span> &amp;&amp; codeInSession.equals(code))&#123;</span><br><span class="line">        <span class="comment">//如果能够比对成功，说明登录成功</span></span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getPhone,phone);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//判断当前手机号对应的用户是否为新用户，如果是新用户就自动完成注册</span></span><br><span class="line">            user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setPhone(phone);</span><br><span class="line">            user.setStatus(<span class="number">1</span>);</span><br><span class="line">            userService.save(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>,user.getId());</span><br><span class="line">        <span class="keyword">return</span> R.success(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-5-功能测试"><a href="#5-5-功能测试" class="headerlink" title="5.5 功能测试"></a>5.5 功能测试</h2><p>点击获取验证码</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808164633394.png" alt="image-20220808164633394"></p>
<p>后端接收到</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808164647464.png" alt="image-20220808164647464"></p>
<p>登陆成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220808164702196.png" alt="image-20220808164702196"></p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>瑞吉外卖项目day07笔记</title>
    <url>/posts/823734017.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="一、系统问题-amp-解决方法"><a href="#一、系统问题-amp-解决方法" class="headerlink" title="一、系统问题&amp;解决方法"></a>一、系统问题&amp;解决方法</h1><blockquote>
<p>1). 当前系统存在的问题</p>
</blockquote>
<p>之前我们已经实现了移动端菜品展示、点餐、购物车、下单等功能，但是由于移动端是面向所有的消费者的，请求压力相对比较大，而我们当前所有的数据查询都是从数据库MySQL中直接查询的，那么可能就存在如下问题： &#x3D;&#x3D;频繁访问数据库，数据库访问压力大，系统性能下降，用户体验较差。&#x3D;&#x3D;</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810193224946.png" alt="image-20220810193224946"></p>
<blockquote>
<p>2). 解决该问题的方法</p>
</blockquote>
<p>要解决我们上述提到的问题，就可以通过Redis来做缓存，从而降低数据库的访问压力，提高系统的访问性能，从而提升用户体验。</p>
<p>加入Redis做缓存之后，我们在进行数据查询时，就需要先查询缓存，如果缓存中有数据，直接返回，如果缓存中没有数据，则需要查询数据库，再将数据库查询的结果，缓存在redis中。</p>
<h1 id="二、-环境搭建"><a href="#二、-环境搭建" class="headerlink" title="二、 环境搭建"></a>二、 环境搭建</h1><h3 id="2-1-版本控制"><a href="#2-1-版本控制" class="headerlink" title="2.1 版本控制"></a>2.1 版本控制</h3><p>接下来，我们就需要对我们的功能进行优化，但是需要说明的是，我们不仅仅要对上述提到的缓存进行优化，还需要对我们程序的各个方面进行优化。我们本章节主要是针对于缓存进行优化，为了方便的对我们各个优化版本的代码进行管理，我们使用Git来控制代码版本。 那么此时我们就需要将我们之前开发完成的代码提交到Git，并且推送到码云Gitee的远程仓库，执行步骤如下： </p>
<p><strong>1). 创建Gitee远程仓库</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810193036753.png" alt="image-20220810193036753"></p>
<p><strong>2). idea-创建本地仓库</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810193522444.png" alt="image-20220810193522444"></p>
<p><strong>3). 准备忽略文件.gitignore</strong></p>
<p>在我们的项目中, 有一些文件是无需提交的到git，比如: .idea，target&#x2F;，*.iml等。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810193703687.png" alt="image-20220810193703687"></p>
<p>忽略文件代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.git</span><br><span class="line">logs</span><br><span class="line">rebel.xml</span><br><span class="line">target/</span><br><span class="line">!.mvn/wrapper/maven-wrapper.jar</span><br><span class="line">log.path_IS_UNDEFINED</span><br><span class="line">.DS_Store</span><br><span class="line">offline_user.md</span><br><span class="line"></span><br><span class="line">### STS ###</span><br><span class="line">.apt_generated</span><br><span class="line">.classpath</span><br><span class="line">.factorypath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">.springBeans</span><br><span class="line"></span><br><span class="line">### IntelliJ IDEA ###</span><br><span class="line">.idea</span><br><span class="line">*.iws</span><br><span class="line">*.iml</span><br><span class="line">*.ipr</span><br><span class="line"></span><br><span class="line">### NetBeans ###</span><br><span class="line">nbproject/private/</span><br><span class="line">build/</span><br><span class="line">nbbuild/</span><br><span class="line">dist/</span><br><span class="line">nbdist/</span><br><span class="line">.nb-gradle/</span><br><span class="line">generatorConfig.xml</span><br><span class="line"></span><br><span class="line">### nacos ###</span><br><span class="line">third-party/nacos/derby.log</span><br><span class="line">third-party/nacos/data/</span><br><span class="line">third-party/nacos/work/</span><br><span class="line"></span><br><span class="line">file/</span><br></pre></td></tr></table></figure>

<p><strong>4). idea-提交并推送本地代码</strong></p>
<p>A. 添加项目文件进暂存区</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810194159338.png" alt="image-20220810194159338"></p>
<p>B. 提交代码</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810194253288.png" alt="image-20220810194253288"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810194417338.png" alt="image-20220810194417338"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810194615417.png" alt="image-20220810194615417"></p>
<p>C.将代码推送至远程仓库</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810194653916.png" alt="image-20220810194653916"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810200751682.png" alt="image-20220810200751682"></p>
<p><strong>5). 查看gitee远程仓库</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810200845451.png" alt="image-20220810200845451"></p>
<p><strong>6). 创建分支</strong></p>
<p>目前默认git中只有一个主分支master，我们接下来进行缓存的优化，就不在master分支来操作了，我们需要在git上创建一个单独的分支v1.0，缓存的优化，我们就在该分支上进行操作。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810200932712.png" alt="image-20220810200932712"></p>
<p>当前创建的v1.0分支，是基于master分支创建出来的，所以目前master分支的代码， 和v1.0分支的代码是完全一样的，接下来把v1.0的代码也推送至远程仓库。</p>
<p><strong>7). 推送分支代码到远程</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810201040026.png" alt="image-20220810201040026"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810201130380.png" alt="image-20220810201130380"></p>
<h3 id="2-2-环境准备"><a href="#2-2-环境准备" class="headerlink" title="2.2 环境准备"></a>2.2 环境准备</h3><p><strong>1). 在项目的pom.xml文件中导入spring data redis的maven坐标</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>2). 在项目的application.yml中加入redis相关配置</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.200</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">root@123456</span></span><br><span class="line">  <span class="attr">database:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;注意: 引入上述依赖时,需要注意yml文件前面的缩进,上述配置应该配置在spring层级下面。&#x3D;&#x3D;</p>
<p>这里如果redis没有设置密码的话直接将password注释就行了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810204720697.png" alt="image-20220810204720697"></p>
<p><strong>3). 编写Redis的配置类RedisConfig,定义RedisTemplate</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//默认的Key序列化器为：JdkSerializationRedisSerializer</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解释说明:</strong> </p>
<p>1). 在SpringBoot工程启动时, 会加载一个自动配置类 RedisAutoConfiguration, 在里面已经声明了RedisTemplate这个bean</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810202310107.png" alt="image-20220810202310107"></p>
<p>上述框架默认声明的RedisTemplate用的key和value的序列化方式是默认的 JdkSerializationRedisSerializer，如果key采用这种方式序列化，最终我们在测试时通过redis的图形化界面查询不是很方便，如下形式：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810202318332.png" alt="image-20220810202318332"></p>
<p>2). 如果使用我们自定义的RedisTemplate, key的序列化方式使用的是StringRedisSerializer, 也就是字符串形式, 最终效果如下: </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810202330410.png" alt="image-20220810202330410"></p>
<p>3). 定义了两个bean会不会出现冲突呢? 答案是不会, 因为源码如下:</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810202339873.png" alt="image-20220810202339873"></p>
<h1 id="三、-缓存短信验证码"><a href="#三、-缓存短信验证码" class="headerlink" title="三、 缓存短信验证码"></a>三、 缓存短信验证码</h1><h3 id="3-1-思路分析"><a href="#3-1-思路分析" class="headerlink" title="3.1 思路分析"></a>3.1 思路分析</h3><p>前面移动端手机验证码登录随机生成的验证码是保存在HttpSession中的。</p>
<p>但是在实际的业务场景中，一般验证码都是需要设置过期时间的，如果存在HttpSession中就无法设置过期时间，此时就需要对这一块的功能进行优化。</p>
<p>现在需要改造为将验证码缓存在Redis中，具体的实现思路如下：</p>
<p>1). 在服务端UserController中注入RedisTemplate对象，用于操作Redis;</p>
<p>2). 在服务端UserController的sendMsg方法中，将随机生成的验证码缓存到Redis中，并设置有效期为5分钟;</p>
<p>3). 在服务端UserController的login方法中，从Redis中获取缓存的验证码，如果登录成功则删除Redis中的验证码;</p>
<h3 id="3-2-代码改造"><a href="#3-2-代码改造" class="headerlink" title="3.2 代码改造"></a>3.2 代码改造</h3><p>1). 在UserController中注入RedisTemplate对象，用于操作Redis</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure>



<p>2). 在UserController的sendMsg方法中，将生成的验证码保存到Redis</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要将生成的验证码保存到Redis,设置过期时间</span></span><br><span class="line">redisTemplate.opsForValue().set(phone, code, <span class="number">5</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810202903597.png" alt="image-20220810202903597"></p>
<p>3). 在UserController的login方法中，从Redis中获取生成的验证码，如果登录成功则删除Redis中缓存的验证码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从Redis中获取缓存的验证码</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> redisTemplate.opsForValue().get(phone);</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810203208817.png" alt="image-20220810203208817"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从Redis中删除缓存的验证码</span></span><br><span class="line">redisTemplate.delete(phone);</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810203200178.png" alt="image-20220810203200178"></p>
<h3 id="3-3-功能测试"><a href="#3-3-功能测试" class="headerlink" title="3.3 功能测试"></a>3.3 功能测试</h3><p><strong>1). 访问前端工程，获取验证码</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810203834751.png" alt="image-20220810203834751"></p>
<p>后端验证码已经发过来了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810203802623.png" alt="image-20220810203802623"></p>
<p><strong>2).查看Redis中的数据</strong></p>
<p>在Redis中查看发现可以查到</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810203732233.png" alt="image-20220810203732233"></p>
<p><strong>3). 在登录界面填写验证码登录完成后,查看Redis中的数据是否删除</strong></p>
<p>登录成功后再查询就已经查不到了，数据已经正常删除了</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810203951457.png" alt="image-20220810203951457"></p>
<h1 id="四、-缓存菜品信息"><a href="#四、-缓存菜品信息" class="headerlink" title="四、 缓存菜品信息"></a>四、 缓存菜品信息</h1><h3 id="4-1-实现思路"><a href="#4-1-实现思路" class="headerlink" title="4.1 实现思路"></a>4.1 实现思路</h3><p>前面我们已经实现了移动端菜品查看功能，对应的服务端方法为DishController的list方法，此方法会根据前端提交的查询条件(categoryId)进行数据库查询操作。</p>
<p><strong>在高并发的情况下，频繁查询数据库会导致系统性能下降，服务端响应时间增长。现在需要对此方法进行缓存优化，提高系统的性能。</strong></p>
<p>那么,我们又需要思考一个问题, 具体缓存几份数据呢, 所有的菜品缓存一份 , 还是说需要缓存多份呢? 我们可以看一下我们之前做的移动端效果: </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810210707234.png" alt="image-20220810210707234"></p>
<p>我们点击哪一个分类,展示的就是该分类下的菜品, 其他菜品无需展示。所以，这里面我们在缓存时，</p>
<p>可以根据菜品的分类，缓存多份数据，页面在查询时，点击的是哪个分类，我们就查询该分类下的菜品缓存数据。</p>
<p><strong>具体的实现思路如下：</strong></p>
<p>1). 改造DishController的list方法，先从Redis中获取分类对应的菜品数据，如果有则直接返回，无需查询数据库;如果没有则查询数据库，并将查询到的菜品数据存入Redis。</p>
<p>2). 改造DishController的save和update方法，加入清理缓存的逻辑。</p>
<blockquote>
<p>注意： </p>
<p>​	在使用缓存过程中，要注意保证数据库中的数据和缓存中的数据一致，如果数据库中的数据发生变化，需要及时清理缓存数据。否则就会造成缓存数据与数据库数据不一致的情况。</p>
</blockquote>
<h3 id="4-2-代码改造"><a href="#4-2-代码改造" class="headerlink" title="4.2 代码改造"></a>4.2 代码改造</h3><p>需要改造的代码为： DishController</p>
<h4 id="1-查询菜品缓存"><a href="#1-查询菜品缓存" class="headerlink" title="1. 查询菜品缓存"></a>1. 查询菜品缓存</h4><table>
<thead>
<tr>
<th>改造的方法</th>
<th>redis的数据类型</th>
<th>redis缓存的key</th>
<th>redis缓存的value</th>
</tr>
</thead>
<tbody><tr>
<td>list</td>
<td>string</td>
<td>dish_分类Id_状态 , 比如: dish_12323232323_1</td>
<td>List<DishDto></td>
</tr>
</tbody></table>
<p><strong>1). 在DishController中注入RedisTemplate</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure>



<p><strong>2). 在list方法中,查询数据库之前,先查询缓存, 缓存中有数据, 直接返回</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;DishDto&gt; dishDtoList = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//动态构造key</span></span><br><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dish.getCategoryId() + <span class="string">&quot;_&quot;</span> + dish.getStatus();<span class="comment">//dish_1397844391040167938_1</span></span><br><span class="line"><span class="comment">//先从redis中获取缓存数据</span></span><br><span class="line">dishDtoList = (List&lt;DishDto&gt;) redisTemplate.opsForValue().get(key);</span><br><span class="line"><span class="keyword">if</span>(dishDtoList != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="comment">//如果存在，直接返回，无需查询数据库</span></span><br><span class="line">    <span class="keyword">return</span> R.success(dishDtoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810210819953.png" alt="image-20220810210819953"></p>
<p><strong>3). 如果redis不存在，查询数据库，并将数据库查询结果，缓存在redis，并设置过期时间</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果不存在，需要查询数据库，将查询到的菜品数据缓存到Redis</span></span><br><span class="line">redisTemplate.opsForValue().set(key,dishDtoList,<span class="number">60</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>



<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810210832144.png" alt="image-20220810210832144"></p>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>第二次访问页面时数据已经存入了Redis</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810210510964.png" alt="image-20220810210510964"></p>
<h4 id="2-清理菜品缓存"><a href="#2-清理菜品缓存" class="headerlink" title="2 清理菜品缓存"></a>2 清理菜品缓存</h4><p>为了保证数据库中的数据和缓存中的数据一致，如果数据库中的数据发生变化，需要及时清理缓存数据。所以，我们需要在添加菜品、更新菜品时清空缓存数据。</p>
<p><strong>1). 保存菜品,清空缓存</strong></p>
<p>在保存菜品的方法save中，当菜品数据保存完毕之后，需要清空菜品的缓存。那么这里清理菜品缓存的方式存在两种：</p>
<p>A. 清理所有分类下的菜品缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清理所有菜品的缓存数据</span></span><br><span class="line"><span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> redisTemplate.keys(<span class="string">&quot;dish_*&quot;</span>); <span class="comment">//获取所有以dish_xxx开头的key</span></span><br><span class="line">redisTemplate.delete(keys); <span class="comment">//删除这些key</span></span><br></pre></td></tr></table></figure>



<p>B. 清理当前添加菜品分类下的缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清理某个分类下面的菜品缓存数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dishDto.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line">redisTemplate.delete(key);</span><br></pre></td></tr></table></figure>

<p>此处, 我们推荐使用第二种清理的方式, 只清理当前菜品关联的分类下的菜品数据。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810212220603.png" alt="image-20220810212220603"></p>
<p><strong>2). 更新菜品,清空缓存</strong></p>
<p>在更新菜品的方法update中，当菜品数据更新完毕之后，需要清空菜品的缓存。这里清理缓存的方式和上述基本一致。</p>
<p>A. 清理所有分类下的菜品缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清理所有菜品的缓存数据</span></span><br><span class="line"><span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> redisTemplate.keys(<span class="string">&quot;dish_*&quot;</span>); <span class="comment">//获取所有以dish_xxx开头的key</span></span><br><span class="line">redisTemplate.delete(keys); <span class="comment">//删除这些key</span></span><br></pre></td></tr></table></figure>



<p>B. 清理当前添加菜品分类下的缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清理某个分类下面的菜品缓存数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dishDto.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line">redisTemplate.delete(key);</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810212316093.png" alt="image-20220810212316093"></p>
<h5 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h5><p>修改菜品数据前</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810212502538.png" alt="image-20220810212502538"></p>
<p>修改数据</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810212444924.png" alt="image-20220810212444924"></p>
<p>修改数据后，少了一条数据</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810212535707.png" alt="image-20220810212535707"></p>
<h3 id="4-3-合并分支"><a href="#4-3-合并分支" class="headerlink" title="4.3 合并分支"></a>4.3 合并分支</h3><p>切换回master分支，然后和v1.0合并</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220810213010639.png" alt="image-20220810213010639"></p>
<h1 id="五、-SpringCache"><a href="#五、-SpringCache" class="headerlink" title="五、 SpringCache"></a>五、 SpringCache</h1><h3 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h3><p><strong>Spring Cache</strong>是一个框架，实现了基于注解的缓存功能，只需要简单地加一个注解，就能实现缓存功能，大大简化我们在业务中操作缓存的代码。</p>
<p>Spring Cache只是提供了一层抽象，底层可以切换不同的cache实现。具体就是通过<strong>CacheManager</strong>接口来统一不同的缓存技术。CacheManager是Spring提供的各种缓存技术抽象接口。</p>
<p>针对不同的缓存技术需要实现不同的CacheManager：</p>
<table>
<thead>
<tr>
<th><strong>CacheManager</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>EhCacheCacheManager</td>
<td>使用EhCache作为缓存技术</td>
</tr>
<tr>
<td>GuavaCacheManager</td>
<td>使用Google的GuavaCache作为缓存技术</td>
</tr>
<tr>
<td>RedisCacheManager</td>
<td>使用Redis作为缓存技术</td>
</tr>
</tbody></table>
<h3 id="4-2-注解"><a href="#4-2-注解" class="headerlink" title="4.2 注解"></a>4.2 注解</h3><p>在SpringCache中提供了很多缓存操作的注解，常见的是以下的几个：</p>
<table>
<thead>
<tr>
<th><strong>注解</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>@EnableCaching</td>
<td>开启缓存注解功能</td>
</tr>
<tr>
<td>@Cacheable</td>
<td>在方法执行前spring先查看缓存中是否有数据，如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中</td>
</tr>
<tr>
<td>@CachePut</td>
<td>将方法的返回值放到缓存中</td>
</tr>
<tr>
<td>@CacheEvict</td>
<td>将一条或多条数据从缓存中删除</td>
</tr>
</tbody></table>
<p>在spring boot项目中，使用缓存技术只需在项目中导入相关缓存技术的依赖包，并在启动类上使用@EnableCaching开启缓存支持即可。</p>
<p>例如，使用Redis作为缓存技术，只需要导入Spring data Redis的maven坐标即可。</p>
<h3 id="4-3-注解详解"><a href="#4-3-注解详解" class="headerlink" title="4.3 注解详解"></a>4.3 注解详解</h3><h4 id="1-EnableCaching"><a href="#1-EnableCaching" class="headerlink" title="1.@EnableCaching"></a>1.@EnableCaching</h4><p>在引导类上加该注解，就代表当前项目开启缓存注解功能。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811093015190.png" alt="image-20220811093015190"></p>
<h4 id="2-CachePut注解"><a href="#2-CachePut注解" class="headerlink" title="2.@CachePut注解"></a>2.@CachePut注解</h4><p><strong>@CachePut 说明：</strong> </p>
<ul>
<li>作用: 将方法返回值，放入缓存</li>
<li>value: 缓存的名称, 每个缓存名称下面可以有很多key</li>
<li>key: 缓存的key  ———-&gt; 支持Spring的表达式语言SPEL语法</li>
</ul>
<p><strong>在save方法上加注解@CachePut</strong></p>
<p>当前UserController的save方法是用来保存用户信息的，我们希望在该用户信息保存到数据库的同时，也往缓存中缓存一份数据，我们可以在save方法上加上注解 @CachePut，用法如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* CachePut：将方法返回值放入缓存</span></span><br><span class="line"><span class="comment">* value：缓存的名称，每个缓存名称下面可以有多个key</span></span><br><span class="line"><span class="comment">* key：缓存的key</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@CachePut(value = &quot;userCache&quot;, key = &quot;#user.id&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">save</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    userService.save(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>key的写法如下： </p>
<p>​	#user.id : #user指的是方法形参的名称, id指的是user的id属性 , 也就是使用user的id属性作为key ;</p>
<p>​	#user.name: #user指的是方法形参的名称, name指的是user的name属性 ,也就是使用user的name属性作为key ;</p>
<p>​	</p>
<p>​	#result.id : #result代表方法返回值，该表达式 代表以返回对象的id属性作为key ；</p>
<p>​	#result.name : #result代表方法返回值，该表达式 代表以返回对象的name属性作为key ；</p>
</blockquote>
<h4 id="3-CacheEvict注解"><a href="#3-CacheEvict注解" class="headerlink" title="3. @CacheEvict注解"></a>3. @CacheEvict注解</h4><blockquote>
<p>@CacheEvict 说明： </p>
<p>​	作用: 清理指定缓存</p>
<p>​	value: 缓存的名称，每个缓存名称下面可以有多个key</p>
<p>​	key: 缓存的key  ———-&gt; 支持Spring的表达式语言SPEL语法</p>
</blockquote>
<p><strong>1). 在 delete 方法上加注解@CacheEvict</strong></p>
<p>当我们在删除数据库user表的数据的时候,我们需要删除缓存中对应的数据,此时就可以使用@CacheEvict注解, 具体的使用方式如下: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* CacheEvict：清理指定缓存</span></span><br><span class="line"><span class="comment">* value：缓存的名称，每个缓存名称下面可以有多个key</span></span><br><span class="line"><span class="comment">* key：缓存的key</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;userCache&quot;,key = &quot;#p0&quot;)</span>  <span class="comment">//#p0 代表第一个参数</span></span><br><span class="line"><span class="comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#root.args[0]&quot;) //#root.args[0] 代表第一个参数</span></span><br><span class="line"><span class="comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#id&quot;) //#id 代表变量名为id的参数</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    userService.removeById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2). 在 update 方法上加注解@CacheEvict</strong></p>
<p>在更新数据之后，数据库的数据已经发生了变更，我们需要将缓存中对应的数据删除掉，避免出现数据库数据与缓存数据不一致的情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#p0.id&quot;)   //第一个参数的id属性</span></span><br><span class="line"><span class="comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#user.id&quot;) //参数名为user参数的id属性</span></span><br><span class="line"><span class="comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#root.args[0].id&quot;) //第一个参数的id属性</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;userCache&quot;,key = &quot;#result.id&quot;)</span>         <span class="comment">//返回值的id属性</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">update</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    userService.updateById(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>加上注解之后，我们可以重启服务，然后测试方式，基本和上述相同，先缓存数据，然后再更新某一条数据，通过debug的形式查询缓存数据的情况。</p>
<h4 id="4-Cacheable注解"><a href="#4-Cacheable注解" class="headerlink" title="4. @Cacheable注解"></a>4. @Cacheable注解</h4><blockquote>
<p>@Cacheable 说明:</p>
<p>​	作用: 在方法执行前，spring先查看缓存中是否有数据，如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中</p>
<p>​	value: 缓存的名称，每个缓存名称下面可以有多个key</p>
<p>​	key: 缓存的key  ———-&gt; 支持Spring的表达式语言SPEL语法</p>
</blockquote>
<p><strong>1). 在getById上加注解@Cacheable</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Cacheable：在方法执行前spring先查看缓存中是否有数据，如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中</span></span><br><span class="line"><span class="comment">* value：缓存的名称，每个缓存名称下面可以有多个key</span></span><br><span class="line"><span class="comment">* key：缓存的key</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;userCache&quot;,key = &quot;#id&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2). 缓存非null值</strong></p>
<p>在@Cacheable注解中，提供了两个属性分别为： condition， unless 。</p>
<blockquote>
<p>condition : 表示满足什么条件, 再进行缓存 ;</p>
<p>unless : 表示满足条件则不缓存 ; 与上述的condition是反向的 ;</p>
</blockquote>
<p>具体实现方式如下: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cacheable：在方法执行前spring先查看缓存中是否有数据，如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中</span></span><br><span class="line"><span class="comment"> * value：缓存的名称，每个缓存名称下面可以有多个key</span></span><br><span class="line"><span class="comment"> * key：缓存的key</span></span><br><span class="line"><span class="comment"> * condition：条件，满足条件时才缓存数据</span></span><br><span class="line"><span class="comment"> * unless：满足条件则不缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;userCache&quot;,key = &quot;#id&quot;, unless = &quot;#result == null&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;注意： 此处，我们使用的时候只能够使用 unless， 因为在condition中，我们是无法获取到结果 #result的。&#x3D;&#x3D;</p>
<p><strong>3). 在list方法上加注解@Cacheable</strong></p>
<p>在list方法中进行查询时，有两个查询条件，如果传递了id，根据id查询； 如果传递了name， 根据name查询，那么我们缓存的key在设计的时候，就需要既包含id，又包含name。 具体的代码实现如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value = &quot;userCache&quot;,key = &quot;#user.id + &#x27;_&#x27; + #user.name&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">list</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(user.getId() != <span class="literal">null</span>,User::getId,user.getId());</span><br><span class="line">    queryWrapper.eq(user.getName() != <span class="literal">null</span>,User::getName,user.getName());</span><br><span class="line">    List&lt;User&gt; list = userService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-集成Redis"><a href="#4-4-集成Redis" class="headerlink" title="4.4 集成Redis"></a>4.4 集成Redis</h3><p>在使用上述默认的ConcurrentHashMap做缓存时，服务重启之后，之前缓存的数据就全部丢失了，操作起来并不友好。</p>
<p>在项目中使用，我们会选择使用redis来做缓存，主要需要操作以下几步： </p>
<p><strong>1). pom.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>2). application.yml</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.200</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root@123456</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="number">1800000</span>   <span class="comment">#设置缓存过期时间，可选</span></span><br></pre></td></tr></table></figure>

<h1 id="六、缓存套餐数据"><a href="#六、缓存套餐数据" class="headerlink" title="六、缓存套餐数据"></a>六、缓存套餐数据</h1><p>前面实现了移动端套餐查看功能，对应的服务端方法为SetmealController的list方法，此方法会根据前端提交的查询条件进行数据库查询操作。</p>
<p>在高并发的情况下，频繁查询数据库会导致系统性能下降，服务端响应时间增长。</p>
<p>现在需要对此方法进行缓存优化，提高系统的性能。</p>
<p>具体的实现思路如下：</p>
<p>1). 导入Spring Cache和Redis相关maven坐标</p>
<p>2). 在application.yml中配置缓存数据的过期时间</p>
<p>3). 在启动类上加入@EnableCaching注解，开启缓存注解功能</p>
<p>4). 在SetmealController的list方法上加入@Cacheable注解</p>
<p>5). 在SetmealController的save和delete方法上加入CacheEvict注解</p>
<h3 id="6-1-缓存套餐数据"><a href="#6-1-缓存套餐数据" class="headerlink" title="6.1 缓存套餐数据"></a>6.1 缓存套餐数据</h3><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>1). pom.xml中引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;备注: spring-boot-starter-data-redis 这个依赖前面已经引入了, 无需再次引入。&#x3D;&#x3D;</p>
<p>2). application.yml中设置缓存过期时间</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="number">1800000</span> <span class="comment">#设置缓存数据的过期时间</span></span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811095709940.png" alt="image-20220811095709940"></p>
<p>4). SetmealController的list方法上加入@Cacheable注解</p>
<p>在进行套餐数据查询时，我们需要根据分类ID和套餐的状态进行查询，所以我们在缓存数据时，可以将套餐分类ID和套餐状态组合起来作为key，如： 1627182182_1 (1627182182为分类ID，1为状态)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据条件查询套餐数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmeal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;setmealCache&quot;, key = &quot;#setmeal.categoryId + &#x27;_&#x27;+#setmeal.status&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Setmeal&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(setmeal.getCategoryId() != <span class="literal">null</span>, Setmeal::getCategoryId, setmeal.getCategoryId());</span><br><span class="line">    queryWrapper.eq(setmeal.getStatus() != <span class="literal">null</span>, Setmeal::getStatus, setmeal.getStatus());</span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; list = setmealService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sale</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> status, String[] ids)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (String id : ids) &#123;</span><br><span class="line">        <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> setmealService.getById(id);</span><br><span class="line">        setmeal.setStatus(status);</span><br><span class="line">        setmealService.updateById(setmeal);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;注意：因为 @Cacheable 会将方法的返回值R缓存在Redis中，而在Redis中存储对象，该对象是需要被序列化的，而对象要想被成功的序列化，就必须得实现 Serializable 接口。而当前我们定义的R，并未实现 Serializable 接口。&#x3D;&#x3D;</p>
<p>所以，要解决该异常，只需要让R实现  Serializable 接口即可。如下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811095906342.png" alt="image-20220811095906342"></p>
<h3 id="6-2-清理套餐数据"><a href="#6-2-清理套餐数据" class="headerlink" title="6.2 清理套餐数据"></a>6.2 清理套餐数据</h3><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p>为了保证数据库中数据与缓存数据的一致性，在我们添加套餐或者删除套餐数据之后，需要清空当前套餐缓存的全部数据。那么@CacheEvict注解如何清除某一份缓存下所有的数据呢，这里我们可以指定@CacheEvict中的一个属性 allEnties，将其设置为true即可。</p>
<p><strong>1). 在delete方法上加注解@CacheEvict</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除套餐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;,allEntries = true)</span> <span class="comment">//清除setmealCache名称下,所有的缓存数据</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;ids:&#123;&#125;&quot;</span>,ids);</span><br><span class="line">    setmealService.removeWithDish(ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;套餐数据删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2). 在delete方法上加注解@CacheEvict</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增套餐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;,allEntries = true)</span> <span class="comment">//清除setmealCache名称下,所有的缓存数据</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;套餐信息：&#123;&#125;&quot;</span>,setmealDto);</span><br><span class="line"></span><br><span class="line">    setmealService.saveWithDish(setmealDto);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增套餐成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-3-提交推送代码"><a href="#6-3-提交推送代码" class="headerlink" title="6.3 提交推送代码"></a>6.3 提交推送代码</h3><p>将代码提交并推送到远程仓库</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811100224565.png" alt="image-20220811100224565"></p>
<p>在idea中切换到master分支</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811100240771.png" alt="image-20220811100240771"></p>
<p>然后将v1.0分支的代码合并到master。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811100312406.png" alt="image-20220811100312406"></p>
<p>再将合并后的master分支的代码，推送到远程仓库。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811100557533.png" alt="image-20220811100557533"></p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>瑞吉外卖项目day06笔记</title>
    <url>/posts/2540577973.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="一、用户地址簿功能"><a href="#一、用户地址簿功能" class="headerlink" title="一、用户地址簿功能"></a>一、用户地址簿功能</h1><h2 id="1-1-需求分析"><a href="#1-1-需求分析" class="headerlink" title="1.1 需求分析"></a>1.1 需求分析</h2><p>地址簿，指的是移动端消费者用户的地址信息，用户登录成功后可以维护自己的地址信息。同一个用户可以有多个地址信息，但是只能有一个<strong>默认地址</strong>。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809092710410.png" alt="image-20220809092710410"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809092720600.png" alt="image-20220809092720600"></p>
<p>对于地址簿管理，需要实现以下几个功能： </p>
<ul>
<li>新增地址</li>
<li>地址列表查询</li>
<li>设置默认地址</li>
<li>编辑地址</li>
<li>删除地址</li>
</ul>
<h2 id="1-2-数据模型"><a href="#1-2-数据模型" class="headerlink" title="1.2 数据模型"></a>1.2 数据模型</h2><p>用户的地址信息会存储在address_book表，即地址簿表中。具体表结构如下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809092756949.png" alt="image-20220809092756949"></p>
<p>这里面有一个字段is_default，实际上我们在设置默认地址时，只需要更新这个字段就可以了。</p>
<h2 id="1-3-功能实现"><a href="#1-3-功能实现" class="headerlink" title="1.3 功能实现"></a>1.3 功能实现</h2><p><strong>1). 实体类 AddressBook</strong></p>
<p>所属包: com.itheima.reggie.entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 地址簿</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressBook</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//收货人</span></span><br><span class="line">    <span class="keyword">private</span> String consignee;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//手机号</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//性别 0 女 1 男</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//省级区划编号</span></span><br><span class="line">    <span class="keyword">private</span> String provinceCode;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//省级名称</span></span><br><span class="line">    <span class="keyword">private</span> String provinceName;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//市级区划编号</span></span><br><span class="line">    <span class="keyword">private</span> String cityCode;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//市级名称</span></span><br><span class="line">    <span class="keyword">private</span> String cityName;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//区级区划编号</span></span><br><span class="line">    <span class="keyword">private</span> String districtCode;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//区级名称</span></span><br><span class="line">    <span class="keyword">private</span> String districtName;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//详细地址</span></span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//标签</span></span><br><span class="line">    <span class="keyword">private</span> String label;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//是否默认 0 否 1是</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDefault;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2). Mapper接口 AddressBookMapper（直接从课程资料中导入即可）</strong></p>
<p>所属包: com.itheima.reggie.mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.AddressBook;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AddressBookMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;AddressBook&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>3). 业务层接口 AddressBookService</strong></p>
<p>所属包: com.itheima.reggie.service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.AddressBook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AddressBookService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;AddressBook&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>**4). 业务层实现类 AddressBookServiceImpl</p>
<p>所属包: com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.AddressBook;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.AddressBookMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.AddressBookService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressBookServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;AddressBookMapper, AddressBook&gt; <span class="keyword">implements</span> <span class="title class_">AddressBookService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5). 控制层 AddressBookController</strong></p>
<p>所属包: com.itheima.reggie.controller</p>
<p><strong>controller主要开发的功能:</strong> </p>
<p>A. 新增地址逻辑说明： </p>
<ul>
<li>需要记录当前是哪个用户的地址(关联当前登录用户)</li>
</ul>
<p>B. 设置默认地址 </p>
<ul>
<li><p>每个用户可以有很多地址，但是默认地址只能有一个 ；</p>
</li>
<li><p>先将该用户所有地址的is_default更新为0 , 然后将当前的设置的默认地址的is_default设置为1</p>
</li>
</ul>
<p>C. 根据ID查询地址</p>
<p>D. 查询默认地址</p>
<ul>
<li>根据当前登录用户ID 以及 is_default进行查询，查询当前登录用户is_default为1的地址信息</li>
</ul>
<p>E. 查询指定用户的全部地址</p>
<ul>
<li>根据当前登录用户ID，查询所有的地址列表</li>
</ul>
<p><strong>代码实现如下：</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.common.BaseContext;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.common.R;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.AddressBook;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.AddressBookService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 地址簿管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/addressBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressBookController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AddressBookService addressBookService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">        addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line">        log.info(<span class="string">&quot;addressBook:&#123;&#125;&quot;</span>, addressBook);</span><br><span class="line">        addressBookService.save(addressBook);</span><br><span class="line">        <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置默认地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;default&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">setDefault</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;addressBook:&#123;&#125;&quot;</span>, addressBook);</span><br><span class="line">        LambdaUpdateWrapper&lt;AddressBook&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(AddressBook::getUserId, BaseContext.getCurrentId());</span><br><span class="line">        wrapper.set(AddressBook::getIsDefault, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//SQL:update address_book set is_default = 0 where user_id = ?</span></span><br><span class="line">        addressBookService.update(wrapper);</span><br><span class="line"></span><br><span class="line">        addressBook.setIsDefault(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//SQL:update address_book set is_default = 1 where id = ?</span></span><br><span class="line">        addressBookService.updateById(addressBook);</span><br><span class="line">        <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (addressBook != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;没有找到该对象&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询默认地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;default&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">getDefault</span><span class="params">()</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(AddressBook::getUserId, BaseContext.getCurrentId());</span><br><span class="line">        queryWrapper.eq(AddressBook::getIsDefault, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SQL:select * from address_book where user_id = ? and is_default = 1</span></span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == addressBook) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;没有找到该对象&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询指定用户的全部地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;AddressBook&gt;&gt; <span class="title function_">list</span><span class="params">(AddressBook addressBook)</span> &#123;</span><br><span class="line">        addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line">        log.info(<span class="string">&quot;addressBook:&#123;&#125;&quot;</span>, addressBook);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="literal">null</span> != addressBook.getUserId(), AddressBook::getUserId, addressBook.getUserId());</span><br><span class="line">        queryWrapper.orderByDesc(AddressBook::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SQL:select * from address_book where user_id = ? order by update_time desc</span></span><br><span class="line">        <span class="keyword">return</span> R.success(addressBookService.list(queryWrapper));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1-4-功能测试"><a href="#1-4-功能测试" class="headerlink" title="1.4 功能测试"></a>1.4 功能测试</h2><p>地址簿新增成功，且可以设为默认地址</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809092929068.png" alt="image-20220809092929068"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809092637429.png" alt="image-20220809092637429"></p>
<h1 id="二、菜品展示"><a href="#二、菜品展示" class="headerlink" title="二、菜品展示"></a>二、菜品展示</h1><h2 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809102153193.png" alt="image-20220809102153193"></p>
<h2 id="2-2-前端页面分析"><a href="#2-2-前端页面分析" class="headerlink" title="2.2 前端页面分析"></a>2.2 前端页面分析</h2><p>前端页面和服务端的交互过程：</p>
<p><strong>1). 页面(front&#x2F;index.html)发送ajax请求，获取分类数据（菜品分类和套餐分类）</strong></p>
<p><strong>2). 页面发送ajax请求，获取第一个分类下的菜品或者套餐</strong></p>
<p>开发菜品展示功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可。</p>
<p><strong>注意:首页加载完成后，还发送了一次ajax请求用于加载购物车数据，此处可以将这次请求的地址暂时修改一下，从静态json文件获取数据，等后续开发购物车功能时再修改回来，如下:</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809102344655.png" alt="image-20220809102344655"></p>
<p><strong>cartData.json:</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="keyword">null</span><span class="punctuation">,</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;map&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>虚晃一枪，先给前端一个假数据。</p>
<h2 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3 代码实现"></a>2.3 代码实现</h2><h3 id="1-查询菜品方法修改"><a href="#1-查询菜品方法修改" class="headerlink" title="1. 查询菜品方法修改"></a>1. 查询菜品方法修改</h3><p>由于之前实现的根据分类查询菜品列表，仅仅查询了菜品的基本信息，未查询菜品口味信息，而移动端用户在点餐时，是需要选择口味信息的，所以需要对之前的代码实现进行完善.</p>
<p>我们需要修改DishController的list方法，原来此方法的返回值类型为：R&lt;List<Dish>&gt;。</p>
<p>为了满足移动端对数据的要求(菜品基本信息和菜品对应的口味信息)，现在需要将方法的返回值类型改为：R&lt;List<DishDto>&gt; ，因为在DishDto中封装了菜品对应的口味信息： </p>
<p>这是原来的list方法</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809102617478.png" alt="image-20220809102617478"></p>
<p><strong>代码逻辑:</strong> </p>
<p>A. 根据分类ID查询，查询目前正在启售的菜品列表 (已实现)</p>
<p>B. 遍历菜品列表，并查询菜品的分类信息及菜品的口味列表</p>
<p>C. 组装数据DishDto，并返回</p>
<p><strong>修改后代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据条件查询对应菜品数据</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span> &#123;</span><br><span class="line">    <span class="comment">//构造查询条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span>, Dish::getCategoryId, dish.getCategoryId());</span><br><span class="line">    <span class="comment">//添加条件，查询状态为1（起售状态）的菜品</span></span><br><span class="line">    queryWrapper.eq(Dish::getStatus, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    List&lt;DishDto&gt; dishDtoList = list.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">        <span class="comment">//对象拷贝</span></span><br><span class="line">        BeanUtils.copyProperties(item, dishDto);</span><br><span class="line">        <span class="comment">//菜品分类id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="comment">//根据id查询分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            dishDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当前菜品的id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> item.getId();</span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        lambdaQueryWrapper.eq(DishFlavor::getDishId, dishId);</span><br><span class="line">        <span class="comment">//SQL:select * from dish_flavor where dish_id = ?</span></span><br><span class="line">        <span class="comment">//根据当前菜品的id查询口味表</span></span><br><span class="line">        List&lt;DishFlavor&gt; dishFlavorList = dishFlavorService.list(lambdaQueryWrapper);</span><br><span class="line">        dishDto.setFlavors(dishFlavorList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dishDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//返回带有口味表的结果集合</span></span><br><span class="line">    <span class="keyword">return</span> R.success(dishDtoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-根据分类ID查询套餐"><a href="#2-根据分类ID查询套餐" class="headerlink" title="2. 根据分类ID查询套餐"></a>2. 根据分类ID查询套餐</h3><p>之前的方法只能用来查询菜品，但是没有实现对套餐的方法。</p>
<p>在SetmealController中创建list方法，根据条件查询套餐数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据条件查询套餐数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmeal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Setmeal&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(setmeal.getCategoryId() != <span class="literal">null</span>,Setmeal::getCategoryId,setmeal.getCategoryId());</span><br><span class="line">    queryWrapper.eq(setmeal.getStatus() != <span class="literal">null</span>,Setmeal::getStatus,setmeal.getStatus());</span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; list = setmealService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-功能测试"><a href="#2-4-功能测试" class="headerlink" title="2.4 功能测试"></a>2.4 功能测试</h2><p><code>注意：这里测试的时候记得后端Maven执行一遍clean然后install，前端清理一下浏览器缓存，在这卡了半天。</code></p>
<p>菜品口味展示成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809103505669.png" alt="image-20220809103505669"></p>
<p>套餐展示成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809103523279.png" alt="image-20220809103523279"></p>
<h1 id="三、购物车"><a href="#三、购物车" class="headerlink" title="三、购物车"></a>三、购物车</h1><h2 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h2><p>移动端用户可以将菜品或者套餐添加到购物车。对于菜品来说，如果设置了口味信息，则需要选择规格后才能加入购物车;对于套餐来说，可以直接点击将当前套餐加入购物车。在购物车中可以修改菜品和套餐的数量，也可以清空购物车。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809144251150.png" alt="image-20220809144251150"></p>
<h2 id="3-2-数据模型"><a href="#3-2-数据模型" class="headerlink" title="3.2 数据模型"></a>3.2 数据模型</h2><p>用户的购物车数据，也是需要保存在数据库中的，购物车对应的数据表为shopping_cart表，具体表结构如下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809144304689.png" alt="image-20220809144304689"></p>
<p>说明： </p>
<ul>
<li>购物车数据是关联用户的，在表结构中，我们需要记录，每一个用户的购物车数据是哪些</li>
<li>菜品列表展示出来的既有套餐，又有菜品，如果APP端选择的是套餐，就保存套餐ID(setmeal_id)，如果APP端选择的是菜品，就保存菜品ID(dish_id)</li>
<li>对同一个菜品&#x2F;套餐，如果选择多份不需要添加多条记录，增加数量number即可</li>
</ul>
<h2 id="3-3-前端页面分析"><a href="#3-3-前端页面分析" class="headerlink" title="3.3 前端页面分析"></a>3.3 前端页面分析</h2><p><strong>前端页面和服务端的交互过程：</strong></p>
<p>1). 点击 “加入购物车” 或者 “+” 按钮，页面发送ajax请求，请求服务端，将菜品或者套餐添加到购物车</p>
<p>2). 点击购物车图标，页面发送ajax请求，请求服务端查询购物车中的菜品和套餐</p>
<blockquote>
<p>此时，要将查询购物车的代码放开，不用再加载静态的json数据了。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809144354227.png" alt="image-20220809144354227"></p>
</blockquote>
<p>3). 点击清空购物车按钮，页面发送ajax请求，请求服务端来执行清空购物车操作</p>
<hr>
<p>对于购物车的功能，主要需要开发以下几个功能，具体的请求信息如下：</p>
<p><strong>1). 加入购物车</strong></p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>POST</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;shoppingCart&#x2F;add</td>
</tr>
<tr>
<td>请求参数</td>
<td>json格式</td>
</tr>
</tbody></table>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">菜品数据<span class="punctuation">:</span> </span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span><span class="number">118</span><span class="punctuation">,</span><span class="attr">&quot;dishFlavor&quot;</span><span class="punctuation">:</span><span class="string">&quot;不要蒜,微辣&quot;</span><span class="punctuation">,</span><span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1397851099502260226&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;全家福&quot;</span><span class="punctuation">,</span><span class="attr">&quot;image&quot;</span><span class="punctuation">:</span><span class="string">&quot;a53a4e6a-3b83-4044-87f9-9d49b30a8fdc.jpg&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">套餐数据<span class="punctuation">:</span> </span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span><span class="number">38</span><span class="punctuation">,</span><span class="attr">&quot;setmealId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1423329486060957698&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;营养超值工作餐&quot;</span><span class="punctuation">,</span><span class="attr">&quot;image&quot;</span><span class="punctuation">:</span><span class="string">&quot;9cd7a80a-da54-4f46-bf33-af3576514cec.jpg&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p><strong>2). 查询购物车列表</strong></p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;shoppingCart&#x2F;list</td>
</tr>
</tbody></table>
<p><strong>3). 清空购物车功能</strong></p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>DELETE</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;shoppingCart&#x2F;clean</td>
</tr>
</tbody></table>
<h2 id="3-4-准备工作"><a href="#3-4-准备工作" class="headerlink" title="3.4 准备工作"></a>3.4 准备工作</h2><p><strong>1). 实体类 ShoppingCart（直接从课程资料中导入即可）</strong></p>
<p>所属包: com.itheima.reggie.entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCart</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="keyword">private</span> Long setmealId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味</span></span><br><span class="line">    <span class="keyword">private</span> String dishFlavor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//金额</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2). Mapper接口 ShoppingCartMapper</strong></p>
<p>所属包: com.itheima.reggie.mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.ShoppingCart;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShoppingCartMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;ShoppingCart&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3). 业务层接口 ShoppingCartService</strong></p>
<p>所属包: com.itheima.reggie.service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.ShoppingCart;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShoppingCartService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;ShoppingCart&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4). 业务层实现类 ShoppingCartServiceImpl</strong></p>
<p>所属包: com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.ShoppingCart;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.ShoppingCartMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.ShoppingCartService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ShoppingCartMapper, ShoppingCart&gt; <span class="keyword">implements</span> <span class="title class_">ShoppingCartService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5). 控制层 ShoppingCartController</strong></p>
<p>所属包: com.itheima.reggie.controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.ShoppingCartService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/shoppingCart&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingCartService shoppingCartService;</span><br><span class="line"> </span><br><span class="line"> &#125;   </span><br></pre></td></tr></table></figure>



<h2 id="3-5-代码实现"><a href="#3-5-代码实现" class="headerlink" title="3.5 代码实现"></a>3.5 代码实现</h2><h4 id="1-添加购物车"><a href="#1-添加购物车" class="headerlink" title="1. 添加购物车"></a>1. 添加购物车</h4><p>在ShoppingCartController中创建add方法，来完成添加购物车的逻辑实现，具体的逻辑如下： </p>
<ol>
<li><p>获取当前登录用户，为购物车对象赋值</p>
</li>
<li><p>根据当前登录用户ID 及 本次添加的菜品ID&#x2F;套餐ID，查询购物车数据是否存在</p>
</li>
<li><p>如果已经存在，就在原来数量基础上加1</p>
</li>
<li><p>如果不存在，则添加到购物车，数量默认就是1</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加购物车</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> shoppingCart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;ShoppingCart&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;购物车数据:&#123;&#125;&quot;</span>,shoppingCart);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置用户id，指定当前是哪个用户的购物车数据</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    shoppingCart.setUserId(currentId);</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCart.getDishId();</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(ShoppingCart::getUserId,currentId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(dishId != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//添加到购物车的是菜品</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getDishId,dishId);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//添加到购物车的是套餐</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getSetmealId,shoppingCart.getSetmealId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询当前菜品或者套餐是否在购物车中</span></span><br><span class="line">    <span class="comment">//SQL:select * from shopping_cart where user_id = ? and dish_id/setmeal_id = ?</span></span><br><span class="line">    <span class="type">ShoppingCart</span> <span class="variable">cartServiceOne</span> <span class="operator">=</span> shoppingCartService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(cartServiceOne != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//如果已经存在，就在原来数量基础上加一</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> cartServiceOne.getNumber();</span><br><span class="line">        cartServiceOne.setNumber(number + <span class="number">1</span>);</span><br><span class="line">        shoppingCartService.updateById(cartServiceOne);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//如果不存在，则添加到购物车，数量默认就是一</span></span><br><span class="line">        shoppingCart.setNumber(<span class="number">1</span>);</span><br><span class="line">        shoppingCart.setCreateTime(LocalDateTime.now());</span><br><span class="line">        shoppingCartService.save(shoppingCart);</span><br><span class="line">        cartServiceOne = shoppingCart;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(cartServiceOne);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-查询购物车"><a href="#2-查询购物车" class="headerlink" title="2. 查询购物车"></a>2. 查询购物车</h4><p>在ShoppingCartController中创建list方法，根据当前登录用户ID查询购物车列表，并对查询的结果进行创建时间的倒序排序。</p>
<p>代码实现如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查看购物车</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;ShoppingCart&gt;&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;查看购物车...&quot;</span>);</span><br><span class="line">	</span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(ShoppingCart::getUserId,BaseContext.getCurrentId());</span><br><span class="line">    queryWrapper.orderByAsc(ShoppingCart::getCreateTime);</span><br><span class="line">	</span><br><span class="line">    List&lt;ShoppingCart&gt; list = shoppingCartService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="3-清空购物车"><a href="#3-清空购物车" class="headerlink" title="3. 清空购物车"></a>3. 清空购物车</h4><p>在ShoppingCartController中创建clean方法，在方法中获取当前登录用户，根据登录用户ID，删除购物车数据。</p>
<p>代码实现如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 清空购物车</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/clean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">clean</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//SQL:delete from shopping_cart where user_id = ?</span></span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(ShoppingCart::getUserId,BaseContext.getCurrentId());</span><br><span class="line"></span><br><span class="line">    shoppingCartService.remove(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;清空购物车成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-6-功能测试"><a href="#3-6-功能测试" class="headerlink" title="3.6 功能测试"></a>3.6 功能测试</h2><p>添加购物车</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809145109288.png" alt="image-20220809145109288"></p>
<p>添加成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809145023218.png" alt="image-20220809145023218"></p>
<p>查看购物车</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809144938442.png" alt="image-20220809144938442"></p>
<p>清空购物车</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809145210727.png" alt="image-20220809145210727"></p>
<p>清楚成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809145228225.png" alt="image-20220809145228225"></p>
<h1 id="四、外卖下单"><a href="#四、外卖下单" class="headerlink" title="四、外卖下单"></a>四、外卖下单</h1><h2 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h2><p>移动端用户将菜品或者套餐加入购物车后，可以点击购物车中的 “去结算” 按钮，页面跳转到订单确认页面，点击 “去支付” 按钮则完成下单操作。</p>
<h2 id="4-2-数据模型"><a href="#4-2-数据模型" class="headerlink" title="4.2 数据模型"></a>4.2 数据模型</h2><p>用户下单业务对应的数据表为orders表和order_detail表(一对多关系,一个订单关联多个订单明细)：</p>
<table>
<thead>
<tr>
<th>表名</th>
<th>含义</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>orders</td>
<td>订单表</td>
<td>主要存储订单的基本信息(如: 订单号、状态、金额、支付方式、下单用户、收件地址等)</td>
</tr>
<tr>
<td>order_detail</td>
<td>订单明细表</td>
<td>主要存储订单详情信息(如: 该订单关联的套餐及菜品的信息)</td>
</tr>
</tbody></table>
<p>具体的表结构如下: </p>
<p>A. orders 订单表</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809192926829.png" alt="image-20220809192926829"></p>
<p>B. order_detail</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809192942986.png" alt="image-20220809192942986"></p>
<h2 id="4-3-前端页面分析"><a href="#4-3-前端页面分析" class="headerlink" title="4.3 前端页面分析"></a>4.3 前端页面分析</h2><p>前端页面和服务端的交互过程：</p>
<p><strong>1). 在购物车中点击去结算按钮，页面跳转到订单确认页面</strong></p>
<p><strong>2). 在订单确认页面，发送ajax请求，请求服务端获取当前登录用户的默认地址</strong></p>
<p><strong>3). 在订单确认页面，发送ajax请求，请求服务端获取当前登录用户的购物车数据</strong></p>
<p><strong>4). 在订单确认页面点击去支付按钮，发送ajax请求，请求服务端完成下单操作</strong></p>
<h2 id="4-4-准备工作"><a href="#4-4-准备工作" class="headerlink" title="4.4 准备工作"></a>4.4 准备工作</h2><p><strong>1). 实体类 Orders、OrderDetail</strong></p>
<p>所属包: com.itheima.reggie.entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//订单号</span></span><br><span class="line">    <span class="keyword">private</span> String number;</span><br><span class="line">    <span class="comment">//订单状态 1待付款，2待派送，3已派送，4已完成，5已取消</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下单用户id</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址id</span></span><br><span class="line">    <span class="keyword">private</span> Long addressBookId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下单时间</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime orderTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结账时间</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime checkoutTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//支付方式 1微信，2支付宝</span></span><br><span class="line">    <span class="keyword">private</span> Integer payMethod;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实收金额</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//备注</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手机号</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//收货人</span></span><br><span class="line">    <span class="keyword">private</span> String consignee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单明细</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDetail</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单id</span></span><br><span class="line">    <span class="keyword">private</span> Long orderId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="keyword">private</span> Long setmealId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味</span></span><br><span class="line">    <span class="keyword">private</span> String dishFlavor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//金额</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2). Mapper接口 OrderMapper、OrderDetailMapper</strong></p>
<p>所属包: com.itheima.reggie.mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Orders;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Orders&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.OrderDetail;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderDetailMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;OrderDetail&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>3). 业务层接口 OrderService、OrderDetailService</strong></p>
<p>所属包: com.itheima.reggie.service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Orders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Orders&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.OrderDetail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderDetailService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;OrderDetail&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>4). 业务层实现类 OrderServiceImpl、OrderDetailServiceImpl</strong></p>
<p>所属包: com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.*;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.OrderMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;OrderMapper, Orders&gt; <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.OrderDetail;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.OrderDetailMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.OrderDetailService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDetailServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;OrderDetailMapper, OrderDetail&gt; <span class="keyword">implements</span> <span class="title class_">OrderDetailService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5). 控制层 OrderController、OrderDetailController</strong></p>
<p>所属包: com.itheima.reggie.controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.OrderDetailService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单明细</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/orderDetail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDetailController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderDetailService orderDetailService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-5-代码实现"><a href="#4-5-代码实现" class="headerlink" title="4.5 代码实现"></a>4.5 代码实现</h2><h3 id="1-Controller"><a href="#1-Controller" class="headerlink" title="1.Controller"></a>1.Controller</h3><p>在OrderController中创建submit方法，处理用户下单的逻辑 ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户下单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/submit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">submit</span><span class="params">(<span class="meta">@RequestBody</span> Orders orders)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;订单数据：&#123;&#125;&quot;</span>,orders);</span><br><span class="line">    orderService.submit(orders);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;下单成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-Service"><a href="#2-Service" class="headerlink" title="2.Service"></a>2.Service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用户下单</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">submit</span><span class="params">(Orders orders)</span>;</span><br></pre></td></tr></table></figure>



<h3 id="3-OrderServiceImpl"><a href="#3-OrderServiceImpl" class="headerlink" title="3.OrderServiceImpl"></a>3.OrderServiceImpl</h3><p>具体逻辑如下： </p>
<ol>
<li><p>获得当前用户id, 查询当前用户的购物车数据</p>
</li>
<li><p>根据当前登录用户id, 查询用户数据</p>
</li>
<li><p>根据地址ID, 查询地址数据</p>
</li>
<li><p>组装订单明细数据, 批量保存订单明细 </p>
</li>
<li><p>组装订单数据, 批量保存订单数据</p>
</li>
<li><p>删除当前用户的购物车列表数据</p>
</li>
</ol>
<p><strong>代码实现:</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ShoppingCartService shoppingCartService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AddressBookService addressBookService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> OrderDetailService orderDetailService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用户下单</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">submit</span><span class="params">(Orders orders)</span> &#123;</span><br><span class="line">    <span class="comment">//获得当前用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询当前用户的购物车数据</span></span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(ShoppingCart::getUserId,userId);</span><br><span class="line">    List&lt;ShoppingCart&gt; shoppingCarts = shoppingCartService.list(wrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(shoppingCarts == <span class="literal">null</span> || shoppingCarts.size() == <span class="number">0</span>)&#123;</span><br><span class="line">    	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;购物车为空，不能下单&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询用户数据</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询地址数据</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">addressBookId</span> <span class="operator">=</span> orders.getAddressBookId();</span><br><span class="line">    <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(addressBookId);</span><br><span class="line">    <span class="keyword">if</span>(addressBook == <span class="literal">null</span>)&#123;</span><br><span class="line">    	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;用户地址信息有误，不能下单&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> IdWorker.getId();<span class="comment">//订单号</span></span><br><span class="line"></span><br><span class="line">    <span class="type">AtomicInteger</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组装订单明细信息</span></span><br><span class="line">    List&lt;OrderDetail&gt; orderDetails = shoppingCarts.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">OrderDetail</span> <span class="variable">orderDetail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDetail</span>();</span><br><span class="line">        orderDetail.setOrderId(orderId);</span><br><span class="line">        orderDetail.setNumber(item.getNumber());</span><br><span class="line">        orderDetail.setDishFlavor(item.getDishFlavor());</span><br><span class="line">        orderDetail.setDishId(item.getDishId());</span><br><span class="line">        orderDetail.setSetmealId(item.getSetmealId());</span><br><span class="line">        orderDetail.setName(item.getName());</span><br><span class="line">        orderDetail.setImage(item.getImage());</span><br><span class="line">        orderDetail.setAmount(item.getAmount());</span><br><span class="line">        amount.addAndGet(item.getAmount().multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(item.getNumber())).intValue());</span><br><span class="line">        <span class="keyword">return</span> orderDetail;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组装订单数据</span></span><br><span class="line">    orders.setId(orderId);</span><br><span class="line">    orders.setOrderTime(LocalDateTime.now());</span><br><span class="line">    orders.setCheckoutTime(LocalDateTime.now());</span><br><span class="line">    orders.setStatus(<span class="number">2</span>);</span><br><span class="line">    orders.setAmount(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(amount.get()));<span class="comment">//总金额</span></span><br><span class="line">    orders.setUserId(userId);</span><br><span class="line">    orders.setNumber(String.valueOf(orderId));</span><br><span class="line">    orders.setUserName(user.getName());</span><br><span class="line">    orders.setConsignee(addressBook.getConsignee());</span><br><span class="line">    orders.setPhone(addressBook.getPhone());</span><br><span class="line">    orders.setAddress((addressBook.getProvinceName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getProvinceName())</span><br><span class="line">        + (addressBook.getCityName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getCityName())</span><br><span class="line">        + (addressBook.getDistrictName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getDistrictName())</span><br><span class="line">        + (addressBook.getDetail() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getDetail()));</span><br><span class="line">    <span class="comment">//向订单表插入数据，一条数据</span></span><br><span class="line">    <span class="built_in">this</span>.save(orders);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向订单明细表插入数据，多条数据</span></span><br><span class="line">    orderDetailService.saveBatch(orderDetails);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空购物车数据</span></span><br><span class="line">    shoppingCartService.remove(wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>备注: </p>
<p>​	上述逻辑处理中，计算购物车商品的总金额时，为保证我们每一次执行的累加计算是一个原子操作，我们这里用到了JDK中提供的一个原子类 AtomicInteger</p>
</blockquote>
<h2 id="4-6-功能测试"><a href="#4-6-功能测试" class="headerlink" title="4.6 功能测试"></a>4.6 功能测试</h2><p>下单</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809193430207.png" alt="image-20220809193430207"></p>
<p>下单成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809192833842.png" alt="image-20220809192833842"></p>
<p>查看数据库</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809193452878.png" alt="image-20220809193452878"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220809193500794.png" alt="image-20220809193500794"></p>
<p>数据插入完成</p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>瑞吉外卖项目day08笔记</title>
    <url>/posts/3343998952.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="零、前言"><a href="#零、前言" class="headerlink" title="零、前言"></a>零、前言</h1><blockquote>
<p>1). 存在的问题</p>
</blockquote>
<p>在前面基础功能实现的过程中，我们后台管理系统及移动端的用户，在进行数据访问时，都是直接操作数据库MySQL的。结构如下图： </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811104122838.png" alt="image-20220811104122838"></p>
<p>而在当前，MySQL服务器只有一台，那么就可能会存在如下问题： </p>
<p>1). 读和写所有压力都由一台数据库承担，压力大</p>
<p>2). 数据库服务器磁盘损坏则数据丢失，单点故障</p>
<blockquote>
<p>2). 解决方案</p>
</blockquote>
<p>为了解决上述提到的两个问题，我们可以准备两台MySQL，一台主(Master)服务器，一台从(Slave)服务器，主库的数据变更，需要同步到从库中(主从复制)。而用户在访问我们项目时，如果是写操作(insert、update、delete)，则直接操作主库；如果是读(select)操作，则直接操作从库(在这种读写分离的结构中，从库是可以有多个的)，这种结构我们称为 读写分离 。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811104131731.png" alt="image-20220811104131731"></p>
<h1 id="一、MySQL主从复制"><a href="#一、MySQL主从复制" class="headerlink" title="一、MySQL主从复制"></a>一、MySQL主从复制</h1><p>MySQL数据库默认是支持主从复制的，不需要借助于其他的技术，我们只需要在数据库中简单的配置即可。接下来，我们就从以下的几个方面，来介绍一下主从复制：</p>
<h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p>MySQL主从复制是一个异步的复制过程，底层是基于Mysql数据库自带的 <strong>二进制日志</strong> 功能。就是一台或多台MySQL数据库（slave，即<strong>从库</strong>）从另一台MySQL数据库（master，即<strong>主库</strong>）进行日志的复制，然后再解析日志并应用到自身，最终实现 <strong>从库</strong> 的数据和 <strong>主库</strong> 的数据保持一致。MySQL主从复制是MySQL数据库自带功能，无需借助第三方工具。</p>
<blockquote>
<p><strong>二进制日志：</strong> </p>
<p>​	二进制日志（BINLOG）记录了所有的 DDL（数据定义语言）语句和 DML（数据操纵语言）语句，但是不包括数据查询语句。此日志对于灾难时的数据恢复起着极其重要的作用，MySQL的主从复制， 就是通过该binlog实现的。默认MySQL是未开启该日志的。</p>
</blockquote>
<p><strong>MySQL的主从复制原理如下：</strong> </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811104158041.png" alt="image-20220811104158041"></p>
<p><strong>MySQL复制过程分成三步：</strong></p>
<p>1). MySQL master 将数据变更写入二进制日志( binary log)</p>
<p>2). slave将master的binary log拷贝到它的中继日志（relay log）</p>
<p>3). slave重做中继日志中的事件，将数据变更反映它自己的数据</p>
<h3 id="1-2-搭建"><a href="#1-2-搭建" class="headerlink" title="1.2 搭建"></a>1.2 搭建</h3><h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h4><p>提前准备两台服务器，并且在服务器中安装MySQL，服务器的信息如下：</p>
<table>
<thead>
<tr>
<th>数据库</th>
<th>IP</th>
<th>数据库版本</th>
</tr>
</thead>
<tbody><tr>
<td>Master</td>
<td>192.168.2.200</td>
<td>5.7.25</td>
</tr>
<tr>
<td>Slave</td>
<td>192.168.2.201</td>
<td>5.7.25</td>
</tr>
</tbody></table>
<p>这里直接将数据库克隆即可，但是要改掉ip</p>
<p>&#x3D;&#x3D;注意：不要把克隆的虚拟机和原有的虚拟机放在同一目录下，会产生冲突&#x3D;&#x3D;</p>
<p><strong>并在两台服务器上做如下准备工作:</strong> </p>
<p>1). 防火墙开放3306端口号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811125613091.png" alt="image-20220811125613091"></p>
<p>2). 并将两台数据库服务器启动起来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811105548769.png" alt="image-20220811105548769"></p>
<p>登录MySQL，验证是否正常启动</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811105631222.png" alt="image-20220811105631222"></p>
<h4 id="2-主库配置"><a href="#2-主库配置" class="headerlink" title="2. 主库配置"></a>2. 主库配置</h4><blockquote>
<p>服务器： 192.168.200.200</p>
</blockquote>
<p><strong>1). 修改Mysql数据库的配置文件&#x2F;etc&#x2F;my.cnf</strong></p>
<p>在最下面增加配置: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">log-bin=mysql-bin   #[必须]启用二进制日志</span><br><span class="line">server-id=200       #[必须]服务器唯一ID(唯一即可)</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811125805283.png" alt="image-20220811125805283"></p>
<p><strong>2). 重启Mysql服务</strong></p>
<p>执行指令： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811125846282.png" alt="image-20220811125846282"></p>
<p><strong>3). 创建数据同步的用户并授权</strong></p>
<p>登录mysql，并执行如下指令，创建用户并授权：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;bubble&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;Root@123456&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;注：上面SQL的作用是创建一个用户bubble，密码为 Root@123456 ，并且给bubble用户授予REPLICATION SLAVE权限。常用于建立复制时所需要用到的用户权限，也就是slave必须被master授权具有该权限的用户，才能通过该用户复制。&#x3D;&#x3D;</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811130033005.png" alt="image-20220811130033005"></p>
<blockquote>
<p>MySQL密码复杂程度说明: </p>
<p>​	<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811130042793.png" alt="image-20220811130042793"></p>
<p>目前mysql5.7默认密码校验策略等级为 MEDIUM , 该等级要求密码组成为: 数字、小写字母、大写字母 、特殊字符、长度至少8位</p>
</blockquote>
<p><strong>4). 登录Mysql数据库，查看master同步状态</strong></p>
<p>执行下面SQL，记录下结果中<strong>File</strong>和<strong>Position</strong>的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811130118788.png" alt="image-20220811130118788"></p>
<p>&#x3D;&#x3D;注：上面SQL的作用是查看Master的状态，执行完此SQL后不要再执行任何操作&#x3D;&#x3D;</p>
<h4 id="3-从库配置"><a href="#3-从库配置" class="headerlink" title="3. 从库配置"></a>3. 从库配置</h4><blockquote>
<p>服务器： 192.168.200.201</p>
</blockquote>
<p><strong>1). 修改Mysql数据库的配置文件&#x2F;etc&#x2F;my.cnf</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server-id=201 	#[必须]服务器唯一ID</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811130254435.png" alt="image-20220811130254435"></p>
<p><strong>2). 重启Mysql服务</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>



<p><strong>3). 登录Mysql数据库，设置主库地址及同步位置</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">change master to master_host=&#x27;192.168.2.200&#x27;,master_user=&#x27;bubble&#x27;,master_password=&#x27;Root@123456&#x27;,master_log_file=&#x27;mysql-bin.000001&#x27;,master_log_pos=439;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数说明： </p>
<p>​	A. master_host : 主库的IP地址</p>
<p>​	B. master_user : 访问主库进行主从复制的用户名(上面在主库创建的)</p>
<p>​	C. master_password : 访问主库进行主从复制的用户名对应的密码</p>
<p>​	D. master_log_file : 从哪个日志文件开始同步(上述查询master状态中展示的有)</p>
<p>​	E. master_log_pos : 从指定日志文件的哪个位置开始同步(上述查询master状态中展示的有)</p>
</blockquote>
<p><strong>4). 查看从数据库的状态</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show slave status;</span><br></pre></td></tr></table></figure>

<p>然后通过状态信息中的 Slave_IO_running 和 Slave_SQL_running 可以看出主从同步是否就绪，如果这两个参数全为Yes，表示主从同步已经配置完成。</p>
<blockquote>
<p>MySQL命令行技巧： </p>
<p>​	\G : 在MySQL的sql语句后加上\G，表示将查询结果进行按列打印，可以使每个字段打印到单独的行。即将查到的结构旋转90度变成纵向；</p>
</blockquote>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811132104386.png" alt="image-20220811132104386"></p>
<p>但是这里的的IO_Running还是No，这是因为我们克隆虚拟机的mysql的UUID是一样的，所以要更改UUID，可以参考这篇博文</p>
<p><a href="https://www.kdy.icu/2022/08/11/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E6%97%B6Slave-IO-Running%E4%B8%BANo%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/">MySQL主从复制时Slave-IO-Running为No的问题与解决</a></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811133004487.png" alt="image-20220811133004487"></p>
<h3 id="1-3-功能测试"><a href="#1-3-功能测试" class="headerlink" title="1.3 功能测试"></a>1.3 功能测试</h3><p>在主库中新建数据库hello</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811135151951.png" alt="image-20220811135151951"></p>
<p>从库中也会创建hello </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811135521159.png" alt="image-20220811135521159"></p>
<p>主库中新建表user</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811135203761.png" alt="image-20220811135203761"></p>
<p>在主库中添加数据</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811135338547.png" alt="image-20220811135338547"></p>
<p>从库中对应也会添加</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811135355640.png" alt="image-20220811135355640"></p>
<h1 id="二、读写分离案例"><a href="#二、读写分离案例" class="headerlink" title="二、读写分离案例"></a>二、读写分离案例</h1><h3 id="2-1-背景介绍"><a href="#2-1-背景介绍" class="headerlink" title="2.1 背景介绍"></a>2.1 背景介绍</h3><p>面对日益增加的系统访问量，数据库的吞吐量面临着巨大瓶颈。 对于同一时刻有大量并发读操作和较少写操作类型的应用系统来说，将数据库拆分为<strong>主库</strong>和<strong>从库</strong>，主库负责处理事务性的增删改操作，从库负责处理查询操作，能够有效的避免由数据更新导致的行锁，使得整个系统的查询性能得到极大的改善。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811143043125.png" alt="image-20220811143043125"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811145100669.png" alt="image-20220811145100669"></p>
<p>通过读写分离,就可以降低单台数据库的访问压力, 提高访问效率，也可以避免单机故障。</p>
<p>主从复制的结构，我们在第一节已经完成了，那么我们在项目中，如何通过java代码来完成读写分离呢，如何在执行select的时候查询从库，而在执行insert、update、delete的时候，操作主库呢？这个时候，我们就需要介绍一个新的技术 ShardingJDBC。</p>
<h3 id="2-2-ShardingJDBC介绍"><a href="#2-2-ShardingJDBC介绍" class="headerlink" title="2.2 ShardingJDBC介绍"></a>2.2 ShardingJDBC介绍</h3><p>Sharding-JDBC定位为轻量级Java框架，在Java的JDBC层提供的额外服务。 它使用客户端直连数据库，以jar包形式提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架。</p>
<p>使用Sharding-JDBC可以在程序中轻松的实现数据库读写分离。</p>
<p>Sharding-JDBC具有以下几个特点： </p>
<p>1). 适用于任何基于JDBC的ORM框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template或直接使用JDBC。</p>
<p>2). 支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, Druid, HikariCP等。</p>
<p>3). 支持任意实现JDBC规范的数据库。目前支持MySQL，Oracle，SQLServer，PostgreSQL以及任何遵循SQL92标准的数据库。</p>
<p>依赖: </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-3-数据库环境"><a href="#2-3-数据库环境" class="headerlink" title="2.3 数据库环境"></a>2.3 数据库环境</h3><p>在主库中创建一个数据库rw, 并且创建一张表， 该数据库及表结构创建完毕后会自动同步至从数据库，SQL语句如下： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database rw <span class="keyword">default</span> charset utf8mb4;</span><br><span class="line"></span><br><span class="line">use rw;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811145129239.png" alt="image-20220811145129239"></p>
<h3 id="2-4-初始工程导入"><a href="#2-4-初始工程导入" class="headerlink" title="2.4 初始工程导入"></a>2.4 初始工程导入</h3><p>导入资料中提供的demo工程（rw_demo），具体的工程结构如下： </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811145240983.png" alt="image-20220811145240983"></p>
<h3 id="2-5-读写分离配置"><a href="#2-5-读写分离配置" class="headerlink" title="2.5 读写分离配置"></a>2.5 读写分离配置</h3><p>1). 在pom.xml中增加shardingJdbc的maven坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2). 在application.yml中增加数据源的配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">        <span class="string">master,slave</span></span><br><span class="line">      <span class="comment"># 主数据源</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.200.200:3306/rw?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="comment"># 从数据源</span></span><br><span class="line">      <span class="attr">slave:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.200.201:3306/rw?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">masterslave:</span></span><br><span class="line">      <span class="comment"># 读写分离配置</span></span><br><span class="line">      <span class="attr">load-balance-algorithm-type:</span> <span class="string">round_robin</span> <span class="comment">#轮询</span></span><br><span class="line">      <span class="comment"># 最终的数据源名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dataSource</span></span><br><span class="line">      <span class="comment"># 主库数据源名称</span></span><br><span class="line">      <span class="attr">master-data-source-name:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 从库数据源名称列表，多个逗号分隔</span></span><br><span class="line">      <span class="attr">slave-data-source-names:</span> <span class="string">slave</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span> <span class="comment">#开启SQL显示，默认false</span></span><br></pre></td></tr></table></figure>



<p>配置解析: </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811145453969.png" alt="image-20220811145453969"></p>
<p>3). 在application.yml中增加配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>该配置项的目的,就是如果当前项目中存在同名的bean,后定义的bean会覆盖先定义的。</p>
<p>&#x3D;&#x3D;如果不配置该项，项目启动之后将会报错：&#x3D;&#x3D; </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811145502027.png" alt="image-20220811145502027"></p>
<p>报错信息表明，在声明 org.apache.shardingsphere.shardingjdbc.spring.boot 包下的SpringBootConfiguration中的dataSource这个bean时出错, 原因是有一个同名的 dataSource 的bean在com.alibaba.druid.spring.boot.autoconfigure包下的DruidDataSourceAutoConfigure类加载时已经声明了。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811145512429.png" alt="image-20220811145512429"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811145519834.png" alt="image-20220811145519834"></p>
<p>而我们需要用到的是 shardingjdbc包下的dataSource，所以我们需要配置上述属性，让后加载的覆盖先加载的。</p>
<h1 id="三、项目实现读写分离"><a href="#三、项目实现读写分离" class="headerlink" title="三、项目实现读写分离"></a>三、项目实现读写分离</h1><h3 id="3-1-数据库环境准备"><a href="#3-1-数据库环境准备" class="headerlink" title="3.1 数据库环境准备"></a>3.1 数据库环境准备</h3><p>直接使用我们前面在虚拟机中搭建的主从复制的数据库环境即可。</p>
<p>在主库中创建瑞吉外卖项目的业务数据库reggie, 并导入相关表结构和数据(我们可以将自己之前在本地开发时使用的数据库数据导出, 然后导入到服务器中的主库即可)。</p>
<p><strong>1). 将自己本地的reggie数据库的数据导出SQL文件</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811150745420.png" alt="image-20220811150745420"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811150741817.png" alt="image-20220811150741817"></p>
<p>这样做的话，我们之前自己开发时，添加的测试数据都还在的，便于测试。</p>
<p><strong>2). 在主数据库master中，创建数据库reggie，并导入该SQL文件</strong></p>
<p>master中创建数据库，会自动同步至slave从库</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811150535688.png" alt="image-20220811150535688"></p>
<p>在master的reggie中导入sql文件</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811150831777.png" alt="image-20220811150831777"></p>
<h3 id="3-2-创建Git分支"><a href="#3-2-创建Git分支" class="headerlink" title="3.2 创建Git分支"></a>3.2 创建Git分支</h3><p>目前默认git中有两个分支master 和 v1.0 ，我们接下来进行读写分离的优化，就不在master和v1.0分支来操作了，我们需要在git上创建一个单独的分支v1.1，读写分离的优化，我们就在该分支上进行操作。具体创建分支的操作，和前面演示的一致。</p>
<p>当前创建的v1.1分支，是基于master分支创建出来的，所以目前master分支的代码， 和v1.1分支的代码是完全一样的，接下来把v1.1的代码也推送至远程仓库。</p>
<h3 id="3-3-读写分离配置"><a href="#3-3-读写分离配置" class="headerlink" title="3.3 读写分离配置"></a>3.3 读写分离配置</h3><p><strong>1). 在项目的pom.xml增加依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>2). 在项目的application.yml中配置数据源相关信息</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">        <span class="string">master,slave</span></span><br><span class="line">      <span class="comment"># 主数据源</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.2.200:3306/reggie?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="comment"># 从数据源</span></span><br><span class="line">      <span class="attr">slave:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.2.201:3306/reggie?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">masterslave:</span></span><br><span class="line">      <span class="comment"># 读写分离配置</span></span><br><span class="line">      <span class="attr">load-balance-algorithm-type:</span> <span class="string">round_robin</span> <span class="comment">#轮询</span></span><br><span class="line">      <span class="comment"># 最终的数据源名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dataSource</span></span><br><span class="line">      <span class="comment"># 主库数据源名称</span></span><br><span class="line">      <span class="attr">master-data-source-name:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 从库数据源名称列表，多个逗号分隔</span></span><br><span class="line">      <span class="attr">slave-data-source-names:</span> <span class="string">slave</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span> <span class="comment">#开启SQL显示，默认false</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;这里注意代码结构，缩进要对好，不然会出问题&#x3D;&#x3D;</p>
<h3 id="3-4-Git合并代码"><a href="#3-4-Git合并代码" class="headerlink" title="3.4 Git合并代码"></a>3.4 Git合并代码</h3><p>将v1.1合并到master分支，然后推送到远程仓库</p>
<h1 id="四、Nginx-概述"><a href="#四、Nginx-概述" class="headerlink" title="四、Nginx-概述"></a>四、Nginx-概述</h1><h3 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811153536716.png" alt="image-20220811153536716"></p>
<p>Nginx是一款轻量级的Web服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx的网站有：百度、京东、新浪、网易、腾讯、淘宝等。</p>
<p>Nginx是由<strong>伊戈尔·赛索耶夫</strong>为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。</p>
<p>官网：<a href="https://nginx.org/">https://nginx.org/</a></p>
<h3 id="4-2-下载和安装"><a href="#4-2-下载和安装" class="headerlink" title="4.2 下载和安装"></a>4.2 下载和安装</h3><h4 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h4><p>在Nginx的官网的下载页面中(<a href="http://nginx.org/en/download.html)%EF%BC%8C%E5%B0%B1%E5%B1%95%E7%A4%BA%E4%BA%86%E5%BD%93%E5%89%8DNginx%E7%89%88%E6%9C%AC%EF%BC%8C%E5%B9%B6%E6%8F%90%E4%BE%9B%E4%BA%86%E4%B8%8B%E8%BD%BD%E7%9A%84%E8%BF%9E%E6%8E%A5%E3%80%82">http://nginx.org/en/download.html)，就展示了当前Nginx版本，并提供了下载的连接。</a> 如下： </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811153552717.png" alt="image-20220811153552717"></p>
<p>在本项目中，选择的是稳定版本的1.16这个版本。</p>
<h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h4><p><strong>1). 安装依赖包</strong></p>
<p>由于nginx是基于c语言开发的，所以需要安装c语言的编译环境，及正则表达式库等第三方依赖库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811163130936.png" alt="image-20220811163130936"></p>
<p><strong>2). 下载Nginx安装包</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install wget</span><br><span class="line">wget https://nginx.org/download/nginx-1.16.1.tar.gz</span><br></pre></td></tr></table></figure>

<blockquote>
<p>wget : </p>
<p>​	wget命令用来从指定的URL下载文件。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。</p>
</blockquote>
<p>执行完wget指令后，就会在当前所在目录看到下载下来的文件。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811163202505.png" alt="image-20220811163202505"></p>
<p><strong>3). 解压nginx压缩包</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.16.1.tar.gz</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811163241308.png" alt="image-20220811163241308"></p>
<p><strong>4). 配置Nginx编译环境</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd nginx-1.16.1</span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br></pre></td></tr></table></figure>

<p>说明: </p>
<p>​	–prefix 指定的目录，就是我们安装Nginx的目录。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811163311592.png" alt="image-20220811163311592"></p>
<p><strong>5). 编译&amp;安装</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make &amp; make install</span><br></pre></td></tr></table></figure>



<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811163328493.png" alt="image-20220811163328493"></p>
<h3 id="4-3-目录结构"><a href="#4-3-目录结构" class="headerlink" title="4.3 目录结构"></a>4.3 目录结构</h3><p>安装完Nginx后，我们可以切换到Nginx的安装目录(&#x2F;usr&#x2F;local&#x2F;nginx)，先来熟悉一下Nginx的目录结构，如下图：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811162954883.png" alt="image-20220811162954883"></p>
<blockquote>
<p>备注： </p>
<p>​	上述我们用到的一个指令 tree，该指令可以将我们指定的目录以树状结构展示出来。如果没有这个指令，可以通过以下指令进行安装。</p>
<p>​	yum install tree</p>
</blockquote>
<p>重点目录和文件如下: </p>
<table>
<thead>
<tr>
<th>目录&#x2F;文件</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>conf</td>
<td>配置文件的存放目录</td>
<td></td>
</tr>
<tr>
<td>conf&#x2F;nginx.conf</td>
<td>Nginx的核心配置文件</td>
<td>conf下有很多nginx的配置文件，我们主要操作这个核心配置文件</td>
</tr>
<tr>
<td>html</td>
<td>存放静态资源(html, css, )</td>
<td>部署到Nginx的静态资源都可以放在html目录中</td>
</tr>
<tr>
<td>logs</td>
<td>存放nginx日志(访问日志、错误日志等)</td>
<td></td>
</tr>
<tr>
<td>sbin&#x2F;nginx</td>
<td>二进制文件，用于启动、停止Nginx服务</td>
<td></td>
</tr>
</tbody></table>
<h1 id="五、Nginx-命令"><a href="#五、Nginx-命令" class="headerlink" title="五、Nginx-命令"></a>五、Nginx-命令</h1><h3 id="5-1-常用命令"><a href="#5-1-常用命令" class="headerlink" title="5.1 常用命令"></a>5.1 常用命令</h3><p>Nginx中，我们的二进制可执行文件(nginx)存放在sbin目录下，虽然只有一个可执行文件，但是我们可以通过该指令配合不同的参数达到更加强大的功能。在执行下面的Nginx常见指令令时,都需在&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;目录下执行。</p>
<p><strong>1). 查看版本</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./nginx -v</span><br></pre></td></tr></table></figure>



<p><strong>2). 检查配置文件</strong></p>
<p>修改了nginx.conf核心配置文件之后，在启动Nginx服务之前，可以先检查一下conf&#x2F;nginx.conf文件配置的是否有错误，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./nginx -t</span><br></pre></td></tr></table></figure>



<p><strong>3). 启动</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure>

<p>启动之后，我们可以通过ps -ef指令来查看nginx的进程是否存在。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811172536241.png" alt="image-20220811172536241"></p>
<p>&#x3D;&#x3D;注意： nginx服务启动后，默认就会有两个进程。&#x3D;&#x3D;</p>
<p>启动之后，我们可以直接访问Nginx的80端口， <a href="http://192.168.2.200/">http://192.168.2.200</a></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811164229641.png" alt="image-20220811164229641"></p>
<blockquote>
<p>注意：</p>
<p>​	要想正常访问Nginx，需要关闭防火墙或开放指定端口号，执行的指令如下： </p>
<p>​	A. 关闭防火墙</p>
<p>​		systemctl stop firewalld</p>
<p>​	B. 开放80端口</p>
<p>​		firewall-cmd –zone&#x3D;public –add-port&#x3D;80&#x2F;tcp –permanent</p>
<p>​		firewall-cmd –reload</p>
</blockquote>
<p><strong>4). 停止</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./nginx -s stop</span><br></pre></td></tr></table></figure>

<p>停止之后，我们可以查看nginx的进程： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef|grep nginx</span><br></pre></td></tr></table></figure>



<p><strong>5). 重新加载</strong></p>
<p>当修改了Nginx配置文件后，需要重新加载才能生效，可以使用下面命令重新加载配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure>



<h3 id="5-2-环境变量配置"><a href="#5-2-环境变量配置" class="headerlink" title="5.2 环境变量配置"></a>5.2 环境变量配置</h3><p>在上述我们在使用nginx命令在进行服务的启动、停止、重新加载时，都需要用到一个指令nginx，而这个指令是在nginx&#x2F;sbin目录下的，我们每一次使用这个指令都需要切换到sbin目录才可以，使用相对繁琐。</p>
<p>那么我们能不能在任意目录下都可以执行该指令来操作nginx呢？答案是可以的，配置nginx的环境变量即可。</p>
<p>通过vim编辑器，打开&#x2F;etc&#x2F;profile文件, 在PATH环境变量中增加nginx的sbin目录，如下： </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811172321341.png" alt="image-20220811172321341"></p>
<p>修改完配置文件之后，需要执行 source &#x2F;etc&#x2F;profile 使文件生效。 接下来，就可以在任意目录下执行nginx的指令了，如： </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811172342379.png" alt="image-20220811172342379"></p>
<h1 id="六、-Nginx-应用"><a href="#六、-Nginx-应用" class="headerlink" title="六、 Nginx-应用"></a>六、 Nginx-应用</h1><h3 id="6-1-配置文件结构"><a href="#6-1-配置文件结构" class="headerlink" title="6.1 配置文件结构"></a>6.1 配置文件结构</h3><p>nginx的配置文件(conf&#x2F;nginx.conf)整体上分为三部分: 全局块、events块、http块。这三块的分别配置什么样的信息呢，看下表： </p>
<table>
<thead>
<tr>
<th>区域</th>
<th>职责</th>
</tr>
</thead>
<tbody><tr>
<td>全局块</td>
<td>配置和nginx运行相关的全局配置</td>
</tr>
<tr>
<td>events块</td>
<td>配置和网络连接相关的配置</td>
</tr>
<tr>
<td>http块</td>
<td>配置代理、缓存、日志记录、虚拟主机等配置</td>
</tr>
</tbody></table>
<p>具体结构图如下: </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811184846916.png" alt="image-20220811184846916"></p>
<blockquote>
<p>在全局块、events块以及http块中，我们经常配置的是http块。</p>
<p>在http块中可以包含多个server块,每个server块可以配置多个location块。</p>
</blockquote>
<h3 id="6-2-部署静态资源"><a href="#6-2-部署静态资源" class="headerlink" title="6.2 部署静态资源"></a>6.2 部署静态资源</h3><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h4><p>Nginx可以作为静态web服务器来部署静态资源。这里所说的静态资源是指在服务端真实存在，并且能够直接展示的一些文件，比如常见的html页面、css文件、js文件、图片、视频等资源。</p>
<p>相对于Tomcat，Nginx处理静态资源的能力更加高效，所以在生产环境下，一般都会将静态资源部署到Nginx中。</p>
<p>将静态资源部署到Nginx非常简单，只需要将文件复制到Nginx安装目录下的html目录中即可。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">listen</span> <span class="string">80;				#监听端口	</span></span><br><span class="line">    <span class="attr">server_name</span> <span class="string">localhost;	#服务器名称</span></span><br><span class="line">    <span class="attr">location</span> <span class="string">/ &#123;			#匹配客户端请求url</span></span><br><span class="line">        <span class="attr">root</span> <span class="string">html;			#指定静态资源根目录</span></span><br><span class="line">        <span class="attr">index</span> <span class="string">index.html;	#指定默认首页</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-测试"><a href="#2-测试" class="headerlink" title="2. 测试"></a>2. 测试</h4><p><strong>1). 将静态资源hello.html上传到 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html 目录</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811185020065.png" alt="image-20220811185020065"></p>
<p><strong>2). 启动nginx</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811185030888.png" alt="image-20220811185030888"></p>
<p><strong>3). 访问</strong></p>
<p><a href="http://192.168.200.200/hello.html">http://192.168.200.200/hello.html</a></p>
<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811185039347.png" alt="image-20220811185039347"  />

<p><a href="http://192.168.200.200/">http://192.168.200.200</a> ， 访问该地址，访问的是nginx的默认首页</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811185056584.png" alt="image-20220811185056584"></p>
<p><strong>4). 配置首页</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811185103897.png" alt="image-20220811185103897"></p>
<p>如果我们需要将hello.html作为nginx的首页，可以修改location的index指令，配置为hello.html，如下：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811185109791.png" alt="image-20220811185109791"></p>
<p>配置完毕后，我们可以通过指令，来检查配置文件是否配置正确： nginx -t</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811185119763.png" alt="image-20220811185119763"></p>
<p>配置文件修改了，我们需要重新加载一下，才可以生效： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>





<h3 id="6-3-反向代理"><a href="#6-3-反向代理" class="headerlink" title="6.3 反向代理"></a>6.3 反向代理</h3><h4 id="1-概念介绍"><a href="#1-概念介绍" class="headerlink" title="1. 概念介绍"></a>1. 概念介绍</h4><p>1). 正向代理</p>
<p>正向代理服务器是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。</p>
<p>正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。</p>
<p>正向代理一般是<strong>在客户端设置代理服务器</strong>，通过代理服务器转发请求，最终访问到目标服务器。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811185315643.png" alt="image-20220811185315643"></p>
<p>2). 反向代理</p>
<p>反向代理服务器位于用户与目标服务器之间，但是对于用户而言，反向代理服务器就相当于目标服务器，即用户直接访问反向代理服务器就可以获得目标服务器的资源，反向代理服务器负责将请求转发给目标服务器。用户不需要知道目标服务器的地址，也无须在用户端作任何设定，对于用户来说，访问反向代理服务器是完全无感知的。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811185323140.png" alt="image-20220811185323140"></p>
<p>在nginx中，我们可以在nginx.conf中配置反向代理: </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">listen</span> <span class="string">82;</span></span><br><span class="line">    <span class="attr">server_name</span> <span class="string">localhost;</span></span><br><span class="line">    <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">        <span class="attr">proxy_pass</span> <span class="string">http://192.168.2.201:8080; 	#反向代理配置，将请求转发到指定服务</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811185414684.png" alt="image-20220811185414684"></p>
<p>上述配置的含义为: 当我们访问nginx的82端口时，根据反向代理配置，会将请求转发到 <a href="http://192.168.2.201:8080/">http://192.168.2.201:8080</a> 对应的服务上。</p>
<h4 id="2-测试-1"><a href="#2-测试-1" class="headerlink" title="2. 测试"></a>2. 测试</h4><p>需求: 在192.168.2.201这台服务器中部署了java应用，运行端口为8080，并提供了一个可访问的链接 &#x2F;hello。现在我们需要在访问nginx的82端口时，通过nginx将请求转发到192.168.2.201:8080的服务。</p>
<p><strong>1).web服务器部署服务并启动</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811185552703.png" alt="image-20220811185552703"></p>
<p><strong>2).在代理服务器中的nginx.conf中配置反向代理</strong></p>
<p>进入nginx的安装目录，并编辑配置文件nginx.conf:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/conf/</span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure>



<p>在http块中,再添加一个server块虚拟主机的配置,监听82端口,并配置反向代理proxy_pass: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 82;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://192.168.2.201:8080; 	#反向代理配置，将请求转发到指定服务</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811185652589.png" alt="image-20220811185652589"></p>
<p><strong>3). 检查配置文件，并重新加载</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811185729634.png" alt="image-20220811185729634"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;注意：这里记得把82端口开放，然后重启防火墙&#x3D;&#x3D;</p>
<p><strong>4). 访问</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811185829947.png" alt="image-20220811185829947"></p>
<p>控制台也正常输出</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811185844630.png" alt="image-20220811185844630"></p>
<h3 id="6-4-负载均衡"><a href="#6-4-负载均衡" class="headerlink" title="6.4 负载均衡"></a>6.4 负载均衡</h3><h4 id="1-概念介绍-1"><a href="#1-概念介绍-1" class="headerlink" title="1. 概念介绍"></a>1. 概念介绍</h4><p>早期的网站流量和业务功能都比较简单，单台服务器就可以满足基本需求，但是随着互联网的发展，业务流量越来越大并且业务逻辑也越来越复杂，单台服务器的性能及单点故障问题就凸显出来了，因此需要多台服务器组成应用集群，进行性能的水平扩展以及避免单点故障出现。</p>
<p><strong>应用集群：</strong>将同一应用部署到多台机器上，组成应用集群，接收负载均衡器分发的请求，进行业务处理并返回响应数据</p>
<p><strong>负载均衡器：</strong>将用户请求根据对应的负载均衡算法分发到应用集群中的一台服务器进行处理</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811185903789.png" alt="image-20220811185903789"></p>
<p>此处的负载均衡器是使用Nginx来实现，而Nginx的负载均衡是基于反向代理的，只不过此时所代理的服务器不是一台，而是多台。</p>
<p>&#x3D;&#x3D;负载均衡就是基于Nginx反向代理的&#x3D;&#x3D;</p>
<h4 id="2-负载均衡配置"><a href="#2-负载均衡配置" class="headerlink" title="2.负载均衡配置"></a>2.负载均衡配置</h4><p>打开nginx的配置文件nginx.conf并增加如下配置: </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#upstream指令可以定义一组服务器</span></span><br><span class="line"><span class="attr">upstream</span> <span class="string">targetserver&#123;	</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">192.168.2.201:8080;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">192.168.2.201:8081;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">listen</span>       <span class="string">8080;</span></span><br><span class="line">    <span class="attr">server_name</span>  <span class="string">localhost;</span></span><br><span class="line">    <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">        <span class="attr">proxy_pass</span> <span class="string">http://targetserver;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>





<h4 id="3-负载均衡策略"><a href="#3-负载均衡策略" class="headerlink" title="3. 负载均衡策略"></a>3. 负载均衡策略</h4><p>处理上述默认的轮询策略以外，在Nginx中还提供了其他的负载均衡策略，如下： </p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>轮询</td>
<td>默认方式</td>
<td></td>
</tr>
<tr>
<td>weight</td>
<td>权重方式</td>
<td>根据权重分发请求,权重大的分配到请求的概率大</td>
</tr>
<tr>
<td>ip_hash</td>
<td>依据ip分配方式</td>
<td>根据客户端请求的IP地址计算hash值， 根据hash值来分发请求, 同一个IP发起的请求, 会发转发到同一个服务器上</td>
</tr>
<tr>
<td>least_conn</td>
<td>依据最少连接方式</td>
<td>哪个服务器当前处理的连接少, 请求优先转发到这台服务器</td>
</tr>
<tr>
<td>url_hash</td>
<td>依据url分配方式</td>
<td>根据客户端请求url的hash值，来分发请求, 同一个url请求, 会发转发到同一个服务器上</td>
</tr>
<tr>
<td>fair</td>
<td>依据响应时间方式</td>
<td>优先把请求分发给处理请求时间短的服务器</td>
</tr>
</tbody></table>
<p>权重的配置： </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#upstream指令可以定义一组服务器</span></span><br><span class="line"><span class="attr">upstream</span> <span class="string">targetserver&#123;	</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">192.168.200.201:8080 weight=10;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">192.168.200.201:8081 weight=5;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<p>上述配置的weight权重是相对的，在上述的配置中，效果就是，在大数据量的请求下，最终8080接收的请求数是8081的两倍。</p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>瑞吉外卖项目day09笔记</title>
    <url>/posts/1629901916.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>当前项目中，前端代码和后端代码混合在一起，是存在问题的，存在什么问题呢？</p>
</blockquote>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812091312419.png" alt="image-20220812091312419"></p>
<p>主要存在以下几点问题： </p>
<p>1). 开发人员同时负责前端和后端代码开发，分工不明确</p>
<p>2). 开发效率低</p>
<p>3). 前后端代码混合在一个工程中，不便于管理</p>
<p>4). 对开发人员要求高(既会前端，又会后端)，人员招聘困难</p>
<p>为了解决上述问题，现在比较主流的开发方式，就是<strong>前后端分离开发</strong>，前端人员开发前端的代码，后端开发人员开发服务端的业务功能，分工明确，各司其职。</p>
<h2 id="1-前后端分离开发"><a href="#1-前后端分离开发" class="headerlink" title="1. 前后端分离开发"></a>1. 前后端分离开发</h2><h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p><strong>前后端分离开发</strong>，就是在项目开发过程中，对于前端代码的开发由专门的前端开发人员负责，后端代码则由后端开发人员负责，这样可以做到分工明确、各司其职，提高开发效率，前后端代码并行开发，可以加快项目开发进度。</p>
<p>目前，前后端分离开发方式已经被越来越多的公司所采用，成为当前项目开发的主流开发方式。</p>
<p>前后端分离开发后，从工程结构上也会发生变化，即前后端代码不再混合在同一个maven工程中，而是分为 <strong>前端工程</strong> 和 <strong>后端工程</strong> 。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812091340909.png" alt="image-20220812091340909"></p>
<p>前后端分离之后，不仅工程结构变化，后期项目上线部署时，与之前也不同:</p>
<p>1). 之前: 前后端代码都混合在一起，我们只需要将前端和后端的代码统一打成jar包，直接运行就可以了。 </p>
<p>2). 现在: 拆分为前后端分离的项目后，最终部署时，后端工程会打成一个jar包，运行在Tomcat中(springboot内嵌的tomcat)。前端工程的静态资源，会直接部署在Nginx中进行访问。</p>
<h3 id="1-2-开发流程"><a href="#1-2-开发流程" class="headerlink" title="1.2 开发流程"></a>1.2 开发流程</h3><p>前后端分离开发后，面临一个问题，就是前端开发人员和后端开发人员如何进行配合来共同开发一个项目？可以按照如下流程进行：</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812091353345.png" alt="image-20220812091353345"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812091403361.png" alt="image-20220812091403361"></p>
<p>1). 定制接口: 这里所说的接口不是我们之前在service， mapper层定义的interface； 这里的接口(API接口)就是一个http的请求地址，主要就是去定义：请求路径、请求方式、请求参数、响应数据等内容。(具体接口文档描述的信息, 如上图)</p>
<p>2). 前后端并行开发: 依据定义好的接口信息，前端人员开发前端的代码，服务端人员开发服务端的接口； 在开发中前后端都需要进行测试，后端需要通过对应的工具来进行接口的测试，前端需要根据接口定义的参数进行Mock数据模拟测试。</p>
<p>3). 联调: 当前后端都开发完毕并且自测通过之后，就可以进行前后端的联调测试了，在这一阶段主要就是校验接口的参数格式。</p>
<p>4). 提测: 前后端联调测试通过之后，就可以将项目部署到测试服务器，进行自动化测试了。</p>
<h3 id="1-3-前端技术栈"><a href="#1-3-前端技术栈" class="headerlink" title="1.3 前端技术栈"></a>1.3 前端技术栈</h3><p><strong>1). 开发工具</strong></p>
<p>Visual Studio Code (简称VsCode)</p>
<p>Hbuilder</p>
<p><strong>2). 技术框架</strong></p>
<p>A. Node.js:  Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。(类似于java语言中的JDK)。</p>
<p>B. Vue : 目前最火的的一个前端javaScript框架。</p>
<p>C. ElementUI: 一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库，通过ElementUI组件可以快速构建项目页面。</p>
<p>D. Mock: 生成随机数据，拦截 Ajax 请求，前端可以借助于Mock生成测试数据进行功能测试。</p>
<p>E. Webpack: webpack 是一个现代 JavaScript 应用程序的模块打包器(module bundler)，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Sass，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。</p>
<h2 id="2-Yapi"><a href="#2-Yapi" class="headerlink" title="2. Yapi"></a>2. Yapi</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><p>YApi 是高效、易用、功能强大的 api 管理平台，旨在为开发、产品、测试人员提供更优雅的接口管理服务。可以帮助开发者轻松创建、发布、维护 API，YApi 还为用户提供了优秀的交互体验，开发人员只需利用平台提供的接口数据写入工具以及简单的点击操作就可以实现接口的管理。</p>
<p>YApi让接口开发更简单高效，让接口的管理更具可读性、可维护性，让团队协作更合理。</p>
<p>源码地址: <a href="https://github.com/YMFE/yapi">https://github.com/YMFE/yapi</a></p>
<p>官方文档: <a href="https://hellosean1025.github.io/yapi/">https://hellosean1025.github.io/yapi/</a></p>
<h3 id="2-2-使用"><a href="#2-2-使用" class="headerlink" title="2.2 使用"></a>2.2 使用</h3><ol>
<li>创建项目</li>
<li>添加分类</li>
<li>添加接口</li>
<li>运行接口</li>
</ol>
<p>还可以进行接口文档的导入导出</p>
<h2 id="3-Swagger"><a href="#3-Swagger" class="headerlink" title="3. Swagger"></a>3. Swagger</h2><h3 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h3><p>官网：<a href="https://swagger.io/">https://swagger.io/</a></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812091748924.png" alt="image-20220812091748924"></p>
<p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。功能主要包含以下几点:</p>
<ol>
<li><p>使得前后端分离开发更加方便，有利于团队协作</p>
</li>
<li><p>接口文档在线自动生成，降低后端开发人员编写接口文档的负担</p>
</li>
<li><p>接口功能测试</p>
</li>
</ol>
<p>使用Swagger只需要按照它的规范去定义接口及接口相关的信息，再通过Swagger衍生出来的一系列项目和工具，就可以做到生成各种格式的接口文档，以及在线接口调试页面等等。</p>
<p>直接使用Swagger, 需要按照Swagger的规范定义接口, 实际上就是编写Json文件，编写起来比较繁琐、并不方便,。</p>
<p>而在项目中使用，<strong>一般会选择一些现成的框架来简化文档的编写，而这些框架是基于Swagger的，如knife4j。</strong></p>
<p><strong>knife4j是为Java MVC框架集成Swagger生成Api文档的增强解决方案。</strong></p>
<h3 id="3-2-使用方式"><a href="#3-2-使用方式" class="headerlink" title="3.2 使用方式"></a>3.2 使用方式</h3><p><strong>1、导入knife4j的maven坐标</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>2、 导入knife4j相关配置类</strong></p>
<ol>
<li>在该配置类中加上两个注解 @EnableSwagger2 @EnableKnife4j ,开启Swagger和Knife4j的功能。</li>
</ol>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812094755191.png" alt="image-20220812094755191"></p>
<ol start="2">
<li>在配置类中声明一个Docket类型的bean, 通过该bean来指定生成文档的信息。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//文档类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            .select()</span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.itheima.reggie.controller&quot;</span>))</span><br><span class="line">            .paths(PathSelectors.any())</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">            .title(<span class="string">&quot;瑞吉外卖&quot;</span>)</span><br><span class="line">            .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">            .description(<span class="string">&quot;瑞吉外卖接口文档&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812094849337.png" alt="image-20220812094849337"></p>
<blockquote>
<p>注意： Docket声明时，指定的有一个包扫描的路径，该路径指定的是Controller所在包的路径。因为Swagger在生成接口文档时，就是根据这里指定的包路径，自动的扫描该包下的@Controller， @RestController， @RequestMapping等SpringMVC的注解，依据这些注解来生成对应的接口文档。</p>
</blockquote>
<p><strong>3)、设置静态资源映射</strong></p>
<p>由于Swagger生成的在线文档中，涉及到很多静态资源，这些静态资源需要添加静态资源映射，否则接口文档页面无法访问。因此需要在 WebMvcConfig类中的addResourceHandlers方法中增加如下配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">registry.addResourceHandler(<span class="string">&quot;doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812094958417.png" alt="image-20220812094958417"></p>
<p><strong>4、 在LoginCheckFilter中设置不需要处理的请求路径</strong></p>
<p>需要将Swagger及Knife4j相关的静态资源直接放行，无需登录即可访问，否则我们就需要登录之后，才可以访问接口文档的页面。</p>
<p>在原有的不需要处理的请求路径中，再增加如下链接： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;/doc.html&quot;</span>,</span><br><span class="line"><span class="string">&quot;/webjars/**&quot;</span>,</span><br><span class="line"><span class="string">&quot;/swagger-resources&quot;</span>,</span><br><span class="line"><span class="string">&quot;/v2/api-docs&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812095044324.png" alt="image-20220812095044324"></p>
<h3 id="3-3-查看接口文档"><a href="#3-3-查看接口文档" class="headerlink" title="3.3 查看接口文档"></a>3.3 查看接口文档</h3><p>经过上面的集成配置之后，我们的项目集成Swagger及Knife4j就已经完成了，接下来我们可以重新启动项目，访问接口文档，访问链接为： <a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812095131345.png" alt="image-20220812095131345"></p>
<h3 id="3-4-常用注解"><a href="#3-4-常用注解" class="headerlink" title="3.4 常用注解"></a>3.4 常用注解</h3><h4 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h4><p>在上面我们直接访问Knife4j的接口文档页面，可以查看到所有的接口文档信息，但是我们发现，这些接口文档分类及接口描述都是Controller的类名(驼峰命名转换而来)及方法名，而且在接口文档中，所有的请求参数，响应数据，都没有中文的描述，并不知道里面参数的含义，接口文档的可读性很差。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812095226328.png" alt="image-20220812095226328"></p>
<h4 id="注解介绍"><a href="#注解介绍" class="headerlink" title="注解介绍"></a>注解介绍</h4><p>为了解决上述的问题，Swagger提供了很多的注解，通过这些注解，我们可以更好更清晰的描述我们的接口，包含接口的请求参数、响应数据、数据模型等。核心的注解，主要包含以下几个： </p>
<table>
<thead>
<tr>
<th>注解</th>
<th>位置</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Api</td>
<td>类</td>
<td>加载Controller类上,表示对类的说明</td>
</tr>
<tr>
<td>@ApiModel</td>
<td>类(通常是实体类)</td>
<td>描述实体类的作用</td>
</tr>
<tr>
<td>@ApiModelProperty</td>
<td>属性</td>
<td>描述实体类的属性</td>
</tr>
<tr>
<td>@ApiOperation</td>
<td>方法</td>
<td>说明方法的用途、作用</td>
</tr>
<tr>
<td>@ApiImplicitParams</td>
<td>方法</td>
<td>表示一组参数说明</td>
</tr>
<tr>
<td>@ApiImplicitParam</td>
<td>方法</td>
<td>用在@ApiImplicitParams注解中，指定一个请求参数的各个方面的属性</td>
</tr>
</tbody></table>
<h2 id="4-项目部署"><a href="#4-项目部署" class="headerlink" title="4. 项目部署"></a>4. 项目部署</h2><h3 id="4-1-部署架构"><a href="#4-1-部署架构" class="headerlink" title="4.1 部署架构"></a>4.1 部署架构</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812101422138.png" alt="image-20220812101422138"></p>
<p>PC端： 主要是为餐厅的员工及管理员使用的后台管理系统，对分类、菜品、套餐信息进行维护。</p>
<p>移动端： 可以基于微信公众号或小程序实现，我们课上并未实现，这部分的工作是前端开发人员需要开发的。</p>
<p>前端部署服务器： Nginx</p>
<p>后端部署服务器： Tomcat(内嵌)</p>
<h3 id="4-2-环境说明"><a href="#4-2-环境说明" class="headerlink" title="4.2 环境说明"></a>4.2 环境说明</h3><p>由于我们的服务器数量有限，就使用这三台服务器，具体的软件规划如下: </p>
<table>
<thead>
<tr>
<th>服务器</th>
<th>软件</th>
<th>名称</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.2.200</td>
<td>Nginx(部署前端项目、配置反向代理)，MySQL(主从复制的主库)</td>
<td>服务器A</td>
</tr>
<tr>
<td>192.168.2.201</td>
<td>JDK1.8、Git、Maven、jar(项目jar包基于内嵌Tomcat运行)、MySQL(主从复制的从库)</td>
<td>服务器B</td>
</tr>
<tr>
<td>localhost</td>
<td>Redis(缓存中间件)</td>
<td>服务器C</td>
</tr>
</tbody></table>
<p>&#x3D;&#x3D;这里选择自己的那两个虚拟机，有云服务器的用云服务器也可以&#x3D;&#x3D;</p>
<h3 id="4-3-前端部署"><a href="#4-3-前端部署" class="headerlink" title="4.3 前端部署"></a>4.3 前端部署</h3><p><strong>1、在服务器A(192.168.138.100)中安装Nginx，将课程资料中的dist目录上传到Nginx的html目录下</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812101555205.png" alt="image-20220812101555205"></p>
<p><strong>2、修改Nginx配置文件nginx.conf</strong></p>
<p>将nginx.conf配置文件中，将原有的监听80, 82, 8080端口号 的虚拟主机注释掉，引入如下的配置信息：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line">  <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">listen</span>       <span class="string">80;</span></span><br><span class="line">      <span class="attr">server_name</span>  <span class="string">localhost;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">          <span class="attr">root</span>   <span class="string">html/dist;</span></span><br><span class="line">          <span class="attr">index</span>  <span class="string">index.html;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">location</span> <span class="string">^~ /api/ &#123;</span></span><br><span class="line">	<span class="attr">rewrite</span> <span class="string">^/api/(.*)$ /$1 break;</span></span><br><span class="line">	<span class="attr">proxy_pass</span> <span class="string">http://192.168.2.200:8080;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">location</span> = <span class="string">/50x.html &#123;</span></span><br><span class="line">          <span class="attr">root</span>   <span class="string">html;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这里写自己虚拟机的ip地址</p>
<p><strong>3、通过nginx访问前端工程</strong></p>
<p><a href="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812103111665.png">192.168.2.200</a></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812103111665.png" alt="image-20220812103111665"></p>
<h3 id="4-4-反向代理配置"><a href="#4-4-反向代理配置" class="headerlink" title="4.4 反向代理配置"></a>4.4 反向代理配置</h3><p>前端工程部署完成之后，我们可以正常的访问到系统的登录页面，点击登录按钮，可以看到服务端发起的请求，请求信息如下： </p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812104222038.png" alt="image-20220812104222038"></p>
<p>在我们之前开发的工程中，是没有&#x2F;api这个前缀的,那这个时候,在不修改服务端代码的情况下，如何处理该请求呢? </p>
<p>实际上，通过nginx的就可以轻松解决这个问题。</p>
<p>在上述我们配置的nginx.conf中，除了配置了静态资源的加载目录以外，我们还配置了一段反向代理的配置，配置信息如下： </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">location</span> <span class="string">^~ /api/ &#123;</span></span><br><span class="line">    <span class="attr">rewrite</span> <span class="string">^/api/(.*)$ /$1 break;</span></span><br><span class="line">    <span class="attr">proxy_pass</span> <span class="string">http://192.168.2.201:8080;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这一段配置代表，如果请求当前nginx，并且请求的路径如果是 &#x2F;api&#x2F; 开头，将会被该location处理。</p>
<p>而在该location中，主要配置了两块儿信息： rewrite(url重写) 和 proxy_pass(反向代理)。 </p>
<p><strong>配置解析：</strong></p>
<p><strong>1). 路径重写rewrite</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rewrite ^/api/(.*)$ /$1 break;</span><br></pre></td></tr></table></figure>

<p>这里写的是一个正则表达式，代表如果请求路径是以 <code>/api/</code> 开头，后面的请求路径任意，此时将原始的url路径重写为 <code>/$1</code>，这里的<code>$1</code>指代的就是通配符 .* 这一块的内容。</p>
<p>比如： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/api/employee/login ------&gt; ^/api/(.*)$ --------&gt; 此时 (.*) 匹配的就是 employee/login ------&gt; 最终重写为/$1 : /employee/login</span><br></pre></td></tr></table></figure>



<p><strong>2). 反向代理</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_pass http://192.168.2.201:8080;</span><br></pre></td></tr></table></figure>

<p>路径重写后的请求，将会转发到后端的 <a href="http://192.168.2.201:8080/">http://192.168.2.201:8080</a> 服务器中。 而这台服务器中，就部署的是我们的后端服务。</p>
<h3 id="4-5-服务端部署"><a href="#4-5-服务端部署" class="headerlink" title="4.5 服务端部署"></a>4.5 服务端部署</h3><p><strong>1、 在服务器B(192.168.138.101)中安装jdk、git、maven、MySQL</strong></p>
<p>之前都弄过了，略</p>
<p><strong>2、使用git clone命令将git远程仓库的代码克隆下来</strong></p>
<p> 将我们开发完成的代码推送至远程仓库,并在服务器B中克隆下来</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建java代码存放目录</span></span><br><span class="line">mkdir -p /usr/local/javaapp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换目录</span></span><br><span class="line">cd /usr/local/javaapp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">克隆代码 , 需要使用自己的远程仓库</span></span><br><span class="line">git clone 自己的远程仓库 </span><br></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812105127644.png" alt="image-20220812105127644"></p>
<p><strong>3、将资料中提供的reggieStart.sh文件上传到服务器B，通过chmod命令设置执行权限</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812110653621.png" alt="image-20220812110653621"></p>
<p><strong>4、执行reggieStart.sh脚本文件，自动部署项目</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812110906765.png" alt="image-20220812110906765"></p>
<p>等待打包完成</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812111002236.png" alt="image-20220812111002236"></p>
<p>登陆成功</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812111042376.png" alt="image-20220812111042376"></p>
<h3 id="4-6-图片展示问题处理"><a href="#4-6-图片展示问题处理" class="headerlink" title="4.6 图片展示问题处理"></a>4.6 图片展示问题处理</h3><p>在上述的测试中，我们发现菜品的图片无法正常展示。原因是因为，在我们的配置文件中，图片信息依然是从 D:&#x2F;img 中加载的，但是在Linux服务器中，是不存在D盘的。</p>
<h4 id="1、修改图片存储目录"><a href="#1、修改图片存储目录" class="headerlink" title="1、修改图片存储目录"></a>1、修改图片存储目录</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812111122498.png" alt="image-20220812111122498"></p>
<p>修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reggie:</span><br><span class="line">  path: /usr/local/img/</span><br></pre></td></tr></table></figure>

<p> 修改完成之后，需要将变动的代码提交到本地仓库，并推送至远程仓库。</p>
<h4 id="2-将本地的图片文件夹上传到服务器"><a href="#2-将本地的图片文件夹上传到服务器" class="headerlink" title="2.将本地的图片文件夹上传到服务器"></a>2.将本地的图片文件夹上传到服务器</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812111753101.png" alt="image-20220812111753101"></p>
<h4 id="3-重新执行shell脚本-进行自动化部署"><a href="#3-重新执行shell脚本-进行自动化部署" class="headerlink" title="3.重新执行shell脚本,进行自动化部署"></a>3.重新执行shell脚本,进行自动化部署</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812111443235.png" alt="image-20220812111443235"></p>
<h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h4><p>成功获取到图片</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220812111829927.png" alt="image-20220812111829927"></p>
<p>🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉</p>
<p>🎉🎉			<strong>完结撒花</strong>               🎉🎉</p>
<p>🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉</p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>用户中心项目前端笔记</title>
    <url>/posts/3629397350.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script>]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>用户中心项目终笔记</title>
    <url>/posts/2433973251.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script>]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>用户中心项目末笔记</title>
    <url>/posts/2341347342.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script>]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>移除元素</title>
    <url>/posts/3330752109.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="Leecode27-移除元素"><a href="#Leecode27-移除元素" class="headerlink" title="Leecode27. 移除元素"></a>Leecode27. 移除元素</h2><p>给你一个数组 nums 和一个值 val，你需要 <strong>原地</strong> 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 <strong>原地</strong> 修改输入数组。</p>
<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>
<p>示例 1：</p>
<blockquote>
<p>输入：nums &#x3D; [3,2,2,3], val &#x3D; 3<br>输出：2, nums &#x3D; [2,2]</p>
<p>解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为2 ，而 nums &#x3D; [2,2,3,3] 或 nums &#x3D; [2,2,0,0]，也会被视作正确答案。</p>
</blockquote>
<p> 示例 2：</p>
<blockquote>
<p>输入：nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2<br>输出：5, nums &#x3D; [0,1,4,0,3]<br>解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p>
</blockquote>
<p>提示：</p>
<ul>
<li>0 &lt;&#x3D; nums.length &lt;&#x3D; 100 </li>
<li>0 &lt;&#x3D; nums[i] &lt;&#x3D; 50 </li>
<li>0 &lt;&#x3D; val &lt;&#x3D; 100</li>
</ul>
<h2 id="习题解析："><a href="#习题解析：" class="headerlink" title="习题解析："></a>习题解析：</h2><p>因为数组元素在内存中是连续存储的，所以不能单独删除其中某个元素，只能选择覆盖方式，双重循环暴力解法可以解决此问题，但时间复杂度较高，为O(N^2)，所以可以采用双指针中的快慢指针来节省时间，快指针指向当前第一个不为目标元素的值（即如果执行覆盖操作第一个用于覆盖的值），慢指针指向需要第一个需要被覆盖的元素，然后快指针的值覆盖慢指针的值，然后一直向后遍历至快指针到达数组尾部，此时慢指针所指向的位置即为所有有效元素的长度。</p>
<h2 id="习题代码："><a href="#习题代码：" class="headerlink" title="习题代码："></a>习题代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>,fast = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fast &lt; nums.length)&#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[fast] != val)&#123;</span><br><span class="line">          nums[slow] = nums[fast];</span><br><span class="line">          slow++;</span><br><span class="line">      &#125;</span><br><span class="line">      fast++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>时间复杂度:O(N)</strong></li>
<li><strong>空间复杂度:O(1)</strong></li>
</ul>
<h2 id="习题链接"><a href="#习题链接" class="headerlink" title="习题链接"></a>习题链接</h2><p><a href="https://leetcode-cn.com/problems/remove-element/">点我跳转习题</a></p>
]]></content>
      <categories>
        <category>Leecode刷题计划</category>
      </categories>
  </entry>
  <entry>
    <title>经纬恒润面试复盘</title>
    <url>/posts/2069141009.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="什么是多态"><a href="#什么是多态" class="headerlink" title="什么是多态"></a>什么是多态</h3><ul>
<li>多态是面向对象的一个重要的特征，是指父类中定义的属性和方法被子类继承后可以具有不同的数据类型或者表现出不同的行为。</li>
<li>对面向对象来说，多态分为编译时多态和运行时多态。</li>
<li>编译时多态是静态的，主要是指方法的重载，它是根据<strong>参数列表的不同来区分不同的方法</strong>。通过编译之后会变成两个不同的方法。</li>
<li>运行时多态是动态的，它是通过<strong>动态绑定</strong>来实现的，也就是大家通常所说的重写，它是<strong>子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。</strong></li>
<li><strong>多态的作用</strong>就是把不同的子类对象都当作父类来看，可以屏蔽不同子类对象之间的差异，写出通用的代码。</li>
</ul>
<hr>
<h3 id="DHCP-ARP"><a href="#DHCP-ARP" class="headerlink" title="DHCP  ARP"></a>DHCP  ARP</h3><p>DHCP（<a href="https://baike.baidu.com/item/%E5%8A%A8%E6%80%81%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%8D%8F%E8%AE%AE/10778663">动态主机配置协议</a>）是一个局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。</p>
<p>地址解析协议，即ARP（Address Resolution Protocol），是根据<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP地址</a>获取<a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80/2129">物理地址</a>的一个<a href="https://baike.baidu.com/item/TCP%2FIP%E5%8D%8F%E8%AE%AE">TCP&#x2F;IP协议</a>。</p>
<hr>
<h3 id="application-properties和application-yml文件的区别"><a href="#application-properties和application-yml文件的区别" class="headerlink" title="application.properties和application.yml文件的区别"></a>application.properties和application.yml文件的区别</h3><ol>
<li><p><strong>内容格式比较：</strong></p>
</li>
<li><ol>
<li>.properties文件，通过.来连接，通过&#x3D;来赋值，结构上，没有分层的感觉，但比较直接。</li>
<li>.yml文件，通过：来分层，结构上，有比较明显的层次感，最后key赋值的：后需要留一个空格</li>
</ol>
</li>
<li><p><strong>执行顺序</strong></p>
</li>
<li><ol>
<li>如果工程中同时存在application.properties文件和 application.yml文件，yml文件会先加载，而<strong>后加载的properties文件会覆盖yml文件。</strong></li>
</ol>
</li>
</ol>
<hr>
<h3 id="application-properties与bootstrap-properties的区别"><a href="#application-properties与bootstrap-properties的区别" class="headerlink" title="application.properties与bootstrap.properties的区别"></a>application.properties与bootstrap.properties的区别</h3><p>两者主要区别是加载顺序不同，bootstrap.properties在application.properties 之前加载，bootstrap.properties用于应用程序上下文的<strong>引导阶段</strong></p>
<hr>
<h3 id="和-的区别"><a href="#和-的区别" class="headerlink" title="#{}和${}的区别"></a>#{}和${}的区别</h3><ul>
<li>${}是properties文件中的变量占位符，他可以作用于标签属性内部和sql内部，<strong>属于静态文本替换。</strong></li>
<li>#{}是sql参数占位符，Mybatis会把SQL中的#{}替换为?号，在sql执行前会使用PreparedStatement的参数设置方法按序给sql的？号占位符设置参数值。</li>
</ul>
<hr>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><hr>
<h3 id="sleep-和-wait-有什么区别"><a href="#sleep-和-wait-有什么区别" class="headerlink" title="sleep() 和 wait() 有什么区别?"></a>sleep() 和 wait() 有什么区别?</h3><ol>
<li>sleep是<strong>线程类（Thread）</strong>的方法，导致此线程暂停执行指定时间，给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。<strong>调用sleep不会释放对象锁</strong>。</li>
<li>wait是<strong>Object类</strong>的方法，对此对象调用wait方法导致<strong>本线程释放对象锁</strong>，只有针对此对象发出notify方法（或notifyAll）后本线程才会苏醒进入运行状态。</li>
</ol>
<hr>
<h3 id="缓存穿透、缓存击穿、缓存雪崩"><a href="#缓存穿透、缓存击穿、缓存雪崩" class="headerlink" title="缓存穿透、缓存击穿、缓存雪崩"></a>缓存穿透、缓存击穿、缓存雪崩</h3><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>描述：访问一个缓存和数据库都不存在的 key，此时会直接打到数据库上，并且查不到数据，没法写缓存，所以下一次同样会打到数据库上。</p>
<p>此时，缓存起不到作用，请求每次都会走到数据库，流量大时数据库可能会被打挂。此时缓存就好像被“穿透”了一样，起不到任何作用。</p>
<p><strong>解决方案：</strong></p>
<p>1、<strong>接口校验。</strong>在正常业务流程中可能会存在少量访问不存在 key 的情况，但是一般不会出现大量的情况，所以这种场景最大的可能性是遭受了非法攻击。可以在最外层先做一层校验：用户鉴权、数据合法性校验等，例如商品查询中，商品的ID是正整数，则可以直接对非正整数直接过滤等等。</p>
<p>2、<strong>缓存空值</strong>。当访问缓存和DB都没有查询到值时，可以将空值写进缓存，但是设置较短的过期时间，该时间需要根据产品业务特性来设置。</p>
<p>3、<strong>布隆过滤器</strong>。使用布隆过滤器存储所有可能访问的 key，不存在的 key 直接被过滤，存在的 key 则再进一步查询缓存和数据库。</p>
<hr>
<h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>描述：某一个热点 key，在缓存过期的一瞬间，同时有大量的请求打进来，由于此时缓存过期了，所以请求最终都会走到数据库，造成瞬时数据库请求量大、压力骤增，甚至可能打垮数据库。</p>
<p><strong>解决方案：</strong></p>
<p>1、<strong>加互斥锁</strong>。在并发的多个请求中，只有第一个请求线程能拿到锁并执行数据库查询操作，其他的线程拿不到锁就阻塞等着，等到第一个线程将数据写入缓存后，直接走缓存。</p>
<p>2、<strong>热点数据不过期</strong>。直接将缓存设置为不过期，然后由定时任务去异步加载数据，更新缓存。</p>
<hr>
<h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>描述：大量的热点 key 设置了相同的过期时间，导在缓存在同一时刻全部失效，造成瞬时数据库请求量大、压力骤增，引起雪崩，甚至导致数据库被打挂。</p>
<p>缓存雪崩其实有点像“升级版的缓存击穿”，缓存击穿是一个热点 key，缓存雪崩是一组热点 key。</p>
<p><strong>解决方案：</strong></p>
<p>1、<strong>过期时间打散</strong>。既然是大量缓存集中失效，那最容易想到就是让他们不集中生效。可以给缓存的过期时间时加上一个随机值时间，使得每个 key 的过期时间分布开来，不会集中在同一时刻失效。</p>
<p>2、<strong>热点数据不过期</strong>。该方式和缓存击穿一样，也是要着重考虑刷新的时间间隔和数据异常如何处理的情况。</p>
<p>3、<strong>加互斥锁</strong>。该方式和缓存击穿一样，按 key 维度加锁，对于同一个 key，只允许一个线程去计算，其他线程原地阻塞等待第一个线程的计算结果，然后直接走缓存即可。</p>
<hr>
<h3 id="HTTP-与-HTTPS-区别"><a href="#HTTP-与-HTTPS-区别" class="headerlink" title="HTTP 与 HTTPS 区别"></a>HTTP 与 HTTPS 区别</h3><ul>
<li>HTTP 明文传输，数据都是未加密的，安全性较差，HTTPS（SSL+HTTP） 数据传输过程是加密的，安全性较好。</li>
<li>使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。</li>
<li>HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。</li>
<li>http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。</li>
<li>HTTPS 其实就是建构在 SSL&#x2F;TLS 之上的 HTTP 协议，所以，要比较 HTTPS 比 HTTP 要更耗费服务器资源。</li>
</ul>
<hr>
<h3 id="什么是反射，优缺点？"><a href="#什么是反射，优缺点？" class="headerlink" title="什么是反射，优缺点？"></a>什么是反射，优缺点？</h3><p>在运行状态中，对于任意一个类都能知道它的所有属性和方法，对于任意一个对象都能调用它的任意方法和属性，这种动态获取信息及调用对象方法的功能称为反射。</p>
<ul>
<li><p><strong>优点：</strong>反射提高了程序的灵活性和扩展性，降低耦合性，提高自适应能力。 它允许程序创建和控制任何类的对象，无需提前硬编码目标类； </p>
</li>
<li><p><strong>缺点：</strong></p>
</li>
<li><ul>
<li>性能问题：使用反射基本上是一种解释操作，用于字段和方法接入时要远慢于直接代码。</li>
<li>缺点是破坏了封装性以及泛型约束。</li>
</ul>
</li>
</ul>
<p>反射是框架的核心，Spring 大量使用反射。</p>
<hr>
<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>线程池的创建有两种方式，《阿里巴巴Java开发手册》中强制线程池不允许使用Executor去创建，而是通过ThreadPoolExecutor的方式创建。</p>
<ul>
<li><strong>方式一：</strong>通过ThreadPoolExecutor构造方法来实现</li>
<li><strong>方式二：</strong>通过Executor框架的工具类Executors来实现，可以通过该工具类创建三种类型的ThreadPoolExecutor：</li>
</ul>
<ol>
<li><ol>
<li><strong>FixedThreadPool：</strong></li>
</ol>
</li>
<li><ol>
<li><ol>
<li>该方法返回<strong>一个固定线程数量</strong>的线程池。</li>
<li>该线程池中的线程数量始终不变。</li>
<li>当有一个新任务提交时，线程池中如果有线程空闲，则，立即执行。</li>
<li>如果没有，就把新的任务暂存在一个任务队列中，待有线程空闲时，再来处理队列中的任务。</li>
</ol>
</li>
</ol>
</li>
<li><ol>
<li><strong>SingleThreadExecutor：</strong></li>
</ol>
</li>
<li><ol>
<li><ol>
<li>该方法返回<strong>只有一个线程</strong>的线程池。</li>
<li>当有一个新任务提交时，任务会被保存在任务队列中，等到线程空闲，再来处理队列中的任务</li>
</ol>
</li>
</ol>
</li>
<li><ol>
<li><strong>CachedThreadPool：</strong></li>
</ol>
</li>
<li><ol>
<li><ol>
<li>该方法可以返回一个<strong>可根据实际情况调整线程数量</strong>的线程池。</li>
<li>线程池中的线程数量不确定，但是如果有空闲线程可以复用，会优先复用可复用的线程。</li>
<li>如果所有线程都在运行，又有新的任务提交，则会创建新的线程处理任务。</li>
<li>所有线程在当前任务执行完毕后，都会返回线程池进行复用。</li>
</ol>
</li>
</ol>
</li>
</ol>
<hr>
<h3 id="Jdk1-7与Jdk1-8中HashMap区别"><a href="#Jdk1-7与Jdk1-8中HashMap区别" class="headerlink" title="Jdk1.7与Jdk1.8中HashMap区别"></a>Jdk1.7与Jdk1.8中HashMap区别</h3><ol>
<li>最重要的一点是底层结构不一样，1.7是数组+链表，1.8则是数组+链表+红黑树结构;</li>
<li>jdk1.7中当哈希表为空时，会先调用inflateTable()初始化一个数组；而1.8则是直接调用resize()扩容;</li>
<li>插入键值对的put方法的区别，1.8中会将节点插入到链表尾部，而1.7中是采用头插；</li>
<li>jdk1.7中的hash函数对哈希值的计算直接使用key的hashCode值，而1.8中则是采用key的hashCode异或上key的hashCode进行无符号右移16位的结果，避免了只靠低位数据来计算哈希时导致的冲突，计算结果由高低位结合决定，使元素分布更均匀；</li>
<li>扩容时1.8会保持原链表的顺序，而1.7会颠倒链表的顺序；而且1.8是在元素插入后检测是否需要扩容，1.7则是在元素插入前；</li>
<li>jdk1.8是扩容时通过hash&amp;cap&#x3D;&#x3D;0将链表分散，无需改变hash值，而1.7是通过更新hashSeed来修改hash值达到分散的目的；</li>
<li>扩容策略：1.7中是只要不小于阈值就直接扩容2倍；而1.8的扩容策略会更优化，当数组容量未达到64时，以2倍进行扩容，超过64之后若桶中元素个数不小于7就将链表转换为红黑树，但如果红黑树中的元素个数小于6就会还原为链表，当红黑树中元素不小于32的时候才会再次扩容。</li>
</ol>
<hr>
<h3 id="可重入锁说一下"><a href="#可重入锁说一下" class="headerlink" title="可重入锁说一下"></a>可重入锁说一下</h3><p>可重入锁又叫做递归锁，可重入 就是说某个线程已经获得某个锁，可以再次获取锁而不会出现死锁。而锁的操作粒度是”线程”，而不是调用，同一个线程再次进入同步代码的时候，可以使用自己已经获取到的锁,这就是可重入锁。</p>
<hr>
<h3 id="说一下Executor框架"><a href="#说一下Executor框架" class="headerlink" title="说一下Executor框架"></a>说一下Executor框架</h3><ul>
<li>Executor框架是在Java5中引入的，可以通过该框架来控制线程的启动，执行，关闭，简化并发编程。</li>
<li>Executor框架把任务提交和执行解耦，要执行任务的人只需要把任务描述清楚提交即可，任务的执行提交人不需要去关心。</li>
<li>通过Executor框架来启动线程比使用Thread更好，更易管理，效率高，避免this逃逸问题。</li>
<li>Executor的实现还提供了对生命周期的支持，以及统计信息收集，应用程序管理机制和性能监视等机制。</li>
</ul>
<hr>
<h3 id="什么是粘包，怎么解决？"><a href="#什么是粘包，怎么解决？" class="headerlink" title="什么是粘包，怎么解决？"></a>什么是粘包，怎么解决？</h3><p>粘包就是指发送方发送的若干包数据到达接收方时粘成了一包，从接收缓冲区来看，后一包数据的头紧接着前一包数据的尾，出现粘包的原因是多方面的，可能是来自发送方，也可能是来自接收方。</p>
<p><strong>解决：</strong></p>
<ul>
<li><p><strong>发送方：</strong>对于发送方造成的粘包问题，可以通过关闭Nagle算法来解决，使用TCP_NODELAY选项来关闭算法。</p>
</li>
<li><p><strong>接收方：</strong>接收方没有办法来处理粘包现象，只能将问题交给应用层来处理。</p>
</li>
<li><p><strong>应用层：</strong></p>
</li>
<li><ul>
<li>循环处理，应用程序从接收缓存中读取分组时，读完一条数据，就应该循环读取下一条数据，直到所有数据都被处理完成。</li>
<li>格式化数据：每条数据有固定的格式（开始符，结束符），这种方法简单易行，但是选择开始符和结束符时一定要确保每条数据的内部不包含开始符和结束符。</li>
<li>发送长度：发送每条数据时，将数据的长度一并发送，例如规定数据的前4位是数据的长度，应用层在处理时可以根据长度来判断每个分组的开始和结束位置</li>
</ul>
</li>
</ul>
<hr>
<h3 id="分页和分段"><a href="#分页和分段" class="headerlink" title="分页和分段"></a>分页和分段</h3><ol>
<li><strong>分页储存管理方式</strong>：<br>在该方式中，将用户程序地址空间分为若干固定大小的区域，称为“页”或“页面”。典型的页面大小为1KB。相应的，也将内存空间分为若干个物理块或页框（frame），<strong>页和块的大小相同。这样可将用户程序的任一页放入任一物理块中，实现了离散分配。</strong></li>
</ol>
<hr>
<ol>
<li><strong>分段储存管理方式</strong>：<br>这是为了满足用户要求而形成的一种储存管理方式。它把用户程序的地址空间分为若干个大小不同的段，每段<strong>可定义一组相对完整的信息</strong>。在储存器分配时，以段为单位，这些段在内存中可以不相邻接，所以也同样实现了离散分配。</li>
<li><strong>两者的比较</strong>：</li>
</ol>
<ul>
<li><strong>对程序员透明：</strong>分页透明，但是分段需要程序员显式划分每个段。</li>
<li><strong>地址空间的维度：</strong>分页是一维地址空间，分段是二维的</li>
<li><strong>大小是否可以改变：</strong>页的大小不可变，段的大小可以动态改变</li>
<li><strong>出现的原因：</strong>分页主要用于实现虚拟内存，从而获得更大的地址空间；分段主要是为了使程序和数据可以被划分为逻辑上独立的地址空间并且有助于共享和保护</li>
</ul>
<hr>
<h3 id="Mybatis-5"><a href="#Mybatis-5" class="headerlink" title="Mybatis 5"></a>Mybatis 5</h3><h4 id="Q1：Mybatis-的优缺点？"><a href="#Q1：Mybatis-的优缺点？" class="headerlink" title="Q1：Mybatis 的优缺点？"></a>Q1：Mybatis 的优缺点？</h4><p><strong>优点</strong></p>
<p>相比 JDBC 减少了大量代码量，减少冗余代码。</p>
<p>使用灵活，SQL 语句写在 XML 里，从程序代码中彻底分离，降低了耦合度，便于管理。</p>
<p>提供 XML 标签，支持编写动态 SQL 语句。</p>
<p>提供映射标签，支持对象与数据库的 ORM 字段映射关系。</p>
<p><strong>缺点</strong></p>
<p>SQL 语句编写工作量较大，尤其是字段和关联表多时。</p>
<p>SQL 语句依赖于数据库，导致数据库移植性差，不能随意更换数据库。</p>
<hr>
<h4 id="Q2：Mybatis-的-XML-文件有哪些标签属性？"><a href="#Q2：Mybatis-的-XML-文件有哪些标签属性？" class="headerlink" title="Q2：Mybatis 的 XML 文件有哪些标签属性？"></a>Q2：Mybatis 的 XML 文件有哪些标签属性？</h4><p>select、insert、update、delete 标签分别对应查询、添加、更新、删除操作。</p>
<p>parameterType 属性表示参数的数据类型，包括基本数据类型和对应的包装类型、String 和 Java Bean 类型，当有多个参数时可以使用 #{argn} 的形式表示第 n 个参数。除了基本数据类型都要以全限定类名的形式指定参数类型。</p>
<p>resultType 表示返回的结果类型，包括基本数据类型和对应的包装类型、String 和 Java Bean 类型。还可以使用把返回结果封装为复杂类型的 resultMap 。</p>
<hr>
<h4 id="Q3：Mybatis-的一级缓存是什么？"><a href="#Q3：Mybatis-的一级缓存是什么？" class="headerlink" title="Q3：Mybatis 的一级缓存是什么？"></a>Q3：Mybatis 的一级缓存是什么？</h4><p>一级缓存是 SqlSession 级别，默认开启且不能关闭。</p>
<p>操作数据库时需要创建 SqlSession 对象，对象中用一个 HashMap 存储缓存数据，不同 SqlSession 之间缓存数据区域互不影响。</p>
<p>一级缓存的作用域是 SqlSession 范围的，在同一个 SqlSession 中执行两次相同的 SQL 语句时，第一次执行完毕会将结果保存在缓存中，第二次查询直接从缓存中获取。</p>
<p>如果 SqlSession 执行了 DML 操作（insert、update、delete），Mybatis 必须将缓存清空保证数据有效性。 </p>
<hr>
<h4 id="Q4：Mybatis-的二级缓存是什么？"><a href="#Q4：Mybatis-的二级缓存是什么？" class="headerlink" title="Q4：Mybatis 的二级缓存是什么？"></a>Q4：Mybatis 的二级缓存是什么？</h4><p>二级缓存是Mapper 级别，默认关闭。</p>
<p>使用二级缓存时多个 SqlSession 使用同一个 Mapper 的 SQL 语句操作数据库，得到的数据会存在二级缓存区，同样使用 HashMap 进行数据存储，相比于一级缓存，二级缓存范围更大，多个 SqlSession 可以共用二级缓存，作用域是 Mapper 的同一个 namespace，不同 SqlSession 两次执行相同的 namespace 下的 SQL 语句，参数也相等，则第一次执行成功后会将数据保存在二级缓存中，第二次可直接从二级缓存中取出数据。</p>
<p>要使用二级缓存，需要在全局配置文件中配置 <setting name="cacheEnabled" value="true"/> ，再在对应的映射文件中配置一个 <cache/> 标签。</p>
<hr>
<h4 id="Q5：Mybatis-和-的区别？"><a href="#Q5：Mybatis-和-的区别？" class="headerlink" title="Q5：Mybatis #{} 和 ${} 的区别？"></a>Q5：Mybatis #{} 和 ${} 的区别？</h4><p>使用 ${} 相当于使用字符串拼接，存在 SQL 注入的风险。</p>
<p>使用 #{} 相当于使用占位符，可以防止 SQL 注入，不支持使用占位符的地方就只能使用 ${} ，典型情况就是动态参数。</p>
<hr>
<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="线程池七大参数"><a href="#线程池七大参数" class="headerlink" title="线程池七大参数"></a>线程池七大参数</h3><p>一、corePoolSize 线程池核心线程大小</p>
<p>线程池中会维护一个最小的线程数量，即使这些线程处理空闲状态，他们也不会被销毁，除非设置了allowCoreThreadTimeOut。这里的最小线程数量即是corePoolSize。任务提交到线程池后，首先会检查当前线程数是否达到了corePoolSize，如果没有达到的话，则会创建一个新线程来处理这个任务。</p>
<p>二、maximumPoolSize 线程池最大线程数量</p>
<p>当前线程数达到corePoolSize后，如果继续有任务被提交到线程池，会将任务缓存到工作队列（后面会介绍）中。如果队列也已满，则会去创建一个新线程来出来这个处理。线程池不会无限制的去创建新线程，它会有一个最大线程数量的限制，这个数量即由maximunPoolSize指定。</p>
<p>三、keepAliveTime 空闲线程存活时间</p>
<p>一个线程如果处于空闲状态，并且当前的线程数量大于corePoolSize，那么在指定时间后，这个空闲线程会被销毁，这里的指定时间由keepAliveTime来设定</p>
<p>四、unit 空闲线程存活时间单位</p>
<p>keepAliveTime的计量单位</p>
<p>五、workQueue 工作队列</p>
<p>新任务被提交后，会先进入到此工作队列中，任务调度时再从队列中取出任务。jdk中提供了四种工作队列：</p>
<p>①ArrayBlockingQueue</p>
<p>基于数组的有界阻塞队列，按FIFO排序。新任务进来后，会放到该队列的队尾，有界的数组可以防止资源耗尽问题。当线程池中线程数量达到corePoolSize后，再有新任务进来，则会将任务放入该队列的队尾，等待被调度。如果队列已经是满的，则创建一个新线程，如果线程数量已经达到maxPoolSize，则会执行拒绝策略。</p>
<p>②LinkedBlockingQuene</p>
<p>基于链表的无界阻塞队列（其实最大容量为Interger.MAX），按照FIFO排序。由于该队列的近似无界性，当线程池中线程数量达到corePoolSize后，再有新任务进来，会一直存入该队列，而基本不会去创建新线程直到maxPoolSize（很难达到Interger.MAX这个数），因此使用该工作队列时，参数maxPoolSize其实是不起作用的。</p>
<p>③SynchronousQuene</p>
<p>一个不缓存任务的阻塞队列，生产者放入一个任务必须等到消费者取出这个任务。也就是说新任务进来时，不会缓存，而是直接被调度执行该任务，如果没有可用线程，则创建新线程，如果线程数量达到maxPoolSize，则执行拒绝策略。</p>
<p>④PriorityBlockingQueue</p>
<p>具有优先级的无界阻塞队列，优先级通过参数Comparator实现。</p>
<p>六、threadFactory 线程工厂</p>
<p>创建一个新线程时使用的工厂，可以用来设定线程名、是否为daemon线程等等</p>
<p>七、handler 拒绝策略</p>
<p>当工作队列中的任务已到达最大限制，并且线程池中的线程数量也达到最大限制，这时如果有新任务提交进来，该如何处理呢。这里的拒绝策略，就是解决这个问题的。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>编码集小课糖</title>
    <url>/posts/118985659.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="1-ASCII码"><a href="#1-ASCII码" class="headerlink" title="1. ASCII码"></a>1. ASCII码</h1><ol>
<li>上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为<code>ASCII码</code>，一直沿用至今。 </li>
<li>ASCII码一共规定了128个字符的编码，只占用了一个字节的后七位，最前面的1为统一规定为0。（提示：一个字节可以表示256个字符，ASCII码只用128个字符）。</li>
<li><strong>缺点：</strong>不能表示所有字符。</li>
</ol>
<h1 id="2-Unicode编码"><a href="#2-Unicode编码" class="headerlink" title="2. Unicode编码"></a>2. Unicode编码</h1><ol>
<li><strong>优点：</strong>Unicode将世界上所有的符号都纳入其中，每一个符号都给予了独一无二的编码，使用Unicode不会有乱码的问题。</li>
<li><strong>缺点：</strong>一个英文字母和汉字都占用<code>两个字节</code>，比较浪费存储空间。</li>
<li>编码0 - 127的字符和ASCII的编码一样。比如字符<code>a</code>在ASCII码中是<code>0x61</code>，在Unicode编码中是<code>0x0061</code>，都对应97，所以<code>Unicode编码兼容ASCII编码</code>。</li>
</ol>
<h1 id="3-UTF-8编码"><a href="#3-UTF-8编码" class="headerlink" title="3. UTF-8编码"></a>3. UTF-8编码</h1><p>互联网的普及，强烈要求出现一种统一的编码方式。<code>UTF-8就是在互联网上使用最广的一种unicode的实现方式</code>。</p>
<ol>
<li>UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~6个字节表示一个符号，根据不同的符号而变化字节长度。 </li>
<li>使用<code>大小可变的编码</code>，字母占1个字节，汉字占3个字节。</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络面试题整理</title>
    <url>/posts/3018833876.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="HTTP是哪一层的协议？七层协议模型是哪七层？"><a href="#HTTP是哪一层的协议？七层协议模型是哪七层？" class="headerlink" title="HTTP是哪一层的协议？七层协议模型是哪七层？"></a>HTTP是哪一层的协议？七层协议模型是哪七层？</h2><blockquote>
<p><strong>OSI七层协议模型：</strong></p>
<p>从下到上：物联网叔会使用</p>
<p>物理层，数据链路层，网络层，运输层，会话层，表示层，应用层</p>
</blockquote>
<ul>
<li>应用层的<strong>任务</strong>是通过应用进程间的交互来完成特定网络应用。包括的<strong>协议</strong>有HTTP、DNS、SMTP。</li>
<li>运输层的<strong>任务</strong>是负责向两台主机进程之间的通信提供通用的数据传输服务。包括的<strong>协议</strong>有TCP、UDP。</li>
<li>网络层的<strong>任务</strong>就是选择合适的网间路由和交换结点， 确保数据及时传送。包括的<strong>协议</strong>有IP协议。</li>
<li>数据链路层的<strong>任务</strong>是负责两台主机之间的数据传输，将网络层交下来的 IP 数据报组装成帧。</li>
<li>物理层的<strong>任务</strong>是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。</li>
</ul>
<h2 id="HTTP协议中浏览器和服务器进行交互的四种方法？"><a href="#HTTP协议中浏览器和服务器进行交互的四种方法？" class="headerlink" title="HTTP协议中浏览器和服务器进行交互的四种方法？"></a>HTTP协议中浏览器和服务器进行交互的四种方法？</h2><p>基本方法有四种，分别是Get，Post，Put，Delete，这四种方法可以理解为对服务器资源的增删改查。</p>
<ul>
<li><strong>Get：</strong>从服务器上获取数据，也就是所谓的查，仅仅是获取服务器资源，不进行修改。</li>
<li><strong>Post：</strong>向服务器提交数据，这涉及到了数据的更改，也就是更改服务器的数据。</li>
<li><strong>Put：</strong>向服务器新添加数据</li>
<li><strong>Delete：</strong>删除服务器的数据</li>
</ul>
<hr>
<h2 id="Forword和Redirect的区别？"><a href="#Forword和Redirect的区别？" class="headerlink" title="Forword和Redirect的区别？"></a>Forword和Redirect的区别？</h2><ul>
<li><p>浏览器URL地址：</p>
</li>
<li><ul>
<li>Forward是浏览器内部的重定向，服务器内部请求某个Servlet，然后获取响应的内容，浏览器的URL地址是不会变化的。</li>
<li>Redirect是客户端请求服务器，然后服务器给客户端返回了一个302和一个新的location，客户端重新发起HTTP请求，服务器给客户端响应location对应的URL地址，浏览器的URL地址发生了变化。</li>
</ul>
</li>
<li><p>数据的共享：</p>
</li>
<li><ul>
<li>Forward是服务器内部的重定向，request请求在整个重定向的过程中是不变的，request中的信息在Servlet间是共享的。</li>
<li>Redirect发起了两次的HTTP请求分别是使用的不同的request。</li>
</ul>
</li>
<li><p>请求的次数：</p>
</li>
<li><ul>
<li>Forward只有一次请求</li>
<li>Redirect有两次请求。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="Get请求和Post请求的区别？"><a href="#Get请求和Post请求的区别？" class="headerlink" title="Get请求和Post请求的区别？"></a>Get请求和Post请求的区别？</h2><ul>
<li><p><strong>用途：</strong></p>
</li>
<li><ul>
<li>get请求用来从服务器获取资源</li>
<li>post请求用来想服务器提交数据</li>
</ul>
</li>
<li><p><strong>请求参数：</strong></p>
</li>
<li><ul>
<li>Get请求方式是不安全的，因为它会把参数<strong>明文放在url中</strong>；</li>
<li>而Post请求方式是通过<strong>请求体</strong>来传递参数的。</li>
</ul>
</li>
<li><p><strong>数据的大小：</strong></p>
</li>
<li><ul>
<li>Get请求提交的url中数据最多<strong>只能是2048字节</strong>，这个限制是浏览器或者服务器添加的；</li>
<li>Post请求传输的数据理论上没有大小限制。</li>
</ul>
</li>
<li><p><strong>编码方式：</strong></p>
</li>
<li><ul>
<li>GET 编码格式只<strong>能用ASCII码</strong></li>
<li>POST没有限制</li>
</ul>
</li>
<li><p><strong>缓存：</strong></p>
</li>
<li><ul>
<li>get请求可以被浏览器缓存并可以被收藏为标签</li>
<li>post请求不会被浏览器缓存也不能被收藏为标签</li>
</ul>
</li>
</ul>
<hr>
<h2 id="TCP-协议如何保证可靠传输"><a href="#TCP-协议如何保证可靠传输" class="headerlink" title="TCP 协议如何保证可靠传输"></a>TCP 协议如何保证可靠传输</h2><ol>
<li>应用数据被分割成 TCP 认为最适合发送的数据块。</li>
<li>TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。</li>
<li><strong>校验和：</strong> TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</li>
<li>TCP 的接收端会丢弃重复的数据。</li>
<li><strong>流量控制：</strong> TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）</li>
<li><strong>拥塞控制：</strong> 当网络拥塞时，减少数据的发送。</li>
<li><strong>ARQ协议：</strong> 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。</li>
<li><strong>超时重传：</strong> 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。</li>
</ol>
<hr>
<h2 id="TCP和UDP的区别，以及各自的优缺点？"><a href="#TCP和UDP的区别，以及各自的优缺点？" class="headerlink" title="TCP和UDP的区别，以及各自的优缺点？"></a>TCP和UDP的区别，以及各自的优缺点？</h2><ol>
<li>TCP是面向连接的（比如打电话之前需要先拨号建立连接）；UDP是无连接的，即发送数据之前不需要建立连接；</li>
<li>TCP提供可靠的传输，通过TCP传输的数据是无差错、不丢失、不重复且按序到达；UDP是尽最大努力交付，即不保证可靠交付。</li>
<li>UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高要求的通信。</li>
<li>每一条TCP连接都只能是点对点的；而UDP支持一对一、一对多、多对一、多对多的交互通信</li>
<li>TCP对系统资源要求较多，UDP对系统资源要求较少。</li>
</ol>
<hr>
<h2 id="滑动窗口和流量控制"><a href="#滑动窗口和流量控制" class="headerlink" title="滑动窗口和流量控制"></a>滑动窗口和流量控制</h2><p><strong>TCP 利用滑动窗口实现流量控制。流量控制是为了控制发送方发送速率，保证接收方来得及接收。</strong> 接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</p>
<hr>
<h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><p>在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种情况就叫拥塞。拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机，所有的路由器，以及与降低网络传输性能有关的所有因素。相反，流量控制往往是点对点通信量的控制，是个端到端的问题。流量控制所要做到的就是抑制发送端发送数据的速率，以便使接收端来得及接收。</p>
<p>为了进行拥塞控制，TCP 发送方要维持一个 <strong>拥塞窗口(cwnd)</strong> 的状态变量。拥塞控制窗口的大小取决于网络的拥塞程度，并且动态变化。发送方让自己的发送窗口取为拥塞窗口和接收方的接受窗口中较小的一个。</p>
<p>TCP的拥塞控制采用了四种算法，即 <strong>慢开始</strong> 、 <strong>拥塞避免</strong> 、<strong>快重传</strong> 和 <strong>快恢复</strong>。在网络层也可以使路由器采用适当的分组丢弃策略（如主动队列管理 AQM），以减少网络拥塞的发生。</p>
<ul>
<li><strong>慢开始：</strong> 慢开始算法的思路是当主机开始发送数据时，如果立即把大量数据字节注入到网络，那么可能会引起网络阻塞，因为现在还不知道网络的符合情况。经验表明，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。cwnd初始值为1，每经过一个传播轮次，cwnd加倍。</li>
<li><strong>拥塞避免：</strong> 拥塞避免算法的思路是让拥塞窗口cwnd缓慢增大，即每经过一个往返时间RTT就把发送放的cwnd加1.</li>
<li><strong>快重传与快恢复：</strong> 在 TCP&#x2F;IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。 　当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。</li>
</ul>
<hr>
<h2 id="说一下-HTTP-和-HTTPS-的区别"><a href="#说一下-HTTP-和-HTTPS-的区别" class="headerlink" title="说一下 HTTP 和 HTTPS 的区别"></a>说一下 HTTP 和 HTTPS 的区别</h2><ul>
<li><strong>端口不同：</strong>HTTP和 HTTPS 的连接方式不同，的端口也不一样，HTTP是80， HTTPS 用的是443 </li>
<li><strong>消耗资源：</strong>和HTTP相比，HTTPS通信会因为加解密的处理消耗更多的CPU和内存资源。 </li>
<li><strong>开销：</strong> HTTPS 通信需要证书，这类证书通常需要向认证机构申请或者付费购买。</li>
</ul>
<hr>
<h2 id="说一下HTTP的长连接与短连接的区别"><a href="#说一下HTTP的长连接与短连接的区别" class="headerlink" title="说一下HTTP的长连接与短连接的区别"></a>说一下HTTP的长连接与短连接的区别</h2><p>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。 </p>
<p><strong>短连接</strong> </p>
<p>在HTTP&#x2F;1.0中默认使用短链接,也就是说，浏览器和服务器每进行一次HTTP操作，就建立一次连接，但任务结束就中断连接。如果客户端访问的某个HTML或其他类型的Web资源，如 JavaScript 文件、图像文件、 CSS 文件等。当浏览器每遇到这样一个Web资源，就会建立一个HTTP会话. </p>
<p><strong>长连接</strong> </p>
<p>从HTTP&#x2F;1.1起，默认使用长连接，用以保持连接特性。在使用长连接的情况下，当一个网页打开完 成后，客户端和服务器之间用于传输HTTP数据的 TCP连接不会关闭。如果客户端再次访问这个服务 器上的网页，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。</p>
<hr>
<h2 id="Cookie的作用是什么-和Session有什么区别？"><a href="#Cookie的作用是什么-和Session有什么区别？" class="headerlink" title="Cookie的作用是什么?和Session有什么区别？"></a>Cookie的作用是什么?和Session有什么区别？</h2><p>Cookie 和 Session都是用来跟踪浏览器用户身份的会话方式，但是两者的应用场景不太一样。</p>
<p><strong>Cookie 一般用来保存用户信息</strong> 比如①我们在 Cookie 中保存已经登录过得用户信息，下次访问网站的时候页面可以自动帮你登录的一些基本信息给填了；②一般的网站都会有保持登录也就是说下次你再访问网站的时候就不需要重新登录了，这是因为用户登录的时候我们可以存放了一个 Token 在 Cookie 中，下次登录的时候只需要根据 Token 值来查找用户即可(为了安全考虑，重新登录一般要将 Token 重写)；③登录一次网站后访问网站其他页面不需要重新登录。<strong>Session 的主要作用就是通过服务端记录用户的状态。</strong> 典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了。</p>
<p>Cookie 数据保存在客户端(浏览器端)，Session 数据保存在服务器端。</p>
<p>Cookie 存储在客户端中，而Session存储在服务器上，相对来说 Session 安全性更高。如果要在 Cookie 中存储一些敏感信息，不要直接写入 Cookie 中，最好能将 Cookie 信息加密然后使用到的时候再去服务器端解密。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>该虚拟机似乎正在使用中。 如果该虚拟机未在使用，请按获取所有权(T)按钮获取它的所有权。否则，请按取消(C)按钮以防损坏</title>
    <url>/posts/2063845099.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>今天运行着虚拟机，电脑突然死机了，然后开机就发现虚拟机出现了这个问题</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811170526173.png" alt="image-20220811170526173"></p>
<h3 id="问题解决："><a href="#问题解决：" class="headerlink" title="问题解决："></a>问题解决：</h3><p>打开也就是弹出提示窗口上的路径，我这里是D:\VirtualMachine目录，</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811170755594.png" alt="image-20220811170755594"></p>
<p>找到后缀为.lck文件夹，将后缀为.lck的文件夹删除，或者为了保险起见先移动到别的文件夹中。</p>
<p>然后重新打开虚拟机，就可以正常使用了。</p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/9286/image-20220811170910518.png" alt="image-20220811170910518"></p>
]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
  </entry>
  <entry>
    <title>集合类面试题整理</title>
    <url>/posts/3683273048.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="1-ArrayList-x2F-LinkedList-x2F-Vector的异同？"><a href="#1-ArrayList-x2F-LinkedList-x2F-Vector的异同？" class="headerlink" title="1.ArrayList&#x2F;LinkedList&#x2F;Vector的异同？"></a>1.ArrayList&#x2F;LinkedList&#x2F;Vector的异同？</h2><ul>
<li><p><strong>ArrayList和LinkedList的异同</strong></p>
</li>
<li><ul>
<li>二者都是线程不安全的，Vector相对安全，执行效率高。</li>
<li>ArrayList是基于动态数组的，LinkedList是基于链表数据结构。</li>
<li>对于随机访问get和set，ArrayList优于LinkedList，因为LinkedList要移动指针。</li>
<li>对于插入和删除操作，LinkedList比较占优势，因为ArrayList要移动数据。</li>
<li>ArrayList的空间浪费主要体现在<strong>在list列表的结尾预留一定的容量空间</strong>，而LinkedList的空间花费则体现在它的<strong>每一个元素都需要消耗相当的空间</strong></li>
</ul>
</li>
<li><p><strong>ArrayList和Vector的区别</strong></p>
</li>
<li><ul>
<li>Vector和ArrayList几乎是完全相同，唯一的区别是Vector是同步类，是线程安全的，因此开销大，访问慢，效率低。</li>
<li>Vector每次扩容时扩容现有大小的2倍空间。</li>
<li>ArrayList每次扩容1.5倍空间。</li>
</ul>
</li>
</ul>
<h2 id="2-HashMap的底层实现原理？"><a href="#2-HashMap的底层实现原理？" class="headerlink" title="2.HashMap的底层实现原理？"></a>2.HashMap的底层实现原理？</h2><ul>
<li><p>JDK7 底层实现是数组 + <a href="">链表</a>，</p>
</li>
<li><p>JDK8 改为数组 + <a href="">链表</a>+<a href="">红黑树</a>，节点类型从Entry 变更为 Node。</p>
</li>
<li><p>主要成员变量包括存储数据的 table 数组、元素数量 size、加载因子 loadFactor。</p>
</li>
<li><p>table 数组记录 HashMap 的数据，每个下标对应一条<a href="">链表</a>，所有哈希冲突的数据都会被存放到同一条<a href="">链表</a>。</p>
</li>
<li><p>Node&#x2F;Entry 节点包含四个成员变量：key、value、next 指针和 hash 值。</p>
</li>
<li><p>HashMap 中数据以键值对的形式存在，键对应的 hash 值用来计算数组下标，如果两个元素 key 的 hash 值一样，就会发生哈希冲突，被放到同一个<a href="">链表</a>上，当底层数组的某一个索引位置上的元素以链表形式存在的<strong>数据个数大于8</strong> ，且当前<strong>数组的长度大于64时</strong>，此时这个索引位置上的数据改为使用红黑树存储。为使查询效率尽可能高，键的 hash 值要尽可能分散。</p>
</li>
<li><p>当添加数据超出临界值(且数据要存放的位置非空)时，需要对数组扩容。默认的扩容方式：扩容为原来容量的2倍，并将原来的数据复制过来。</p>
</li>
</ul>
<h2 id="3-负载因子值的大小对HashMap有什么影响？"><a href="#3-负载因子值的大小对HashMap有什么影响？" class="headerlink" title="3.负载因子值的大小对HashMap有什么影响？"></a>3.负载因子值的大小对HashMap有什么影响？</h2><ul>
<li><p>负载因子也叫扩容因子或加载因子，用来判断什么时候进行扩容的，假如加载因子是 0.5，HashMap 的初始化容量是 16，那么当 HashMap 中有 16*0.5&#x3D;8 个元素时，HashMap 就会进行扩容。</p>
</li>
<li><p>负载因子的大小决定了HashMap的<strong>数据密度</strong>。</p>
</li>
<li><p>负载因子越大数据密度越大，发生碰撞的几率越高，数组中的链表越容易长，造成查询或者插入的次数会增多，性能会下降。</p>
</li>
<li><p>负载因子越小数据密度越小，发生碰撞的几率越低，数组中的链表也就越短，造成查询或者插入的次数也就越少，性能会更高。数据密度小就会容易<strong>触发扩容</strong>，会浪费一定的内存空间，并且经常扩容也会影响性能。</p>
</li>
</ul>
<h2 id="4-HashMap和Hashtable的区别-？"><a href="#4-HashMap和Hashtable的区别-？" class="headerlink" title="4.HashMap和Hashtable的区别 ？"></a>4.HashMap和Hashtable的区别 ？</h2><ul>
<li><p><strong>相同点：</strong></p>
</li>
<li><ul>
<li>两者都实现了Map接口</li>
</ul>
</li>
<li><p><strong>不同点：</strong></p>
</li>
<li><ul>
<li><strong>同步性：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>Hashtable的方法是Synchronized，线程安全；</li>
<li>HashMap的方法没有加synchronized的，是线程不安全的</li>
<li>所以只有一个线程的时候使用HashMap效率要高</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>值：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>HashMap对象的key、value均可以为null</li>
<li>HashTable对象的key、value均不可以为null</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>容量：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>HashMap的初始容量为16</li>
<li>HashTable的初始容量为11</li>
<li>两者的填充因子默认都是0.75</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>扩容：</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>HashMap扩容时是当前容量翻倍</li>
<li>HashTable扩容时是当前容量翻倍加一</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="5-HashSet-和-HashMap-区别？"><a href="#5-HashSet-和-HashMap-区别？" class="headerlink" title="5.HashSet 和 HashMap 区别？"></a>5.<strong>HashSet 和 HashMap 区别？</strong></h2><ol>
<li>HashSet底层就是基于HashMap实现的，只不过HashSet里面的所有的<strong>value都是同一个Object</strong>而已，所以HashSet也是<strong>非线程安全</strong>的。</li>
<li>HashMap使用键来计算Hashcode，HashSet使用成员对象来计算hashcode的值，对于两个对象来说，hashcode可能相同，所以使用equals方法来判断对象的相等性。</li>
</ol>
<h2 id="6-HashSet如何检查重复？"><a href="#6-HashSet如何检查重复？" class="headerlink" title="6.HashSet如何检查重复？"></a>6.HashSet如何检查重复？</h2><ul>
<li>当把对象加入HashSet的时候，HashSet会先计算对象的hashcode值来判断对象加入的位置，同时也会把该对象的hashCode值和其他已经在集合中的对象的hashCode值进行比较，如果没有相符的hashCode，HashSet会默认对象没有重复出现。</li>
<li>但是如果发现有相同hashCode值的对象，这时会调用equals方法来检查hashCode相等的对象是否真的相同。</li>
<li>如果两者相同，HashSet就不会让该对象加入成功的。</li>
</ul>
<h2 id="7-ConcurrentHashMap和Hashtable的区别"><a href="#7-ConcurrentHashMap和Hashtable的区别" class="headerlink" title="7.ConcurrentHashMap和Hashtable的区别"></a>7.ConcurrentHashMap和Hashtable的区别</h2><p>两者的主要区别是在<strong>实现线程安全的方式上</strong>不同。</p>
<ul>
<li><p><strong>底层数据结构：</strong></p>
</li>
<li><ul>
<li>JDK1.7的ConcurrentHashMap底层采用的是分段的数组+链表实现的</li>
<li>JDK1.8采用的数据结构是数组+链表&#x2F;红黑树。</li>
<li>数组是HashMap的主体，链表主要是为了解决哈希冲突而存在的。</li>
</ul>
</li>
<li><p><strong>实现线程安全的方式（<strong><strong>重要</strong></strong>）</strong></p>
</li>
<li><ul>
<li>在JDK1.7的时候，ConcurrentHashMap对整个数组进行了分割分段，分成了若干Segment，每一把锁只锁段中的内容，多线程访问容器里的数据段的数据，就不会存在锁竞争，提高了并发访问率。</li>
<li>JDK1.8的时候摒弃了Segment的概念，而是直接采用Node数组+ 链表+红黑树的数据结构来实现，并发控制使用synchronized和CAS来操作。</li>
<li>而HashTable中只有一把锁，使用synchronized来保证线程安全，效率非常低下。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础-韩老师yyds</title>
    <url>/posts/2645272983.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script>]]></content>
      <categories>
        <category>学习视频推荐</category>
      </categories>
  </entry>
  <entry>
    <title>面试题合集</title>
    <url>/posts/2853233565.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script>]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>黑马SSM学习</title>
    <url>/posts/2981689421.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="一-、Spring"><a href="#一-、Spring" class="headerlink" title="一 、Spring"></a>一 、Spring</h1><h2 id="1-1-Spring简介"><a href="#1-1-Spring简介" class="headerlink" title="1.1 Spring简介"></a>1.1 Spring简介</h2><blockquote>
<p>Spring是一个<code>轻量级的控制反转和面向切面的容器</code>框架，用来解决企业项目开发的复杂度问题—解耦</p>
</blockquote>
<ul>
<li>轻量级：体积小，对代码没有侵入性</li>
<li>控制反转：IoC（Inverse of Control）,把创建对象的工作交由Spring完成，Spring在创建对象的时候同时可以完成对象属性赋值（DI）</li>
<li>面向切面：AOP（Aspect Oriented Programming）面向切面编程，可以在不改变原有业务逻辑的情况下实现对业务的增强</li>
<li>容器：实例的容器，管理创建的对象</li>
</ul>
<h2 id="1-2-Spring架构"><a href="#1-2-Spring架构" class="headerlink" title="1.2 Spring架构"></a>1.2 Spring架构</h2><ul>
<li><p>官网 <a href="https://spring.io/">https://spring.io/</a></p>

</li>
<li><p>Spring架构图</p>
<ul>
<li>Spring Framework是Spring生态圈最基础的项目，是其他项目的基础</li>
</ul>
</li>
</ul>
<h6 id="1-Core-Container"><a href="#1-Core-Container" class="headerlink" title="1. Core Container"></a>1. Core Container</h6><blockquote>
<p>Spring核心容器组件，用于完成实例的创建和管理</p>
<ul>
<li>core</li>
<li>beans   实例管理</li>
<li>context 容器上下文</li>
</ul>
</blockquote>
<h6 id="2-AOP、Aspects"><a href="#2-AOP、Aspects" class="headerlink" title="2. AOP、Aspects"></a>2. AOP、Aspects</h6><blockquote>
<p>Spring AOP组件，实现面向切面编程</p>
<ul>
<li>aop</li>
<li>aspects</li>
</ul>
</blockquote>
<h6 id="3-web"><a href="#3-web" class="headerlink" title="3. web"></a>3. web</h6><blockquote>
<p>Spring web组件实际指的是SpringMVC框架，实现web项目的MVC控制</p>
<ul>
<li>web (Spring对web项目的支持)</li>
<li>webmvc (SpringMVC组件)</li>
</ul>
</blockquote>
<h6 id="4-Data-Access"><a href="#4-Data-Access" class="headerlink" title="4. Data Access"></a>4. Data Access</h6><blockquote>
<p>Spring数据访问组件，也是一个基于JDBC封装的持久层框架（即使没有mybatis，Spring也可以完成持久化操作）</p>
<ul>
<li>Data Access：数据访问</li>
<li>Data Integeration：数据集成</li>
</ul>
</blockquote>
<h6 id="5-Test"><a href="#5-Test" class="headerlink" title="5. Test"></a>5. Test</h6><blockquote>
<p>Spring的单元测试组件，提供了Spring环境下的单元测试支持</p>
<ul>
<li>test</li>
</ul>
</blockquote>
<h2 id="1-3-Spring-Framework学习路线"><a href="#1-3-Spring-Framework学习路线" class="headerlink" title="1.3 Spring Framework学习路线"></a>1.3 Spring Framework学习路线</h2><ol>
<li>核心容器<ol>
<li>核心概念（IOC、DI）</li>
<li>容器基本操作</li>
</ol>
</li>
<li>整合<ol>
<li>整合MyBatis</li>
</ol>
</li>
<li>AOP<ol>
<li>核心概念</li>
<li>AOP基础操作</li>
<li>AOP使用开发</li>
</ol>
</li>
<li>事务<ol>
<li>事务实用开发</li>
</ol>
</li>
<li>家族<ol>
<li>SpringMVC</li>
<li>SpringBoot</li>
<li>SpringCloud</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
</search>
